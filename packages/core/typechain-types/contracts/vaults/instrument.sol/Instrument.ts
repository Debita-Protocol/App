/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface InstrumentInterface extends utils.Interface {
  functions: {
    "Utilizer()": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "getMaturityBalance()": FunctionFragment;
    "instrumentApprovalCondition()": FunctionFragment;
    "isLocked()": FunctionFragment;
    "liquidateAllPositions()": FunctionFragment;
    "liquidatePosition(uint256)": FunctionFragment;
    "onMarketApproval(uint256,uint256)": FunctionFragment;
    "prepareWithdraw()": FunctionFragment;
    "readyForWithdrawal()": FunctionFragment;
    "redeemUnderlying(uint256)": FunctionFragment;
    "setUtilizer(address)": FunctionFragment;
    "setValidator(address)": FunctionFragment;
    "store_internal_balance()": FunctionFragment;
    "underlying()": FunctionFragment;
    "validators(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Utilizer"
      | "balanceOfUnderlying"
      | "estimatedTotalAssets"
      | "getMaturityBalance"
      | "instrumentApprovalCondition"
      | "isLocked"
      | "liquidateAllPositions"
      | "liquidatePosition"
      | "onMarketApproval"
      | "prepareWithdraw"
      | "readyForWithdrawal"
      | "redeemUnderlying"
      | "setUtilizer"
      | "setValidator"
      | "store_internal_balance"
      | "underlying"
      | "validators"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Utilizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaturityBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instrumentApprovalCondition",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateAllPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onMarketApproval",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readyForWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilizer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "store_internal_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Utilizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaturityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instrumentApprovalCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onMarketApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readyForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "store_internal_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export interface Instrument extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InstrumentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Utilizer(overrides?: CallOverrides): Promise<[string]>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaturityBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    instrumentApprovalCondition(overrides?: CallOverrides): Promise<[boolean]>;

    isLocked(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateAllPositions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onMarketApproval(
      principal: PromiseOrValue<BigNumberish>,
      yield: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    prepareWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    readyForWithdrawal(overrides?: CallOverrides): Promise<[boolean]>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    store_internal_balance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  Utilizer(overrides?: CallOverrides): Promise<string>;

  balanceOfUnderlying(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getMaturityBalance(overrides?: CallOverrides): Promise<BigNumber>;

  instrumentApprovalCondition(overrides?: CallOverrides): Promise<boolean>;

  isLocked(overrides?: CallOverrides): Promise<boolean>;

  liquidateAllPositions(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    _amountNeeded: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onMarketApproval(
    principal: PromiseOrValue<BigNumberish>,
    yield: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  prepareWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  readyForWithdrawal(overrides?: CallOverrides): Promise<boolean>;

  redeemUnderlying(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilizer(
    _Utilizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  store_internal_balance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  validators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Utilizer(overrides?: CallOverrides): Promise<string>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getMaturityBalance(overrides?: CallOverrides): Promise<BigNumber>;

    instrumentApprovalCondition(overrides?: CallOverrides): Promise<boolean>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    liquidateAllPositions(overrides?: CallOverrides): Promise<BigNumber>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _liquidatedAmount: BigNumber;
        _loss: BigNumber;
      }
    >;

    onMarketApproval(
      principal: PromiseOrValue<BigNumberish>,
      yield: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    prepareWithdraw(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _profit: BigNumber;
        _loss: BigNumber;
        _debtPayment: BigNumber;
      }
    >;

    readyForWithdrawal(overrides?: CallOverrides): Promise<boolean>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    store_internal_balance(overrides?: CallOverrides): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    Utilizer(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getMaturityBalance(overrides?: CallOverrides): Promise<BigNumber>;

    instrumentApprovalCondition(overrides?: CallOverrides): Promise<BigNumber>;

    isLocked(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateAllPositions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onMarketApproval(
      principal: PromiseOrValue<BigNumberish>,
      yield: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    prepareWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    readyForWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    store_internal_balance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Utilizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaturityBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    instrumentApprovalCondition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateAllPositions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onMarketApproval(
      principal: PromiseOrValue<BigNumberish>,
      yield: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    prepareWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    readyForWithdrawal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    store_internal_balance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
