/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface CreditLineInterface extends utils.Interface {
  functions: {
    "Utilizer()": FunctionFragment;
    "balanceOfUnderlying(address)": FunctionFragment;
    "beginGracePeriod()": FunctionFragment;
    "borrower()": FunctionFragment;
    "collateral()": FunctionFragment;
    "collateral_balance()": FunctionFragment;
    "collateral_type()": FunctionFragment;
    "declareDefault()": FunctionFragment;
    "depositCollateral(uint256)": FunctionFragment;
    "drawdown()": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "getApprovedBorrowConditions()": FunctionFragment;
    "getCollateralRatio()": FunctionFragment;
    "getCurrentLoanStatus()": FunctionFragment;
    "getMaturityBalance()": FunctionFragment;
    "getProxy()": FunctionFragment;
    "getRemainingOwed()": FunctionFragment;
    "instrumentApprovalCondition()": FunctionFragment;
    "interestToRepay()": FunctionFragment;
    "isLiquidatable(address)": FunctionFragment;
    "isLocked()": FunctionFragment;
    "liquidateAllPositions()": FunctionFragment;
    "liquidateOwnership(address)": FunctionFragment;
    "liquidatePosition(uint256)": FunctionFragment;
    "loanStatus()": FunctionFragment;
    "onDefault()": FunctionFragment;
    "onMarketApproval(uint256,uint256)": FunctionFragment;
    "onMaturity()": FunctionFragment;
    "oracle()": FunctionFragment;
    "prepareWithdraw()": FunctionFragment;
    "pushCollateralToVault(uint256,address)": FunctionFragment;
    "readyForWithdrawal()": FunctionFragment;
    "redeemUnderlying(uint256)": FunctionFragment;
    "repay(uint256)": FunctionFragment;
    "setGracePeriod()": FunctionFragment;
    "setUtilizer(address)": FunctionFragment;
    "setValidator(address)": FunctionFragment;
    "store_internal_balance()": FunctionFragment;
    "underlying()": FunctionFragment;
    "validators(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Utilizer"
      | "balanceOfUnderlying"
      | "beginGracePeriod"
      | "borrower"
      | "collateral"
      | "collateral_balance"
      | "collateral_type"
      | "declareDefault"
      | "depositCollateral"
      | "drawdown"
      | "estimatedTotalAssets"
      | "getApprovedBorrowConditions"
      | "getCollateralRatio"
      | "getCurrentLoanStatus"
      | "getMaturityBalance"
      | "getProxy"
      | "getRemainingOwed"
      | "instrumentApprovalCondition"
      | "interestToRepay"
      | "isLiquidatable"
      | "isLocked"
      | "liquidateAllPositions"
      | "liquidateOwnership"
      | "liquidatePosition"
      | "loanStatus"
      | "onDefault"
      | "onMarketApproval"
      | "onMaturity"
      | "oracle"
      | "prepareWithdraw"
      | "pushCollateralToVault"
      | "readyForWithdrawal"
      | "redeemUnderlying"
      | "repay"
      | "setGracePeriod"
      | "setUtilizer"
      | "setValidator"
      | "store_internal_balance"
      | "underlying"
      | "validators"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Utilizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "beginGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral_type",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "declareDefault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "drawdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedBorrowConditions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLoanStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaturityBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRemainingOwed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "instrumentApprovalCondition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestToRepay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isLocked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidateAllPositions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatePosition",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "loanStatus",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "onDefault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onMarketApproval",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "onMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prepareWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushCollateralToVault",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readyForWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUtilizer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "store_internal_balance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Utilizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beginGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateral_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateral_type",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareDefault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedBorrowConditions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLoanStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaturityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingOwed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "instrumentApprovalCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestToRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateAllPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidateOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onDefault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onMarketApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onMaturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prepareWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushCollateralToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readyForWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUtilizer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "store_internal_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export interface CreditLine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditLineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Utilizer(overrides?: CallOverrides): Promise<[string]>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    beginGracePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateral_balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateral_type(overrides?: CallOverrides): Promise<[number]>;

    declareDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    drawdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApprovedBorrowConditions(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getCollateralRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentLoanStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMaturityBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProxy(overrides?: CallOverrides): Promise<[string]>;

    getRemainingOwed(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    instrumentApprovalCondition(overrides?: CallOverrides): Promise<[boolean]>;

    interestToRepay(overrides?: CallOverrides): Promise<[BigNumber]>;

    isLiquidatable(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLocked(overrides?: CallOverrides): Promise<[boolean]>;

    liquidateAllPositions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidateOwnership(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    loanStatus(overrides?: CallOverrides): Promise<[number]>;

    onDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onMarketApproval(
      max_principal: PromiseOrValue<BigNumberish>,
      quoted_yield: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onMaturity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    prepareWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushCollateralToVault(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    readyForWithdrawal(overrides?: CallOverrides): Promise<[boolean]>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      _repay_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGracePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    store_internal_balance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  Utilizer(overrides?: CallOverrides): Promise<string>;

  balanceOfUnderlying(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  beginGracePeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrower(overrides?: CallOverrides): Promise<string>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateral_balance(overrides?: CallOverrides): Promise<BigNumber>;

  collateral_type(overrides?: CallOverrides): Promise<number>;

  declareDefault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositCollateral(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  drawdown(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getApprovedBorrowConditions(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

  getMaturityBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getProxy(overrides?: CallOverrides): Promise<string>;

  getRemainingOwed(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  instrumentApprovalCondition(overrides?: CallOverrides): Promise<boolean>;

  interestToRepay(overrides?: CallOverrides): Promise<BigNumber>;

  isLiquidatable(
    collateral: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isLocked(overrides?: CallOverrides): Promise<boolean>;

  liquidateAllPositions(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidateOwnership(
    buyer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatePosition(
    _amountNeeded: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  loanStatus(overrides?: CallOverrides): Promise<number>;

  onDefault(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onMarketApproval(
    max_principal: PromiseOrValue<BigNumberish>,
    quoted_yield: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onMaturity(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  prepareWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushCollateralToVault(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  readyForWithdrawal(overrides?: CallOverrides): Promise<boolean>;

  redeemUnderlying(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    _repay_amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGracePeriod(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUtilizer(
    _Utilizer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  store_internal_balance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlying(overrides?: CallOverrides): Promise<string>;

  validators(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    Utilizer(overrides?: CallOverrides): Promise<string>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginGracePeriod(overrides?: CallOverrides): Promise<void>;

    borrower(overrides?: CallOverrides): Promise<string>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateral_balance(overrides?: CallOverrides): Promise<BigNumber>;

    collateral_type(overrides?: CallOverrides): Promise<number>;

    declareDefault(overrides?: CallOverrides): Promise<void>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    drawdown(overrides?: CallOverrides): Promise<void>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getApprovedBorrowConditions(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getMaturityBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProxy(overrides?: CallOverrides): Promise<string>;

    getRemainingOwed(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    instrumentApprovalCondition(overrides?: CallOverrides): Promise<boolean>;

    interestToRepay(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidatable(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLocked(overrides?: CallOverrides): Promise<boolean>;

    liquidateAllPositions(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateOwnership(
      buyer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _liquidatedAmount: BigNumber;
        _loss: BigNumber;
      }
    >;

    loanStatus(overrides?: CallOverrides): Promise<number>;

    onDefault(overrides?: CallOverrides): Promise<void>;

    onMarketApproval(
      max_principal: PromiseOrValue<BigNumberish>,
      quoted_yield: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onMaturity(overrides?: CallOverrides): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    prepareWithdraw(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _profit: BigNumber;
        _loss: BigNumber;
        _debtPayment: BigNumber;
      }
    >;

    pushCollateralToVault(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    readyForWithdrawal(overrides?: CallOverrides): Promise<boolean>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    repay(
      _repay_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGracePeriod(overrides?: CallOverrides): Promise<void>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    store_internal_balance(overrides?: CallOverrides): Promise<void>;

    underlying(overrides?: CallOverrides): Promise<string>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    Utilizer(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beginGracePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateral_balance(overrides?: CallOverrides): Promise<BigNumber>;

    collateral_type(overrides?: CallOverrides): Promise<BigNumber>;

    declareDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    drawdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getApprovedBorrowConditions(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentLoanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getMaturityBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProxy(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingOwed(overrides?: CallOverrides): Promise<BigNumber>;

    instrumentApprovalCondition(overrides?: CallOverrides): Promise<BigNumber>;

    interestToRepay(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidatable(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLocked(overrides?: CallOverrides): Promise<BigNumber>;

    liquidateAllPositions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidateOwnership(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    loanStatus(overrides?: CallOverrides): Promise<BigNumber>;

    onDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onMarketApproval(
      max_principal: PromiseOrValue<BigNumberish>,
      quoted_yield: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onMaturity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    prepareWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushCollateralToVault(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    readyForWithdrawal(overrides?: CallOverrides): Promise<BigNumber>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      _repay_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGracePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    store_internal_balance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Utilizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOfUnderlying(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beginGracePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateral_balance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral_type(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    declareDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositCollateral(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    drawdown(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApprovedBorrowConditions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentLoanStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaturityBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRemainingOwed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    instrumentApprovalCondition(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestToRepay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidatable(
      collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidateAllPositions(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidateOwnership(
      buyer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatePosition(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    loanStatus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onDefault(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onMarketApproval(
      max_principal: PromiseOrValue<BigNumberish>,
      quoted_yield: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onMaturity(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prepareWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushCollateralToVault(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    readyForWithdrawal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _repay_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGracePeriod(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUtilizer(
      _Utilizer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    store_internal_balance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validators(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
