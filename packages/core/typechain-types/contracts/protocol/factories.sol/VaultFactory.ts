/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MarketManager {
  export type MarketParametersStruct = {
    N: PromiseOrValue<BigNumberish>;
    sigma: PromiseOrValue<BigNumberish>;
    alpha: PromiseOrValue<BigNumberish>;
    omega: PromiseOrValue<BigNumberish>;
    delta: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BigNumberish>;
    s: PromiseOrValue<BigNumberish>;
    steak: PromiseOrValue<BigNumberish>;
  };

  export type MarketParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    N: BigNumber;
    sigma: BigNumber;
    alpha: BigNumber;
    omega: BigNumber;
    delta: BigNumber;
    r: BigNumber;
    s: BigNumber;
    steak: BigNumber;
  };
}

export interface VaultFactoryInterface extends utils.Interface {
  functions: {
    "isVault(address)": FunctionFragment;
    "newVault(address,address,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "numVaults()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "isVault" | "newVault" | "numVaults"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "isVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newVault",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      MarketManager.MarketParametersStruct
    ]
  ): string;
  encodeFunctionData(functionFragment: "numVaults", values?: undefined): string;

  decodeFunctionResult(functionFragment: "isVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numVaults", data: BytesLike): Result;

  events: {};
}

export interface VaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isVault(
      v: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    newVault(
      underlying: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numVaults(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  isVault(
    v: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  newVault(
    underlying: PromiseOrValue<string>,
    _controller: PromiseOrValue<string>,
    _onlyVerified: PromiseOrValue<boolean>,
    _r: PromiseOrValue<BigNumberish>,
    _asset_limit: PromiseOrValue<BigNumberish>,
    _total_asset_limit: PromiseOrValue<BigNumberish>,
    default_params: MarketManager.MarketParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numVaults(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    isVault(
      v: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    newVault(
      underlying: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber]>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    isVault(
      v: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newVault(
      underlying: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numVaults(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isVault(
      v: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newVault(
      underlying: PromiseOrValue<string>,
      _controller: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numVaults(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
