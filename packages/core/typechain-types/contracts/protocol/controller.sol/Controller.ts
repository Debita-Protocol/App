/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MarketManager {
  export type MarketParametersStruct = {
    N: PromiseOrValue<BigNumberish>;
    sigma: PromiseOrValue<BigNumberish>;
    alpha: PromiseOrValue<BigNumberish>;
    omega: PromiseOrValue<BigNumberish>;
    delta: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BigNumberish>;
    s: PromiseOrValue<BigNumberish>;
    steak: PromiseOrValue<BigNumberish>;
  };

  export type MarketParametersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    N: BigNumber;
    sigma: BigNumber;
    alpha: BigNumber;
    omega: BigNumber;
    delta: BigNumber;
    r: BigNumber;
    s: BigNumber;
    steak: BigNumber;
  };
}

export declare namespace Controller {
  export type ApprovalDataStruct = {
    approved_principal: PromiseOrValue<BigNumberish>;
    approved_yield: PromiseOrValue<BigNumberish>;
  };

  export type ApprovalDataStructOutput = [BigNumber, BigNumber] & {
    approved_principal: BigNumber;
    approved_yield: BigNumber;
  };
}

export declare namespace Vault {
  export type InstrumentDataStruct = {
    trusted: PromiseOrValue<boolean>;
    balance: PromiseOrValue<BigNumberish>;
    faceValue: PromiseOrValue<BigNumberish>;
    marketId: PromiseOrValue<BigNumberish>;
    principal: PromiseOrValue<BigNumberish>;
    expectedYield: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    description: PromiseOrValue<string>;
    Instrument_address: PromiseOrValue<string>;
    instrument_type: PromiseOrValue<BigNumberish>;
    maturityDate: PromiseOrValue<BigNumberish>;
  };

  export type InstrumentDataStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    number,
    BigNumber
  ] & {
    trusted: boolean;
    balance: BigNumber;
    faceValue: BigNumber;
    marketId: BigNumber;
    principal: BigNumber;
    expectedYield: BigNumber;
    duration: BigNumber;
    description: string;
    Instrument_address: string;
    instrument_type: number;
    maturityDate: BigNumber;
  };
}

export interface ControllerInterface extends utils.Interface {
  functions: {
    "_decrementScore(address,uint256)": FunctionFragment;
    "_incrementScore(address,uint256)": FunctionFragment;
    "ad_to_id(address)": FunctionFragment;
    "approveMarket(uint256)": FunctionFragment;
    "beforeResolve(uint256)": FunctionFragment;
    "calculateMinScore(uint256)": FunctionFragment;
    "checkInstrument(uint256)": FunctionFragment;
    "createVault(address,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "denyMarket(uint256)": FunctionFragment;
    "filterTraders(uint256,address)": FunctionFragment;
    "forceCloseInstrument(uint256,bool)": FunctionFragment;
    "getApprovalData(uint256)": FunctionFragment;
    "getMarketId(address)": FunctionFragment;
    "getMarketIds(uint256)": FunctionFragment;
    "getTraders()": FunctionFragment;
    "getVault(uint256)": FunctionFragment;
    "getVaultAd(uint256)": FunctionFragment;
    "getVaultfromId(uint256)": FunctionFragment;
    "id_parent(uint256)": FunctionFragment;
    "initiateMarket(address,(bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256),uint256)": FunctionFragment;
    "isRated(address)": FunctionFragment;
    "isReputable(address,uint256)": FunctionFragment;
    "isVerified(address)": FunctionFragment;
    "marketIdToVaultId(uint256)": FunctionFragment;
    "marketId_to_vaultId(uint256)": FunctionFragment;
    "market_data(uint256)": FunctionFragment;
    "pullLeverage(uint256,uint256)": FunctionFragment;
    "redeem_transfer(uint256,address,uint256)": FunctionFragment;
    "resolveMarket(uint256)": FunctionFragment;
    "setMarketManager(address)": FunctionFragment;
    "setPoolFactory(address)": FunctionFragment;
    "setTraderScore(address,uint256)": FunctionFragment;
    "setVaultFactory(address)": FunctionFragment;
    "testVerifyAddress()": FunctionFragment;
    "trader_scores(address)": FunctionFragment;
    "traders(uint256)": FunctionFragment;
    "updateReputation(uint256,address,bool)": FunctionFragment;
    "vault_debt(uint256)": FunctionFragment;
    "vault_to_marketIds(uint256,uint256)": FunctionFragment;
    "vaults(uint256)": FunctionFragment;
    "verified(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_decrementScore"
      | "_incrementScore"
      | "ad_to_id"
      | "approveMarket"
      | "beforeResolve"
      | "calculateMinScore"
      | "checkInstrument"
      | "createVault"
      | "denyMarket"
      | "filterTraders"
      | "forceCloseInstrument"
      | "getApprovalData"
      | "getMarketId"
      | "getMarketIds"
      | "getTraders"
      | "getVault"
      | "getVaultAd"
      | "getVaultfromId"
      | "id_parent"
      | "initiateMarket"
      | "isRated"
      | "isReputable"
      | "isVerified"
      | "marketIdToVaultId"
      | "marketId_to_vaultId"
      | "market_data"
      | "pullLeverage"
      | "redeem_transfer"
      | "resolveMarket"
      | "setMarketManager"
      | "setPoolFactory"
      | "setTraderScore"
      | "setVaultFactory"
      | "testVerifyAddress"
      | "trader_scores"
      | "traders"
      | "updateReputation"
      | "vault_debt"
      | "vault_to_marketIds"
      | "vaults"
      | "verified"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_decrementScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_incrementScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "ad_to_id",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveMarket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeResolve",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateMinScore",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkInstrument",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      MarketManager.MarketParametersStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "denyMarket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "filterTraders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "forceCloseInstrument",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovalData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketIds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultAd",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultfromId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "id_parent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateMarket",
    values: [
      PromiseOrValue<string>,
      Vault.InstrumentDataStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isRated",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isReputable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketIdToVaultId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketId_to_vaultId",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "market_data",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pullLeverage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem_transfer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveMarket",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTraderScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVaultFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "testVerifyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trader_scores",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "traders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "vault_debt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vault_to_marketIds",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "verified",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_decrementScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_incrementScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ad_to_id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beforeResolve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateMinScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "denyMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "filterTraders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceCloseInstrument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApprovalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTraders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVaultAd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVaultfromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id_parent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isRated", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReputable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketIdToVaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketId_to_vaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "market_data",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullLeverage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeem_transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTraderScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testVerifyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trader_scores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "traders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault_debt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vault_to_marketIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verified", data: BytesLike): Result;

  events: {
    "MarketInitiated(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketInitiated"): EventFragment;
}

export interface MarketInitiatedEventObject {
  marketId: BigNumber;
  recipient: string;
}
export type MarketInitiatedEvent = TypedEvent<
  [BigNumber, string],
  MarketInitiatedEventObject
>;

export type MarketInitiatedEventFilter = TypedEventFilter<MarketInitiatedEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _decrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _incrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ad_to_id(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeResolve(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateMinScore(
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVault(
      underlying: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    denyMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    filterTraders(
      percentile: PromiseOrValue<BigNumberish>,
      utilizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    forceCloseInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApprovalData(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Controller.ApprovalDataStructOutput]>;

    getMarketId(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketIds(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTraders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getVault(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVaultAd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVaultfromId(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    id_parent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initiateMarket(
      recipient: PromiseOrValue<string>,
      instrumentData: Vault.InstrumentDataStruct,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isRated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReputable(
      trader: PromiseOrValue<string>,
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isVerified(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketIdToVaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    marketId_to_vaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    market_data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { instrument_address: string; recipient: string }
    >;

    pullLeverage(
      marketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem_transfer(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resolveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketManager(
      _marketManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTraderScore(
      trader: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVaultFactory(
      _vaultFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    testVerifyAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trader_scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    traders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateReputation(
      marketId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      increment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault_debt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vault_to_marketIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verified(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _decrementScore(
    trader: PromiseOrValue<string>,
    update: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _incrementScore(
    trader: PromiseOrValue<string>,
    update: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ad_to_id(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approveMarket(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeResolve(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateMinScore(
    percentile: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkInstrument(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVault(
    underlying: PromiseOrValue<string>,
    _onlyVerified: PromiseOrValue<boolean>,
    _r: PromiseOrValue<BigNumberish>,
    _asset_limit: PromiseOrValue<BigNumberish>,
    _total_asset_limit: PromiseOrValue<BigNumberish>,
    default_params: MarketManager.MarketParametersStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  denyMarket(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  filterTraders(
    percentile: PromiseOrValue<BigNumberish>,
    utilizer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  forceCloseInstrument(
    marketId: PromiseOrValue<BigNumberish>,
    emergency: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApprovalData(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Controller.ApprovalDataStructOutput>;

  getMarketId(
    recipient: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketIds(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTraders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getVault(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultAd(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVaultfromId(
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  id_parent(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initiateMarket(
    recipient: PromiseOrValue<string>,
    instrumentData: Vault.InstrumentDataStruct,
    vaultId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isRated(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReputable(
    trader: PromiseOrValue<string>,
    percentile: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isVerified(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketIdToVaultId(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketId_to_vaultId(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  market_data(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { instrument_address: string; recipient: string }
  >;

  pullLeverage(
    marketId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem_transfer(
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resolveMarket(
    marketId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketManager(
    _marketManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolFactory(
    _poolFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTraderScore(
    trader: PromiseOrValue<string>,
    score: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVaultFactory(
    _vaultFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  testVerifyAddress(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trader_scores(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  traders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateReputation(
    marketId: PromiseOrValue<BigNumberish>,
    trader: PromiseOrValue<string>,
    increment: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault_debt(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vault_to_marketIds(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaults(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  verified(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _decrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _incrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    ad_to_id(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeResolve(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateMinScore(
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createVault(
      underlying: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    denyMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    filterTraders(
      percentile: PromiseOrValue<BigNumberish>,
      utilizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    forceCloseInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      emergency: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getApprovalData(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Controller.ApprovalDataStructOutput>;

    getMarketId(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIds(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTraders(overrides?: CallOverrides): Promise<string[]>;

    getVault(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultAd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVaultfromId(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    id_parent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateMarket(
      recipient: PromiseOrValue<string>,
      instrumentData: Vault.InstrumentDataStruct,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isRated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReputable(
      trader: PromiseOrValue<string>,
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isVerified(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketIdToVaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketId_to_vaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    market_data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { instrument_address: string; recipient: string }
    >;

    pullLeverage(
      marketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem_transfer(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    resolveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketManager(
      _marketManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTraderScore(
      trader: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVaultFactory(
      _vaultFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    testVerifyAddress(overrides?: CallOverrides): Promise<void>;

    trader_scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateReputation(
      marketId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      increment: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault_debt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault_to_marketIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    verified(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "MarketInitiated(uint256,address)"(
      marketId?: null,
      recipient?: null
    ): MarketInitiatedEventFilter;
    MarketInitiated(
      marketId?: null,
      recipient?: null
    ): MarketInitiatedEventFilter;
  };

  estimateGas: {
    _decrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _incrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ad_to_id(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeResolve(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateMinScore(
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVault(
      underlying: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    denyMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    filterTraders(
      percentile: PromiseOrValue<BigNumberish>,
      utilizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forceCloseInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApprovalData(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketId(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketIds(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTraders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getVault(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultAd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultfromId(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    id_parent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateMarket(
      recipient: PromiseOrValue<string>,
      instrumentData: Vault.InstrumentDataStruct,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isRated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReputable(
      trader: PromiseOrValue<string>,
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isVerified(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketIdToVaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketId_to_vaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    market_data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pullLeverage(
      marketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem_transfer(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resolveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketManager(
      _marketManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTraderScore(
      trader: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVaultFactory(
      _vaultFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    testVerifyAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trader_scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    traders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateReputation(
      marketId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      increment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault_debt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault_to_marketIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verified(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _decrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _incrementScore(
      trader: PromiseOrValue<string>,
      update: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ad_to_id(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeResolve(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateMinScore(
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVault(
      underlying: PromiseOrValue<string>,
      _onlyVerified: PromiseOrValue<boolean>,
      _r: PromiseOrValue<BigNumberish>,
      _asset_limit: PromiseOrValue<BigNumberish>,
      _total_asset_limit: PromiseOrValue<BigNumberish>,
      default_params: MarketManager.MarketParametersStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    denyMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    filterTraders(
      percentile: PromiseOrValue<BigNumberish>,
      utilizer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forceCloseInstrument(
      marketId: PromiseOrValue<BigNumberish>,
      emergency: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApprovalData(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketId(
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketIds(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTraders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getVault(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultAd(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultfromId(
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    id_parent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateMarket(
      recipient: PromiseOrValue<string>,
      instrumentData: Vault.InstrumentDataStruct,
      vaultId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isRated(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReputable(
      trader: PromiseOrValue<string>,
      percentile: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isVerified(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketIdToVaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketId_to_vaultId(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    market_data(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pullLeverage(
      marketId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem_transfer(
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resolveMarket(
      marketId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketManager(
      _marketManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolFactory(
      _poolFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTraderScore(
      trader: PromiseOrValue<string>,
      score: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVaultFactory(
      _vaultFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    testVerifyAddress(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trader_scores(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    traders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateReputation(
      marketId: PromiseOrValue<BigNumberish>,
      trader: PromiseOrValue<string>,
      increment: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault_debt(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault_to_marketIds(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verified(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
