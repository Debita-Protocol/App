/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface SyntheticZCBPoolInterface extends utils.Interface {
  functions: {
    "BaseToken()": FunctionFragment;
    "TradeToken()": FunctionFragment;
    "a_initial()": FunctionFragment;
    "areaBetweenCurveAndMax(uint256)": FunctionFragment;
    "b()": FunctionFragment;
    "b_initial()": FunctionFragment;
    "baseBal()": FunctionFragment;
    "cBal()": FunctionFragment;
    "calculateInitCurveParams(uint256,uint256,uint256)": FunctionFragment;
    "controller()": FunctionFragment;
    "discount_cap()": FunctionFragment;
    "entry()": FunctionFragment;
    "flush(address,uint256)": FunctionFragment;
    "getTraderPosition()": FunctionFragment;
    "makerClaimClose(uint16,bool,address)": FunctionFragment;
    "makerClaimOpen(uint16,bool,address)": FunctionFragment;
    "makerClose(uint16,uint256,bool,address)": FunctionFragment;
    "makerOpen(uint16,uint256,bool,address)": FunctionFragment;
    "makerPartiallyClaim(uint16,bool,bool,address)": FunctionFragment;
    "makerReduceClose(uint16,uint256,bool,address)": FunctionFragment;
    "makerReduceOpen(uint16,uint256,bool,address)": FunctionFragment;
    "maxPrice()": FunctionFragment;
    "pool()": FunctionFragment;
    "provideLiquidity(uint16,uint16,uint128,bytes)": FunctionFragment;
    "resetLiq()": FunctionFragment;
    "s_tradeToken()": FunctionFragment;
    "takerClose(bool,int256,uint256,bytes)": FunctionFragment;
    "takerOpen(bool,int256,uint256,bytes)": FunctionFragment;
    "trustedBurn(address,uint256,bool)": FunctionFragment;
    "trustedDiscountedMint(address,uint256)": FunctionFragment;
    "withdrawLiquidity(uint16,uint16,uint128,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BaseToken"
      | "TradeToken"
      | "a_initial"
      | "areaBetweenCurveAndMax"
      | "b"
      | "b_initial"
      | "baseBal"
      | "cBal"
      | "calculateInitCurveParams"
      | "controller"
      | "discount_cap"
      | "entry"
      | "flush"
      | "getTraderPosition"
      | "makerClaimClose"
      | "makerClaimOpen"
      | "makerClose"
      | "makerOpen"
      | "makerPartiallyClaim"
      | "makerReduceClose"
      | "makerReduceOpen"
      | "maxPrice"
      | "pool"
      | "provideLiquidity"
      | "resetLiq"
      | "s_tradeToken"
      | "takerClose"
      | "takerOpen"
      | "trustedBurn"
      | "trustedDiscountedMint"
      | "withdrawLiquidity"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BaseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TradeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "a_initial", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "areaBetweenCurveAndMax",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "b", values?: undefined): string;
  encodeFunctionData(functionFragment: "b_initial", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseBal", values?: undefined): string;
  encodeFunctionData(functionFragment: "cBal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateInitCurveParams",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discount_cap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "entry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flush",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraderPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makerClaimClose",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerClaimOpen",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerClose",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerOpen",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerPartiallyClaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerReduceClose",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makerReduceOpen",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "maxPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "resetLiq", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "s_tradeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takerClose",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takerOpen",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedBurn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedDiscountedMint",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "BaseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TradeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a_initial", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "areaBetweenCurveAndMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "b", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "b_initial", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseBal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cBal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateInitCurveParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discount_cap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flush", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTraderPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerClaimClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerClaimOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "makerClose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makerOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makerPartiallyClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerReduceClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerReduceOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetLiq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "s_tradeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takerClose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takerOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedDiscountedMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SyntheticZCBPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SyntheticZCBPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BaseToken(overrides?: CallOverrides): Promise<[string]>;

    TradeToken(overrides?: CallOverrides): Promise<[string]>;

    a_initial(overrides?: CallOverrides): Promise<[BigNumber]>;

    areaBetweenCurveAndMax(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    b(overrides?: CallOverrides): Promise<[BigNumber]>;

    b_initial(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseBal(overrides?: CallOverrides): Promise<[BigNumber]>;

    cBal(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateInitCurveParams(
      P: PromiseOrValue<BigNumberish>,
      I: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    discount_cap(overrides?: CallOverrides): Promise<[BigNumber]>;

    entry(overrides?: CallOverrides): Promise<[string]>;

    flush(
      flushTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getTraderPosition(overrides?: CallOverrides): Promise<[void]>;

    makerClaimClose(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerClaimOpen(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerPartiallyClaim(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      open: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerReduceClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makerReduceOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    provideLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetLiq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_tradeToken(overrides?: CallOverrides): Promise<[string]>;

    takerClose(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takerOpen(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedBurn(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedDiscountedMint(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BaseToken(overrides?: CallOverrides): Promise<string>;

  TradeToken(overrides?: CallOverrides): Promise<string>;

  a_initial(overrides?: CallOverrides): Promise<BigNumber>;

  areaBetweenCurveAndMax(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  b(overrides?: CallOverrides): Promise<BigNumber>;

  b_initial(overrides?: CallOverrides): Promise<BigNumber>;

  baseBal(overrides?: CallOverrides): Promise<BigNumber>;

  cBal(overrides?: CallOverrides): Promise<BigNumber>;

  calculateInitCurveParams(
    P: PromiseOrValue<BigNumberish>,
    I: PromiseOrValue<BigNumberish>,
    sigma: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  controller(overrides?: CallOverrides): Promise<string>;

  discount_cap(overrides?: CallOverrides): Promise<BigNumber>;

  entry(overrides?: CallOverrides): Promise<string>;

  flush(
    flushTo: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getTraderPosition(overrides?: CallOverrides): Promise<void>;

  makerClaimClose(
    point: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerClaimOpen(
    point: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerClose(
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerOpen(
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerPartiallyClaim(
    point: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    open: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerReduceClose(
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makerReduceOpen(
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    isLong: PromiseOrValue<boolean>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  provideLiquidity(
    pointLower: PromiseOrValue<BigNumberish>,
    pointUpper: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetLiq(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_tradeToken(overrides?: CallOverrides): Promise<string>;

  takerClose(
    isLong: PromiseOrValue<boolean>,
    amountIn: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takerOpen(
    isLong: PromiseOrValue<boolean>,
    amountIn: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedBurn(
    trader: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    long: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedDiscountedMint(
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawLiquidity(
    pointLower: PromiseOrValue<BigNumberish>,
    pointUpper: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BaseToken(overrides?: CallOverrides): Promise<string>;

    TradeToken(overrides?: CallOverrides): Promise<string>;

    a_initial(overrides?: CallOverrides): Promise<BigNumber>;

    areaBetweenCurveAndMax(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    b(overrides?: CallOverrides): Promise<BigNumber>;

    b_initial(overrides?: CallOverrides): Promise<BigNumber>;

    baseBal(overrides?: CallOverrides): Promise<BigNumber>;

    cBal(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInitCurveParams(
      P: PromiseOrValue<BigNumberish>,
      I: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    controller(overrides?: CallOverrides): Promise<string>;

    discount_cap(overrides?: CallOverrides): Promise<BigNumber>;

    entry(overrides?: CallOverrides): Promise<string>;

    flush(
      flushTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getTraderPosition(overrides?: CallOverrides): Promise<void>;

    makerClaimClose(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerClaimOpen(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makerClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toEscrowAmount: BigNumber; crossId: BigNumber }
    >;

    makerOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { toEscrowAmount: BigNumber; crossId: BigNumber }
    >;

    makerPartiallyClaim(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      open: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseAmount: BigNumber; tradeAmount: BigNumber }
    >;

    makerReduceClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    makerReduceOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    provideLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetLiq(overrides?: CallOverrides): Promise<void>;

    s_tradeToken(overrides?: CallOverrides): Promise<string>;

    takerClose(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        poolamountIn: BigNumber;
        poolamountOut: BigNumber;
      }
    >;

    takerOpen(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        poolamountIn: BigNumber;
        poolamountOut: BigNumber;
      }
    >;

    trustedBurn(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedDiscountedMint(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    BaseToken(overrides?: CallOverrides): Promise<BigNumber>;

    TradeToken(overrides?: CallOverrides): Promise<BigNumber>;

    a_initial(overrides?: CallOverrides): Promise<BigNumber>;

    areaBetweenCurveAndMax(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    b(overrides?: CallOverrides): Promise<BigNumber>;

    b_initial(overrides?: CallOverrides): Promise<BigNumber>;

    baseBal(overrides?: CallOverrides): Promise<BigNumber>;

    cBal(overrides?: CallOverrides): Promise<BigNumber>;

    calculateInitCurveParams(
      P: PromiseOrValue<BigNumberish>,
      I: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    discount_cap(overrides?: CallOverrides): Promise<BigNumber>;

    entry(overrides?: CallOverrides): Promise<BigNumber>;

    flush(
      flushTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getTraderPosition(overrides?: CallOverrides): Promise<BigNumber>;

    makerClaimClose(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerClaimOpen(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerPartiallyClaim(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      open: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerReduceClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makerReduceOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxPrice(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    provideLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetLiq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_tradeToken(overrides?: CallOverrides): Promise<BigNumber>;

    takerClose(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takerOpen(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedBurn(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedDiscountedMint(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BaseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TradeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    a_initial(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    areaBetweenCurveAndMax(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    b(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    b_initial(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseBal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cBal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateInitCurveParams(
      P: PromiseOrValue<BigNumberish>,
      I: PromiseOrValue<BigNumberish>,
      sigma: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discount_cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flush(
      flushTo: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getTraderPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerClaimClose(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerClaimOpen(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerPartiallyClaim(
      point: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      open: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerReduceClose(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makerReduceOpen(
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      isLong: PromiseOrValue<boolean>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetLiq(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_tradeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takerClose(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takerOpen(
      isLong: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedBurn(
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      long: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedDiscountedMint(
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      pointLower: PromiseOrValue<BigNumberish>,
      pointUpper: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
