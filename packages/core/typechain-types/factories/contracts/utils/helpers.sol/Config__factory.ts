/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Config,
  ConfigInterface,
} from "../../../../contracts/utils/helpers.sol/Config";

const _abi = [
  {
    inputs: [],
    name: "USDC_dec",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WAD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WAD_PRECISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61015f610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c8063664808a81461005b5780636a14602414610079578063949f264214610097578063963f2241146100b5575b600080fd5b6100636100d3565b604051610070919061010e565b60405180910390f35b6100816100d8565b60405161008e919061010e565b60405180910390f35b61009f6100e4565b6040516100ac919061010e565b60405180910390f35b6100bd6100ee565b6040516100ca919061010e565b60405180910390f35b601281565b670de0b6b3a764000081565b655af3107a400081565b620f424081565b6000819050919050565b610108816100f5565b82525050565b600060208201905061012360008301846100ff565b9291505056fea2646970667358221220b46271a90ef70764ae6e6bf42fd7aa0a9d93b23357af0cbcfd49aba14671e03a64736f6c634300080c0033";

type ConfigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConfigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Config__factory extends ContractFactory {
  constructor(...args: ConfigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Config> {
    return super.deploy(overrides || {}) as Promise<Config>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Config {
    return super.attach(address) as Config;
  }
  override connect(signer: Signer): Config__factory {
    return super.connect(signer) as Config__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConfigInterface {
    return new utils.Interface(_abi) as ConfigInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Config {
    return new Contract(address, _abi, signerOrProvider) as Config;
  }
}
