/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockBorrowerContract,
  MockBorrowerContractInterface,
} from "../../../../contracts/vaults/instrument.sol/MockBorrowerContract";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "proxyad",
        type: "address",
      },
    ],
    name: "autoDelegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "changeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
    ],
    name: "onlyOwnerFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506108f7806100606000396000f3fe608060405234801561001057600080fd5b50600436106100505760003560e01c80637eb57474146100915780638da5cb5b146100ad578063a57c5e4b146100cb578063a6f9dae1146100e757610051565b5b61008f6040518060400160405280600381526020017f68693f0000000000000000000000000000000000000000000000000000000000815250610103565b005b6100ab60048036038101906100a691906105ff565b61019c565b005b6100b5610213565b6040516100c2919061063b565b60405180910390f35b6100e560048036038101906100e0919061068c565b610237565b005b61010160048036038101906100fc91906105ff565b610367565b005b610199816040516024016101179190610752565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610438565b50565b8073ffffffffffffffffffffffffffffffffffffffff166301a3f2563063a6f9dae160e01b6040518363ffffffff1660e01b81526004016101de9291906107af565b600060405180830381600087803b1580156101f857600080fd5b505af115801561020c573d6000803e3d6000fd5b5050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102976040518060400160405280600981526020017f6d736773656e64657200000000000000000000000000000000000000000000008152503360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610461565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031c90610824565b60405180910390fd5b6103646040518060400160405280600581526020017f68656c6c6f00000000000000000000000000000000000000000000000000000081525082610500565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec90610824565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b6104fb83838360405160240161047993929190610844565b6040516020818303038152906040527ffcec75e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610438565b505050565b6105988282604051602401610516929190610891565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610438565b5050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105cc826105a1565b9050919050565b6105dc816105c1565b81146105e757600080fd5b50565b6000813590506105f9816105d3565b92915050565b6000602082840312156106155761061461059c565b5b6000610623848285016105ea565b91505092915050565b610635816105c1565b82525050565b6000602082019050610650600083018461062c565b92915050565b6000819050919050565b61066981610656565b811461067457600080fd5b50565b60008135905061068681610660565b92915050565b6000602082840312156106a2576106a161059c565b5b60006106b084828501610677565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106f35780820151818401526020810190506106d8565b83811115610702576000848401525b50505050565b6000601f19601f8301169050919050565b6000610724826106b9565b61072e81856106c4565b935061073e8185602086016106d5565b61074781610708565b840191505092915050565b6000602082019050818103600083015261076c8184610719565b905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6107a981610774565b82525050565b60006040820190506107c4600083018561062c565b6107d160208301846107a0565b9392505050565b7f6e6f746f776e6572000000000000000000000000000000000000000000000000600082015250565b600061080e6008836106c4565b9150610819826107d8565b602082019050919050565b6000602082019050818103600083015261083d81610801565b9050919050565b6000606082019050818103600083015261085e8186610719565b905061086d602083018561062c565b61087a604083018461062c565b949350505050565b61088b81610656565b82525050565b600060408201905081810360008301526108ab8185610719565b90506108ba6020830184610882565b939250505056fea2646970667358221220228ab9d50380f0f3f34844755e2df131fa84fa52d87fcf10d9eb01e5ac1656d264736f6c634300080c0033";

type MockBorrowerContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockBorrowerContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockBorrowerContract__factory extends ContractFactory {
  constructor(...args: MockBorrowerContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockBorrowerContract> {
    return super.deploy(overrides || {}) as Promise<MockBorrowerContract>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockBorrowerContract {
    return super.attach(address) as MockBorrowerContract;
  }
  override connect(signer: Signer): MockBorrowerContract__factory {
    return super.connect(signer) as MockBorrowerContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBorrowerContractInterface {
    return new utils.Interface(_abi) as MockBorrowerContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBorrowerContract {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockBorrowerContract;
  }
}
