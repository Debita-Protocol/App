/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Proxy,
  ProxyInterface,
} from "../../../../contracts/vaults/instrument.sol/Proxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_delegator",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "changeOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes4",
        name: "ownershipFunction",
        type: "bytes4",
      },
    ],
    name: "delegateOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "isSingleArgument",
        type: "bool",
      },
    ],
    name: "grantOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isValidContract",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numContracts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "ownedContracts",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "ownerTransferFunctions",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "proxyFunc",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012e5380380620012e583398181016040528101906200003791906200012a565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b60008060408385031215620001445762000143620000c0565b5b6000620001548582860162000113565b9250506020620001678582860162000113565b9150509250929050565b61116480620001816000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063524d81d311610066578063524d81d31461011c578063893d20e81461013a57806399f3c79b14610158578063bade64b114610188578063d4f804cf146101b857610093565b806301a3f256146100985780630eaad489146100b45780632af4c31e146100e45780633ac47fff14610100575b600080fd5b6100b260048036038101906100ad9190610bfe565b6101d4565b005b6100ce60048036038101906100c99190610c3e565b6102ee565b6040516100db9190610c86565b60405180910390f35b6100fe60048036038101906100f99190610c3e565b61030e565b005b61011a60048036038101906101159190610d32565b6103df565b005b61012461085d565b6040516101319190610dd3565b60405180910390f35b61014261086a565b60405161014f9190610dfd565b60405180910390f35b610172600480360381019061016d9190610c3e565b610893565b60405161017f9190610e27565b60405180910390f35b6101a2600480360381019061019d9190610e6e565b6108b3565b6040516101af9190610dfd565b60405180910390f35b6101d260048036038101906101cd9190610e9b565b6108f2565b005b6002829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908360e01c02179055505050565b60046020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610f58565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043757600080fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661048d57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610519576000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b801561068c5760008573ffffffffffffffffffffffffffffffffffffffff16600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460e01b866040516024016105969190610dfd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106009190610ff2565b6000604051808303816000865af19150503d806000811461063d576040519150601f19603f3d011682016040523d82523d6000602084013e610642565b606091505b5050905080610686576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067d90611055565b60405180910390fd5b50610856565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191661074584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b1a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c906110c1565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff1684846040516107ce929190611115565b6000604051808303816000865af19150503d806000811461080b576040519150601f19603f3d011682016040523d82523d6000602084013e610810565b606091505b5050905080610854576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084b90611055565b60405180910390fd5b505b5050505050565b6000600280549050905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60036020528060005260406000206000915054906101000a900460e01b81565b600281815481106108c357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461094c57600080fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916610a0583838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610b1a565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906110c1565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff168383604051610a8e929190611115565b6000604051808303816000865af19150503d8060008114610acb576040519150601f19603f3d011682016040523d82523d6000602084013e610ad0565b606091505b5050905080610b14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0b90611055565b60405180910390fd5b50505050565b60008082511415610b3157600060e01b9050610b39565b600482015190505b919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b7382610b48565b9050919050565b610b8381610b68565b8114610b8e57600080fd5b50565b600081359050610ba081610b7a565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610bdb81610ba6565b8114610be657600080fd5b50565b600081359050610bf881610bd2565b92915050565b60008060408385031215610c1557610c14610b3e565b5b6000610c2385828601610b91565b9250506020610c3485828601610be9565b9150509250929050565b600060208284031215610c5457610c53610b3e565b5b6000610c6284828501610b91565b91505092915050565b60008115159050919050565b610c8081610c6b565b82525050565b6000602082019050610c9b6000830184610c77565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610cc657610cc5610ca1565b5b8235905067ffffffffffffffff811115610ce357610ce2610ca6565b5b602083019150836001820283011115610cff57610cfe610cab565b5b9250929050565b610d0f81610c6b565b8114610d1a57600080fd5b50565b600081359050610d2c81610d06565b92915050565b600080600080600060808688031215610d4e57610d4d610b3e565b5b6000610d5c88828901610b91565b9550506020610d6d88828901610b91565b945050604086013567ffffffffffffffff811115610d8e57610d8d610b43565b5b610d9a88828901610cb0565b93509350506060610dad88828901610d1d565b9150509295509295909350565b6000819050919050565b610dcd81610dba565b82525050565b6000602082019050610de86000830184610dc4565b92915050565b610df781610b68565b82525050565b6000602082019050610e126000830184610dee565b92915050565b610e2181610ba6565b82525050565b6000602082019050610e3c6000830184610e18565b92915050565b610e4b81610dba565b8114610e5657600080fd5b50565b600081359050610e6881610e42565b92915050565b600060208284031215610e8457610e83610b3e565b5b6000610e9284828501610e59565b91505092915050565b600080600060408486031215610eb457610eb3610b3e565b5b6000610ec286828701610b91565b935050602084013567ffffffffffffffff811115610ee357610ee2610b43565b5b610eef86828701610cb0565b92509250509250925092565b600082825260208201905092915050565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b6000610f42600983610efb565b9150610f4d82610f0c565b602082019050919050565b60006020820190508181036000830152610f7181610f35565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610fac578082015181840152602081019050610f91565b83811115610fbb576000848401525b50505050565b6000610fcc82610f78565b610fd68185610f83565b9350610fe6818560208601610f8e565b80840191505092915050565b6000610ffe8284610fc1565b915081905092915050565b7f2173756363657373000000000000000000000000000000000000000000000000600082015250565b600061103f600883610efb565b915061104a82611009565b602082019050919050565b6000602082019050818103600083015261106e81611032565b9050919050565b7f66756e63206e6f7420616c6c6f77656400000000000000000000000000000000600082015250565b60006110ab601083610efb565b91506110b682611075565b602082019050919050565b600060208201905081810360008301526110da8161109e565b9050919050565b82818337600083830152505050565b60006110fc8385610f83565b93506111098385846110e1565b82840190509392505050565b60006111228284866110f0565b9150819050939250505056fea2646970667358221220e15626f70c6ecd82d6dc65d95cf37a244f77c847eada1264196575a495d39da664736f6c634300080c0033";

type ProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proxy__factory extends ContractFactory {
  constructor(...args: ProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _owner: PromiseOrValue<string>,
    _delegator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Proxy> {
    return super.deploy(_owner, _delegator, overrides || {}) as Promise<Proxy>;
  }
  override getDeployTransaction(
    _owner: PromiseOrValue<string>,
    _delegator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, _delegator, overrides || {});
  }
  override attach(address: string): Proxy {
    return super.attach(address) as Proxy;
  }
  override connect(signer: Signer): Proxy__factory {
    return super.connect(signer) as Proxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyInterface {
    return new utils.Interface(_abi) as ProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Proxy {
    return new Contract(address, _abi, signerOrProvider) as Proxy;
  }
}
