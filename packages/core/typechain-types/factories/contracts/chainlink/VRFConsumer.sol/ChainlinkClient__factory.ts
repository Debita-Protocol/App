/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ChainlinkClient,
  ChainlinkClientInterface,
} from "../../../../contracts/chainlink/VRFConsumer.sol/ChainlinkClient";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_keyHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_vrfCoordinator",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "deleteWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNums",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "marketId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_candidates",
        type: "address[]",
      },
    ],
    name: "requestRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "s_randomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_requestId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wordLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c0604052620186a0600260006101000a81548163ffffffff021916908363ffffffff1602179055506003600260046101000a81548161ffff021916908361ffff1602179055503480156200005357600080fd5b5060405162000fbe38038062000fbe833981810160405281019062000079919062000246565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508067ffffffffffffffff1660a08167ffffffffffffffff168152505082600181905550505050620002a2565b600080fd5b6000819050919050565b620001768162000161565b81146200018257600080fd5b50565b60008151905062000196816200016b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001c9826200019c565b9050919050565b620001db81620001bc565b8114620001e757600080fd5b50565b600081519050620001fb81620001d0565b92915050565b600067ffffffffffffffff82169050919050565b620002208162000201565b81146200022c57600080fd5b50565b600081519050620002408162000215565b92915050565b6000806000606084860312156200026257620002616200015c565b5b6000620002728682870162000185565b93505060206200028586828701620001ea565b925050604062000298868287016200022f565b9150509250925092565b60805160a051610cef620002cf60003960006103d301526000818161015001526101a40152610cef6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b0c278a01161005b578063b0c278a0146100da578063baf00fd0146100e4578063e89e106a14610100578063f6eaffc81461011e5761007d565b80631fe543e31461008257806347ce00781461009e5780636e4ccfd2146100bc575b600080fd5b61009c60048036038101906100979190610782565b61014e565b005b6100a661020e565b6040516100b3919061089c565b60405180910390f35b6100c4610266565b6040516100d191906108cd565b60405180910390f35b6100e2610273565b005b6100fe60048036038101906100f99190610a45565b610283565b005b610108610485565b60405161011591906108cd565b60405180910390f35b61013860048036038101906101339190610ab4565b61048b565b60405161014591906108cd565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461020057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101f7929190610af0565b60405180910390fd5b61020a82826104af565b5050565b6060600380548060200260200160405190810160405280929190818152602001828054801561025c57602002820191906000526020600020905b815481526020019060010190808311610248575b5050505050905090565b6000600380549050905090565b6003600061028191906104ca565b565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102dd57600080fd5b6006600083815260200190815260200160002060009054906101000a900460ff161561033e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033590610b9c565b60405180910390fd5b60016006600084815260200190815260200160002060006101000a81548160ff021916908315150217905550806007600084815260200190815260200160002090805190602001906103919291906104eb565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d306001547f0000000000000000000000000000000000000000000000000000000000000000600260049054906101000a900461ffff16600260009054906101000a900463ffffffff16886040518663ffffffff1660e01b8152600401610437959493929190610c24565b6020604051808303816000875af1158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a9190610c8c565b600481905550505050565b60045481565b6003818154811061049b57600080fd5b906000526020600020016000915090505481565b80600390805190602001906104c5929190610575565b505050565b50805460008255906000526020600020908101906104e891906105c2565b50565b828054828255906000526020600020908101928215610564579160200282015b828111156105635782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061050b565b5b50905061057191906105c2565b5090565b8280548282559060005260206000209081019282156105b1579160200282015b828111156105b0578251825591602001919060010190610595565b5b5090506105be91906105c2565b5090565b5b808211156105db5760008160009055506001016105c3565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610606816105f3565b811461061157600080fd5b50565b600081359050610623816105fd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6106778261062e565b810181811067ffffffffffffffff821117156106965761069561063f565b5b80604052505050565b60006106a96105df565b90506106b5828261066e565b919050565b600067ffffffffffffffff8211156106d5576106d461063f565b5b602082029050602081019050919050565b600080fd5b60006106fe6106f9846106ba565b61069f565b90508083825260208201905060208402830185811115610721576107206106e6565b5b835b8181101561074a57806107368882610614565b845260208401935050602081019050610723565b5050509392505050565b600082601f83011261076957610768610629565b5b81356107798482602086016106eb565b91505092915050565b60008060408385031215610799576107986105e9565b5b60006107a785828601610614565b925050602083013567ffffffffffffffff8111156107c8576107c76105ee565b5b6107d485828601610754565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610813816105f3565b82525050565b6000610825838361080a565b60208301905092915050565b6000602082019050919050565b6000610849826107de565b61085381856107e9565b935061085e836107fa565b8060005b8381101561088f5781516108768882610819565b975061088183610831565b925050600181019050610862565b5085935050505092915050565b600060208201905081810360008301526108b6818461083e565b905092915050565b6108c7816105f3565b82525050565b60006020820190506108e260008301846108be565b92915050565b600063ffffffff82169050919050565b610901816108e8565b811461090c57600080fd5b50565b60008135905061091e816108f8565b92915050565b600067ffffffffffffffff82111561093f5761093e61063f565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061097b82610950565b9050919050565b61098b81610970565b811461099657600080fd5b50565b6000813590506109a881610982565b92915050565b60006109c16109bc84610924565b61069f565b905080838252602082019050602084028301858111156109e4576109e36106e6565b5b835b81811015610a0d57806109f98882610999565b8452602084019350506020810190506109e6565b5050509392505050565b600082601f830112610a2c57610a2b610629565b5b8135610a3c8482602086016109ae565b91505092915050565b600080600060608486031215610a5e57610a5d6105e9565b5b6000610a6c8682870161090f565b9350506020610a7d86828701610614565b925050604084013567ffffffffffffffff811115610a9e57610a9d6105ee565b5b610aaa86828701610a17565b9150509250925092565b600060208284031215610aca57610ac96105e9565b5b6000610ad884828501610614565b91505092915050565b610aea81610970565b82525050565b6000604082019050610b056000830185610ae1565b610b126020830184610ae1565b9392505050565b600082825260208201905092915050565b7f72616e646f6d20776f72647320616c726561647920726571756573746564206660008201527f6f722074686973206d61726b6574496400000000000000000000000000000000602082015250565b6000610b86603083610b19565b9150610b9182610b2a565b604082019050919050565b60006020820190508181036000830152610bb581610b79565b9050919050565b6000819050919050565b610bcf81610bbc565b82525050565b600067ffffffffffffffff82169050919050565b610bf281610bd5565b82525050565b600061ffff82169050919050565b610c0f81610bf8565b82525050565b610c1e816108e8565b82525050565b600060a082019050610c396000830188610bc6565b610c466020830187610be9565b610c536040830186610c06565b610c606060830185610c15565b610c6d6080830184610c15565b9695505050505050565b600081519050610c86816105fd565b92915050565b600060208284031215610ca257610ca16105e9565b5b6000610cb084828501610c77565b9150509291505056fea2646970667358221220d02e28f8aeef88fa9c68fda88528a64dfdb21478d3d8c585c43075baca91f07164736f6c634300080c0033";

type ChainlinkClientConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainlinkClientConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainlinkClient__factory extends ContractFactory {
  constructor(...args: ChainlinkClientConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _keyHash: PromiseOrValue<BytesLike>,
    _vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ChainlinkClient> {
    return super.deploy(
      _keyHash,
      _vrfCoordinator,
      subscriptionId,
      overrides || {}
    ) as Promise<ChainlinkClient>;
  }
  override getDeployTransaction(
    _keyHash: PromiseOrValue<BytesLike>,
    _vrfCoordinator: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _keyHash,
      _vrfCoordinator,
      subscriptionId,
      overrides || {}
    );
  }
  override attach(address: string): ChainlinkClient {
    return super.attach(address) as ChainlinkClient;
  }
  override connect(signer: Signer): ChainlinkClient__factory {
    return super.connect(signer) as ChainlinkClient__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkClientInterface {
    return new utils.Interface(_abi) as ChainlinkClientInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkClient {
    return new Contract(address, _abi, signerOrProvider) as ChainlinkClient;
  }
}
