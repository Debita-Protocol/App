{
  "address": "0xFe41448d7948836E13638f5a0e0FbB533Eae9914",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "atLoss",
          "type": "bool"
        }
      ],
      "name": "addScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getReputationScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "resetScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7a61163f4b585136586262da99c4b9e39d69ba8e678259aff5a2fe6b339301f7",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0xFe41448d7948836E13638f5a0e0FbB533Eae9914",
    "transactionIndex": 5,
    "gasUsed": "1168614",
    "logsBloom": "0x
    "blockHash": "0x8381411d4afccbb381523c0f48826bafcbdbabd3a16b2b0682117d6ac05aba80",
    "transactionHash": "0x7a61163f4b585136586262da99c4b9e39d69ba8e678259aff5a2fe6b339301f7",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27679769,
        "transactionHash": "0x7a61163f4b585136586262da99c4b9e39d69ba8e678259aff5a2fe6b339301f7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002136c9323d38d0000000000000000000000000000000000000000000000002893fb0362575f762000000000000000000000000000000000000000000001423b06cd9f6a897d427000000000000000000000000000000000000000000000002891e796cf338be92000000000000000000000000000000000000000000001423b08e10bfdad50cf7",
        "logIndex": 18,
        "blockHash": "0x8381411d4afccbb381523c0f48826bafcbdbabd3a16b2b0682117d6ac05aba80"
      }
    ],
    "blockNumber": 27679769,
    "cumulativeGasUsed": "2649770",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x446742632C24a42B21C13F1D3e3B53AcFAe237C4"
  ],
  "numDeployments": 2,
  "solcInputHash": "8691fb0b2a39bd5a97393529a6363a7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"atLoss\",\"type\":\"bool\"}],\"name\":\"addScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getReputationScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"resetScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addScore(address,uint256,bool)\":{\"params\":{\"score\":\": 60.18 format\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addScore(address,uint256,bool)\":{\"notice\":\"calculates average of scores added.\"},\"resetScore(address)\":{\"notice\":\"reset scores\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stablecoin/reputationtoken.sol\":\"ReputationNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@interep/contracts/IInterep.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title Interep interface.\\n/// @dev Interface of a Interep contract.\\ninterface IInterep {\\n    struct Verifier {\\n        address contractAddress;\\n        uint8 merkleTreeDepth;\\n    }\\n\\n    struct Group {\\n        bytes32 provider;\\n        bytes32 name;\\n        uint256 root;\\n        uint8 depth;\\n    }\\n\\n    /// @dev Emitted when a Semaphore proof is verified.\\n    /// @param groupId: Id of the group.\\n    /// @param signal: Semaphore signal.\\n    event ProofVerified(uint256 indexed groupId, bytes32 signal);\\n\\n    /// @dev Emitted when an Interep group is updated.\\n    /// @param groupId: Id of the group.\\n    /// @param provider: Provider of the group.\\n    /// @param name: Name of the group.\\n    /// @param root: Root hash of the tree.\\n    /// @param depth: Depth of the tree.\\n    event GroupUpdated(\\n        uint256 groupId,\\n        bytes32 indexed provider,\\n        bytes32 indexed name,\\n        uint256 root,\\n        uint8 indexed depth\\n    );\\n\\n    /// @dev Updates the Interep groups.\\n    /// @param groups: List of Interep groups.\\n    function updateGroups(Group[] calldata groups) external;\\n\\n    /// @dev Saves the nullifier hash to avoid double signaling and emits an event\\n    /// if the zero-knowledge proof is valid.\\n    /// @param groupId: Id of the group.\\n    /// @param signal: Semaphore signal.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    function verifyProof(\\n        uint256 groupId,\\n        bytes32 signal,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof\\n    ) external;\\n\\n    /// @dev Returns the root hash of an Interep group.\\n    /// @param groupId: Id of the group.\\n    /// @return Root hash of the group.\\n    function getRoot(uint256 groupId) external view returns (uint256);\\n\\n    /// @dev Returns the tree depth of an Interep group.\\n    /// @param groupId: Id of the group.\\n    /// @return Tree depth of the group.\\n    function getDepth(uint256 groupId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd3279ce9fbbb58b7567f66d18735f81df7e8ee61c677e9dd739d3a4823e31c5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface BColor {\\r\\n    function getColor() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ncontract BBronze is BColor {\\r\\n    function getColor() external pure override returns (bytes32) {\\r\\n        return bytes32(\\\"BRONZE\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5684acd4711203183665f2ab65bafb6d12d22d08d18423e4bb143d79d1d6c\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BColor.sol\\\";\\r\\n\\r\\ncontract BConst is BBronze {\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\r\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\r\\n\\r\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\r\\n    uint256 public constant MAX_FEE = BONE / 10;\\r\\n    uint256 public constant EXIT_FEE = 0;\\r\\n\\r\\n    uint256 public constant MIN_WEIGHT = BONE;\\r\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\r\\n\\r\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\r\\n\\r\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\r\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\r\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\r\\n\\r\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\r\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\r\\n}\\r\\n\",\"keccak256\":\"0x861f4d61a141af61fbc9c4824e0952b112c4dcb5329093ac73c5c31bdf83aec2\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is disstributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\r\\n\\r\\nimport \\\"./BPool.sol\\\";\\r\\n\\r\\ncontract BFactory is BBronze {\\r\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\r\\n\\r\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\r\\n\\r\\n    mapping(address => bool) private _isBPool;\\r\\n\\r\\n    function isBPool(address b) external view returns (bool) {\\r\\n        return _isBPool[b];\\r\\n    }\\r\\n\\r\\n    function newBPool() external returns (BPool) {\\r\\n        BPool bpool = new BPool();\\r\\n        _isBPool[address(bpool)] = true;\\r\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\r\\n        bpool.setController(msg.sender);\\r\\n        return bpool;\\r\\n    }\\r\\n\\r\\n    address private _blabs;\\r\\n\\r\\n    constructor() {\\r\\n        _blabs = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getBLabs() external view returns (address) {\\r\\n        return _blabs;\\r\\n    }\\r\\n\\r\\n    function setBLabs(address b) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        emit LOG_BLABS(msg.sender, b);\\r\\n        _blabs = b;\\r\\n    }\\r\\n\\r\\n    function collect(BPool pool) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\r\\n        bool xfer = pool.transfer(_blabs, collected);\\r\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fc1280b9ded4e258eca3987f20e5feab64f577a6537920121e174c8ddb8830c\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ncontract BMath is BBronze, BConst, BNum {\\r\\n    /**********************************************************************************************\\r\\n    // calcSpotPrice                                                                             //\\r\\n    // sP = spotPrice                                                                            //\\r\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\r\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\r\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcSpotPrice(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 spotPrice) {\\r\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\r\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\r\\n        uint256 ratio = bdiv(numer, denom);\\r\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\r\\n        return (spotPrice = bmul(ratio, scale));\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcOutGivenIn                                                                            //\\r\\n    // aO = tokenAmountOut                                                                       //\\r\\n    // bO = tokenBalanceOut                                                                      //\\r\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\r\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\r\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcOutGivenIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\r\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\r\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\r\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        uint256 bar = bsub(BONE, foo);\\r\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcInGivenOut                                                                            //\\r\\n    // aI = tokenAmountIn                                                                        //\\r\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\r\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\r\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\r\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\r\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcInGivenOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\r\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\r\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        foo = bsub(foo, BONE);\\r\\n        tokenAmountIn = bsub(BONE, swapFee);\\r\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolOutGivenSingleIn                                                                  //\\r\\n    // pAo = poolAmountOut         /                                              \\\\              //\\r\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\r\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\r\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\r\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\r\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\r\\n    // sF = swapFee                \\\\                                              /              //\\r\\n    **********************************************************************************************/\\r\\n\\r\\n    // Charge the trading fee for the proportion of tokenAi\\r\\n    ///  which is implicitly traded to the other pool tokens.\\r\\n    // That proportion is (1- weightTokenIn)\\r\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\r\\n\\r\\n    function calcPoolOutGivenSingleIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\r\\n\\r\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\r\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\r\\n\\r\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleInGivenPoolOut                                                                  //\\r\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\r\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\r\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\r\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\r\\n    // wI = weightIn                              /      wI  \\\\                                   //\\r\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\r\\n    // sF = swapFee                               \\\\      tW  /                                   //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleInGivenPoolOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\r\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\r\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\r\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\r\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\r\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\r\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\r\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\r\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleOutGivenPoolIn                                                                  //\\r\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\r\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\r\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\r\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\r\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\r\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\r\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\r\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleOutGivenPoolIn(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\r\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\r\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\r\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\r\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\r\\n\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\r\\n\\r\\n        // charge swap fee on the output token side\\r\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolInGivenSingleOut                                                                  //\\r\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\r\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\r\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\r\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\r\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\r\\n    // tW = totalWeight           -------------------------------------------------------------  //\\r\\n    // sF = swapFee                                        ( 1 - eF )                            //\\r\\n    // eF = exitFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcPoolInGivenSingleOut(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountIn) {\\r\\n        // charge swap fee on the output token side\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\r\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\r\\n        uint256 zar = bmul(zoo, swapFee);\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\r\\n\\r\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\r\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\r\\n\\r\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\r\\n\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\r\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9051281ae3cdaab135eb51e0d1e5b6e16bc1fe29f756bcf0a248c061163df7ea\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BConst.sol\\\";\\r\\n\\r\\ncontract BNum is BConst {\\r\\n    function btoi(uint256 a) internal pure returns (uint256) {\\r\\n        return a / BONE;\\r\\n    }\\r\\n\\r\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\r\\n        return btoi(a) * BONE;\\r\\n    }\\r\\n\\r\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        (uint256 c, bool flag) = bsubSign(a, b);\\r\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\r\\n        if (a >= b) {\\r\\n            return (a - b, false);\\r\\n        } else {\\r\\n            return (b - a, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c0 = a * b;\\r\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c1 = c0 + (BONE / 2);\\r\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c2 = c1 / BONE;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\r\\n        uint256 c0 = a * BONE;\\r\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\r\\n        uint256 c1 = c0 + (b / 2);\\r\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\r\\n        uint256 c2 = c1 / b;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    // DSMath.wpow\\r\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 z = n % 2 != 0 ? a : BONE;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            a = bmul(a, a);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = bmul(z, a);\\r\\n            }\\r\\n        }\\r\\n        return z;\\r\\n    }\\r\\n\\r\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\r\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\r\\n    // of approximation of b^0.w\\r\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\r\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\r\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\r\\n\\r\\n        uint256 whole = bfloor(exp);\\r\\n        uint256 remain = bsub(exp, whole);\\r\\n\\r\\n        uint256 wholePow = bpowi(base, btoi(whole));\\r\\n\\r\\n        if (remain == 0) {\\r\\n            return wholePow;\\r\\n        }\\r\\n\\r\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\r\\n        return bmul(wholePow, partialResult);\\r\\n    }\\r\\n\\r\\n    function bpowApprox(\\r\\n        uint256 base,\\r\\n        uint256 exp,\\r\\n        uint256 precision\\r\\n    ) internal pure returns (uint256) {\\r\\n        // term 0:\\r\\n        uint256 a = exp;\\r\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\r\\n        uint256 term = BONE;\\r\\n        uint256 sum = term;\\r\\n        bool negative = false;\\r\\n\\r\\n        // term(k) = numer / denom\\r\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\r\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\r\\n        // continue until term is less than precision\\r\\n        for (uint256 i = 1; term >= precision; i++) {\\r\\n            uint256 bigK = i * BONE;\\r\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\r\\n            term = bmul(term, bmul(c, x));\\r\\n            term = bdiv(term, bigK);\\r\\n            if (term == 0) break;\\r\\n\\r\\n            if (xneg) negative = !negative;\\r\\n            if (cneg) negative = !negative;\\r\\n            if (negative) {\\r\\n                sum = bsub(sum, term);\\r\\n            } else {\\r\\n                sum = badd(sum, term);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ae56173eeb8f5522a3bbbfde10905514f68320bbcad3dd7e46ba546dd4010a\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BToken.sol\\\";\\r\\nimport \\\"./BMath.sol\\\";\\r\\n\\r\\ncontract BPool is BBronze, BToken, BMath {\\r\\n    struct Record {\\r\\n        bool bound; // is token bound to pool\\r\\n        uint256 index; // private\\r\\n        uint256 denorm; // denormalized weight\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    event LOG_SWAP(\\r\\n        address indexed caller,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 tokenAmountOut\\r\\n    );\\r\\n\\r\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\r\\n\\r\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\r\\n\\r\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\r\\n\\r\\n    modifier _logs_() {\\r\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    modifier _viewlock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    bool private _mutex;\\r\\n\\r\\n    address private _factory; // BFactory address to push token exitFee to\\r\\n    address private _controller; // has CONTROL role\\r\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\r\\n\\r\\n    // `setSwapFee` and `finalize` require CONTROL\\r\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\r\\n    uint256 private _swapFee;\\r\\n    bool private _finalized;\\r\\n\\r\\n    address[] private _tokens;\\r\\n    mapping(address => Record) private _records;\\r\\n    uint256 private _totalWeight;\\r\\n\\r\\n    constructor() {\\r\\n        _controller = msg.sender;\\r\\n        _factory = msg.sender;\\r\\n        _swapFee = MIN_FEE;\\r\\n        _publicSwap = false;\\r\\n        _finalized = false;\\r\\n    }\\r\\n\\r\\n    function isPublicSwap() external view returns (bool) {\\r\\n        return _publicSwap;\\r\\n    }\\r\\n\\r\\n    function isFinalized() external view returns (bool) {\\r\\n        return _finalized;\\r\\n    }\\r\\n\\r\\n    function isBound(address t) external view returns (bool) {\\r\\n        return _records[t].bound;\\r\\n    }\\r\\n\\r\\n    function getNumTokens() external view returns (uint256) {\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].denorm;\\r\\n    }\\r\\n\\r\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\r\\n        return _totalWeight;\\r\\n    }\\r\\n\\r\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        uint256 denorm = _records[token].denorm;\\r\\n        return bdiv(denorm, _totalWeight);\\r\\n    }\\r\\n\\r\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].balance;\\r\\n    }\\r\\n\\r\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\r\\n        return _swapFee;\\r\\n    }\\r\\n\\r\\n    function getController() external view _viewlock_ returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\r\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\r\\n        _swapFee = swapFee;\\r\\n    }\\r\\n\\r\\n    function setController(address manager) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _controller = manager;\\r\\n    }\\r\\n\\r\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _publicSwap = public_;\\r\\n    }\\r\\n\\r\\n    function finalize() external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\r\\n\\r\\n        _finalized = true;\\r\\n        _publicSwap = true;\\r\\n\\r\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\r\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function bind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    )\\r\\n        external\\r\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\r\\n    {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\r\\n\\r\\n        _records[token] = Record({\\r\\n            bound: true,\\r\\n            index: _tokens.length,\\r\\n            denorm: 0, // balance and denorm will be validated\\r\\n            balance: 0 // and set by `rebind`\\r\\n        });\\r\\n        _tokens.push(token);\\r\\n        rebind(token, balance, denorm);\\r\\n    }\\r\\n\\r\\n    function rebind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    ) public _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n\\r\\n        // Adjust the denorm and totalWeight\\r\\n        uint256 oldWeight = _records[token].denorm;\\r\\n        if (denorm > oldWeight) {\\r\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\r\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n        } else if (denorm < oldWeight) {\\r\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\r\\n        }\\r\\n        _records[token].denorm = denorm;\\r\\n\\r\\n        // Adjust the balance record and actual token balance\\r\\n        uint256 oldBalance = _records[token].balance;\\r\\n        _records[token].balance = balance;\\r\\n        if (balance > oldBalance) {\\r\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\r\\n        } else if (balance < oldBalance) {\\r\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\r\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\r\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\r\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\r\\n            _pushUnderlying(token, _factory, tokenExitFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unbind(address token) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        uint256 tokenBalance = _records[token].balance;\\r\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\r\\n\\r\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\r\\n\\r\\n        // Swap the token-to-unbind with the last token,\\r\\n        // then delete the last token\\r\\n        uint256 index = _records[token].index;\\r\\n        uint256 last = _tokens.length - 1;\\r\\n        _tokens[index] = _tokens[last];\\r\\n        _records[_tokens[index]].index = index;\\r\\n        _tokens.pop();\\r\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\r\\n\\r\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\r\\n        _pushUnderlying(token, _factory, tokenExitFee);\\r\\n    }\\r\\n\\r\\n    // Absorb any tokens that have been sent to this contract into the pool\\r\\n    function gulp(address token) external _logs_ _lock_ {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n    }\\r\\n\\r\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\r\\n        external\\r\\n        view\\r\\n        _viewlock_\\r\\n        returns (uint256 spotPrice)\\r\\n    {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\r\\n    }\\r\\n\\r\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\r\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\r\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\r\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\r\\n        }\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    }\\r\\n\\r\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _burnPoolShare(pAiAfterExitFee);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\r\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\r\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\r\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n\\r\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n\\r\\n            _amounts[i] = bmul(ratio, bal);\\r\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\r\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n        }\\r\\n\\r\\n        return _amounts;\\r\\n    }\\r\\n\\r\\n    function swapExactAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 minAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountOut = calcOutGivenIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountOut, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function swapExactAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 maxAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountIn = calcInGivenOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountIn, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function joinswapExternAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 minPoolAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    function joinswapPoolAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 maxAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    function exitswapPoolAmountIn(\\r\\n        address tokenOut,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 minAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    function exitswapExternAmountOut(\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPoolAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        poolAmountIn = calcPoolInGivenSingleOut(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n\\r\\n    // ==\\r\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\r\\n    // You must `_lock_` or otherwise ensure reentry-safety\\r\\n\\r\\n    function _pullUnderlying(\\r\\n        address erc20,\\r\\n        address from,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pushUnderlying(\\r\\n        address erc20,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pullPoolShare(address from, uint256 amount) internal {\\r\\n        _pull(from, amount);\\r\\n    }\\r\\n\\r\\n    function _pushPoolShare(address to, uint256 amount) internal {\\r\\n        _push(to, amount);\\r\\n    }\\r\\n\\r\\n    function _mintPoolShare(uint256 amount) internal {\\r\\n        _mint(amount);\\r\\n    }\\r\\n\\r\\n    function _burnPoolShare(uint256 amount) internal {\\r\\n        _burn(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7158032f88b03d54bba37cc3bdb432fa1906ab69bcd69d1baa43591a36e5f13a\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ninterface IERC20Balancer {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address whom) external view returns (uint256);\\r\\n\\r\\n    function allowance(address src, address dst) external view returns (uint256);\\r\\n\\r\\n    function approve(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract BTokenBase is BNum {\\r\\n    mapping(address => uint256) internal _balance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n    function _mint(uint256 amt) internal {\\r\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\r\\n        _totalSupply = badd(_totalSupply, amt);\\r\\n        emit Transfer(address(0), address(this), amt);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 amt) internal {\\r\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\r\\n        _totalSupply = bsub(_totalSupply, amt);\\r\\n        emit Transfer(address(this), address(0), amt);\\r\\n    }\\r\\n\\r\\n    function _move(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) internal {\\r\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[src] = bsub(_balance[src], amt);\\r\\n        _balance[dst] = badd(_balance[dst], amt);\\r\\n        emit Transfer(src, dst, amt);\\r\\n    }\\r\\n\\r\\n    function _push(address to, uint256 amt) internal {\\r\\n        _move(address(this), to, amt);\\r\\n    }\\r\\n\\r\\n    function _pull(address from, uint256 amt) internal {\\r\\n        _move(from, address(this), amt);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BToken is BTokenBase, IERC20Balancer {\\r\\n    string private _name = \\\"Balancer Pool Token\\\";\\r\\n    string private _symbol = \\\"BPT\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address dst) external view override returns (uint256) {\\r\\n        return _allowance[src][dst];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address whom) external view override returns (uint256) {\\r\\n        return _balance[whom];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\r\\n        _allowance[msg.sender][dst] = amt;\\r\\n        emit Approval(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        uint256 oldValue = _allowance[msg.sender][dst];\\r\\n        if (amt > oldValue) {\\r\\n            _allowance[msg.sender][dst] = 0;\\r\\n        } else {\\r\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\r\\n        }\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\r\\n        _move(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external override returns (bool) {\\r\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\r\\n        _move(src, dst, amt);\\r\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\r\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\r\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcbe41ffe3ae5f17388e0418cc5aa0e85c9acc4094e89fdf695d223c15b6f56b7\",\"license\":\"MIT\"},\"contracts/bonds/Ibondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4; \\r\\n\\r\\n\\r\\ninterface IBondingCurve{\\r\\n\\tfunction setMarketManager(address _market_manager) external;\\r\\n\\tfunction getTotalZCB(uint256 marketId) external returns (uint256 result);\\r\\n\\tfunction getTotalDS(uint256 marketId) external returns (uint256 result);\\r\\n\\tfunction getMaxQuantity(uint256 marketId) external view returns (uint256 result);\\r\\n\\tfunction curveInit(uint256 marketId) external;\\r\\n\\tfunction getExpectedPrice(uint256 marketId, uint256 amountIn) external view returns (uint256 result);\\r\\n\\tfunction getCollateral() external returns (address);\\r\\n\\tfunction buy(\\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) external returns(uint256);\\r\\n\\tfunction sell(\\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) external returns (uint256);\\r\\n\\tfunction redeem(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress receiver, \\r\\n\\t\\tuint256 zcb_redeem_amount, \\r\\n\\t\\tuint256 collateral_redeem_amount\\r\\n\\t) external;\\r\\n\\tfunction redeemPostAssessment(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress redeemer,\\r\\n\\t\\tuint256 collateral_amount\\r\\n\\t) external;\\r\\n\\tfunction burnFirstLoss(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 burn_collateral_amount\\r\\n\\t) external;\\r\\n\\tfunction mint(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 mintAmount,\\r\\n\\t\\taddress to\\r\\n\\t) external;\\r\\n\\tfunction burn(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 burnAmount, \\r\\n\\t\\taddress to\\r\\n\\t) external;\\r\\n}\",\"keccak256\":\"0x681f835c1b2c9a33840c3a647ea20e506ad55b67131e71027df8744f0d9d1ca3\"},\"contracts/bonds/LinearBondingCurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @notice y = a * x + b\\r\\n/// @dev NEED TO REDO FOR GAS EFFICIENT\\r\\ncontract LinearBondingCurve is BondingCurve {\\r\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\r\\n    using FixedPointMathLib for uint256;\\r\\n    uint256 a;\\r\\n    uint256 b;\\r\\n\\r\\n    constructor (\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner,\\r\\n        address collateral,\\r\\n        uint256 _a,\\r\\n        uint256 _b\\r\\n    ) BondingCurve(name, symbol, owner, collateral) {\\r\\n        a = _a;\\r\\n        b = _b;\\r\\n    }\\r\\n    /**\\r\\n     @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\r\\n     @param amount: amount collateral in => has collateral decimal number.\\r\\n     tokens returned in 60.18\\r\\n     */\\r\\n    function _calculatePurchaseReturn(uint256 amount) view internal override virtual returns(uint256) {\\r\\n        uint256 s = totalSupply() ;\\r\\n        uint256 _amount = amount * 10 ** (18 - collateral_dec);\\r\\n\\r\\n        uint256 x = ((a.mulWadDown(s) + b) ** 2)/math_precision; \\r\\n\\r\\n        uint256 y = 2*( a.mulWadDown(_amount)); \\r\\n\\r\\n        uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\r\\n\\r\\n        uint256 z = (a.mulWadDown(s) + b); \\r\\n\\r\\n        uint256 result = (x_y_sqrt-z).divWadDown(a);\\r\\n\\r\\n        return result; \\r\\n\\r\\n\\r\\n        // uint256 two = uint256(2).fromUint();\\r\\n        // result = (((a.mul(s) + b).pow(two) + two.mul(a).mul(amount)).sqrt() - (a.mul(s) + b)).div(a);\\r\\n        //result = ( ( ( ((a.mulWadDown(s) + b) ** 2)/math_precision + 2 * a.mulWadDown(_amount) ) * math_precision ).sqrt() - (a.mulWadDown(s) + b) ).divWadDown(a);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates area under the curve from current supply to s+amount\\r\\n    /// result = a * amount / 2  * (2* supply + amount) + b * amount\\r\\n    /// @dev amount is in 60.18.\\r\\n    /// returned in collateral decimals\\r\\n    function _calcAreaUnderCurve(uint256 amount) internal view override virtual returns(uint256 result){\\r\\n        uint256 s = totalSupply(); \\r\\n    \\r\\n        result = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\r\\n        result /= (10 ** (18 - collateral_dec));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates area under curve from s-amount to s, is c(as-ac/2+b) where c is amount \\r\\n     @dev collateral tokens returned\\r\\n     @param amount: tokens burning => 60.18 amount needs to be in 18 decimal \\r\\n     @dev returns amount of collateral tokens with collateral decimals\\r\\n     */\\r\\n    function _calculateSaleReturn(uint256 amount) view internal override virtual returns (uint256) {\\r\\n        uint s = totalSupply();\\r\\n\\r\\n        console.log('amount', amount, s); \\r\\n\\r\\n        uint256 x = a.mulWadDown(s); \\r\\n        uint256 y = a.mulWadDown(amount)/2; \\r\\n        uint256 z = b + x - y; \\r\\n        uint256 result = amount.mulWadDown(z); \\r\\n\\r\\n        result = result / (10 ** (18 - collateral_dec));\\r\\n\\r\\n        return result; \\r\\n        \\r\\n        // uint256 _reserves = reserves * 10 ** (18 - collateral_dec);\\r\\n\\r\\n        // console.log(\\\"_reserves\\\", _reserves);\\r\\n        // result = _reserves - ( (a / 2).mulWadDown((((s - amount)**2) / math_precision)) + b.mulWadDown(s - amount) );\\r\\n        // console.log(\\\"s - amount\\\", s - amount);\\r\\n        // result /= (10 ** (18 - collateral_dec));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @param amount: amount added in 60.18\\r\\n     @dev returns price in 60.18\\r\\n     */\\r\\n    function _calculateExpectedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\r\\n        uint256 s = totalSupply();\\r\\n\\r\\n        result = (s + amount).mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n    function _calculateDecreasedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\r\\n        result = (totalSupply() - amount).mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice probability = a * x + b, 60.18\\r\\n     returns probability in 60.18\\r\\n     */\\r\\n    function _calculateProbability(uint256 amount) view internal override virtual returns (uint256 score) {\\r\\n        //score = amount.mul(a) + b;\\r\\n        score = amount.mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n   function _calculateScore(uint256 priceOut, bool atLoss)view internal override virtual returns (uint256 score) {\\r\\n        // uint256 two = uint256(2).fromUint();\\r\\n        // if (atLoss) {score =  ((priceOut-math_precision).div(math_precision)).pow(two);}\\r\\n        // else {score = ((priceOut).div(math_precision)).pow(two);}\\r\\n        if (atLoss) {\\r\\n            score = ((priceOut - math_precision) ** 2) / math_precision;\\r\\n        } else {\\r\\n            score = (priceOut ** 2) / math_precision;\\r\\n        }\\r\\n\\r\\n    }\\r\\n }\",\"keccak256\":\"0x618198aec0deb44cf3eed3f06ba60b34de98295f9765759742520090436722a4\"},\"contracts/bonds/bondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n//TODO need to actually review for security and shit.\\r\\nabstract contract BondingCurve is OwnedERC20 {\\r\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 internal price_upper_bound;\\r\\n    uint256 internal price_lower_bound;\\r\\n    uint256 internal reserves;\\r\\n    uint256 internal max_quantity;\\r\\n    uint256 internal math_precision; \\r\\n    uint256 internal collateral_dec;\\r\\n    ERC20 collateral; // NEED TO CHANGE ONCE VAULT IS DONE\\r\\n    address[] private buyers; // keeps track for final reputation.\\r\\n\\r\\n\\r\\n    constructor (\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner, // market manager.\\r\\n        address _collateral\\r\\n    ) OwnedERC20(name, symbol, owner) {\\r\\n        collateral = ERC20(_collateral);\\r\\n        math_precision = 1e18;\\r\\n        collateral_dec = collateral.decimals();\\r\\n    }\\r\\n\\r\\n    function setUpperBound(uint256 upper_bound) public onlyOwner {\\r\\n        price_upper_bound = upper_bound;\\r\\n    }\\r\\n\\r\\n    function setLowerBound(uint256 lower_bound) public onlyOwner {\\r\\n        price_lower_bound = lower_bound;\\r\\n    }\\r\\n\\r\\n    function setMaxQuantity(uint256 _max_quantity) public onlyOwner {\\r\\n        max_quantity = _max_quantity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice called by market manager, like trustedMint but returns amount out\\r\\n     @param collateral_amount: amount of collateral in. => w/ collateral decimals\\r\\n     */\\r\\n    function trustedBuy(address trader, uint256 collateral_amount) public onlyOwner returns (uint256) {\\r\\n        uint256 tokens = _calculatePurchaseReturn(collateral_amount);\\r\\n        console.log('TOKENS', tokens, collateral_amount); \\r\\n        reserves += collateral_amount;\\r\\n\\r\\n        require(collateral.balanceOf(trader)>= collateral_amount,\\\"not enough balance\\\"); \\r\\n        collateral.safeTransferFrom(trader, address(this), collateral_amount);\\r\\n        _mint(trader, tokens);\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @param zcb_amount: amount of zcb tokens burned, needs to be in 18 decimals \\r\\n     */\\r\\n    function trustedSell(address trader, uint256 zcb_amount) public onlyOwner returns (uint256) {\\r\\n        uint256 collateral_out = _calculateSaleReturn(zcb_amount);\\r\\n        console.log(\\\"colalteralout\\\", collateral_out); \\r\\n        _burn(trader, zcb_amount);\\r\\n\\r\\n        collateral.safeTransfer(trader, collateral_out);\\r\\n        reserves -= collateral_out;\\r\\n        return collateral_out;\\r\\n    }\\r\\n\\r\\n    function trustedApproveCollateralTransfer(address trader, uint256 amount) public onlyOwner {\\r\\n        collateral.approve(trader, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates tokens returns from input collateral\\r\\n     @dev shouldn't be calling this function, should be calculating amount from frontend.\\r\\n     @param amount: input collateral (ds)\\r\\n     */\\r\\n    function calculatePurchaseReturn(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculatePurchaseReturn(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice gets required amount of collateral to purchase X amount of tokens\\r\\n    /// need to get area under the curve from current supply X_  to X_+X \\r\\n    function calcAreaUnderCurve(uint256 amount) public view  returns(uint){\\r\\n    \\t  return _calcAreaUnderCurve(amount); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates collateral returns from selling tokens\\r\\n     @param amount: amount of tokens selling\\r\\n     */\\r\\n    function calculateSaleReturn(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculateSaleReturn(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates score necessary to update reputation score\\r\\n    function calculateScore(uint256 priceOut, bool atLoss) public view returns(uint){\\r\\n    \\treturn _calculateScore(priceOut, atLoss);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     @notice calculates expected price given user buys X tokens\\r\\n     @param amount: hypothetical amount of tokens bought\\r\\n     */\\r\\n    function calculateExpectedPrice(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculateExpectedPrice(amount);\\r\\n    }\\r\\n    \\r\\n    function getTotalCollateral() public view returns (uint256 result) {\\r\\n        result = collateral.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getCollateral() public view returns (address) {\\r\\n        return address(collateral);\\r\\n    } \\r\\n\\r\\n    function getTotalZCB() public view returns (uint256 result) {\\r\\n        result = totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMaxQuantity() public view returns (uint256 result) {\\r\\n        result = max_quantity;\\r\\n    }\\r\\n\\r\\n    function getUpperBound() public view returns (uint256 result) {\\r\\n        result = price_upper_bound;\\r\\n    }\\r\\n\\r\\n    function getLowerBound() public view returns (uint256 result) {\\r\\n        result = price_lower_bound;\\r\\n    }\\r\\n    function getReserves() public view returns(uint256){\\r\\n    \\treturn reserves; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice buy bond tokens with necessary checks and transfers of collateral.\\r\\n     @param amount: amount of collateral/ds paid in exchange for tokens\\r\\n     @dev amount has number of collateral decimals\\r\\n     */\\r\\n    function buy(uint256 amount) public {\\r\\n        uint256 tokens = _calculatePurchaseReturn(amount);\\r\\n        console.log(\\\"buy:tokens\\\", tokens);\\r\\n        reserves += amount; // CAN REPLACE WITH collateral.balanceOf(this)\\r\\n        _mint(msg.sender, tokens);\\r\\n        collateral.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice sell bond tokens with necessary checks and transfers of collateral\\r\\n     @param amount: amount of tokens selling. 60.18.\\r\\n     */\\r\\n    function sell(uint256 amount) public {\\r\\n        uint256 sale = _calculateSaleReturn(amount);\\r\\n        _burn(msg.sender, amount);\\r\\n        collateral.safeTransfer(msg.sender, sale);\\r\\n        reserves -= sale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @dev doesn't perform any checks, checks performed by caller\\r\\n     */\\r\\n    function incrementReserves(uint256 amount) public onlyOwner{\\r\\n        reserves += amount;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     @dev doesn't perform any checks, checks performed by caller\\r\\n     */\\r\\n    function decrementReserves(uint256 amount) public onlyOwner {\\r\\n        reserves -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice used for calculating reputation score on resolved market.\\r\\n     */\\r\\n    function calculateProbability(uint256 amount) view public returns (uint256 score) {\\r\\n        return _calculateProbability(amount);\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n\\t\\taddress receiver, \\r\\n\\t\\tuint256 zcb_redeem_amount, \\r\\n\\t\\tuint256 collateral_redeem_amount\\r\\n\\t) external  onlyOwner {\\r\\n        _burn(receiver, zcb_redeem_amount);\\r\\n\\t\\tcollateral.safeTransfer(receiver, collateral_redeem_amount); \\r\\n        reserves -= collateral_redeem_amount;\\r\\n\\t}\\r\\n\\r\\n    function redeemPostAssessment(\\r\\n\\t\\taddress redeemer,\\r\\n\\t\\tuint256 collateral_amount\\r\\n\\t) external  onlyOwner{\\r\\n        uint256 redeem_amount = balanceOf(redeemer);\\r\\n\\t\\t_burn(redeemer, redeem_amount); \\r\\n\\t\\tcollateral.safeTransfer(redeemer, collateral_amount); \\r\\n        reserves -= collateral_amount;\\r\\n\\t}\\r\\n\\r\\n    function burnFirstLoss(\\r\\n\\t\\tuint256 burn_collateral_amount\\r\\n\\t) external onlyOwner{\\r\\n\\t\\tcollateral.safeTransfer(owner, burn_collateral_amount); \\r\\n        reserves -= burn_collateral_amount;\\r\\n\\t}\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override virtual {\\r\\n        // on _mint\\r\\n        if (from == address(0) && price_upper_bound > 0) {\\r\\n            console.log(\\\"beforeTT: price_upper_bound\\\", price_upper_bound);\\r\\n            require(_calculateExpectedPrice(amount) <= price_upper_bound, \\\"above price upper bound\\\");\\r\\n            // if (balanceOf(to) == 0 && amount > 0) {\\r\\n            //     buyers.push(to);\\r\\n            // }\\r\\n        }\\r\\n        // on _burn\\r\\n        else if (to == address(0) && price_lower_bound > 0) {\\r\\n            require(_calculateDecreasedPrice(amount) >= price_lower_bound, \\\"below price lower bound\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @dev amount is tokens burned.\\r\\n     */\\r\\n    function calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result) {\\r\\n        result = _calculateDecreasedPrice(amount);\\r\\n    }\\r\\n\\r\\n    function _calcAreaUnderCurve(uint256 amount) internal view  virtual returns(uint256 result); \\r\\n\\r\\n    function _calculateScore(uint256 priceOut, bool atLoss) view internal virtual returns(uint256 score);\\r\\n\\r\\n    function _calculatePurchaseReturn(uint256 amount) view internal virtual returns(uint256 result);\\r\\n\\r\\n    function _calculateSaleReturn(uint256 amount) view internal virtual returns (uint256 result);\\r\\n\\r\\n    function _calculateExpectedPrice(uint256 amount) view internal virtual returns (uint256 result);\\r\\n\\r\\n    function _calculateProbability(uint256 amount) view internal virtual returns (uint256 score);\\r\\n\\r\\n    function _calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result);\\r\\n}\",\"keccak256\":\"0x43235f0945d43ec5d92d232bf8c127c5251dda972136361a107cb1684f8e168d\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\nabstract contract CalculateLinesToBPoolOdds {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\r\\n\\r\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _total = sum(_proportions);\\r\\n\\r\\n        _odds = new uint256[](_proportions.length);\\r\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\r\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\r\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\r\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\r\\n            _sum += _numbers[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\r\\n        _odds = new uint256[](_size);\\r\\n\\r\\n        if (_invalid) _odds[0] = 1e18; // 2%\\r\\n\\r\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\r\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\r\\n            _odds[i] = _each;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\r\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\r\\n\\r\\n        uint256 _total = _odds1 + _odds2;\\r\\n\\r\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\r\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\r\\n\\r\\n        // Moneyline odds are too skewed: would have under 2% odds.\\r\\n        require(_odds1 >= 1e18);\\r\\n        require(_odds2 >= 1e18);\\r\\n\\r\\n        _odds = new uint256[](3);\\r\\n        _odds[0] = 1e18; // Invalid, 2%\\r\\n        _odds[1] = _odds1;\\r\\n        _odds[2] = _odds2;\\r\\n    }\\r\\n\\r\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\r\\n        if (_line < 0) {\\r\\n            // favored\\r\\n            uint256 _posLine = uint256(-_line);\\r\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\r\\n        } else {\\r\\n            // underdog\\r\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x416898d926442f8779f85482a1b0e5f0e7c9d1933a2c1293d8d72f45bc84feaf\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Full is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x41ff2e58c059015e2253de4dd9662eb9c508dbe06173d6c86d40eaf9931a825a\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address _newOwner) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x76d07e413556985a60ee4605c19060e334d2837d5a6a516c9778a10f6762a4ca\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\nabstract contract Ownable is IOwnable {\\r\\n    address internal owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view override returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param _newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\r\\n        require(_newOwner != address(0));\\r\\n        onTransferOwnership(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\r\\n    function onTransferOwnership(address, address) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x88fbb6eef836056a42280c96f7f5f2a721f7f714c4b4681f53193812cd38958e\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Rewardable {\\r\\n    // Rewards will be paid out over the lifetime of an event.\\r\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\r\\n\\r\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\r\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x45a1a84b8cd35d8663aa8e93a8cc33acdcd5f81939d71d25e36425f23e2d3cbe\",\"license\":\"MIT\"},\"contracts/libraries/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Versioned {\\r\\n    string internal version;\\r\\n\\r\\n    constructor(string memory _version) {\\r\\n        version = _version;\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (string memory) {\\r\\n        return version;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5ba98803ed1e2332153aba2d4124c242ac1d009579e875c5d286f0ac8bf7264c\",\"license\":\"MIT\"},\"contracts/prb/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @notice Emitted when the result overflows uint256.\\r\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\r\\n\\r\\n/// @notice Emitted when the result overflows uint256.\\r\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\r\\n\\r\\n/// @notice Emitted when one of the inputs is type(int256).min.\\r\\nerror PRBMath__MulDivSignedInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\r\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the input is MIN_SD59x18.\\r\\nerror PRBMathSD59x18__AbsInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\r\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\r\\nerror PRBMathSD59x18__DivInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\r\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\r\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 192.\\r\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\r\\n\\r\\n/// @notice Emitted when flooring a number underflows SD59x18.\\r\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\r\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\r\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when the product of the inputs is negative.\\r\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\r\\n\\r\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\r\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\r\\n\\r\\n/// @notice Emitted when the input is less than or equal to zero.\\r\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\r\\n\\r\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\r\\nerror PRBMathSD59x18__MulInputTooSmall();\\r\\n\\r\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\r\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\r\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\r\\n\\r\\n/// @notice Emitted when the input is negative.\\r\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\r\\n\\r\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\r\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\r\\n\\r\\n/// @notice Emitted when addition overflows UD60x18.\\r\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\r\\n\\r\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\r\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\r\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\r\\n\\r\\n/// @notice Emitted when the input is greater than 192.\\r\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\r\\n\\r\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\r\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\r\\n\\r\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\r\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\r\\n\\r\\n/// @notice Emitted when the input is less than 1.\\r\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\r\\n\\r\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\r\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\r\\n\\r\\n/// @notice Emitted when subtraction underflows UD60x18.\\r\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\r\\n\\r\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\r\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\r\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\r\\nlibrary PRBMath {\\r\\n    /// STRUCTS ///\\r\\n\\r\\n    struct SD59x18 {\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct UD60x18 {\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    /// STORAGE ///\\r\\n\\r\\n    /// @dev How many trailing decimals can be represented.\\r\\n    uint256 internal constant SCALE = 1e18;\\r\\n\\r\\n    /// @dev Largest power of two divisor of SCALE.\\r\\n    uint256 internal constant SCALE_LPOTD = 262144;\\r\\n\\r\\n    /// @dev SCALE inverted mod 2^256.\\r\\n    uint256 internal constant SCALE_INVERSE =\\r\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\r\\n\\r\\n    /// FUNCTIONS ///\\r\\n\\r\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\r\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\r\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\r\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\r\\n            result = 0x800000000000000000000000000000000000000000000000;\\r\\n\\r\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\r\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\r\\n            if (x & 0x8000000000000000 > 0) {\\r\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000000000000 > 0) {\\r\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000000000000 > 0) {\\r\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000000000000 > 0) {\\r\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000000000000 > 0) {\\r\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000000000000 > 0) {\\r\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000000000000 > 0) {\\r\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000000000000 > 0) {\\r\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000000000000 > 0) {\\r\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000000000000 > 0) {\\r\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000000000000 > 0) {\\r\\n                result = (result * 0x100162F3904051FA1) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000000000000 > 0) {\\r\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000000000000 > 0) {\\r\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000000000 > 0) {\\r\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000000000 > 0) {\\r\\n                result = (result * 0x1000162E525EE0547) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000000000 > 0) {\\r\\n                result = (result * 0x10000B17255775C04) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000000000 > 0) {\\r\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000000000 > 0) {\\r\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000000000 > 0) {\\r\\n                result = (result * 0x10000162E43F4F831) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000000000 > 0) {\\r\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000000000 > 0) {\\r\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000000000 > 0) {\\r\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000000000 > 0) {\\r\\n                result = (result * 0x100000162E430E5A2) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000000000 > 0) {\\r\\n                result = (result * 0x1000000B172183551) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000000000 > 0) {\\r\\n                result = (result * 0x100000058B90C0B49) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000000 > 0) {\\r\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000000 > 0) {\\r\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000000 > 0) {\\r\\n                result = (result * 0x10000000B17217FBB) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000000 > 0) {\\r\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000000 > 0) {\\r\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000000 > 0) {\\r\\n                result = (result * 0x10000000162E42FF1) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000000 > 0) {\\r\\n                result = (result * 0x100000000B17217F8) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000000 > 0) {\\r\\n                result = (result * 0x10000000058B90BFC) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000000 > 0) {\\r\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000000 > 0) {\\r\\n                result = (result * 0x100000000162E42FF) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000000 > 0) {\\r\\n                result = (result * 0x1000000000B17217F) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000000 > 0) {\\r\\n                result = (result * 0x100000000058B90C0) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000000 > 0) {\\r\\n                result = (result * 0x10000000002C5C860) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000000 > 0) {\\r\\n                result = (result * 0x1000000000162E430) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000000 > 0) {\\r\\n                result = (result * 0x10000000000B17218) >> 64;\\r\\n            }\\r\\n            if (x & 0x800000 > 0) {\\r\\n                result = (result * 0x1000000000058B90C) >> 64;\\r\\n            }\\r\\n            if (x & 0x400000 > 0) {\\r\\n                result = (result * 0x100000000002C5C86) >> 64;\\r\\n            }\\r\\n            if (x & 0x200000 > 0) {\\r\\n                result = (result * 0x10000000000162E43) >> 64;\\r\\n            }\\r\\n            if (x & 0x100000 > 0) {\\r\\n                result = (result * 0x100000000000B1721) >> 64;\\r\\n            }\\r\\n            if (x & 0x80000 > 0) {\\r\\n                result = (result * 0x10000000000058B91) >> 64;\\r\\n            }\\r\\n            if (x & 0x40000 > 0) {\\r\\n                result = (result * 0x1000000000002C5C8) >> 64;\\r\\n            }\\r\\n            if (x & 0x20000 > 0) {\\r\\n                result = (result * 0x100000000000162E4) >> 64;\\r\\n            }\\r\\n            if (x & 0x10000 > 0) {\\r\\n                result = (result * 0x1000000000000B172) >> 64;\\r\\n            }\\r\\n            if (x & 0x8000 > 0) {\\r\\n                result = (result * 0x100000000000058B9) >> 64;\\r\\n            }\\r\\n            if (x & 0x4000 > 0) {\\r\\n                result = (result * 0x10000000000002C5D) >> 64;\\r\\n            }\\r\\n            if (x & 0x2000 > 0) {\\r\\n                result = (result * 0x1000000000000162E) >> 64;\\r\\n            }\\r\\n            if (x & 0x1000 > 0) {\\r\\n                result = (result * 0x10000000000000B17) >> 64;\\r\\n            }\\r\\n            if (x & 0x800 > 0) {\\r\\n                result = (result * 0x1000000000000058C) >> 64;\\r\\n            }\\r\\n            if (x & 0x400 > 0) {\\r\\n                result = (result * 0x100000000000002C6) >> 64;\\r\\n            }\\r\\n            if (x & 0x200 > 0) {\\r\\n                result = (result * 0x10000000000000163) >> 64;\\r\\n            }\\r\\n            if (x & 0x100 > 0) {\\r\\n                result = (result * 0x100000000000000B1) >> 64;\\r\\n            }\\r\\n            if (x & 0x80 > 0) {\\r\\n                result = (result * 0x10000000000000059) >> 64;\\r\\n            }\\r\\n            if (x & 0x40 > 0) {\\r\\n                result = (result * 0x1000000000000002C) >> 64;\\r\\n            }\\r\\n            if (x & 0x20 > 0) {\\r\\n                result = (result * 0x10000000000000016) >> 64;\\r\\n            }\\r\\n            if (x & 0x10 > 0) {\\r\\n                result = (result * 0x1000000000000000B) >> 64;\\r\\n            }\\r\\n            if (x & 0x8 > 0) {\\r\\n                result = (result * 0x10000000000000006) >> 64;\\r\\n            }\\r\\n            if (x & 0x4 > 0) {\\r\\n                result = (result * 0x10000000000000003) >> 64;\\r\\n            }\\r\\n            if (x & 0x2 > 0) {\\r\\n                result = (result * 0x10000000000000001) >> 64;\\r\\n            }\\r\\n            if (x & 0x1 > 0) {\\r\\n                result = (result * 0x10000000000000001) >> 64;\\r\\n            }\\r\\n\\r\\n            // We're doing two things at the same time:\\r\\n            //\\r\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\r\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\r\\n            //      rather than 192.\\r\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\r\\n            //\\r\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\r\\n            result *= SCALE;\\r\\n            result >>= (191 - (x >> 64));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\r\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\r\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\r\\n    /// @return msb The index of the most significant bit as an uint256.\\r\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\r\\n        if (x >= 2**128) {\\r\\n            x >>= 128;\\r\\n            msb += 128;\\r\\n        }\\r\\n        if (x >= 2**64) {\\r\\n            x >>= 64;\\r\\n            msb += 64;\\r\\n        }\\r\\n        if (x >= 2**32) {\\r\\n            x >>= 32;\\r\\n            msb += 32;\\r\\n        }\\r\\n        if (x >= 2**16) {\\r\\n            x >>= 16;\\r\\n            msb += 16;\\r\\n        }\\r\\n        if (x >= 2**8) {\\r\\n            x >>= 8;\\r\\n            msb += 8;\\r\\n        }\\r\\n        if (x >= 2**4) {\\r\\n            x >>= 4;\\r\\n            msb += 4;\\r\\n        }\\r\\n        if (x >= 2**2) {\\r\\n            x >>= 2;\\r\\n            msb += 2;\\r\\n        }\\r\\n        if (x >= 2**1) {\\r\\n            // No need to shift x any more.\\r\\n            msb += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\r\\n    ///\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - The denominator cannot be zero.\\r\\n    /// - The result must fit within uint256.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - This function does not work with fixed-point numbers.\\r\\n    ///\\r\\n    /// @param x The multiplicand as an uint256.\\r\\n    /// @param y The multiplier as an uint256.\\r\\n    /// @param denominator The divisor as an uint256.\\r\\n    /// @return result The result as an uint256.\\r\\n    function mulDiv(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\r\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\r\\n        // variables such that product = prod1 * 2^256 + prod0.\\r\\n        uint256 prod0; // Least significant 256 bits of the product\\r\\n        uint256 prod1; // Most significant 256 bits of the product\\r\\n        assembly {\\r\\n            let mm := mulmod(x, y, not(0))\\r\\n            prod0 := mul(x, y)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        // Handle non-overflow cases, 256 by 256 division.\\r\\n        if (prod1 == 0) {\\r\\n            unchecked {\\r\\n                result = prod0 / denominator;\\r\\n            }\\r\\n            return result;\\r\\n        }\\r\\n\\r\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\r\\n        if (prod1 >= denominator) {\\r\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\r\\n        }\\r\\n\\r\\n        ///////////////////////////////////////////////\\r\\n        // 512 by 256 division.\\r\\n        ///////////////////////////////////////////////\\r\\n\\r\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\r\\n        uint256 remainder;\\r\\n        assembly {\\r\\n            // Compute remainder using mulmod.\\r\\n            remainder := mulmod(x, y, denominator)\\r\\n\\r\\n            // Subtract 256 bit number from 512 bit number.\\r\\n            prod1 := sub(prod1, gt(remainder, prod0))\\r\\n            prod0 := sub(prod0, remainder)\\r\\n        }\\r\\n\\r\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\r\\n        // See https://cs.stackexchange.com/q/138556/92363.\\r\\n        unchecked {\\r\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\r\\n            uint256 lpotdod = denominator & (~denominator + 1);\\r\\n            assembly {\\r\\n                // Divide denominator by lpotdod.\\r\\n                denominator := div(denominator, lpotdod)\\r\\n\\r\\n                // Divide [prod1 prod0] by lpotdod.\\r\\n                prod0 := div(prod0, lpotdod)\\r\\n\\r\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\r\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\r\\n            }\\r\\n\\r\\n            // Shift in bits from prod1 into prod0.\\r\\n            prod0 |= prod1 * lpotdod;\\r\\n\\r\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\r\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\r\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\r\\n            uint256 inverse = (3 * denominator) ^ 2;\\r\\n\\r\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\r\\n            // in modular arithmetic, doubling the correct bits in each step.\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\r\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\r\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\r\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inverse;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\r\\n    ///\\r\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\r\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\r\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - The result must fit within uint256.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\r\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\r\\n    ///     1. x * y = type(uint256).max * SCALE\\r\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\r\\n    ///\\r\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        uint256 prod0;\\r\\n        uint256 prod1;\\r\\n        assembly {\\r\\n            let mm := mulmod(x, y, not(0))\\r\\n            prod0 := mul(x, y)\\r\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n        }\\r\\n\\r\\n        if (prod1 >= SCALE) {\\r\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\r\\n        }\\r\\n\\r\\n        uint256 remainder;\\r\\n        uint256 roundUpUnit;\\r\\n        assembly {\\r\\n            remainder := mulmod(x, y, SCALE)\\r\\n            roundUpUnit := gt(remainder, 499999999999999999)\\r\\n        }\\r\\n\\r\\n        if (prod1 == 0) {\\r\\n            unchecked {\\r\\n                result = (prod0 / SCALE) + roundUpUnit;\\r\\n                return result;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            result := add(\\r\\n                mul(\\r\\n                    or(\\r\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\r\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\r\\n                    ),\\r\\n                    SCALE_INVERSE\\r\\n                ),\\r\\n                roundUpUnit\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\r\\n    ///\\r\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - None of the inputs can be type(int256).min.\\r\\n    /// - The result must fit within int256.\\r\\n    ///\\r\\n    /// @param x The multiplicand as an int256.\\r\\n    /// @param y The multiplier as an int256.\\r\\n    /// @param denominator The divisor as an int256.\\r\\n    /// @return result The result as an int256.\\r\\n    function mulDivSigned(\\r\\n        int256 x,\\r\\n        int256 y,\\r\\n        int256 denominator\\r\\n    ) internal pure returns (int256 result) {\\r\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\r\\n            revert PRBMath__MulDivSignedInputTooSmall();\\r\\n        }\\r\\n\\r\\n        // Get hold of the absolute values of x, y and the denominator.\\r\\n        uint256 ax;\\r\\n        uint256 ay;\\r\\n        uint256 ad;\\r\\n        unchecked {\\r\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\r\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\r\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\r\\n        }\\r\\n\\r\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\r\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\r\\n        if (rAbs > uint256(type(int256).max)) {\\r\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\r\\n        }\\r\\n\\r\\n        // Get the signs of x, y and the denominator.\\r\\n        uint256 sx;\\r\\n        uint256 sy;\\r\\n        uint256 sd;\\r\\n        assembly {\\r\\n            sx := sgt(x, sub(0, 1))\\r\\n            sy := sgt(y, sub(0, 1))\\r\\n            sd := sgt(denominator, sub(0, 1))\\r\\n        }\\r\\n\\r\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\r\\n        // If yes, the result should be negative.\\r\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the square root of x, rounding down.\\r\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - This function does not work with fixed-point numbers.\\r\\n    ///\\r\\n    /// @param x The uint256 number for which to calculate the square root.\\r\\n    /// @return result The result as an uint256.\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\r\\n        uint256 xAux = uint256(x);\\r\\n        result = 1;\\r\\n        if (xAux >= 0x100000000000000000000000000000000) {\\r\\n            xAux >>= 128;\\r\\n            result <<= 64;\\r\\n        }\\r\\n        if (xAux >= 0x10000000000000000) {\\r\\n            xAux >>= 64;\\r\\n            result <<= 32;\\r\\n        }\\r\\n        if (xAux >= 0x100000000) {\\r\\n            xAux >>= 32;\\r\\n            result <<= 16;\\r\\n        }\\r\\n        if (xAux >= 0x10000) {\\r\\n            xAux >>= 16;\\r\\n            result <<= 8;\\r\\n        }\\r\\n        if (xAux >= 0x100) {\\r\\n            xAux >>= 8;\\r\\n            result <<= 4;\\r\\n        }\\r\\n        if (xAux >= 0x10) {\\r\\n            xAux >>= 4;\\r\\n            result <<= 2;\\r\\n        }\\r\\n        if (xAux >= 0x4) {\\r\\n            result <<= 1;\\r\\n        }\\r\\n\\r\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\r\\n        unchecked {\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1;\\r\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\r\\n            uint256 roundedDownResult = x / result;\\r\\n            return result >= roundedDownResult ? roundedDownResult : result;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0xcdd76086e0add052e009bcf1ec7c33d7fc9c8dab6191d889ebca889139cdca60\",\"license\":\"Unlicense\"},\"contracts/prb/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport \\\"./PRBMath.sol\\\";\\r\\n\\r\\n/// @title PRBMathUD60x18\\r\\n/// @author Paul Razvan Berg\\r\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\r\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\r\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\r\\n/// maximum values permitted by the Solidity type uint256.\\r\\nlibrary PRBMathUD60x18 {\\r\\n    /// @dev Half the SCALE number.\\r\\n    uint256 internal constant HALF_SCALE = 5e17;\\r\\n\\r\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\r\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\r\\n\\r\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\r\\n    uint256 internal constant MAX_UD60x18 =\\r\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\r\\n\\r\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\r\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\r\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\r\\n\\r\\n    /// @dev How many trailing decimals can be represented.\\r\\n    uint256 internal constant SCALE = 1e18;\\r\\n\\r\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\r\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\r\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        // The operations can never overflow.\\r\\n        unchecked {\\r\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\r\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\r\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\r\\n    ///\\r\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\r\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\r\\n    ///\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\r\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\r\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\r\\n        if (x > MAX_WHOLE_UD60x18) {\\r\\n            revert PRBMathUD60x18__CeilOverflow(x);\\r\\n        }\\r\\n        assembly {\\r\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\r\\n            let remainder := mod(x, SCALE)\\r\\n\\r\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\r\\n            let delta := sub(SCALE, remainder)\\r\\n\\r\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\r\\n            result := add(x, mul(delta, gt(remainder, 0)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\r\\n    ///\\r\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - The denominator cannot be zero.\\r\\n    ///\\r\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\r\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        result = PRBMath.mulDiv(x, SCALE, y);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\r\\n    function e() internal pure returns (uint256 result) {\\r\\n        result = 2_718281828459045235;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the natural exponent of x.\\r\\n    ///\\r\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - All from \\\"log2\\\".\\r\\n    /// - x must be less than 133.084258667509499441.\\r\\n    ///\\r\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\r\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\r\\n        if (x >= 133_084258667509499441) {\\r\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\r\\n        }\\r\\n\\r\\n        // Do the fixed-point multiplication inline to save gas.\\r\\n        unchecked {\\r\\n            uint256 doubleScaleProduct = x * LOG2_E;\\r\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\r\\n    ///\\r\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - x must be 192 or less.\\r\\n    /// - The result must fit within MAX_UD60x18.\\r\\n    ///\\r\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\r\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\r\\n        if (x >= 192e18) {\\r\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            // Convert x to the 192.64-bit fixed-point format.\\r\\n            uint256 x192x64 = (x << 64) / SCALE;\\r\\n\\r\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\r\\n            result = PRBMath.exp2(x192x64);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\r\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\r\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\r\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\r\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\r\\n        assembly {\\r\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\r\\n            let remainder := mod(x, SCALE)\\r\\n\\r\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\r\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Yields the excess beyond the floor of x.\\r\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\r\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\r\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\r\\n        assembly {\\r\\n            result := mod(x, SCALE)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\r\\n    ///\\r\\n    /// @dev Requirements:\\r\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\r\\n    ///\\r\\n    /// @param x The basic integer to convert.\\r\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\r\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            if (x > MAX_UD60x18 / SCALE) {\\r\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\r\\n            }\\r\\n            result = x * SCALE;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\r\\n    ///\\r\\n    /// @dev Requirements:\\r\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\r\\n    ///\\r\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        if (x == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            // Checking for overflow this way is faster than letting Solidity do it.\\r\\n            uint256 xy = x * y;\\r\\n            if (xy / x != y) {\\r\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\r\\n            }\\r\\n\\r\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\r\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\r\\n            result = PRBMath.sqrt(xy);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates 1 / x, rounding toward zero.\\r\\n    ///\\r\\n    /// @dev Requirements:\\r\\n    /// - x cannot be zero.\\r\\n    ///\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\r\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\r\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 1e36 is SCALE * SCALE.\\r\\n            result = 1e36 / x;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the natural logarithm of x.\\r\\n    ///\\r\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - All from \\\"log2\\\".\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - All from \\\"log2\\\".\\r\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\r\\n    ///\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\r\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\r\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\r\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\r\\n        // can return is 196205294292027477728.\\r\\n        unchecked {\\r\\n            result = (log2(x) * SCALE) / LOG2_E;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the common logarithm of x.\\r\\n    ///\\r\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\r\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - All from \\\"log2\\\".\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - All from \\\"log2\\\".\\r\\n    ///\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\r\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\r\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\r\\n        if (x < SCALE) {\\r\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\r\\n        }\\r\\n\\r\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\r\\n        // in this contract.\\r\\n        // prettier-ignore\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\r\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\r\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\r\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\r\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\r\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\r\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\r\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\r\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\r\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\r\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\r\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\r\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\r\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\r\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\r\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\r\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\r\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\r\\n            case 1000000000000000000 { result := 0 }\\r\\n            case 10000000000000000000 { result := SCALE }\\r\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\r\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\r\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\r\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\r\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\r\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\r\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\r\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\r\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\r\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\r\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\r\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\r\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\r\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\r\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\r\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\r\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\r\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\r\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\r\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\r\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\r\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\r\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\r\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\r\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\r\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\r\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\r\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\r\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\r\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\r\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\r\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\r\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\r\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\r\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\r\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\r\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\r\\n            default {\\r\\n                result := MAX_UD60x18\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (result == MAX_UD60x18) {\\r\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\r\\n            unchecked {\\r\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the binary logarithm of x.\\r\\n    ///\\r\\n    /// @dev Based on the iterative approximation algorithm.\\r\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\r\\n    ///\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\r\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\r\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\r\\n        if (x < SCALE) {\\r\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\r\\n        }\\r\\n        unchecked {\\r\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\r\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\r\\n\\r\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\r\\n            // because n is maximum 255 and SCALE is 1e18.\\r\\n            result = n * SCALE;\\r\\n\\r\\n            // This is y = x * 2^(-n).\\r\\n            uint256 y = x >> n;\\r\\n\\r\\n            // If y = 1, the fractional part is zero.\\r\\n            if (y == SCALE) {\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // Calculate the fractional part via the iterative approximation.\\r\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\r\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\r\\n                y = (y * y) / SCALE;\\r\\n\\r\\n                // Is y^2 > 2 and so in the range [2,4)?\\r\\n                if (y >= 2 * SCALE) {\\r\\n                    // Add the 2^(-m) factor to the logarithm.\\r\\n                    result += delta;\\r\\n\\r\\n                    // Corresponds to z/2 on Wikipedia.\\r\\n                    y >>= 1;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\r\\n    /// fixed-point number.\\r\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\r\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        result = PRBMath.mulDivFixedPoint(x, y);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\r\\n    function pi() internal pure returns (uint256 result) {\\r\\n        result = 3_141592653589793238;\\r\\n    }\\r\\n\\r\\n    /// @notice Raises x to the power of y.\\r\\n    ///\\r\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\r\\n    /// - Assumes 0^0 is 1.\\r\\n    ///\\r\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\r\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        if (x == 0) {\\r\\n            result = y == 0 ? SCALE : uint256(0);\\r\\n        } else {\\r\\n            result = exp2(mul(log2(x), y));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\r\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\r\\n    ///\\r\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - The result must fit within MAX_UD60x18.\\r\\n    ///\\r\\n    /// Caveats:\\r\\n    /// - All from \\\"mul\\\".\\r\\n    /// - Assumes 0^0 is 1.\\r\\n    ///\\r\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\r\\n    /// @param y The exponent as an uint256.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\r\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\r\\n        // Calculate the first iteration of the loop in advance.\\r\\n        result = y & 1 > 0 ? x : SCALE;\\r\\n\\r\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\r\\n        for (y >>= 1; y > 0; y >>= 1) {\\r\\n            x = PRBMath.mulDivFixedPoint(x, x);\\r\\n\\r\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\r\\n            if (y & 1 > 0) {\\r\\n                result = PRBMath.mulDivFixedPoint(result, x);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\r\\n    function scale() internal pure returns (uint256 result) {\\r\\n        result = SCALE;\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the square root of x, rounding down.\\r\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\r\\n    ///\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\r\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            if (x > MAX_UD60x18 / SCALE) {\\r\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\r\\n            }\\r\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\r\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\r\\n            result = PRBMath.sqrt(x * SCALE);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\r\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\r\\n    /// @return result The same number in basic integer form.\\r\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            result = x / SCALE;\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1b9d42c79e8ce067571eb13a9784e69221746832e857ec62d27a9461cc09f60b\",\"license\":\"Unlicense\"},\"contracts/stablecoin/IController.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n//controller contract responsible for providing initial liquidity to the\\r\\n//borrower cds market, collect winnings when default, and burn the corresponding DS\\r\\ninterface IController  {\\r\\n    struct MarketInfo {\\r\\n        address borrower;\\r\\n        address ammFactoryAddress; \\r\\n        address marketFactoryAddress;\\r\\n        uint256 liquidityAmountUSD;\\r\\n        uint256 marketID;\\r\\n        string description;\\r\\n        string[] names;\\r\\n        uint256[] odds;\\r\\n    }\\r\\n    \\r\\n    function verifyAddress(\\r\\n        uint256 nullifier_hash, \\r\\n        uint256 external_nullifier,\\r\\n        uint256[8] calldata proof\\r\\n    ) external;\\r\\n\\r\\n    function mintRepNFT(address NFT_address, address trader) external;\\r\\n\\r\\n    function addValidator(address validator_address) external;\\r\\n\\r\\n    function validators(address addr) external returns (bool);\\r\\n    \\r\\n    function verified(address addr) external returns (bool);\\r\\n\\r\\n\\r\\n    function initiateMarket_(\\r\\n        MarketInfo memory marketData, // marketID shouldn't be set. Everything else should be though\\r\\n        address recipient,\\r\\n        bytes32 loanID, \\r\\n        address bonding_curve_address, \\r\\n        address market_manager_address\\r\\n    ) external;\\r\\n\\r\\n\\r\\n    function resolveMarket_(\\r\\n        address recipient,\\r\\n        bytes32 loanID,\\r\\n        bool atLoss,\\r\\n        uint256 extra_gain, \\r\\n        uint256 principal_loss, \\r\\n        address market_manager_address\\r\\n    ) external;\\r\\n\\r\\n    function denyMarket(\\r\\n        address recipient,\\r\\n        bytes32 loanID,\\r\\n        uint256 marketId, \\r\\n        address market_manager_address\\r\\n    ) external;\\r\\n\\r\\n    function approveLoan(address recipient, bytes32 id, address marketFactory) external;\\r\\n\\r\\n    function canBeApproved(address borrower, \\r\\n        bytes32 loanID, \\r\\n        address marketFactoryAddress ) external returns(bool);\\r\\n\\r\\n    \\r\\n\\r\\n}\",\"keccak256\":\"0x58bfb7348dc3c6805e757e2c8539d41a11daadc3aefa14baf56135865afd96e0\"},\"contracts/stablecoin/IMarketManager.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./owned.sol\\\";\\r\\nimport \\\"../turbo/AMMFactory.sol\\\"; \\r\\nimport \\\"./reputationtoken.sol\\\"; \\r\\nimport \\\"../bonds/Ibondingcurve.sol\\\"; \\r\\n\\r\\n\\r\\ninterface IMarketManager {\\r\\n\\t/**\\r\\n\\t@dev initializes bonding curve for given market.\\r\\n\\t */\\r\\n\\tfunction initiate_bonding_curve(uint256 marketId) \\r\\n\\t\\texternal;\\r\\n\\r\\n\\r\\n\\tfunction setMarketRestrictionData(\\t\\r\\n\\t\\tbool _duringMarketAssessment,\\r\\n\\t\\tbool _onlyReputable,  \\r\\n\\t\\tuint256 marketId,\\r\\n\\t\\tuint256 min_rep_score)\\r\\n\\t\\texternal; \\r\\n\\r\\n \\tfunction deactivateMarket(uint256 marketId) external; \\r\\n\\r\\n\\tfunction setAssessmentPhase(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tbool _duringMarketAssessment,\\r\\n\\t\\tbool _onlyReputable) \\r\\n\\t\\texternal;\\r\\n\\t\\r\\n\\r\\n\\tfunction canBuy(\\r\\n\\t\\taddress trader,\\r\\n\\t\\taddress ammFactoryAddress, \\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\tuint256 amount,//this is in DS with decimals \\r\\n\\t\\tuint256 marketId) external view returns(bool);\\r\\n\\r\\n\\r\\n\\r\\n\\tfunction buy(\\r\\n\\t\\tAMMFactory ammFactory, \\r\\n\\t\\tAbstractMarketFactoryV3 marketFactory, \\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn\\r\\n        ) external returns (uint256);\\r\\n\\r\\n\\tfunction sell(\\r\\n\\t\\tAMMFactory ammFactory, \\r\\n\\t\\tAbstractMarketFactoryV3 marketFactory, \\r\\n        uint256 _marketId,\\r\\n        uint256 _zcb_amount_in\\r\\n        ) external returns (uint256); \\r\\n\\t\\r\\n\\r\\n\\tfunction update_redemption_price(\\r\\n\\t\\tuint256 marketId,\\r\\n\\t\\tbool atLoss, \\r\\n\\t\\tuint256 extra_gain, \\r\\n\\t\\tuint256 principal_loss) \\r\\n\\t\\texternal;\\r\\n\\r\\n\\tfunction handle_maturity(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tbool atLoss, \\r\\n\\t\\tuint256 principal_loss) \\r\\n\\t\\texternal; \\r\\n\\r\\n\\tfunction denyMarket(\\r\\n\\t\\tuint256 marketId)\\r\\n\\t\\texternal; \\r\\n\\r\\n\\tfunction borrow_with_collateral(\\r\\n\\t\\tuint256 _marketId, \\r\\n\\t\\tuint256 requested_zcb, \\r\\n\\t\\taddress trader\\r\\n\\t\\t) external; \\r\\n\\r\\n\\tfunction repay_for_collateral(\\r\\n\\t\\tuint256 _marketId, \\r\\n\\t\\tuint256 repaying_zcb, \\r\\n\\t\\taddress trader\\r\\n\\t\\t) external;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x88f8ff1c8952ee9577a5c46f566cefc8b6cbccd2c8bc20df9aaecf33924f4166\"},\"contracts/stablecoin/IReputationNFT.sol\":{\"content\":\"pragma solidity ^0.8.4; \\r\\n\\r\\n\\r\\ninterface IReputationNFT {\\r\\n  \\r\\n}\",\"keccak256\":\"0x28e6db727fb510b0e155ac8873ebdd44b6051412e8f6742b128d6c00d739bed9\"},\"contracts/stablecoin/controller.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport \\\"./IController.sol\\\";\\r\\nimport \\\"../turbo/TrustedMarketFactoryV3.sol\\\";\\r\\nimport {MarketManager} from \\\"./marketmanager.sol\\\";\\r\\nimport {ReputationNFT} from \\\"./reputationtoken.sol\\\";\\r\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\r\\nimport {LinearBondingCurve} from \\\"../bonds/LinearBondingCurve.sol\\\";\\r\\nimport {BondingCurve} from \\\"../bonds/bondingcurve.sol\\\";\\r\\nimport {Vault} from \\\"../vaults/vault.sol\\\";\\r\\nimport {Instrument} from \\\"../vaults/instrument.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@interep/contracts/IInterep.sol\\\";\\r\\n// Controller contract responsible for providing initial liquidity to the\\r\\n// borrower cds market, collect winnings when default, and burn the corresponding DS\\r\\ncontract Controller {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct MarketData {\\r\\n        address instrument_address;\\r\\n        address recipient;\\r\\n    }\\r\\n\\r\\n    event MarketInitiated(uint256 marketId, address recipient);\\r\\n\\r\\n    mapping(address => bool) public  validators; \\r\\n    mapping(address => bool) public  verified;\\r\\n    mapping(uint256 => MarketData) public market_data; // id => recipient\\r\\n    mapping(address=> uint256) public ad_to_id; //utilizer address to marketId, only one market ID per address at given moment, can generalize later\\r\\n\\r\\n    address[] validators_array;\\r\\n\\r\\n    address creator_address;\\r\\n\\r\\n    IInterep interep;\\r\\n    TrustedMarketFactoryV3 marketFactory;\\r\\n    MarketManager marketManager;\\r\\n    Vault public vault;\\r\\n    ReputationNFT repNFT; \\r\\n\\r\\n    uint256 constant TWITTER_UNRATED_GROUP_ID = 16106950158033643226105886729341667676405340206102109927577753383156646348711;\\r\\n    bytes32 constant private signal = bytes32(\\\"twitter-unrated\\\");\\r\\n    uint256 insurance_constant = 5e5; //1 is 1e6, also needs to be able to be changed \\r\\n    uint256 constant PRICE_PRECISION = 1e18; \\r\\n    \\r\\n    // Bond Curve Name\\r\\n    string constant baseName = \\\"Bond\\\";\\r\\n    string constant baseSymbol = \\\"B\\\";\\r\\n    uint256 nonce = 0;\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n    modifier onlyValidator() {\\r\\n        require(validators[msg.sender] == true || msg.sender == creator_address, \\\"Only Validators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n \\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == creator_address, \\\"Only Owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (\\r\\n        address _creator_address,\\r\\n        address _interep_address\\r\\n    ) {\\r\\n        creator_address = _creator_address;\\r\\n        interep = IInterep(_interep_address);\\r\\n    }\\r\\n\\r\\n    /*----Setup Functions----*/\\r\\n\\r\\n    function setMarketManager(address _marketManager) public onlyOwner {\\r\\n        require(_marketManager != address(0));\\r\\n       // require(address(marketManager) == address(0));\\r\\n        marketManager = MarketManager(_marketManager);\\r\\n    }\\r\\n\\r\\n    function setVault(address _vault) public onlyOwner {\\r\\n        require(_vault != address(0));\\r\\n       // require(address(vault) == address(0));\\r\\n        vault = Vault(_vault);\\r\\n    }\\r\\n\\r\\n    function setMarketFactory(address _marketFactory) public onlyOwner {\\r\\n        require(_marketFactory != address(0));\\r\\n       // require(address(marketFactory) == address(0));\\r\\n        marketFactory = TrustedMarketFactoryV3(_marketFactory);\\r\\n    }\\r\\n\\r\\n    function setReputationNFT(address NFT_address) public onlyOwner{\\r\\n        repNFT = ReputationNFT(NFT_address); \\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice curveparams for linear bonds \\r\\n    /// b is a initial price parameter we choose i.e 0.9, a is a function of b\\r\\n    /// a = (1-b) **2 / 2* interest \\r\\n    /// @dev both principal/interest should be in price precision\\r\\n    /// @param interest is amount of interest in dollars, not percentage,\\r\\n    /// returns a,b is both in 18 price_precision\\r\\n    function getCurveParams(uint256 principal, uint256 interest) internal pure returns (uint256 a, uint256 b){\\r\\n\\r\\n        uint price_precision = 1e18; \\r\\n        b = 9e17; //do setup\\r\\n        a = ((price_precision - b)**2)/price_precision; \\r\\n       // a = price_precision - (2*b) + (b*b)/price_precision; \\r\\n        //a = 1;\\r\\n      //  b = 1;\\r\\n    }\\r\\n\\r\\n    function verifyAddress(\\r\\n        uint256 nullifier_hash, \\r\\n        uint256 external_nullifier,\\r\\n        uint256[8] calldata proof\\r\\n    ) external  {\\r\\n        //require(!verified[msg.sender], \\\"address already verified\\\");\\r\\n        //interep.verifyProof(TWITTER_UNRATED_GROUP_ID, signal, nullifier_hash, external_nullifier, proof);\\r\\n        verified[msg.sender] = true;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    function mintRepNFT(\\r\\n        address NFT_address,\\r\\n        address trader\\r\\n        ) external  {\\r\\n        ReputationNFT(NFT_address).mint(msg.sender);\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    //Validator should be added for each borrower\\r\\n    function addValidator(address validator_address) external  {\\r\\n        require(validator_address != address(0), \\\"Zero address detected\\\");\\r\\n        require(validators[validator_address] == false, \\\"Address already exists\\\");\\r\\n\\r\\n        validators[validator_address] = true; \\r\\n        validators_array.push(validator_address);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     @dev initiates market, called by frontend loan proposal or instrument form submit button.\\r\\n     @param recipient is the \\r\\n     @dev a and b must be 60.18 format\\r\\n     */\\r\\n    function initiateMarket(\\r\\n        address recipient,\\r\\n        Vault.InstrumentData memory instrumentData // marketId should be set to zero, no way of knowing.\\r\\n    ) external  {\\r\\n        uint256 a;\\r\\n        uint256 b;\\r\\n        (a, b) = getCurveParams(instrumentData.principal, instrumentData.expectedYield);\\r\\n\\r\\n        string memory name = string(abi.encodePacked(baseName, \\\"-\\\", Strings.toString(nonce)));\\r\\n        string memory symbol = string(abi.encodePacked(baseSymbol, Strings.toString(nonce)));\\r\\n        nonce++;\\r\\n\\r\\n        OwnedERC20 zcb = new LinearBondingCurve(\\r\\n            name,\\r\\n            symbol,\\r\\n            address(marketManager), // owner\\r\\n            address(vault), \\r\\n            a,\\r\\n            b\\r\\n        );\\r\\n\\r\\n\\r\\n        uint256[] memory odds = new uint256[](2); //TODO get rid of this \\r\\n        odds[0] = 0;\\r\\n        odds[1] = 0; \\r\\n\\r\\n        uint256 marketId = marketFactory.createZCBMarket(\\r\\n            address(this), // controller is the settlement address\\r\\n            instrumentData.description,\\r\\n            odds,\\r\\n            zcb\\r\\n        );\\r\\n\\r\\n\\r\\n        ad_to_id[recipient] = marketId; \\r\\n        instrumentData.marketId = marketId;\\r\\n\\r\\n\\r\\n        vault.addProposal(\\r\\n            instrumentData\\r\\n        );\\r\\n\\r\\n        market_data[marketId] = MarketData(address(instrumentData.Instrument_address), recipient);\\r\\n        marketManager.setAssessmentPhase(marketId, true, true);  \\r\\n\\r\\n        emit MarketInitiated(marketId, recipient);\\r\\n    }\\r\\n   \\r\\n    \\r\\n   \\r\\n    /**\\r\\n    @notice main function called at maturity OR premature resolve of instrument(from early default)\\r\\n    @dev triggered by resolve Loan \\r\\n    @param atLoss: when actual returns lower than expected \\r\\n    @param principal_loss: if total returned less than principal, principal-total returned, this is total loss\\r\\n    */\\r\\n    function resolveMarket(\\r\\n        uint256 marketId,\\r\\n        bool atLoss,\\r\\n        uint256 extra_gain,\\r\\n        uint256 principal_loss\\r\\n    ) external  {\\r\\n        marketManager.update_redemption_price(marketId, atLoss, extra_gain, principal_loss); \\r\\n        marketManager.handle_maturity(marketId, atLoss, principal_loss); \\r\\n        marketManager.deactivateMarket(marketId, atLoss);\\r\\n        //update repNFT score\\r\\n        marketManager.updateReputation(marketId);\\r\\n        //delete market_data[marketId]?\\r\\n\\r\\n        uint256 winning_outcome = 0; //TODO  \\r\\n        marketFactory.trustedResolveMarket(marketId, winning_outcome);\\r\\n    }\\r\\n\\r\\n    /// @notice called by the validator when market conditions are met\\r\\n    function approveMarket( \\r\\n        uint256 marketId\\r\\n        ) external onlyValidator{\\r\\n        if (!marketManager.marketCondition(marketId)) revert(\\\"Market Condition Not met\\\"); \\r\\n        require(!marketManager.onlyReputable(marketId), \\\"Market Phase err\\\"); \\r\\n        marketManager.setAssessmentPhase(marketId, false, false); \\r\\n        trustInstrument(marketId); \\r\\n\\r\\n        // Deposit to the instrument contract\\r\\n        uint256 principal = vault.fetchInstrumentData(marketId).principal; \\r\\n        //maybe this should be separated to prevent attacks \\r\\n        vault.depositIntoInstrument(Instrument(market_data[marketId].instrument_address), principal );\\r\\n        vault.onMarketApproval(marketId);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n    Market is denied by validator or automatically if conditions are not met \\r\\n    */\\r\\n    function denyMarket(\\r\\n        uint256 marketId\\r\\n    ) external  onlyValidator {\\r\\n        marketManager.denyMarket(marketId);\\r\\n        //TrustedMarketFactoryV3 marketFactory = TrustedMarketFactoryV3(marketInfo.marketFactoryAddress);\\r\\n        uint256 winning_outcome = 0; //TODO  \\r\\n        marketFactory.trustedResolveMarket(marketId, winning_outcome);\\r\\n    }\\r\\n\\r\\n\\r\\n    function trustInstrument(uint256 marketId) private  {\\r\\n        vault.trustInstrument(Instrument(market_data[marketId].instrument_address));\\r\\n    }\\r\\n\\r\\n                        /* --------VIEW FUNCTIONS---------  */\\r\\n    function getMarketId(address recipient) public view returns(uint256){\\r\\n        return ad_to_id[recipient];\\r\\n    }\\r\\n\\r\\n    function getZCB(uint256 marketId) public view returns (OwnedERC20){\\r\\n        AbstractMarketFactoryV3.Market memory market = marketFactory.getZCBMarket(marketId);\\r\\n        return OwnedERC20(market.shareTokens[0]);\\r\\n    }\\r\\n    function getZCB_ad(uint256 marketId) public view returns (address){\\r\\n        AbstractMarketFactoryV3.Market memory market = marketFactory.getZCBMarket(marketId);\\r\\n        return address(OwnedERC20(market.shareTokens[0]));\\r\\n    }\\r\\n    function canBeApproved(uint256 marketId) public view returns (bool) {\\r\\n        //TODO\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function isVerified(address addr) view public returns (bool) {\\r\\n        return verified[addr];\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x9e31b7f86179ae191202c1a88cd4fbd13393c5174bca77d5a412422dbf699b04\"},\"contracts/stablecoin/marketmanager.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./owned.sol\\\";\\r\\nimport \\\"../turbo/AMMFactory.sol\\\"; \\r\\nimport \\\"./reputationtoken.sol\\\"; \\r\\nimport {BondingCurve} from \\\"../bonds/bondingcurve.sol\\\";\\r\\nimport {Controller} from \\\"./controller.sol\\\";\\r\\nimport \\\"./IMarketManager.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"../prb/PRBMathUD60x18.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract MarketManager is Owned {\\r\\n\\t/*Wrapper contract for bondingcurve markets, trades are restricted/funneled through here\\r\\n\\t\\tTypes of restrictions are \\r\\n\\t\\t1) Being verified \\r\\n\\t\\t2) reputation to buy early \\r\\n\\r\\n\\t\\t4) Restriction to quantity \\r\\n\\r\\n\\tMisc. \\r\\n\\t\\ta) To avoid securitization, enforce selling Fee  \\r\\n\\t*/\\r\\n\\tusing PRBMathUD60x18 for uint256;\\r\\n\\r\\n    uint256 private constant PRICE_PRECISION = 1e6; \\r\\n\\r\\n\\tReputationNFT rep;\\r\\n    Controller controller;\\r\\n\\r\\n    mapping(uint256=>uint256) private redemption_prices; //redemption price for each market, set when market resolves \\r\\n    mapping(uint256=>mapping(address=>uint256)) private assessment_collaterals;  //marketId-> trader->collateralIn\\r\\n    mapping(uint256=>mapping(address=>uint256)) private assessment_prices; \\r\\n    mapping(uint256=>mapping(address=>bool)) private assessment_trader; \\r\\n\\tmapping(uint256=> MarketPhaseData) restriction_data; // market ID => restriction data\\r\\n\\tmapping(uint256=> uint256) collateral_pot; // marketID => total collateral recieved (? isn't this redundant bc bonding curves fundsperBonds)\\r\\n\\tmapping(uint256=> CDP) private debt_pools; // marketID => debt info\\r\\n\\r\\n\\tstruct CDP{\\r\\n\\t\\tmapping(address=>address) collateral_address; \\r\\n\\t\\tmapping(address=>uint256) collateral_amount;\\r\\n\\t\\tmapping(address=>uint256) borrowed_amount; \\r\\n\\t\\tuint256 total_debt; \\r\\n\\t\\tuint256 total_collateral; //only usdc \\r\\n\\t}\\r\\n\\r\\n\\tstruct MarketPhaseData {\\r\\n\\t\\tbool duringMarketAssessment;\\r\\n\\t\\tbool onlyReputable;\\r\\n\\t\\tbool marketDenied;\\r\\n\\t\\tuint256 min_rep_score;\\r\\n\\t\\tbool atLoss; \\r\\n\\t\\t// buy threshold should be the max quantity of bond tokesn bought\\r\\n\\t}\\r\\n\\r\\n\\tuint256 private INSURANCE_CONSTANT = 5 * 10**5; // 0.5 for DS decimal format.\\r\\n\\tuint256 private REPUTATION_CONSTANT = 3 * 10**5; \\r\\n\\tuint256 private base_budget; \\r\\n\\t\\r\\n    modifier onlyController(){\\r\\n        require(address(controller) == msg.sender || msg.sender == owner || msg.sender == address(this), \\\"is not controller\\\"); \\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress _creator_address,\\r\\n\\t\\taddress reputationNFTaddress,  \\r\\n\\t\\taddress _controllerAddress\\r\\n\\t) Owned(_creator_address){\\r\\n\\t\\trep = ReputationNFT(reputationNFTaddress);\\r\\n\\t\\tcontroller = Controller(_controllerAddress);\\r\\n\\t\\tbase_budget = 100*PRICE_PRECISION; \\r\\n\\t}\\r\\n\\r\\n\\t/*----Phase Functions----*/\\r\\n\\r\\n\\t/*\\r\\n\\t1.When Market is intialized, set both params as true\\r\\n\\t2.When reputation constant bought, change _onlyReputable to false \\r\\n\\t3.When validator approves, set _duringMarketAssessment to false\\r\\n\\t*/\\r\\n\\tfunction setAssessmentPhase(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tbool _duringMarketAssessment,\\r\\n\\t\\tbool _onlyReputable\\r\\n\\t) external  onlyController {\\r\\n\\t\\tMarketPhaseData storage data = restriction_data[marketId]; \\r\\n\\t\\tdata.onlyReputable = _onlyReputable; \\r\\n\\t\\tdata.duringMarketAssessment = _duringMarketAssessment; \\r\\n\\t}\\r\\n\\r\\n\\t/* \\r\\n\\tCalled when market should end, a) when denied b) when maturity \\r\\n\\t*/\\r\\n\\tfunction deactivateMarket(uint256 marketId, bool atLoss) external  onlyController{\\r\\n\\t\\trestriction_data[marketId].marketDenied = true; \\r\\n\\t\\trestriction_data[marketId].atLoss = atLoss; \\r\\n\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/**\\r\\n\\t@dev Sets reputation score requirements and for the market, called by the controller when\\r\\n\\tmarket is initiated. Buy threshold is set after the assessment is completed \\r\\n\\t */\\r\\n\\tfunction setMarketRestrictionData(\\r\\n\\t\\tbool _duringMarketAssessment,\\r\\n\\t\\tbool _onlyReputable, \\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 min_rep_score\\r\\n\\t) external  onlyController {\\r\\n\\t\\tmin_rep_score = getMinRepScore(marketId);\\r\\n\\t\\trestriction_data[marketId] = MarketPhaseData(\\r\\n\\t\\t\\t_duringMarketAssessment, \\r\\n\\t\\t\\t_onlyReputable,\\r\\n\\t\\t\\tfalse,\\r\\n\\t\\t\\tmin_rep_score, \\r\\n\\t\\t\\tfalse\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\t/*---View Functions---*/\\r\\n\\r\\n\\t/* \\r\\n\\tReturns Minimal reputation score to participate in the onlyReputation phase\\r\\n\\tTODO\\r\\n\\t*/\\r\\n\\tfunction getMinRepScore(uint256 marketId) internal view returns(uint256){\\r\\n\\t\\treturn restriction_data[marketId].min_rep_score;\\r\\n\\t}\\r\\n\\r\\n\\t/* Conditions */\\r\\n \\t\\r\\n\\t/**\\r\\n\\t @dev verification of trader initializes reputation score at 0, to gain reputation need to participate in markets.\\r\\n\\t */\\r\\n\\tfunction isVerified(address trader) internal view returns(bool){\\r\\n\\t\\treturn (controller.isVerified(trader) || trader == owner);\\r\\n\\t\\t//return (rep.balanceOf(trader) >= 1 || trader == owner); \\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction isReputable(address trader, uint256 marketId) internal view returns(bool){\\r\\n\\t\\treturn (restriction_data[marketId].min_rep_score <= rep.getReputationScore(trader) || trader == owner); \\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\tReturns true if during risk assessment phase\\r\\n\\t*/\\r\\n\\tfunction duringMarketAssessment(\\r\\n\\t\\tuint256 marketId) internal view returns(bool){\\r\\n\\t\\treturn restriction_data[marketId].duringMarketAssessment; \\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\tReturns true when market only allows reputable traders\\r\\n\\t*/\\r\\n\\tfunction onlyReputable(\\r\\n\\t\\tuint256 marketId\\r\\n\\t\\t) public view returns(bool){\\r\\n\\t\\treturn restriction_data[marketId].onlyReputable; \\r\\n\\r\\n\\t}\\r\\n\\r\\n\\tfunction isMarketApproved(uint256 marketId) public view returns(bool){\\r\\n\\t\\treturn(!restriction_data[marketId].duringMarketAssessment && !restriction_data[marketId].marketDenied); \\r\\n\\t\\t\\r\\n\\t}\\r\\n\\r\\n\\t//TODO Need to find out if the given market has enough (liquidity-required liq)\\r\\n\\tfunction exposureSet(address trader, address ammFactoryAddress, address marketId) internal view returns(bool){\\r\\n\\t\\treturn true; \\r\\n\\t}\\r\\n\\r\\n\\tfunction marketActive(uint256 marketId) public view returns(bool){\\r\\n\\t\\treturn !restriction_data[marketId].marketDenied; \\r\\n\\t}\\r\\n\\r\\n\\t/// @notice returns true if amount bought is greater than the insurance threshold\\r\\n\\tfunction marketCondition(uint256 marketId) public view returns(bool){\\r\\n\\t\\tuint256 principal = controller.vault().fetchInstrumentData(marketId).principal;\\r\\n\\t\\tuint256 total_bought = BondingCurve(address(controller.getZCB(marketId))).getTotalCollateral();\\r\\n\\t\\treturn (total_bought >= (principal * INSURANCE_CONSTANT)/PRICE_PRECISION); \\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction getDebtPosition(address trader, uint256 marketId) public view returns(uint256, uint256){\\r\\n\\t\\tCDP storage cdp = debt_pools[marketId];\\r\\n\\t\\treturn (cdp.collateral_amount[trader], cdp.borrowed_amount[trader]);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice get trade budget = f(reputation)\\r\\n\\t/// sqrt for now \\r\\n\\tfunction getTraderBudget(address trader) public view returns(uint256){\\r\\n\\t\\tuint256 repscore = rep.getReputationScore(trader); \\r\\n\\t\\treturn sqrt(repscore) + base_budget; \\r\\n  \\t\\r\\n\\t}\\r\\n \\t\\r\\n \\t/// @notice computes the price for ZCB one needs to short at to completely\\r\\n \\t/// hedge for the case of maximal loss, function of principal and interest\\r\\n\\tfunction getHedgePrice(uint256 marketId) public view returns(uint256){\\r\\n\\t\\tuint256 principal = controller.vault().fetchInstrumentData(marketId).principal; \\r\\n\\t\\tuint256 yield = controller.vault().fetchInstrumentData(marketId).expectedYield; \\r\\n\\r\\n\\t\\tuint256 den = (principal * (PRICE_PRECISION - INSURANCE_CONSTANT))/PRICE_PRECISION; \\r\\n\\t\\treturn PRICE_PRECISION -  (yield*PRICE_PRECISION)/den;\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice computes maximum amount of quantity that trader can short while being hedged\\r\\n\\t/// such that when he loses his loss will be offset by his gains  \\r\\n\\tfunction getHedgeQuantity(address trader, uint256 marketId) public view returns(uint256){\\r\\n\\t\\tuint256 principal = controller.vault().fetchInstrumentData(marketId).principal; \\r\\n\\t\\tuint256 holdings =  controller.vault().balanceOf(trader);\\r\\n\\t\\tuint256 marketCap = controller.vault().totalSupply(); \\r\\n\\t\\tuint num = (principal * (PRICE_PRECISION - INSURANCE_CONSTANT)/PRICE_PRECISION) * holdings; \\r\\n\\t\\treturn num/marketCap; \\r\\n\\t}\\t\\r\\n\\r\\n\\t/// @notice trader can only buy within their budget limit \\r\\n\\t/// @dev Called offchain before doTrade contract calls \\r\\n\\tfunction canBuy(\\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amount, //this is in DS with decimals.\\r\\n\\t\\tuint256 marketId\\r\\n\\t) public returns(bool) {\\r\\n\\t\\trequire(marketActive(marketId), \\\"Market Not Active\\\"); \\r\\n\\t\\tbool _duringMarketAssessment = duringMarketAssessment(marketId);\\r\\n\\t\\tbool _onlyReputable =  onlyReputable(marketId);\\r\\n\\r\\n\\t\\tif (_duringMarketAssessment){\\r\\n\\t\\t\\trequire(isVerified(trader), \\\"User Not Verified\\\");\\r\\n\\t\\t\\trequire(getTraderBudget(trader)>= amount, \\\"Amount Exceeds Budget\\\"); \\r\\n\\t\\t}\\r\\n\\r\\n  \\t\\t//During the early risk assessment phase only reputable can buy \\r\\n\\t\\tif (_onlyReputable){\\r\\n\\t\\t\\trequire(_duringMarketAssessment, \\\"Market needs to be in assessment phase\\\"); \\r\\n\\t\\t\\trequire(isReputable(trader, marketId));\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//If after assessment there is a set buy threshold, people can't buy above this threshold\\r\\n\\t\\tif (!_duringMarketAssessment){\\r\\n\\t\\t\\r\\n\\t\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(marketId)));\\r\\n\\t\\t\\tuint256 tokens_bought = zcb.calculatePurchaseReturn(amount);\\r\\n\\t\\t\\tuint256 price_after_trade = zcb.calculateExpectedPrice(tokens_bought);\\r\\n\\t\\t\\tuint256 price_upper_bound = zcb.getUpperBound();\\r\\n\\r\\n\\t\\t\\trequire(price_upper_bound > 0, \\\"Restrictions need to be set\\\"); \\r\\n\\t\\t\\trequire(price_upper_bound > price_after_trade, \\\"Quantity exceeds buy threshold\\\"); \\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn true; \\r\\n\\t\\t// require(_duringMarketAssessment, \\\"Sells not allowed during assessments\\\");\\r\\n\\t\\t// require(exposureset(trader, ammFactoryAddress, marketId), \\\"Not enough liquidity\\\");\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t\\r\\n\\r\\n\\r\\n\\tfunction canSell(\\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amount, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) internal view returns(bool) {\\r\\n\\t\\trequire(marketActive(marketId), \\\"Market Not Active\\\"); \\r\\n\\t\\tbool _duringMarketAssessment = duringMarketAssessment( marketId);\\r\\n\\t\\tif (_duringMarketAssessment){\\r\\n\\t\\t\\trequire(isVerified(trader), \\\"User Not Verified\\\");\\r\\n\\t\\t}\\r\\n\\t\\treturn true; \\r\\n\\t}\\r\\n\\r\\n\\t\\r\\n\\r\\n\\t/// @notice During assessment phase, need to log the trader's \\r\\n\\t/// total collateral when he bought zcb. Trader can only redeem collateral in \\r\\n\\t/// when market is not approved \\r\\n\\t/// @param priceOut is the price of the zcb after the trader made his trade\\r\\n\\tfunction log_assessment_trade(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress trader, \\r\\n\\t\\tuint256 amountOut, \\r\\n\\t\\tuint256 collateralIn,\\r\\n\\t\\tuint256 priceOut)\\r\\n\\t\\tinternal \\r\\n\\t{\\t\\r\\n\\t\\tassessment_trader[marketId][trader] = true; \\r\\n\\t\\tassessment_collaterals[marketId][trader] = collateralIn;\\r\\n\\t\\tassessment_prices[marketId][trader] = priceOut; \\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/* \\r\\n\\tAfter market is denied, redeem every zcb trader has for his collateral \\r\\n\\t*/\\r\\n\\tfunction redeemPostAssessment(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress trader \\r\\n\\t) public {\\r\\n\\t\\trequire(restriction_data[marketId].marketDenied, \\\"Market Still During Assessment\\\");\\r\\n\\t\\tuint256 collateral_amount = assessment_collaterals[marketId][trader]; \\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(marketId))); // SOMEHOW GET ZCB\\r\\n\\t\\tzcb.redeemPostAssessment(trader, collateral_amount); // SOMEHOW GET ZCB\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice denies market from validator \\r\\n\\tfunction denyMarket(\\r\\n\\t\\tuint256 marketId\\r\\n\\t) external  onlyController {\\r\\n\\t\\trequire(marketActive(marketId), \\\"Market Not Active\\\"); \\r\\n\\t\\trequire(restriction_data[marketId].duringMarketAssessment, \\\"Not in assessment\\\"); \\r\\n\\t\\tMarketPhaseData storage data = restriction_data[marketId]; \\r\\n\\t\\tdata.marketDenied = true; \\r\\n\\t\\tdata.duringMarketAssessment = false; \\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\tfunction buy(\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn\\r\\n    ) external  returns (uint256){\\r\\n\\t\\trequire(canBuy(msg.sender,\\r\\n\\t\\t \\t_collateralIn, \\r\\n\\t\\t \\t_marketId),\\\"Trade Restricted\\\"\\r\\n\\t\\t);\\r\\n\\r\\n\\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(_marketId))); // SOMEHOW GET ZCB\\r\\n\\t\\tuint256 amountOut = zcb.trustedBuy(msg.sender, _collateralIn);\\r\\n \\r\\n \\t\\t//Need to log assessment trades for updating reputation scores or returning collateral\\r\\n \\t\\t//when market denied \\r\\n\\t\\tif (duringMarketAssessment(_marketId)){\\r\\n\\t\\t\\tuint256 priceOut = zcb.calculateExpectedPrice(0); \\r\\n\\t\\t\\tlog_assessment_trade(_marketId, msg.sender, amountOut, _collateralIn, priceOut);\\r\\n\\r\\n\\t\\t\\t//  keeps track of amount bought during reputation phase\\r\\n\\t\\t\\t// and make transitions from onlyReputation true->false\\r\\n\\t\\t\\tuint256 principal = controller.vault().fetchInstrumentData(_marketId).principal;\\r\\n\\t\\t\\tuint256 total_bought = zcb.getTotalCollateral();\\r\\n\\r\\n\\t\\t\\tif (onlyReputable(_marketId)){\\r\\n\\r\\n\\t\\t\\t\\tif (total_bought > (REPUTATION_CONSTANT * principal)/PRICE_PRECISION){\\r\\n\\t\\t\\t\\t\\tthis.setAssessmentPhase(_marketId, true, false); \\r\\n\\t\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn amountOut; \\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction sell(\\r\\n        uint256 _marketId,\\r\\n        uint256 _zcb_amount_in\\r\\n    ) external  returns (uint256){\\r\\n\\r\\n\\t\\trequire(canSell(msg.sender, \\r\\n\\t\\t \\t_zcb_amount_in, \\r\\n\\t\\t \\t_marketId),\\\"Trade Restricted\\\");\\r\\n\\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(_marketId))); // SOMEHOW GET ZCB\\r\\n\\t\\tuint256 amountOut = zcb.trustedSell(msg.sender, _zcb_amount_in);\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/* \\r\\n\\tFor now only allow collateral to be ds\\r\\n\\t*/\\r\\n\\tfunction borrow_with_collateral(\\r\\n\\t\\tuint256 _marketId, \\r\\n\\t\\tuint256 requested_zcb, \\r\\n\\t\\taddress trader\\r\\n\\t\\t) external {\\r\\n\\t\\t//1.Use 100 ds as collateral to borrow 100zcb 1:1, only this for now \\r\\n\\t\\t//2.use 0.1eth(170) as collateral to borrow 100zcb =>100/170 collateral ratio\\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(_marketId))); // SOMEHOW GET ZCB\\r\\n\\t\\taddress collateral_address = zcb.getCollateral();\\r\\n\\t\\tSafeERC20.safeTransferFrom(IERC20(collateral_address), trader, address(zcb), requested_zcb);\\r\\n\\r\\n\\t\\t// SafeERC20.safeTransferFrom(IERC20(collateral_address), trader, address(this), requested_zcb); \\r\\n\\t\\tuint256 _collateralIn = requested_zcb; \\r\\n\\r\\n\\t\\tCDP storage cdp = debt_pools[_marketId];\\r\\n\\t\\tcdp.collateral_amount[trader] += _collateralIn; \\r\\n\\t\\tcdp.borrowed_amount[trader] += requested_zcb;  \\r\\n\\t\\tcdp.total_debt += requested_zcb; \\r\\n\\t\\tcdp.total_collateral += _collateralIn; //only ds \\r\\n\\t\\tcollateral_pot[_marketId] += _collateralIn; //Total ds collateral \\r\\n\\r\\n\\t\\tzcb.trustedMint(trader, requested_zcb);\\r\\n\\t}\\r\\n\\r\\n\\t/*\\r\\n\\tTrader provides zcb and receives back collateral \\r\\n\\t */\\r\\n\\tfunction repay_for_collateral(\\r\\n\\t\\tuint256 _marketId, \\r\\n\\t\\tuint256 repaying_zcb, \\r\\n\\t\\taddress trader\\r\\n\\t) external {\\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(_marketId)));\\r\\n\\t\\taddress collateral_address = zcb.getCollateral();\\r\\n\\t\\tzcb.trustedBurn(trader, repaying_zcb);\\r\\n\\t\\t// address collateral_address = BondingCurve(bondingCurveAddress).getCollateral(); \\r\\n\\t\\t// BondingCurve(bondingCurveAddress).burn(_marketId, repaying_zcb, trader); \\r\\n\\t\\tuint256 _collateralOut = repaying_zcb; \\r\\n\\r\\n\\t\\tCDP storage cdp = debt_pools[_marketId];\\r\\n\\t\\tcdp.collateral_amount[trader] -= _collateralOut;\\r\\n\\t\\tcdp.borrowed_amount[trader] -= repaying_zcb;\\r\\n\\t\\tcdp.total_debt -= repaying_zcb;\\r\\n\\t\\tcdp.total_collateral -= _collateralOut;\\r\\n\\t\\tcollateral_pot[_marketId] -= _collateralOut;\\r\\n\\r\\n\\t\\t// SafeERC20.safeTransfer(IERC20(collateral_address), trader, _collateralOut);\\r\\n\\t\\t// zcb needs to approve transfer from itself to trader.\\r\\n\\t\\tzcb.trustedApproveCollateralTransfer(trader, _collateralOut);\\r\\n\\t\\tSafeERC20.safeTransferFrom(IERC20(collateral_address), address(zcb), trader, _collateralOut);\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\r\\n\\t/*Maturity Functions */\\r\\n\\r\\n\\r\\n\\tfunction get_redemption_price(uint256 marketId) public view returns(uint256){\\r\\n\\t\\treturn redemption_prices[marketId]; \\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t@dev Redemption price, as calculated at maturity,\\r\\n\\tdepends on total_repayed/(principal + predetermined yield)\\r\\n\\tIf total_repayed = 0, redemption price is 0\\r\\n\\t@param atLoss: defines circumstances where expected returns are higher than actual\\r\\n\\t@param principal_loss: principal - returned amount => non-negative always?\\r\\n\\t@param extra_gain: any extra yield not factored during assessment. Is 0 yield is as expected\\r\\n\\t */\\r\\n\\tfunction update_redemption_price(\\r\\n\\t\\tuint256 marketId,\\r\\n\\t\\tbool atLoss, \\r\\n\\t\\tuint256 extra_gain, \\r\\n\\t\\tuint256 principal_loss\\r\\n\\t) external  onlyController {\\t\\r\\n\\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(marketId))); // SOMEHOW GET ZCB\\r\\n\\t\\tuint256 total_bought_collateral = zcb.getTotalCollateral();\\r\\n\\t\\tuint256 total_bought_bonds = zcb.getTotalZCB();\\r\\n\\r\\n\\t\\tif (atLoss){\\r\\n\\t\\t\\tif (total_bought_collateral - principal_loss > 0){\\r\\n\\t\\t\\t\\tredemption_prices[marketId] = PRICE_PRECISION - (principal_loss*PRICE_PRECISION/total_bought_bonds);\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\telse{\\r\\n\\t\\t\\t\\tredemption_prices[marketId] = 0; \\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\telse{\\r\\n\\t\\t\\trequire(extra_gain >= 0 && principal_loss ==0,  \\\"loss err\\\"); \\r\\n\\t\\t\\tuint256 num_shorts = debt_pools[marketId].total_debt; //For now assume that every zcb borrowed is used to short\\r\\n\\t\\t\\tredemption_prices[marketId] = PRICE_PRECISION + (extra_gain*PRICE_PRECISION/(total_bought_bonds+num_shorts)); \\r\\n\\t\\t}\\t\\r\\n\\r\\n\\t\\t\\tconsole.log('redemption_price', redemption_prices[marketId]); \\r\\n\\t\\t}\\r\\n\\r\\n\\r\\n\\t/* \\r\\n\\tHandles maturity. Includes default/no defaults\\r\\n\\tCalled by controller after redemption price has been set \\r\\n\\t\\r\\n\\tif default: need to burn the underlying tokens used as collateral to buy the zcb as first loss\\r\\n\\t*/\\r\\n\\tfunction handle_maturity(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tbool atLoss, \\r\\n\\t\\tuint256 principal_loss\\r\\n\\t) external  onlyController {\\r\\n\\t\\t// BondingCurve bondingcurve = BondingCurve(bondingCurveAddress);\\r\\n\\t\\tBondingCurve zcb =  BondingCurve(address(controller.getZCB(marketId)));\\r\\n\\r\\n\\t\\tuint256 redemption_price = get_redemption_price(marketId); \\r\\n\\t\\trequire(redemption_price > 0, \\\"Need to set redemption price\\\"); // what if redemption price is set to zero?\\r\\n\\t\\tuint256 total_bought_bonds = zcb.getTotalZCB();\\r\\n\\t\\tuint256 total_bought_collateral = zcb.getTotalCollateral();\\r\\n\\r\\n\\t\\tif (atLoss){\\r\\n\\r\\n\\t\\t\\tuint256 burnamount = total_bought_collateral - ((redemption_price * total_bought_bonds)/PRICE_PRECISION);\\r\\n\\t\\t\\tconsole.log('burnamounts', burnamount);\\r\\n\\r\\n\\t\\t\\tif(principal_loss >0){\\r\\n\\t\\t\\t\\trequire(burnamount>0,\\\"burn amount err\\\"); \\r\\n\\t\\t\\t\\tzcb.burnFirstLoss(burnamount);\\r\\n\\t\\t\\t\\t//bondingcurve.burn_first_loss( marketId, burnamount); \\r\\n\\t\\t\\t\\tzcb.getCollateral();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\t}\\r\\n\\r\\n\\t}\\r\\n\\r\\n\\t/* \\r\\n\\tNeeds to be called at maturity, market needs to be resolved first(from controller)\\r\\n\\t*/\\r\\n\\tfunction redeem(\\r\\n\\t\\tuint256 marketId,\\r\\n\\t \\taddress marketFactory,\\r\\n\\t \\taddress receiver, \\r\\n\\t \\tuint256 zcb_redeem_amount\\r\\n\\t) public returns(uint256){\\r\\n\\t\\t//require(AbstractMarketFactoryV3(marketFactory).isMarketResolved(marketId), \\\"Market not resolved\\\"); \\r\\n\\r\\n\\t\\tuint256 redemption_price = get_redemption_price(marketId); \\r\\n\\t\\trequire(redemption_price > 0, \\\"Redeem price is 0\\\");\\r\\n\\r\\n\\t\\tuint256 collateral_redeem_amount = (redemption_price * zcb_redeem_amount)/PRICE_PRECISION; \\r\\n\\r\\n\\t\\tBondingCurve zcb = BondingCurve(address(controller.getZCB(marketId)));\\r\\n\\t\\tzcb.redeem(receiver, zcb_redeem_amount, collateral_redeem_amount);\\r\\n\\t\\t// BondingCurve(bondingCurveAddress).redeem(marketId,\\r\\n\\t\\t//  receiver,\\r\\n\\t\\t//  zcb_redeem_amount,\\r\\n\\t\\t//  collateral_redeem_amount);\\r\\n\\r\\n\\t\\treturn collateral_redeem_amount; \\r\\n\\r\\n\\t}\\r\\n\\r\\n\\r\\n\\t/// @notice when market is resolved(maturity/early default), calculates score\\r\\n\\t/// and update each assessment phase trader's reputation, called by individual traders\\r\\n\\tfunction updateReputation(uint256 marketId) external  {\\r\\n\\t\\trequire(restriction_data[marketId].marketDenied, \\\"Market not resolved\\\"); \\t\\r\\n\\t\\trequire(assessment_trader[marketId][msg.sender], \\\"Not manager\\\"); \\r\\n\\r\\n\\t\\tbool atLoss = restriction_data[marketId].atLoss; \\r\\n\\t\\tuint256 priceOut = assessment_prices[marketId][msg.sender]; \\r\\n\\t\\tuint256 collateralIn = assessment_collaterals[marketId][msg.sender]; \\r\\n\\t\\tuint256 traderBudget = getTraderBudget(msg.sender); \\r\\n\\t\\tuint256 num_bonds_bought = (collateralIn * priceOut)/PRICE_PRECISION; \\r\\n\\r\\n\\t\\tuint256 scoreToAdd; \\r\\n\\t\\tif (!atLoss) scoreToAdd = ((num_bonds_bought)/traderBudget) * (PRICE_PRECISION - priceOut)*(num_bonds_bought);\\r\\n\\t\\telse scoreToAdd = (num_bonds_bought/traderBudget) * priceOut * num_bonds_bought; \\r\\n\\r\\n\\t\\trep.addScore(msg.sender, scoreToAdd, !atLoss); \\r\\n\\t}\\r\\n\\r\\n\\r\\n\\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t    return a >= b ? a : b;\\r\\n\\t}\\r\\n\\r\\n\\tfunction sqrt(uint y) internal pure returns (uint z) {\\r\\n\\t    if (y > 3) {\\r\\n\\t        z = y;\\r\\n\\t        uint x = y / 2 + 1;\\r\\n\\t        while (x < z) {\\r\\n\\t            z = x;\\r\\n\\t            x = (y / x + x) / 2;\\r\\n\\t        }\\r\\n\\t    } else if (y != 0) {\\r\\n\\t        z = 1;\\r\\n\\t    }\\r\\n\\t}\\r\\n\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0x1faec842e0d4877e5a8465adfd653ab833256a4bcab14000917037917406fcd0\"},\"contracts/stablecoin/owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// https://docs.synthetix.io/contracts/Owned\\r\\ncontract Owned {\\r\\n    address public owner;\\r\\n    address public nominatedOwner;\\r\\n\\r\\n    constructor (address _owner) public {\\r\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\r\\n        owner = _owner;\\r\\n        emit OwnerChanged(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    function nominateNewOwner(address _owner) external onlyOwner {\\r\\n        nominatedOwner = _owner;\\r\\n        emit OwnerNominated(_owner);\\r\\n    }\\r\\n\\r\\n    function acceptOwnership() external {\\r\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\r\\n        emit OwnerChanged(owner, nominatedOwner);\\r\\n        owner = nominatedOwner;\\r\\n        nominatedOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner {\\r\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    event OwnerNominated(address newOwner);\\r\\n    event OwnerChanged(address oldOwner, address newOwner);\\r\\n}\",\"keccak256\":\"0x1214743d77165d1ce7f88cf4f0383173ea9d465859c9b557e8da00523059bd9d\",\"license\":\"GPL-2.0-or-later\"},\"contracts/stablecoin/reputationtoken.sol\":{\"content\":\"pragma solidity ^0.8.4; \\r\\n//https://github.com/poap-xyz/poap-contracts/tree/master/contracts\\r\\nimport {ERC721} from \\\"solmate/src/tokens/ERC721.sol\\\";\\r\\nimport {Controller} from \\\"./controller.sol\\\";\\r\\nimport {IReputationNFT} from \\\"./IReputationNFT.sol\\\";\\r\\nimport {BondingCurve} from \\\"../bonds/bondingcurve.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\ncontract ReputationNFT is IReputationNFT, ERC721 {\\r\\n  mapping(uint256 => ReputationData) internal _reputation; // id to reputation\\r\\n  mapping(address => uint256) internal _ownerToId;\\r\\n  mapping(uint256 => TraderData[]) internal _marketData; // **MarketId to Market's data needed for calculating brier score.\\r\\n\\r\\n  uint256 private nonce = 1;\\r\\n  Controller controller;\\r\\n  uint256 SCALE = 1e18;\\r\\n\\r\\n\\r\\n  struct ReputationData {\\r\\n    uint256 n; // number of markets participated in => regular uint256\\r\\n    uint256 score; // averaged reputation score => 60.18\\r\\n  }\\r\\n\\r\\n  struct TraderData { // for each market\\r\\n    address trader;\\r\\n    uint256 tokensBought;\\r\\n  }\\r\\n\\r\\n  modifier onlyController() {\\r\\n    require(msg.sender == address(controller));\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor (\\r\\n    address _controller\\r\\n  ) ERC721(\\\"Debita Reputation Token\\\", \\\"DRT\\\") {\\r\\n    console.log(\\\"here\\\");\\r\\n    controller = Controller(_controller);\\r\\n  }\\r\\n\\r\\n  function _baseURI() internal pure returns (string memory baseURI) {\\r\\n    baseURI = \\\"\\\";\\r\\n  }\\r\\n\\r\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\r\\n    require(_ownerOf[id] != address(0), \\\"Invalid Identifier\\\");\\r\\n\\r\\n    string memory baseURI = _baseURI();\\r\\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, id)) : \\\"\\\";\\r\\n  }\\r\\n\\r\\n  function mint(address to) external {\\r\\n    require(_ownerToId[to] == uint256(0), \\\"can only mint one reputation token\\\");\\r\\n    super._mint(to, nonce);\\r\\n    _ownerToId[to] = nonce;\\r\\n    nonce++;\\r\\n  }\\r\\n\\r\\n  function getReputationScore(address owner) view external returns (uint256){\\r\\n    require(_ownerToId[owner] != uint256(0), \\\"No Id found\\\");\\r\\n    return _reputation[_ownerToId[owner]].score;\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  /**\\r\\n   @notice calculates average of scores added.\\r\\n   @param score: 60.18 format\\r\\n   */\\r\\n  function addScore(address to, uint256 score, bool atLoss) external  {\\r\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\r\\n\\r\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\r\\n    \\r\\n    if (data.n == 0) {\\r\\n      data.score = score;\\r\\n    } else {\\r\\n      //data.score = ((data.score / data.n) + score) / (data.n + 1);\\r\\n      data.score = (data.score / data.n + score) / (data.n + 1);\\r\\n    }\\r\\n\\r\\n    data.n++;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   @notice reset scores\\r\\n   */\\r\\n  function resetScore(address to) external {\\r\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\r\\n    delete _reputation[_ownerToId[to]];\\r\\n\\r\\n  }\\r\\n}\",\"keccak256\":\"0x686e4b0d67c459c98897a6a835ce0e9004e5f75e00cf945d8176d16f54008a2d\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../balancer/BFactory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../balancer/BNum.sol\\\";\\r\\nimport \\\"../bonds/Ibondingcurve.sol\\\"; \\r\\n\\r\\ncontract AMMFactory is BNum {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\r\\n\\r\\n    BFactory public bFactory;\\r\\n    // MarketFactory => Market => BPool\\r\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\r\\n    uint256 fee;\\r\\n\\r\\n    event PoolCreated(\\r\\n        address pool,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed creator,\\r\\n        address lpTokenRecipient\\r\\n    );\\r\\n    event LiquidityChanged(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        address recipient,\\r\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\r\\n        int256 collateral,\\r\\n        int256 lpTokens,\\r\\n        uint256[] sharesReturned\\r\\n    );\\r\\n    event SharesSwapped(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        uint256 outcome,\\r\\n        // from the perspective of the user. e.g. collateral is negative when buying\\r\\n        int256 collateral,\\r\\n        int256 shares,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor(BFactory _bFactory, uint256 _fee) {\\r\\n        bFactory = _bFactory;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _initialLiquidity,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256) {\\r\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\r\\n\\r\\n        // Comparing to sets because sets are normalized to 10e18.\\r\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        require(\\r\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\r\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\r\\n        );\\r\\n\\r\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Create pool\\r\\n        BPool _pool = bFactory.newBPool();\\r\\n\\r\\n        // Add each outcome to the pool. Collateral is NOT added.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _token.approve(address(_pool), MAX_UINT);\\r\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\r\\n        }\\r\\n\\r\\n        // Set the swap fee.\\r\\n        _pool.setSwapFee(fee);\\r\\n\\r\\n        // Finalize pool setup\\r\\n        _pool.finalize();\\r\\n\\r\\n        pools[address(_marketFactory)][_marketId] = _pool;\\r\\n\\r\\n        // Pass along LP tokens for initial liquidity\\r\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\r\\n\\r\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\r\\n        _pool.transfer(address(0x0), (BONE / 1000));\\r\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\r\\n\\r\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _balances[i] = 0;\\r\\n        }\\r\\n\\r\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_initialLiquidity),\\r\\n            int256(_lpTokenBalance),\\r\\n            _balances\\r\\n        );\\r\\n\\r\\n        return _lpTokenBalance;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minLPTokensOut,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Find poolAmountOut\\r\\n        _poolAmountOut = MAX_UINT;\\r\\n\\r\\n        {\\r\\n            uint256 _totalSupply = _pool.totalSupply();\\r\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                _maxAmountsIn[i] = _sets;\\r\\n\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\r\\n\\r\\n                // This is the result the following when solving for poolAmountOut:\\r\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n                uint256 _tokenPoolAmountOut =\\r\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\r\\n\\r\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\r\\n                    _poolAmountOut = _tokenPoolAmountOut;\\r\\n                }\\r\\n            }\\r\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\r\\n        }\\r\\n\\r\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\r\\n\\r\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\r\\n\\r\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _balances[i] = _token.balanceOf(address(this));\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_poolAmountOut),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _lpTokensIn,\\r\\n        uint256 _minCollateralOut,\\r\\n        address _collateralRecipient\\r\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\r\\n\\r\\n        uint256[] memory exitPoolEstimate;\\r\\n        {\\r\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\r\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\r\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\r\\n        }\\r\\n\\r\\n        // Find the number of sets to sell.\\r\\n        uint256 _setsToSell = MAX_UINT;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\r\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\r\\n        }\\r\\n\\r\\n        // Must be a multiple of share factor.\\r\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n\\r\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\r\\n        if (_resolved) {\\r\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\r\\n        } else {\\r\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\r\\n        }\\r\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\r\\n\\r\\n        // Transfer the remaining shares back to _collateralRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\r\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_collateralRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _collateralRecipient,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function buyZCB(\\r\\n        AbstractMarketFactoryV3 _marketFactory, \\r\\n        address from, \\r\\n        address bondingcurve, \\r\\n        uint256 _marketId, \\r\\n        uint256 _collateralIn\\r\\n        ) external returns(uint256){\\r\\n\\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(from, address(this), _collateralIn);\\r\\n        _collateral.approve(bondingcurve, _collateralIn); \\r\\n\\r\\n        return IBondingCurve(bondingcurve).buy(address(_marketFactory), from, _collateralIn, _marketId);\\r\\n    }\\r\\n\\r\\n    function sellZCB(\\r\\n        AbstractMarketFactoryV3 _marketFactory, \\r\\n        address from, \\r\\n        address bondingcurve, \\r\\n        uint256 _marketId, \\r\\n        uint256 _zcb_amountIn\\r\\n        ) external returns(uint256){\\r\\n\\r\\n        uint256 fee_deducted_collateral_out = IBondingCurve(bondingcurve).sell(\\r\\n            address(_marketFactory),\\r\\n            from, \\r\\n            _zcb_amountIn, \\r\\n             _marketId); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transfer(from, fee_deducted_collateral_out); \\r\\n\\r\\n        return fee_deducted_collateral_out; \\r\\n    }\\r\\n\\r\\n\\r\\n    function buy(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minTokensOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        uint256 _totalDesiredOutcome = _sets;\\r\\n        {\\r\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 _acquiredToken, ) =\\r\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\r\\n                _totalDesiredOutcome += _acquiredToken;\\r\\n            }\\r\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\r\\n\\r\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\r\\n        }\\r\\n\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_totalDesiredOutcome),\\r\\n            bdiv(_sets, _totalDesiredOutcome)\\r\\n        );\\r\\n\\r\\n        return _totalDesiredOutcome;\\r\\n    }\\r\\n\\r\\n    function sellForCollateral(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256[] memory _shareTokensIn,\\r\\n        uint256 _minSetsOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _setsOut = MAX_UINT;\\r\\n        uint256 _totalUndesiredTokensIn = 0;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\r\\n        }\\r\\n\\r\\n        {\\r\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\r\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 tokenAmountOut, ) =\\r\\n                    _pool.swapExactAmountIn(\\r\\n                        address(_market.shareTokens[_outcome]),\\r\\n                        _shareTokensIn[i],\\r\\n                        address(_token),\\r\\n                        0,\\r\\n                        MAX_UINT\\r\\n                    );\\r\\n\\r\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\r\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\r\\n            }\\r\\n\\r\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\r\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\r\\n        }\\r\\n\\r\\n        // Transfer undesired token balance back.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            uint256 _balance = _token.balanceOf(address(this));\\r\\n            if (_balance > 0) {\\r\\n                _token.transfer(msg.sender, _balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_totalUndesiredTokensIn),\\r\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\r\\n        );\\r\\n\\r\\n        return _collateralOut;\\r\\n    }\\r\\n\\r\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\r\\n    // So the first outcome is 10**18 and all others are higher or lower.\\r\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\r\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        address _basisToken = address(_market.shareTokens[0]);\\r\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\r\\n        _ratios[0] = 10**18;\\r\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\r\\n            _ratios[i] = _price;\\r\\n        }\\r\\n        return _ratios;\\r\\n    }\\r\\n\\r\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\r\\n        }\\r\\n        return _balances;\\r\\n    }\\r\\n\\r\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\r\\n        }\\r\\n        return _weights;\\r\\n    }\\r\\n\\r\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.getSwapFee();\\r\\n    }\\r\\n\\r\\n    function getPoolTokenBalance(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.balanceOf(_user);\\r\\n    }\\r\\n\\r\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\r\\n        return pools[address(_marketFactory)][_marketId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc07d87d08f41ce5e5feae47a5ee1948e424e1860c2270a8bf33dab0590725568\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"../libraries/Rewardable.sol\\\";\\r\\nimport { LinearBondingCurve } from \\\"../bonds/LinearBondingCurve.sol\\\";\\r\\n\\r\\nabstract contract AbstractMarketFactoryV3 is ZCBFactory, TurboShareTokenFactory, Ownable, Rewardable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\r\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\r\\n    event MarketActivated(uint256 id);\\r\\n\\r\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\r\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\r\\n    event WinningsClaimed(\\r\\n        uint256 id,\\r\\n        address winningOutcome,\\r\\n        uint256 winningIndex,\\r\\n        string winningName,\\r\\n        uint256 amount,\\r\\n        uint256 settlementFee,\\r\\n        uint256 payout,\\r\\n        address indexed receiver\\r\\n    );\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    FeePot public feePot;\\r\\n\\r\\n    // fees are out of 1e18 and only apply to new markets\\r\\n    uint256 public stakerFee;\\r\\n    uint256 public settlementFee;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    address public protocol; // collects protocol fees\\r\\n\\r\\n    uint256 public accumulatedProtocolFee = 0;\\r\\n    // settlement address => amount of collateral\\r\\n    mapping(address => uint256) public accumulatedSettlementFees;\\r\\n\\r\\n    // How many shares equals one collateral.\\r\\n    // Necessary to account for math errors from small numbers in balancer.\\r\\n    // shares = collateral / shareFactor\\r\\n    // collateral = shares * shareFactor\\r\\n    uint256 public shareFactor;\\r\\n\\r\\n    struct Market {\\r\\n        address settlementAddress;\\r\\n        OwnedERC20[] shareTokens;\\r\\n        OwnedERC20 winner;\\r\\n        uint256 winnerIndex;\\r\\n        uint256 settlementFee;\\r\\n        uint256 protocolFee;\\r\\n        uint256 stakerFee;\\r\\n        uint256 creationTimestamp;\\r\\n        uint256 resolutionTimestamp; // when winner is declared\\r\\n        uint256[] initialOdds;\\r\\n        bool active; // false if not ready to use or if resolved\\r\\n    }\\r\\n\\r\\n    Market[] internal markets;\\r\\n    // ZCBMarket[] internal zcbmarkets; \\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n    mapping(uint256 => bool ) inAssessment; \\r\\n    mapping(uint256=> uint256) buy_thresholds;\\r\\n\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees, // staker, settlement, protocol\\r\\n        address _protocol\\r\\n    ) {\\r\\n        owner = _owner; // controls fees for new markets\\r\\n        collateral = _collateral;\\r\\n        shareFactor = _shareFactor;\\r\\n        feePot = _feePot;\\r\\n        stakerFee = _fees[0];\\r\\n        settlementFee = _fees[1];\\r\\n        protocolFee = _fees[2];\\r\\n        protocol = _protocol;\\r\\n\\r\\n        _collateral.approve(address(_feePot), MAX_UINT);\\r\\n\\r\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\r\\n        markets.push(makeEmptyMarket());\\r\\n\\r\\n        //FOR TESTING ONLY\\r\\n        buy_thresholds[0] = MAX_UINT;\\r\\n        buy_thresholds[1] = MAX_UINT; \\r\\n        buy_thresholds[2] = MAX_UINT; \\r\\n    }\\r\\n        \\r\\n\\r\\n   // function quantityAvailable(uint256 marketId)\\r\\n\\r\\n    //Called by lendingpool when market is created i.e , and when loan is approved \\r\\n    function handleAssessment(uint256 _marketId, bool startAssessing) \\r\\n    external\\r\\n    //onlyController\\r\\n     {\\r\\n        bool market_inAssessment = startAssessing? true : false; \\r\\n        inAssessment[_marketId] = market_inAssessment; \\r\\n    }\\r\\n    function handleOnlyReputable(uint256 _marketId)\\r\\n    external \\r\\n    //onlyController\\r\\n    {\\r\\n\\r\\n    }\\r\\n    //Called by controller after assessment phase \\r\\n    function set_buy_threshold(uint256 _marketId, uint256 threshold)\\r\\n    external \\r\\n    //onlyController\\r\\n    {\\r\\n        buy_thresholds[_marketId] = threshold;\\r\\n    }\\r\\n\\r\\n    function get_buy_threshold(uint256 _marketId) external view returns(uint256){\\r\\n        return buy_thresholds[_marketId]; \\r\\n    }\\r\\n    function isInAssessment(uint256 _marketId) external view returns(bool){\\r\\n        return inAssessment[_marketId]; \\r\\n    }\\r\\n\\r\\n    function onlyReputable(uint256 _marketId) external view returns(bool){\\r\\n        return false;\\r\\n    }\\r\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n        return TradeDetails[_marketId][_outcome]; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // Returns an empty struct if the market doesn't exist.\\r\\n    // Can check market existence before calling this by comparing _id against markets.length.\\r\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\r\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n            return makeEmptyMarket();\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketCount() public view returns (uint256) {\\r\\n        return markets.length; //+ zcbmarkets.length;\\r\\n    }\\r\\n\\r\\n    // Returns factory-specific details about a market.\\r\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\r\\n\\r\\n    function mintShares(\\r\\n        uint256 _id,\\r\\n        uint256 _shareToMint,\\r\\n        address _receiver\\r\\n    ) public {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        uint256 _cost = calcCost(_shareToMint);\\r\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\r\\n        }\\r\\n\\r\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\r\\n    }\\r\\n\\r\\n    function burnShares(\\r\\n        uint256 _id,\\r\\n        uint256 _sharesToBurn,\\r\\n        address _receiver\\r\\n    ) public returns (uint256) {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            // errors if sender doesn't have enough shares\\r\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\r\\n        }\\r\\n\\r\\n        uint256 _payout = calcCost(_sharesToBurn);\\r\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\r\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\r\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\r\\n\\r\\n        accumulatedProtocolFee += _protocolFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n        feePot.depositFees(_stakerFee);\\r\\n\\r\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\r\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\r\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\r\\n\\r\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\r\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\r\\n        _payout = _payout.sub(_settlementFee);\\r\\n\\r\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n\\r\\n        uint256 _winningIndex = _market.winnerIndex;\\r\\n        string memory _winningName = _market.winner.name();\\r\\n\\r\\n        emit WinningsClaimed(\\r\\n            _id,\\r\\n            address(_market.winner),\\r\\n            _winningIndex,\\r\\n            _winningName,\\r\\n            _winningShares,\\r\\n            _settlementFee,\\r\\n            _payout,\\r\\n            _receiver\\r\\n        );\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\r\\n        uint256 _totalWinnings = 0;\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\r\\n        }\\r\\n        return _totalWinnings;\\r\\n    }\\r\\n\\r\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\r\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\r\\n        if (_fees > 0) {\\r\\n            accumulatedSettlementFees[msg.sender] = 0;\\r\\n            collateral.transfer(_receiver, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees() public returns (uint256) {\\r\\n        require(msg.sender == protocol || msg.sender == address(this));\\r\\n        uint256 _fees = accumulatedProtocolFee;\\r\\n        if (_fees > 0) {\\r\\n            accumulatedProtocolFee = 0;\\r\\n            collateral.transfer(protocol, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\r\\n        settlementFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\r\\n        stakerFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\r\\n        protocolFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\r\\n        if (_claimFirst) {\\r\\n            claimProtocolFees();\\r\\n        }\\r\\n        protocol = _newProtocol;\\r\\n    }\\r\\n\\r\\n\\r\\n    function startMarket(\\r\\n        address _settlementAddress,\\r\\n        string[] memory _names,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active\\r\\n    ) internal returns (uint256 _marketId) {\\r\\n        _marketId = markets.length;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                createShareTokens(_names, address(this)),\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n            )\\r\\n        );\\r\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n    }\\r\\n       \\r\\n    \\r\\n    function activateMarket(uint256 _marketId) internal {\\r\\n        markets[_marketId].active = true;\\r\\n        emit MarketActivated(_marketId);\\r\\n    }\\r\\n\\r\\n    function makeEmptyMarket() private pure returns (Market memory) {\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\r\\n        uint256[] memory _initialOdds = new uint256[](0);\\r\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\r\\n    }\\r\\n\\r\\n\\r\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\r\\n        Market storage _market = markets[_marketId];\\r\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\r\\n\\r\\n        _market.winner = _winner;\\r\\n        _market.active = false;\\r\\n        _market.winnerIndex = _winningOutcome;\\r\\n        _market.resolutionTimestamp = block.timestamp;\\r\\n        string memory _outcomeName = _winner.name();\\r\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\r\\n    }\\r\\n\\r\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\r\\n        Market memory _market = markets[_id];\\r\\n        return _market.winner != OwnedERC20(address(0));\\r\\n    }\\r\\n\\r\\n    // shares => collateral\\r\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\r\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\r\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\r\\n        return _shares / shareFactor;\\r\\n    }\\r\\n\\r\\n    // collateral => shares\\r\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\r\\n        return _collateralIn * shareFactor;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n\\r\\n    /**\\r\\n     @notice \\r\\n     */\\r\\n    function startZCBMarket(\\r\\n        address _settlementAddress,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active,\\r\\n        OwnedERC20 _zcb\\r\\n    ) internal returns (uint256 _marketId){\\r\\n\\r\\n        _marketId = markets.length;\\r\\n        OwnedERC20[] memory zcb = new OwnedERC20[](2);\\r\\n        zcb[0] = _zcb;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                zcb,\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n                )\\r\\n            );\\r\\n\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getZCBMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n           revert(\\\"Market Not Activated\\\");\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2f0ac2b89b9ac1965eea4cfe93c2dd71a11fb90e5b87f3421c17defea93c1f\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\n\\r\\ncontract FeePot is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant magnitude = 2**128;\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    IERC20Full public reputationToken;\\r\\n\\r\\n    uint256 public magnifiedFeesPerShare;\\r\\n\\r\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\r\\n    mapping(address => uint256) public storedFees;\\r\\n\\r\\n    uint256 public feeReserve;\\r\\n\\r\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\r\\n        ERC20(\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\r\\n        )\\r\\n    {\\r\\n        collateral = _collateral;\\r\\n        reputationToken = _reputationToken;\\r\\n\\r\\n        require(_collateral != IERC20Full(address(0)));\\r\\n    }\\r\\n\\r\\n    function depositFees(uint256 _amount) public returns (bool) {\\r\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\r\\n        if (_totalSupply == 0) {\\r\\n            feeReserve = feeReserve.add(_amount);\\r\\n            return true;\\r\\n        }\\r\\n        if (feeReserve > 0) {\\r\\n            _amount = _amount.add(feeReserve);\\r\\n            feeReserve = 0;\\r\\n        }\\r\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\r\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\r\\n    }\\r\\n\\r\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\r\\n        uint256 _ownerBalance = balanceOf(_owner);\\r\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\r\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\r\\n        super._transfer(_from, _to, _amount);\\r\\n\\r\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\r\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external returns (bool) {\\r\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        _mint(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\r\\n            magnifiedFeesPerShare.mul(_amount)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function exit(uint256 _amount) external returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        _burn(msg.sender, _amount);\\r\\n        reputationToken.transfer(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeem() public returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeemInternal(address _account) internal {\\r\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\r\\n        if (_withdrawableFees > 0) {\\r\\n            storedFees[_account] = 0;\\r\\n            collateral.transfer(_account, _withdrawableFees);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0045efc6b0eb6013e765caa47470f1d66ac487fcd9fd2bfafc04c6c61b3c6865\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../libraries/Ownable.sol\\\";\\r\\n\\r\\ncontract OwnedERC20 is ERC20, Ownable {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _owner\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function trustedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        _transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedMint(address _target, uint256 _amount) external virtual onlyOwner {\\r\\n        _mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurn(address _target, uint256 _amount) external virtual onlyOwner {\\r\\n        _burn(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\r\\n        uint256 _balance = balanceOf(_target);\\r\\n        _burn(_target, _balance);\\r\\n        return _balance;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xe53cbce33918d8e12803f2b496c6c78c84933b43c7600bbd836618e9aa37b7b5\",\"license\":\"MIT\"},\"contracts/turbo/TrustedMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\n\\r\\ncontract TrustedMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\r\\n\\r\\n    struct MarketDetails {\\r\\n        string description;\\r\\n    }\\r\\n    MarketDetails[] internal marketDetails;\\r\\n    // mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n\\r\\n    modifier onlyOwnerManager() {\\r\\n        require(msg.sender == owner || managers[msg.sender] , \\\"Only Validators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(address=>bool) managers; \\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol\\r\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.1.0\\\") {}\\r\\n\\r\\n    //TODO add managers \\r\\n    function createMarket(\\r\\n        address _creator,\\r\\n        string calldata _description,\\r\\n        string[] calldata _names,\\r\\n        uint256[] calldata _odds\\r\\n    ) public  returns (uint256) {\\r\\n        marketDetails.push(MarketDetails(_description));\\r\\n        return startMarket(_creator, _names, _odds, true);\\r\\n    }\\r\\n\\r\\n    //TODO add managers \\r\\n    function trustedResolveMarket(uint256 _id, uint256 _winningOutcome) public {\\r\\n        endMarket(_id, _winningOutcome);\\r\\n    }\\r\\n\\r\\n    function getMarketDetails(uint256 _id) public view returns (MarketDetails memory) {\\r\\n        return marketDetails[_id];\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    //ZCB markets\\r\\n      function createZCBMarket(\\r\\n        address _creator,\\r\\n        string calldata _description,\\r\\n        uint256[] calldata _odds, \\r\\n        OwnedERC20 zcb\\r\\n    ) public  returns (uint256) {\\r\\n        marketDetails.push(MarketDetails(_description));\\r\\n        return startZCBMarket(_creator, _odds, true, zcb);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa72118f0ca42eb129038111d11275d11f352a96e0ad851bae6c78a305cb16c85\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./OwnedShareToken.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nabstract contract ZCBFactory {\\r\\n    function createZCB(string memory _name, address _owner) internal returns(OwnedERC20[] memory){\\r\\n        uint256 _numOutcomes = 1; \\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_name, _name, _owner);\\r\\n        }\\r\\n        return _tokens; \\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract TurboShareTokenFactory {\\r\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract TurboShareTokenFactoryV1 {\\r\\n    function createShareTokens(\\r\\n        string[] memory _names,\\r\\n        string[] memory _symbols,\\r\\n        address _owner\\r\\n    ) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x907fb0a55d5a5ed12e9163f4dea48d24181b055c9153088f65c6cdb8a088cd02\",\"license\":\"MIT\"},\"contracts/vaults/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\r\\nabstract contract Auth {\\r\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\r\\n\\r\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    Authority public authority;\\r\\n    mapping(address=>bool) Authorized; \\r\\n\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, _owner);\\r\\n    }\\r\\n\\r\\n    modifier requiresAuth() virtual {\\r\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\r\\n        //Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\r\\n\\r\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\r\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\r\\n        return(user == owner || Authorized[user]);\\r\\n        //return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\r\\n    }\\r\\n\\r\\n    function setNewAuthority(address newAuthority) public {\\r\\n        require(msg.sender == owner );\\r\\n        Authorized[newAuthority] = true; \\r\\n\\r\\n    }\\r\\n\\r\\n    function setAuthority(Authority newAuthority) public virtual {\\r\\n        // We check if the caller is the owner first because we want to ensure they can\\r\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\r\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\r\\n\\r\\n        authority = newAuthority;\\r\\n\\r\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\r\\n    }\\r\\n\\r\\n    function setOwner(address newOwner) public virtual requiresAuth {\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnerUpdated(msg.sender, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\r\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\r\\ninterface Authority {\\r\\n    function canCall(\\r\\n        address user,\\r\\n        address target,\\r\\n        bytes4 functionSig\\r\\n    ) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xd86361538039a29125571a2f9cf15a61fa1b7de60959387f1e7ffc8fb73590e3\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/instrument.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./vault.sol\\\";\\r\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"../prb/PRBMathUD60x18.sol\\\";\\r\\n\\r\\n\\r\\n/// @notice Minimal interface for Vault compatible strategies.\\r\\nabstract contract Instrument {\\r\\n\\r\\n    modifier onlyUtilizer() {\\r\\n        require(msg.sender == Utilizer, \\\"!Utilizer\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyAuthorized() {\\r\\n        require(msg.sender == Utilizer || msg.sender == vault.owner(), \\\"!authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n\\r\\n    ERC20 public underlying;\\r\\n    Vault public vault; \\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    /// @notice address of user who submits the liquidity proposal \\r\\n    address Utilizer; \\r\\n\\r\\n    /// @notice initializes a new Instrument \\r\\n    function _initialize(\\r\\n        address _vault,\\r\\n        address _Utilizer\\r\\n    ) internal {\\r\\n        vault = Vault(_vault);\\r\\n        underlying = ERC20(vault.UNDERLYING());\\r\\n        underlying.approve(_vault, MAX_UINT); // Give Vault unlimited access \\r\\n        Utilizer = _Utilizer;\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice hooks for approval logic that are specific to each instrument type, called by controller for approval/default logic\\r\\n     */\\r\\n    function onMarketApproval() virtual external;\\r\\n\\r\\n    /// called by anyone.\\r\\n    function checkStatus() virtual external;\\r\\n\\r\\n    function _resolveMarket(\\r\\n        bool atLoss,\\r\\n        uint256 extra_gain,\\r\\n        uint256 total_loss\\r\\n    ) internal {\\r\\n        vault.resolveMarket(atLoss, extra_gain, total_loss);\\r\\n    }\\r\\n\\r\\n\\r\\n    function setUtilizer(address _Utilizer) external onlyAuthorized {\\r\\n        require(_Utilizer != address(0));\\r\\n        Utilizer = _Utilizer;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Withdraws a specific amount of underlying tokens from the Instrument.\\r\\n    /// @param amount The amount of underlying tokens to withdraw.\\r\\n    /// @return An error code, or 0 if the withdrawal was successful.\\r\\n    function redeemUnderlying(uint256 amount) external  returns (bool){\\r\\n        return underlying.transfer(address(vault), amount); \\r\\n    }\\r\\n\\r\\n    /// @notice Returns a user's Instrument balance in underlying tokens.\\r\\n    /// @param user The user to get the underlying balance of.\\r\\n    /// @return The user's Instrument balance in underlying tokens.\\r\\n    /// @dev May mutate the state of the Instrument by accruing interest.\\r\\n    function balanceOfUnderlying(address user) external view returns (uint256){\\r\\n        return underlying.balanceOf(user); \\r\\n        }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n/// @notice Simple Instrument that provides USDC on stableswap 3pool \\r\\n// contract Curve3pool_Instrument is Instrument{\\r\\n\\r\\n//     /// @notice invests amount into Instrument \\r\\n//     function invest(uint256 amount ) external \\r\\n//     //onlyGuardian \\r\\n//     {   \\r\\n//         require(this.balanceOfUnderlying(address(this)) >= amount);\\r\\n//         _invest(amount);  \\r\\n\\r\\n//     }\\r\\n\\r\\n//     function _invest(uint256 _amount) internal {\\r\\n\\r\\n//     }\\r\\n\\r\\n\\r\\n\\r\\n// }\\r\\n\\r\\n\\r\\n/// @notice Instrument that a) lends usdc fix rate at notional.finance and get zcb\\r\\n/// b) use that zcb as collateral to borrow fiat from fiatdao, c) swap fiat dao to usdc\\r\\n/// d) repeat\\r\\n// contract LeveragedFixedRate_Instrument is Instrument{\\r\\n\\r\\n// }\\r\\n\\r\\n// /// @notice Instrument that lends to risky collateral in fuse pools\\r\\n// contract RariLend_Instrument is Instrument{\\r\\n\\r\\n// }\\r\\n\\r\\n\\r\\n\\r\\n \\r\\n/// @notice Contract for unsecured loans, each instance will be associated to a borrower+marketId\\r\\n/// approved borrowers will interact with this contract to borrow, repay. \\r\\n/// and vault will supply principal and harvest principal/interest \\r\\ncontract CreditLine is Instrument {\\r\\n    using PRBMathUD60x18 for uint256;\\r\\n\\r\\n    //  variables initiated at creation\\r\\n    uint256  principal;\\r\\n    uint256  interestAPR; \\r\\n    uint256  faceValue; //total amount due, i.e principal+interest\\r\\n    uint256  duration; \\r\\n\\r\\n    // Modify-able Variables during repayments, borrow\\r\\n    uint256 totalOwed; \\r\\n    uint256 principalOwed; \\r\\n    uint256 interestOwed; \\r\\n    uint256 maturityDate;\\r\\n\\r\\n    constructor(\\r\\n        address vault,\\r\\n        address borrower, \\r\\n        uint256 _principal,\\r\\n        uint256 _interestAPR, \\r\\n        uint256 _duration,\\r\\n        uint256 _faceValue\\r\\n    ) public {\\r\\n        initialize(vault, borrower, _principal, _interestAPR, _duration, _faceValue);\\r\\n    }\\r\\n\\r\\n    /// @notice CreditLine contract is initiated at proposal \\r\\n    /// @dev include any Instrument specific initialization logic  \\r\\n    /// @param _borrower stored as Utilizer \\r\\n    function initialize(\\r\\n        address _vault,\\r\\n        address _borrower,         \\r\\n        uint256 _principal,\\r\\n        uint256 _interestAPR, \\r\\n        uint256 _duration, \\r\\n        uint256 _faceValue\\r\\n    ) internal {\\r\\n        _initialize(_vault, _borrower); \\r\\n\\r\\n        principal = _principal; \\r\\n        interestAPR = _interestAPR; \\r\\n        duration = _duration;   \\r\\n        faceValue = _faceValue; \\r\\n\\r\\n        interestOwed = faceValue - principal; // getOwedInterest(_interestAPR, _duration); \\r\\n    }\\r\\n\\r\\n    /// @notice use APR and duration to get total owed interest \\r\\n    function getOwedInterest(uint256 APR, uint256 duration) internal pure returns(uint256 owed){\\r\\n        return APR; \\r\\n    }\\r\\n\\r\\n    function getMaturityDate() external view returns (uint256 result) {\\r\\n        result = maturityDate;\\r\\n    }\\r\\n\\r\\n    function onMarketApproval() external override {\\r\\n        maturityDate = block.timestamp + duration;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows a borrower to borrow on their creditline.\\r\\n    function drawdown(uint256 amount) external onlyUtilizer{\\r\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\r\\n        require(underlying.balanceOf(address(this)) > amount, \\\"Exceeds Credit\\\");\\r\\n        require(block.timestamp <= maturityDate, \\\"Instrument must not have matured\\\");\\r\\n        totalOwed += amount; \\r\\n        principalOwed += amount; \\r\\n        underlying.transfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice allows a borrower to repay their loan\\r\\n    function repay(uint256 repay_principal, uint256 repay_interest) external onlyUtilizer{\\r\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\r\\n        require(block.timestamp <= maturityDate, \\\"Instrument must not have matured\\\");\\r\\n        underlying.transferFrom(msg.sender, address(this), repay_principal + repay_interest);\\r\\n        handleRepay(repay_principal, repay_interest); \\r\\n    }   \\r\\n\\r\\n    /// @notice updates balances after repayment\\r\\n    function handleRepay(uint256 repay_principal, uint256 repay_interest) internal {\\r\\n        totalOwed -= Math.min((repay_principal + repay_interest), totalOwed); \\r\\n        principalOwed -= Math.min(repay_principal, principalOwed);\\r\\n        interestOwed -= Math.min(repay_interest, interestOwed);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice called by anyone to check if the loan is past maturity\\r\\n     */\\r\\n    function checkStatus() external override {\\r\\n        if (maturityDate >= block.timestamp) {\\r\\n            \\r\\n            if (principalOwed == 0 && interestOwed == 0) {\\r\\n                _resolveMarket(false, 0, 0);\\r\\n            } else if (principalOwed > 0 || interestOwed > 0) {\\r\\n                _resolveMarket(true, 0, principalOwed + interestOwed);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"keccak256\":\"0xf7679d3a52925b77950bdfc1fbec86c8af84fc040cbf83b214e2403e97f7557a\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\r\\n// import {ERC20} from \\\"../../ERC20/ERC20.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\r\\n\\r\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\r\\nabstract contract ERC4626 is ERC20 {\\r\\n    using SafeTransferLib for ERC20;\\r\\n    using FixedPointMathLib for uint256;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\r\\n\\r\\n    event Withdraw(\\r\\n        address indexed caller,\\r\\n        address indexed receiver,\\r\\n        address indexed owner,\\r\\n        uint256 assets,\\r\\n        uint256 shares\\r\\n    );\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               IMMUTABLES\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    ERC20 public immutable asset;\\r\\n\\r\\n    constructor(\\r\\n        ERC20 _asset,\\r\\n        string memory _name,\\r\\n        string memory _symbol\\r\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\r\\n        asset = _asset;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        DEPOSIT/WITHDRAWAL LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\r\\n        // Check for rounding error since we round down in previewDeposit.\\r\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\r\\n\\r\\n        // Need to transfer before minting or ERC777s could reenter.\\r\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\r\\n\\r\\n        _mint(receiver, shares);\\r\\n\\r\\n        emit Deposit(msg.sender, receiver, assets, shares);\\r\\n\\r\\n        afterDeposit(assets, shares);\\r\\n    }\\r\\n\\r\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\r\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\r\\n\\r\\n        // Need to transfer before minting or ERC777s could reenter.\\r\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\r\\n   \\r\\n        _mint(receiver, shares);\\r\\n\\r\\n        emit Deposit(msg.sender, receiver, assets, shares);\\r\\n\\r\\n        afterDeposit(assets, shares);\\r\\n    }\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 assets,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) public virtual returns (uint256 shares) {\\r\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\r\\n\\r\\n        if (msg.sender != owner) {\\r\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\r\\n\\r\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\r\\n        }\\r\\n\\r\\n        beforeWithdraw(assets, shares);\\r\\n\\r\\n        _burn(owner, shares);\\r\\n\\r\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\r\\n\\r\\n        asset.safeTransfer(receiver, assets);\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n        uint256 shares,\\r\\n        address receiver,\\r\\n        address owner\\r\\n    ) public virtual returns (uint256 assets) {\\r\\n        if (msg.sender != owner) {\\r\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\r\\n\\r\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\r\\n        }\\r\\n\\r\\n        // Check for rounding error since we round down in previewRedeem.\\r\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\r\\n\\r\\n        beforeWithdraw(assets, shares);\\r\\n\\r\\n        _burn(owner, shares);\\r\\n\\r\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\r\\n\\r\\n        asset.safeTransfer(receiver, assets);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ACCOUNTING LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function totalAssets() public view virtual returns (uint256);\\r\\n\\r\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\r\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\r\\n\\r\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\r\\n    }\\r\\n\\r\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\r\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\r\\n\\r\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\r\\n    }\\r\\n\\r\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\r\\n        return convertToShares(assets);\\r\\n    }\\r\\n\\r\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\r\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\r\\n\\r\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\r\\n    }\\r\\n\\r\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\r\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\r\\n\\r\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\r\\n    }\\r\\n\\r\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\r\\n        return convertToAssets(shares);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function maxDeposit(address) public view virtual returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function maxMint(address) public view virtual returns (uint256) {\\r\\n        return type(uint256).max;\\r\\n    }\\r\\n\\r\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\r\\n        return convertToAssets(balanceOf[owner]);\\r\\n    }\\r\\n\\r\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\r\\n        return balanceOf[owner];\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                          INTERNAL HOOKS LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\r\\n\\r\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\r\\n}\\r\\n\",\"keccak256\":\"0x35d900a99169e8a70da723e0dc7b9ad997c8cd5bb363918923ffe76305289e0d\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\r\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\r\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\r\\nabstract contract ERC20 {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            METADATA STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    string public name;\\r\\n\\r\\n    string public symbol;\\r\\n\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                              ERC20 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            EIP-2612 STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\r\\n\\r\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\r\\n\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        uint8 _decimals\\r\\n    ) {\\r\\n        name = _name;\\r\\n        symbol = _symbol;\\r\\n        decimals = _decimals;\\r\\n\\r\\n        INITIAL_CHAIN_ID = block.chainid;\\r\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               ERC20 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\r\\n        allowance[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\r\\n        balanceOf[msg.sender] -= amount;\\r\\n\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint256 value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, to, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\r\\n\\r\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\r\\n\\r\\n        balanceOf[from] -= amount;\\r\\n\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint256 value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             EIP-2612 LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual {\\r\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\r\\n\\r\\n        // Unchecked because the only math done is incrementing\\r\\n        // the owner's nonce which cannot realistically overflow.\\r\\n        unchecked {\\r\\n            address recoveredAddress = ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"\\\\x19\\\\x01\\\",\\r\\n                        DOMAIN_SEPARATOR(),\\r\\n                        keccak256(\\r\\n                            abi.encode(\\r\\n                                keccak256(\\r\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n                                ),\\r\\n                                owner,\\r\\n                                spender,\\r\\n                                value,\\r\\n                                nonces[owner]++,\\r\\n                                deadline\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                v,\\r\\n                r,\\r\\n                s\\r\\n            );\\r\\n\\r\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\r\\n\\r\\n            allowance[recoveredAddress][spender] = value;\\r\\n        }\\r\\n\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n\\r\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\r\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\r\\n                    keccak256(bytes(name)),\\r\\n                    keccak256(\\\"1\\\"),\\r\\n                    block.chainid,\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        INTERNAL MINT/BURN LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal virtual {\\r\\n        totalSupply += amount;\\r\\n\\r\\n        // Cannot overflow because the sum of all user\\r\\n        // balances can't exceed the max uint256 value.\\r\\n        unchecked {\\r\\n            balanceOf[to] += amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 amount) internal virtual {\\r\\n        balanceOf[from] -= amount;\\r\\n\\r\\n        // Cannot underflow because a user's balance\\r\\n        // will never be larger than the total supply.\\r\\n        unchecked {\\r\\n            totalSupply -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d662fa38a1129c3f86ae334f646b5db4fe0a0de25d0782d86e275975e3dc75c\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\r\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\r\\nlibrary FixedPointMathLib {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\r\\n\\r\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\r\\n    }\\r\\n\\r\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\r\\n    }\\r\\n\\r\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\r\\n    }\\r\\n\\r\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\r\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                    LOW LEVEL FIXED POINT OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function mulDivDown(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            // Store x * y in z for now.\\r\\n            z := mul(x, y)\\r\\n\\r\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\r\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            // Divide z by the denominator.\\r\\n            z := div(z, denominator)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function mulDivUp(\\r\\n        uint256 x,\\r\\n        uint256 y,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            // Store x * y in z for now.\\r\\n            z := mul(x, y)\\r\\n\\r\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\r\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\r\\n                revert(0, 0)\\r\\n            }\\r\\n\\r\\n            // First, divide z - 1 by the denominator and add 1.\\r\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\r\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\r\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function rpow(\\r\\n        uint256 x,\\r\\n        uint256 n,\\r\\n        uint256 scalar\\r\\n    ) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch x\\r\\n            case 0 {\\r\\n                switch n\\r\\n                case 0 {\\r\\n                    // 0 ** 0 = 1\\r\\n                    z := scalar\\r\\n                }\\r\\n                default {\\r\\n                    // 0 ** n = 0\\r\\n                    z := 0\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n                switch mod(n, 2)\\r\\n                case 0 {\\r\\n                    // If n is even, store scalar in z for now.\\r\\n                    z := scalar\\r\\n                }\\r\\n                default {\\r\\n                    // If n is odd, store x in z for now.\\r\\n                    z := x\\r\\n                }\\r\\n\\r\\n                // Shifting right by 1 is like dividing by 2.\\r\\n                let half := shr(1, scalar)\\r\\n\\r\\n                for {\\r\\n                    // Shift n right by 1 before looping to halve it.\\r\\n                    n := shr(1, n)\\r\\n                } n {\\r\\n                    // Shift n right by 1 each iteration to halve it.\\r\\n                    n := shr(1, n)\\r\\n                } {\\r\\n                    // Revert immediately if x ** 2 would overflow.\\r\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\r\\n                    if shr(128, x) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n\\r\\n                    // Store x squared.\\r\\n                    let xx := mul(x, x)\\r\\n\\r\\n                    // Round to the nearest number.\\r\\n                    let xxRound := add(xx, half)\\r\\n\\r\\n                    // Revert if xx + half overflowed.\\r\\n                    if lt(xxRound, xx) {\\r\\n                        revert(0, 0)\\r\\n                    }\\r\\n\\r\\n                    // Set x to scaled xxRound.\\r\\n                    x := div(xxRound, scalar)\\r\\n\\r\\n                    // If n is even:\\r\\n                    if mod(n, 2) {\\r\\n                        // Compute z * x.\\r\\n                        let zx := mul(z, x)\\r\\n\\r\\n                        // If z * x overflowed:\\r\\n                        if iszero(eq(div(zx, x), z)) {\\r\\n                            // Revert if x is non-zero.\\r\\n                            if iszero(iszero(x)) {\\r\\n                                revert(0, 0)\\r\\n                            }\\r\\n                        }\\r\\n\\r\\n                        // Round to the nearest number.\\r\\n                        let zxRound := add(zx, half)\\r\\n\\r\\n                        // Revert if zx + half overflowed.\\r\\n                        if lt(zxRound, zx) {\\r\\n                            revert(0, 0)\\r\\n                        }\\r\\n\\r\\n                        // Return properly scaled zxRound.\\r\\n                        z := div(zxRound, scalar)\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                        GENERAL NUMBER UTILITIES\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            // Start off with z at 1.\\r\\n            z := 1\\r\\n\\r\\n            // Used below to help find a nearby power of 2.\\r\\n            let y := x\\r\\n\\r\\n            // Find the lowest power of 2 that is at least sqrt(x).\\r\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\r\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\r\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\r\\n            }\\r\\n            if iszero(lt(y, 0x10000000000000000)) {\\r\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\r\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\r\\n            }\\r\\n            if iszero(lt(y, 0x100000000)) {\\r\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\r\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\r\\n            }\\r\\n            if iszero(lt(y, 0x10000)) {\\r\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\r\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\r\\n            }\\r\\n            if iszero(lt(y, 0x100)) {\\r\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\r\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\r\\n            }\\r\\n            if iszero(lt(y, 0x10)) {\\r\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\r\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\r\\n            }\\r\\n            if iszero(lt(y, 0x8)) {\\r\\n                // Equivalent to 2 ** z.\\r\\n                z := shl(1, z)\\r\\n            }\\r\\n\\r\\n            // Shifting right by 1 is like dividing by 2.\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n            z := shr(1, add(z, div(x, z)))\\r\\n\\r\\n            // Compute a rounded down version of z.\\r\\n            let zRoundDown := div(x, z)\\r\\n\\r\\n            // If zRoundDown is smaller, use it.\\r\\n            if lt(zRoundDown, z) {\\r\\n                z := zRoundDown\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc7548d86fa2b416be77f9d99a819602869bd077d8fc3db6fac7fac9bc2317749\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\\r\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\r\\nlibrary SafeCastLib {\\r\\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\r\\n        require(x < 1 << 248);\\r\\n\\r\\n        y = uint248(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\\r\\n        require(x < 1 << 224);\\r\\n\\r\\n        y = uint224(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\\r\\n        require(x < 1 << 192);\\r\\n\\r\\n        y = uint192(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\\r\\n        require(x < 1 << 160);\\r\\n\\r\\n        y = uint160(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\r\\n        require(x < 1 << 128);\\r\\n\\r\\n        y = uint128(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\r\\n        require(x < 1 << 96);\\r\\n\\r\\n        y = uint96(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\r\\n        require(x < 1 << 64);\\r\\n\\r\\n        y = uint64(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\r\\n        require(x < 1 << 32);\\r\\n\\r\\n        y = uint32(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\\r\\n        require(x < 1 << 24);\\r\\n\\r\\n        y = uint24(x);\\r\\n    }\\r\\n\\r\\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\\r\\n        require(x < 1 << 8);\\r\\n\\r\\n        y = uint8(x);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xde175c43f1ee6df549b9a01f39bac7ee8e7592446cb09c807628f2454acaee6d\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\r\\n\\r\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\r\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\r\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransferLib {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             ETH OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferETH(address to, uint256 amount) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Transfer the ETH and store if it succeeded or not.\\r\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\r\\n        }\\r\\n\\r\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            ERC20 OPERATIONS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        ERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeTransfer(\\r\\n        ERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"TRANSFER_FAILED\\\");\\r\\n    }\\r\\n\\r\\n    function safeApprove(\\r\\n        ERC20 token,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool success;\\r\\n\\r\\n        assembly {\\r\\n            // Get a pointer to some free memory.\\r\\n            let freeMemoryPointer := mload(0x40)\\r\\n\\r\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\r\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\r\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\r\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\r\\n\\r\\n            success := and(\\r\\n                // Set success to whether the call reverted, if not we check it either\\r\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\r\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\r\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\r\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\r\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\r\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\r\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        require(success, \\\"APPROVE_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c0075dca9374db749ed3fc781fd901694cf987812e3ef7c464d7df63de3e03a\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/vault.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport {Auth} from \\\"./auth/Auth.sol\\\";\\r\\nimport {ERC4626} from \\\"./mixins/ERC4626.sol\\\";\\r\\n\\r\\nimport {SafeCastLib} from \\\"./utils/SafeCastLib.sol\\\";\\r\\nimport {SafeTransferLib} from \\\"./utils/SafeTransferLib.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"./utils/FixedPointMathLib.sol\\\";\\r\\n\\r\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\r\\nimport {Instrument} from \\\"./instrument.sol\\\";\\r\\nimport {Controller} from \\\"../stablecoin/controller.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\n\\r\\n\\r\\ncontract Vault is ERC4626, Auth{\\r\\n\\tusing SafeCastLib for uint256; \\r\\n    using SafeTransferLib for ERC20;\\r\\n    using FixedPointMathLib for uint256;\\r\\n\\r\\n\\r\\n    event InstrumentDeposit(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\r\\n    event InstrumentWithdrawal(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\r\\n    event InstrumentTrusted(address indexed user, Instrument indexed instrument);\\r\\n    event InstrumentDistrusted(address indexed user, Instrument indexed instrument);\\r\\n\\r\\n    /*///////////////////////////////////////////////////////////////\\r\\n                                 CONSTANTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    uint256 internal BASE_UNIT;\\r\\n    uint256 totalInstrumentHoldings; //total holdings deposited into all Instruments \\r\\n    ERC20 public immutable UNDERLYING;\\r\\n    Controller private controller;\\r\\n\\r\\n    mapping(Instrument => InstrumentData) public getInstrumentData;\\r\\n    mapping(address => uint256) public  num_proposals;\\r\\n    mapping(uint256=> Instrument) Instruments; //marketID-> Instrument\\r\\n\\r\\n    enum InstrumentType {\\r\\n        CreditLine,\\r\\n        Other\\r\\n    }\\r\\n\\r\\n    /// @param trusted Whether the Instrument is trusted.\\r\\n    /// @param balance The amount of underlying tokens held in the Instrument.\\r\\n    struct InstrumentData {\\r\\n        // Used to determine if the Vault will operate on a Instrument.\\r\\n        bool trusted;\\r\\n        // Balance of the contract denominated in Underlying, \\r\\n        // used to determine profit and loss during harvests of the Instrument.  \\r\\n        // represents the amount of debt the Instrument has incurred from this vault   \\r\\n        uint248 balance; // in underlying\\r\\n        uint256 faceValue; // in underlying\\r\\n        uint256 marketId;\\r\\n    \\tuint256 principal; //this is total available allowance in underlying\\r\\n        uint256 expectedYield; // total interest paid over duration in underlying\\r\\n        uint256 duration;\\r\\n        string description;\\r\\n        address Instrument_address;\\r\\n        InstrumentType instrument_type;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _UNDERLYING,\\r\\n        address _controller\\r\\n    )\\r\\n        ERC4626(\\r\\n            ERC20(_UNDERLYING),\\r\\n            string(abi.encodePacked(\\\"debita \\\", ERC20(_UNDERLYING).name(), \\\" Vault\\\")),\\r\\n            string(abi.encodePacked(\\\"db\\\", ERC20(_UNDERLYING).symbol()))\\r\\n        )  Auth(msg.sender)\\r\\n\\r\\n    {\\r\\n        UNDERLYING = ERC20(_UNDERLYING);\\r\\n        BASE_UNIT = 10**ERC20(_UNDERLYING).decimals();\\r\\n        controller = Controller(_controller);\\r\\n\\r\\n        //totalSupply = type(uint256).max;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Harvest a trusted Instrument, records profit/loss \\r\\n    function harvest(Instrument instrument) external requiresAuth{\\r\\n        require(getInstrumentData[instrument].trusted, \\\"UNTRUSTED_Instrument\\\");\\r\\n    \\tuint256 oldTotalInstrumentHoldings = totalInstrumentHoldings; \\r\\n        uint256 balanceLastHarvest = getInstrumentData[instrument].balance;\\r\\n        uint256 balanceThisHarvest = instrument.balanceOfUnderlying(address(instrument));\\r\\n        \\r\\n        getInstrumentData[instrument].balance = balanceThisHarvest.safeCastTo248();\\r\\n        uint256 profit = balanceThisHarvest - balanceLastHarvest; \\r\\n\\r\\n        totalInstrumentHoldings = oldTotalInstrumentHoldings + profit; \\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Deposit a specific amount of float into a trusted Instrument.\\r\\n   \\t/// Called when market is approved. \\r\\n   \\t/// Also has the role of granting a credit line to a credit-based Instrument like uncol.loans \\r\\n    function depositIntoInstrument(Instrument instrument, uint256 underlyingAmount) external requiresAuth{\\r\\n    \\trequire(getInstrumentData[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\r\\n    \\ttotalInstrumentHoldings += underlyingAmount; \\r\\n\\r\\n        getInstrumentData[instrument].balance += underlyingAmount.safeCastTo248();\\r\\n\\r\\n        UNDERLYING.transfer(address(instrument), underlyingAmount);\\r\\n        emit InstrumentDeposit(msg.sender, instrument, underlyingAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraw a specific amount of underlying tokens from a Instrument.\\r\\n    function withdrawFromInstrument(Instrument instrument, uint256 underlyingAmount) external requiresAuth{\\r\\n    \\trequire(getInstrumentData[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\r\\n        getInstrumentData[instrument].balance -= underlyingAmount.safeCastTo248();\\r\\n        totalInstrumentHoldings -= underlyingAmount;\\r\\n        require(instrument.redeemUnderlying(underlyingAmount), \\\"REDEEM_FAILED\\\");\\r\\n        emit InstrumentWithdrawal(msg.sender, instrument, underlyingAmount);\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Withdraws all underyling balance from the Instrument to the vault \\r\\n    function withdrawAllFromInstrument(Instrument instrument) external requiresAuth{\\r\\n    \\tuint248 total_Instrument_balance = instrument.balanceOfUnderlying(address(instrument)).safeCastTo248();\\r\\n    \\tuint248 current_balance =  getInstrumentData[instrument].balance;\\r\\n    \\tgetInstrumentData[instrument].balance -= Math.min(total_Instrument_balance, current_balance).safeCastTo248();\\r\\n    \\tinstrument.redeemUnderlying(total_Instrument_balance);\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Stores a Instrument as trusted when its approved\\r\\n    function trustInstrument(Instrument instrument) external requiresAuth{\\r\\n    \\tgetInstrumentData[instrument].trusted = true;\\r\\n\\r\\n    }\\r\\n\\r\\n    /// @notice Stores a Instrument as untrusted\\r\\n    function distrustInstrument(Instrument instrument) external requiresAuth{\\r\\n    \\tgetInstrumentData[instrument].trusted = false; \\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice returns true if Instrument is approved\\r\\n    function isTrusted(Instrument instrument) public view returns(bool){\\r\\n    \\treturn getInstrumentData[instrument].trusted; \\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the total amount of underlying tokens the Vault holds, excluding profit \\r\\n    function totalAssets() public view override returns(uint256){\\r\\n    \\treturn totalInstrumentHoldings + totalFloat();\\r\\n    }\\r\\n\\r\\n   \\t\\r\\n    function totalFloat() public view returns (uint256) {\\r\\n        return UNDERLYING.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function fetchInstrumentData(uint256 marketId) public view returns(InstrumentData memory){\\r\\n        return getInstrumentData[Instruments[marketId]];\\r\\n    }\\r\\n\\r\\n    function onMarketApproval(uint256 marketId) external requiresAuth {\\r\\n        Instruments[marketId].onMarketApproval();\\r\\n    }\\r\\n\\r\\n    /// @notice add instrument proposal created by the Utilizer \\r\\n    /// @dev Instrument instance should be created before this is called \\r\\n    function addProposal(\\r\\n        InstrumentData memory data\\r\\n    ) external {\\r\\n        require(data.principal > 0, \\\"principal must be greater than 0\\\");\\r\\n        require(data.duration > 0, \\\"duration must be greater than 0\\\");\\r\\n        require(data.faceValue > 0, \\\"faceValue must be greater than 0\\\");\\r\\n        require(data.principal >= BASE_UNIT, \\\"Needs to be in decimal format\\\"); // should be collateral address, not DS. Can't be less than 1.0 X?\\r\\n   \\r\\n\\r\\n        num_proposals[msg.sender] ++; \\r\\n        getInstrumentData[Instrument(data.Instrument_address)] = (\\r\\n        \\tInstrumentData(\\r\\n        \\t\\tfalse, \\r\\n                0, \\r\\n                data.faceValue, \\r\\n                data.marketId, \\r\\n                data.principal, \\r\\n                data.expectedYield, \\r\\n                data.duration, \\r\\n                data.description, \\r\\n                data.Instrument_address,\\r\\n                data.instrument_type\\r\\n            )\\r\\n        \\t); \\r\\n\\r\\n        Instruments[data.marketId] = Instrument(data.Instrument_address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice called by instrument on resolution\\r\\n     */\\r\\n    function resolveMarket(\\r\\n        bool atLoss,\\r\\n        uint256 extra_gain,\\r\\n        uint256 total_loss\\r\\n    ) external {\\r\\n        require(getInstrumentData[Instrument(msg.sender)].marketId != 0, \\\"caller is not active instrument\\\");\\r\\n        controller.resolveMarket(getInstrumentData[Instrument(msg.sender)].marketId, atLoss, extra_gain, total_loss);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xdca06f025fd34c91859dbce9229309d5f76ace35e2fd0520caf2626bd4b16a9f\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526001600955670de0b6b3a7640000600b553480156200002257600080fd5b50604051620014e1380380620014e183398101604081905262000045916200022b565b604080518082018252601781527f4465626974612052657075746174696f6e20546f6b656e00000000000000000060208083019182528351808501909452600384526211149560ea1b908401528151919291620000a59160009162000185565b508051620000bb90600190602084019062000185565b505050620000f0604051806040016040528060048152602001636865726560e01b8152506200011660201b62000c651760201c565b600a80546001600160a01b0319166001600160a01b0392909216919091179055620002ee565b62000161816040516024016200012d91906200025b565b60408051601f198184030181529190526020810180516001600160e01b0390811663104c13eb60e21b179091526200016416565b50565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b8280546200019390620002b1565b90600052602060002090601f016020900481019282620001b7576000855562000202565b82601f10620001d257805160ff191683800117855562000202565b8280016001018555821562000202579182015b8281111562000202578251825591602001919060010190620001e5565b506200021092915062000214565b5090565b5b8082111562000210576000815560010162000215565b6000602082840312156200023d578081fd5b81516001600160a01b038116811462000254578182fd5b9392505050565b6000602080835283518082850152825b8181101562000289578581018301518582016040015282016200026b565b818111156200029b5783604083870101525b50601f01601f1916929092016040019392505050565b600181811c90821680620002c657607f821691505b60208210811415620002e857634e487b7160e01b600052602260045260246000fd5b50919050565b6111e380620002fe6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636352211e116100a257806395d89b411161007157806395d89b4114610249578063a22cb46514610251578063b88d4fde14610264578063c87b56dd14610277578063e985e9c51461028a57600080fd5b80636352211e146101ef5780636a6278421461020257806370a082311461021557806375a67d5c1461023657600080fd5b80630b19c264116100de5780630b19c264146101a357806323b872dd146101b657806333620eb8146101c957806342842e0e146101dc57600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b31461018e575b600080fd5b61012361011e366004610fa8565b6102b8565b60405190151581526020015b60405180910390f35b61014061030a565b60405161012f919061106b565b61017661015b366004610fe0565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b6101a161019c366004610f44565b610398565b005b6101a16101b1366004610f6d565b61047f565b6101a16101c4366004610e4a565b61053d565b6101a16101d7366004610dfe565b610704565b6101a16101ea366004610e4a565b610766565b6101766101fd366004610fe0565b61086d565b6101a1610210366004610dfe565b6108c4565b610228610223366004610dfe565b610974565b60405190815260200161012f565b610228610244366004610dfe565b6109d7565b610140610a38565b6101a161025f366004610f1b565b610a45565b6101a1610272366004610e85565b610ab1565b610140610285366004610fe0565b610ba8565b610123610298366004610e18565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b0319831614806102e957506380ac58cd60e01b6001600160e01b03198316145b806103045750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546103179061112b565b80601f01602080910402602001604051908101604052809291908181526020018280546103439061112b565b80156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114806103e157506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6104235760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6001600160a01b0383166000908152600760205260409020546104b45760405162461bcd60e51b815260040161041a9061109e565b6001600160a01b03831660009081526007602090815260408083205483526006909152902080546104eb5760018101839055610524565b80546104f89060016110c3565b81546001830154859161050a916110db565b61051491906110c3565b61051e91906110db565b60018201555b805481600061053283611166565b919050555050505050565b6000818152600260205260409020546001600160a01b038481169116146105935760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b604482015260640161041a565b6001600160a01b0382166105dd5760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b604482015260640161041a565b336001600160a01b038416148061061757506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061063857506000818152600460205260409020546001600160a01b031633145b6106755760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161041a565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600760205260409020546107395760405162461bcd60e51b815260040161041a9061109e565b6001600160a01b031660009081526007602090815260408083205483526006909152812081815560010155565b61077183838361053d565b6001600160a01b0382163b15806108295750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a401602060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190610fc4565b6001600160e01b031916145b6108685760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b604482015260640161041a565b505050565b6000818152600260205260409020546001600160a01b0316806108bf5760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b604482015260640161041a565b919050565b6001600160a01b038116600090815260076020526040902054156109355760405162461bcd60e51b815260206004820152602260248201527f63616e206f6e6c79206d696e74206f6e652072657075746174696f6e20746f6b60448201526132b760f11b606482015260840161041a565b61094181600954610cab565b600980546001600160a01b038316600090815260076020526040812082905590919061096c83611166565b919050555050565b60006001600160a01b0382166109bb5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640161041a565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b038116600090815260076020526040812054610a0c5760405162461bcd60e51b815260040161041a9061109e565b506001600160a01b03166000908152600760209081526040808320548352600690915290206001015490565b600180546103179061112b565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610abc85858561053d565b6001600160a01b0384163b1580610b625750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290610b049033908a9089908990899060040161101a565b602060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190610fc4565b6001600160e01b031916145b610ba15760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b604482015260640161041a565b5050505050565b6000818152600260205260409020546060906001600160a01b0316610c045760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21024b232b73a34b334b2b960711b604482015260640161041a565b6000610c1b60408051602081019091526000815290565b90506000815111610c3b5760405180602001604052806000815250610c5e565b8083604051602001610c4e929190610ff8565b6040516020818303038152906040525b9392505050565b610ca881604051602401610c79919061106b565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610db6565b50565b6001600160a01b038216610cf55760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b604482015260640161041a565b6000818152600260205260409020546001600160a01b031615610d4b5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b604482015260640161041a565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b03811681146108bf57600080fd5b803580151581146108bf57600080fd5b600060208284031215610e0f578081fd5b610c5e82610dd7565b60008060408385031215610e2a578081fd5b610e3383610dd7565b9150610e4160208401610dd7565b90509250929050565b600080600060608486031215610e5e578081fd5b610e6784610dd7565b9250610e7560208501610dd7565b9150604084013590509250925092565b600080600080600060808688031215610e9c578081fd5b610ea586610dd7565b9450610eb360208701610dd7565b935060408601359250606086013567ffffffffffffffff80821115610ed6578283fd5b818801915088601f830112610ee9578283fd5b813581811115610ef7578384fd5b896020828501011115610f08578384fd5b9699959850939650602001949392505050565b60008060408385031215610f2d578182fd5b610f3683610dd7565b9150610e4160208401610dee565b60008060408385031215610f56578182fd5b610f5f83610dd7565b946020939093013593505050565b600080600060608486031215610f81578283fd5b610f8a84610dd7565b925060208401359150610f9f60408501610dee565b90509250925092565b600060208284031215610fb9578081fd5b8135610c5e81611197565b600060208284031215610fd5578081fd5b8151610c5e81611197565b600060208284031215610ff1578081fd5b5035919050565b6000835161100a8184602088016110fb565b9190910191825250602001919050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a084013781830160a090810191909152601f909201601f19160101949350505050565b602081526000825180602084015261108a8160408501602087016110fb565b601f01601f19169190910160400192915050565b6020808252600b908201526a139bc8125908199bdd5b9960aa1b604082015260600190565b600082198211156110d6576110d6611181565b500190565b6000826110f657634e487b7160e01b81526012600452602481fd5b500490565b60005b838110156111165781810151838201526020016110fe565b83811115611125576000848401525b50505050565b600181811c9082168061113f57607f821691505b6020821081141561116057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561117a5761117a611181565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160e01b031981168114610ca857600080fdfea264697066735822122055aae420d303ccf72a5f5741b3a81cbae996ce1c5048a010eb990688a156860064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80636352211e116100a257806395d89b411161007157806395d89b4114610249578063a22cb46514610251578063b88d4fde14610264578063c87b56dd14610277578063e985e9c51461028a57600080fd5b80636352211e146101ef5780636a6278421461020257806370a082311461021557806375a67d5c1461023657600080fd5b80630b19c264116100de5780630b19c264146101a357806323b872dd146101b657806333620eb8146101c957806342842e0e146101dc57600080fd5b806301ffc9a71461011057806306fdde0314610138578063081812fc1461014d578063095ea7b31461018e575b600080fd5b61012361011e366004610fa8565b6102b8565b60405190151581526020015b60405180910390f35b61014061030a565b60405161012f919061106b565b61017661015b366004610fe0565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b6101a161019c366004610f44565b610398565b005b6101a16101b1366004610f6d565b61047f565b6101a16101c4366004610e4a565b61053d565b6101a16101d7366004610dfe565b610704565b6101a16101ea366004610e4a565b610766565b6101766101fd366004610fe0565b61086d565b6101a1610210366004610dfe565b6108c4565b610228610223366004610dfe565b610974565b60405190815260200161012f565b610228610244366004610dfe565b6109d7565b610140610a38565b6101a161025f366004610f1b565b610a45565b6101a1610272366004610e85565b610ab1565b610140610285366004610fe0565b610ba8565b610123610298366004610e18565b600560209081526000928352604080842090915290825290205460ff1681565b60006301ffc9a760e01b6001600160e01b0319831614806102e957506380ac58cd60e01b6001600160e01b03198316145b806103045750635b5e139f60e01b6001600160e01b03198316145b92915050565b600080546103179061112b565b80601f01602080910402602001604051908101604052809291908181526020018280546103439061112b565b80156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b0316338114806103e157506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6104235760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6001600160a01b0383166000908152600760205260409020546104b45760405162461bcd60e51b815260040161041a9061109e565b6001600160a01b03831660009081526007602090815260408083205483526006909152902080546104eb5760018101839055610524565b80546104f89060016110c3565b81546001830154859161050a916110db565b61051491906110c3565b61051e91906110db565b60018201555b805481600061053283611166565b919050555050505050565b6000818152600260205260409020546001600160a01b038481169116146105935760405162461bcd60e51b815260206004820152600a60248201526957524f4e475f46524f4d60b01b604482015260640161041a565b6001600160a01b0382166105dd5760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b604482015260640161041a565b336001600160a01b038416148061061757506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b8061063857506000818152600460205260409020546001600160a01b031633145b6106755760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b604482015260640161041a565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b0381166000908152600760205260409020546107395760405162461bcd60e51b815260040161041a9061109e565b6001600160a01b031660009081526007602090815260408083205483526006909152812081815560010155565b61077183838361053d565b6001600160a01b0382163b15806108295750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a401602060405180830381600087803b1580156107e557600080fd5b505af11580156107f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081d9190610fc4565b6001600160e01b031916145b6108685760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b604482015260640161041a565b505050565b6000818152600260205260409020546001600160a01b0316806108bf5760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b604482015260640161041a565b919050565b6001600160a01b038116600090815260076020526040902054156109355760405162461bcd60e51b815260206004820152602260248201527f63616e206f6e6c79206d696e74206f6e652072657075746174696f6e20746f6b60448201526132b760f11b606482015260840161041a565b61094181600954610cab565b600980546001600160a01b038316600090815260076020526040812082905590919061096c83611166565b919050555050565b60006001600160a01b0382166109bb5760405162461bcd60e51b815260206004820152600c60248201526b5a45524f5f4144445245535360a01b604482015260640161041a565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b038116600090815260076020526040812054610a0c5760405162461bcd60e51b815260040161041a9061109e565b506001600160a01b03166000908152600760209081526040808320548352600690915290206001015490565b600180546103179061112b565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610abc85858561053d565b6001600160a01b0384163b1580610b625750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a0290610b049033908a9089908990899060040161101a565b602060405180830381600087803b158015610b1e57600080fd5b505af1158015610b32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b569190610fc4565b6001600160e01b031916145b610ba15760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b604482015260640161041a565b5050505050565b6000818152600260205260409020546060906001600160a01b0316610c045760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21024b232b73a34b334b2b960711b604482015260640161041a565b6000610c1b60408051602081019091526000815290565b90506000815111610c3b5760405180602001604052806000815250610c5e565b8083604051602001610c4e929190610ff8565b6040516020818303038152906040525b9392505050565b610ca881604051602401610c79919061106b565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610db6565b50565b6001600160a01b038216610cf55760405162461bcd60e51b81526020600482015260116024820152701253959053125117d49150d25412515395607a1b604482015260640161041a565b6000818152600260205260409020546001600160a01b031615610d4b5760405162461bcd60e51b815260206004820152600e60248201526d1053149150511657d3525395115160921b604482015260640161041a565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b80356001600160a01b03811681146108bf57600080fd5b803580151581146108bf57600080fd5b600060208284031215610e0f578081fd5b610c5e82610dd7565b60008060408385031215610e2a578081fd5b610e3383610dd7565b9150610e4160208401610dd7565b90509250929050565b600080600060608486031215610e5e578081fd5b610e6784610dd7565b9250610e7560208501610dd7565b9150604084013590509250925092565b600080600080600060808688031215610e9c578081fd5b610ea586610dd7565b9450610eb360208701610dd7565b935060408601359250606086013567ffffffffffffffff80821115610ed6578283fd5b818801915088601f830112610ee9578283fd5b813581811115610ef7578384fd5b896020828501011115610f08578384fd5b9699959850939650602001949392505050565b60008060408385031215610f2d578182fd5b610f3683610dd7565b9150610e4160208401610dee565b60008060408385031215610f56578182fd5b610f5f83610dd7565b946020939093013593505050565b600080600060608486031215610f81578283fd5b610f8a84610dd7565b925060208401359150610f9f60408501610dee565b90509250925092565b600060208284031215610fb9578081fd5b8135610c5e81611197565b600060208284031215610fd5578081fd5b8151610c5e81611197565b600060208284031215610ff1578081fd5b5035919050565b6000835161100a8184602088016110fb565b9190910191825250602001919050565b6001600160a01b038681168252851660208201526040810184905260806060820181905281018290526000828460a084013781830160a090810191909152601f909201601f19160101949350505050565b602081526000825180602084015261108a8160408501602087016110fb565b601f01601f19169190910160400192915050565b6020808252600b908201526a139bc8125908199bdd5b9960aa1b604082015260600190565b600082198211156110d6576110d6611181565b500190565b6000826110f657634e487b7160e01b81526012600452602481fd5b500490565b60005b838110156111165781810151838201526020016110fe565b83811115611125576000848401525b50505050565b600181811c9082168061113f57607f821691505b6020821081141561116057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561117a5761117a611181565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160e01b031981168114610ca857600080fdfea264697066735822122055aae420d303ccf72a5f5741b3a81cbae996ce1c5048a010eb990688a156860064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addScore(address,uint256,bool)": {
        "params": {
          "score": ": 60.18 format"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addScore(address,uint256,bool)": {
        "notice": "calculates average of scores added."
      },
      "resetScore(address)": {
        "notice": "reset scores"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63824,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 63826,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 63837,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "_ownerOf",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 63841,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 63890,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "getApproved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 63896,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "isApprovedForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 27692,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "_reputation",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ReputationData)27716_storage)"
      },
      {
        "astId": 27696,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "_ownerToId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 27702,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "_marketData",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_struct(TraderData)27721_storage)dyn_storage)"
      },
      {
        "astId": 27705,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "nonce",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 27708,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "controller",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(Controller)22706"
      },
      {
        "astId": 27711,
        "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
        "label": "SCALE",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(TraderData)27721_storage)dyn_storage": {
        "base": "t_struct(TraderData)27721_storage",
        "encoding": "dynamic_array",
        "label": "struct ReputationNFT.TraderData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Controller)22706": {
        "encoding": "inplace",
        "label": "contract Controller",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(TraderData)27721_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReputationNFT.TraderData[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(TraderData)27721_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(ReputationData)27716_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReputationNFT.ReputationData)",
        "numberOfBytes": "32",
        "value": "t_struct(ReputationData)27716_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ReputationData)27716_storage": {
        "encoding": "inplace",
        "label": "struct ReputationNFT.ReputationData",
        "members": [
          {
            "astId": 27713,
            "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
            "label": "n",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 27715,
            "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
            "label": "score",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TraderData)27721_storage": {
        "encoding": "inplace",
        "label": "struct ReputationNFT.TraderData",
        "members": [
          {
            "astId": 27718,
            "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
            "label": "trader",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27720,
            "contract": "contracts/stablecoin/reputationtoken.sol:ReputationNFT",
            "label": "tokensBought",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}