{
  "address": "0xB8d57e97568d952686286bFC4692324230f5B798",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ds_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dss_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerNominated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "col_idx",
          "type": "uint256"
        }
      ],
      "name": "collectRedemption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dss_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastRedeemed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateral_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "DS_out_min",
          "type": "uint256"
        }
      ],
      "name": "mintDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nominateNewOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nominatedOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemCollateralBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "DS_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "DSS_out_min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "COLLATERAL_out_min",
          "type": "uint256"
        }
      ],
      "name": "redeemDS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemDSSBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "new_ceiling",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_bonus_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_redemption_delay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_mint_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_redeem_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_buyback_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "new_recollat_fee",
          "type": "uint256"
        }
      ],
      "name": "setPoolParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedPoolCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedPoolDSS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x859df3fb6babf4808c7ebf93b275603afb5592edae901769be512b3c4157c747",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0xB8d57e97568d952686286bFC4692324230f5B798",
    "transactionIndex": 12,
    "gasUsed": "1094848",
    "logsBloom": "0x
    "blockHash": "0xc61b58e41a8659eaee0654a8272bd29b58f2a273355886ba1c6ca6eee3944028",
    "transactionHash": "0x859df3fb6babf4808c7ebf93b275603afb5592edae901769be512b3c4157c747",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 26696056,
        "transactionHash": "0x859df3fb6babf4808c7ebf93b275603afb5592edae901769be512b3c4157c747",
        "address": "0xB8d57e97568d952686286bFC4692324230f5B798",
        "topics": [
          "0xb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
        "logIndex": 24,
        "blockHash": "0xc61b58e41a8659eaee0654a8272bd29b58f2a273355886ba1c6ca6eee3944028"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 26696056,
        "transactionHash": "0x859df3fb6babf4808c7ebf93b275603afb5592edae901769be512b3c4157c747",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001f1e115054f080000000000000000000000000000000000000000000000000cf43b76be14b88f5000000000000000000000000000000000000000000001a67caeb13951d943a36000000000000000000000000000000000000000000000000cf24995a90f69875000000000000000000000000000000000000000000001a67cb0a31a66de92ab6",
        "logIndex": 25,
        "blockHash": "0xc61b58e41a8659eaee0654a8272bd29b58f2a273355886ba1c6ca6eee3944028"
      }
    ],
    "blockNumber": 26696056,
    "cumulativeGasUsed": "1360554",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0449EC87720500128a59e888e167A106761CD97c",
    "0x7c8a33e19A9080648f669A2548cB87f9Fae2AE50",
    "0x5799bFe361BEea69f808328FF4884DF92f1f66f0",
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692"
  ],
  "solcInputHash": "cb0cb1886bee81de7f5b747d568ad04c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ds_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dss_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerNominated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"col_idx\",\"type\":\"uint256\"}],\"name\":\"collectRedemption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dss_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DS_out_min\",\"type\":\"uint256\"}],\"name\":\"mintDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nominateNewOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nominatedOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemCollateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"DS_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"DSS_out_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"COLLATERAL_out_min\",\"type\":\"uint256\"}],\"name\":\"redeemDS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemDSSBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"new_ceiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_bonus_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_redemption_delay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_mint_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_redeem_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_buyback_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"new_recollat_fee\",\"type\":\"uint256\"}],\"name\":\"setPoolParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPoolDSS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stablecoin/lendingpool.sol\":\"LendingPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x36b5ca4eabe888b39b10973621ca0dcc9b1508f8d06db9ddf045d7aa7c867d4a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/stablecoin/DS.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./owned.sol\\\";\\n\\ncontract DS is ERC20, Owned {\\n\\n  mapping(address => bool) pools;\\n\\n  address[] public pools_array;\\n  address deployer_address; \\n  address timelock_address; \\n\\n  uint256 genesis_supply = 1000000e18;\\n\\n\\n\\n  constructor(string memory _name,\\n        string memory _symbol,\\n        address _deployer_address,\\n        address _timelock_address) ERC20(_name, _symbol) Owned(_deployer_address) {\\n\\n    deployer_address = _deployer_address;\\n    timelock_address = _timelock_address; \\n\\n    _mint(_deployer_address, genesis_supply);\\n\\n\\n\\n  }\\n\\n  modifier onlyByOwner() {\\n        require(msg.sender == owner , \\\"Not the owner, controller, or the governance timelock\\\");\\n        _;\\n    }\\n  \\n  modifier onlyPools() {\\n     require(pools[msg.sender] == true, \\\"Only pools can call this function\\\");\\n      _;\\n  } \\n\\n  function addPool(address pool_address) public onlyByOwner {\\n      require(pool_address != address(0), \\\"Zero address detected\\\");\\n\\n      require(pools[pool_address] == false, \\\"Address already exists\\\");\\n      pools[pool_address] = true; \\n      pools_array.push(pool_address);\\n\\n      //emit PoolAdded(pool_address);\\n  }\\n\\n  function dss_price() public view returns(uint256){\\n    return 1e6; \\n  }\\n\\n  function get_collateral_ratio() public view returns(uint256){\\n    return 1e6;\\n  }\\n\\n\\n\\n\\n  function pool_mint(address to, uint256 amount) public onlyPools {\\n    _mint(to, amount);\\n  }\\n\\n  function pool_burn(address account, uint256 amount) public onlyPools {\\n   _burn(account, amount);\\n  }\\n\\n\\n}\",\"keccak256\":\"0x3329dd80d42573e346338aa768fd525a909304ff062e0a1670c77ffdc4ec4d85\"},\"contracts/stablecoin/DSS.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./owned.sol\\\";\\n\\ncontract DSS is ERC20, Owned {\\n\\n  mapping(address => bool) pools;\\n\\n  address[] public pools_array;\\n  address deployer_address; \\n  address timelock_address; \\n\\n  uint256 genesis_supply = 1000000e18;\\n\\n\\n  constructor(string memory _name,\\n        string memory _symbol,\\n        address _deployer_address,\\n        address _timelock_address) ERC20(_name, _symbol) Owned(_deployer_address) {\\n\\n\\n    deployer_address = _deployer_address;\\n    timelock_address = _timelock_address; \\n\\n    _mint(_deployer_address, genesis_supply);\\n\\n\\n\\n  }\\n\\n  modifier onlyByOwner() {\\n        require(msg.sender == owner , \\\"Not the owner, controller, or the governance timelock\\\");\\n        _;\\n    }\\n  \\n  modifier onlyPools() {\\n     require(pools[msg.sender] == true, \\\"Only pools can call this function\\\");\\n      _;\\n  } \\n\\n  function addPool(address pool_address) public onlyByOwner {\\n      require(pool_address != address(0), \\\"Zero address detected\\\");\\n\\n      require(pools[pool_address] == false, \\\"Address already exists\\\");\\n      pools[pool_address] = true; \\n      pools_array.push(pool_address);\\n\\n      //emit PoolAdded(pool_address);\\n  }\\n\\n \\n\\n\\n  function pool_mint(address to, uint256 amount) public onlyPools {\\n    _mint(to, amount);\\n  }\\n\\n  function pool_burn(address account, uint256 amount) public onlyPools {\\n    super._burn(account, amount);\\n  }\\n\\n}\",\"keccak256\":\"0x065fdebbb843442fa3ee739fc4cfbf4ca3e082172bb9e820912aa8c4f9db0b8a\"},\"contracts/stablecoin/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\n    }\\n\\n    function safeTransfer(address token, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\n    }\\n\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\n    }\\n\\n    function safeTransferETH(address to, uint value) internal {\\n        (bool success,) = to.call{value:value}(new bytes(0));\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\n    }\\n}\",\"keccak256\":\"0x5549d9f18a7d3da4a26e17309662692c129936cc4316e17ce6d7f85eb5da0b2b\",\"license\":\"MIT\"},\"contracts/stablecoin/lendingpool.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\nimport \\\"./owned.sol\\\";\\nimport \\\"./DS.sol\\\"; \\nimport \\\"./DSS.sol\\\"; \\nimport \\\"./TransferHelper.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n\\ncontract LendingPool is Owned{\\n\\n    using SafeMath for uint256;\\n\\n    address ds_address; \\n    address dss_address; \\n    address collateral_address; \\n    address creator_address; \\n    address timelock_address; \\n\\n\\n    uint256 pool_ceiling;\\n    uint256 bonus_rate;\\n    uint256 redemption_delay;\\n    uint256 minting_fee;\\n    uint256 redemption_fee;\\n    uint256 buyback_fee;\\n    uint256 recollat_fee;\\n    uint256 missing_decimals; \\n\\n    uint256 private constant PRICE_PRECISION = 1e6;\\n\\n    ERC20 private collateral_token;\\n\\n    DS private DScontract;\\n    DSS private DSScontract;\\n\\n    mapping (address => uint256) public redeemDSSBalances;\\n    mapping (address => uint256) public redeemCollateralBalances;\\n    uint256 public unclaimedPoolCollateral;\\n    uint256 public unclaimedPoolDSS;\\n    mapping (address => uint256) public lastRedeemed;\\n\\n\\n    modifier onlyByOwnGov() {\\n        require(msg.sender == timelock_address || msg.sender == owner, \\\"Not owner or timelock\\\");\\n        _;\\n    }\\n\\n    constructor (\\n        address _ds_address,\\n        address _dss_address,\\n        address _collateral_address,\\n        address _creator_address,\\n        address _timelock_address\\n       // uint256 _pool_ceiling\\n        \\n    ) public Owned(_creator_address){\\n        require(\\n            (_ds_address != address(0))\\n            && (_dss_address != address(0))\\n            && (_collateral_address != address(0))\\n            && (_creator_address != address(0))\\n            && (_timelock_address != address(0))\\n        , \\\"Zero address detected\\\"); \\n        DScontract = DS(_ds_address);\\n        DSScontract = DSS(_dss_address); \\n        ds_address = _ds_address; \\n        dss_address = _dss_address; \\n        collateral_address = _collateral_address; \\n        creator_address = _creator_address; \\n        timelock_address = _timelock_address; \\n        collateral_address = _collateral_address; \\n        collateral_token = ERC20(_collateral_address); \\n        \\n        missing_decimals = uint(18).sub(collateral_token.decimals());\\n        \\n        \\n    }\\n\\n    function mintDS(uint256 collateral_amount, uint256 DS_out_min) external  {\\n        uint256 collateral_amount_d18 = collateral_amount * (10 ** missing_decimals);\\n      \\n        uint256 DS_amount_18 = collateral_amount_d18; //1to1\\n        DS_amount_18 = (DS_amount_18.mul(uint(1e6).sub(minting_fee))).div(uint(1e6));\\n        require(DS_out_min <= DS_amount_18); \\n\\n        TransferHelper.safeTransferFrom(address(collateral_token), msg.sender, address(this), collateral_amount);\\n        DScontract.pool_mint(msg.sender, DS_amount_18);\\n        \\n    }\\n\\n\\n    function redeemDS(uint256 DS_amount, uint256 DSS_out_min, uint256 COLLATERAL_out_min) external {\\n        uint256 dss_price = DScontract.dss_price();\\n        uint256 collateral_ratio = DScontract.get_collateral_ratio(); \\n        uint256 DS_amount_18 = DS_amount.mul(10**missing_decimals);\\n\\n        uint256 DS_amount_post_fee = (DS_amount.mul(uint(1e6).sub(redemption_fee))).div(uint(1e6)); \\n        uint256 dss_dollar_value = DS_amount_post_fee.sub(DS_amount_post_fee.mul(collateral_ratio).div(PRICE_PRECISION)); \\n        uint256 dss_amount = dss_dollar_value.mul(PRICE_PRECISION).div(dss_price); \\n\\n        uint256 DS_amount_precision = DS_amount_post_fee;\\n        uint256 collateral_dollar_value = DS_amount_precision.mul(collateral_ratio).div(PRICE_PRECISION);\\n        uint256 collateral_amount = collateral_dollar_value;//.mul(10**missing_decimals); //for now assume collateral is stable \\n\\n        redeemCollateralBalances[msg.sender] = redeemCollateralBalances[msg.sender].add(collateral_amount);\\n        unclaimedPoolCollateral = unclaimedPoolCollateral.add(collateral_amount);\\n\\n        redeemDSSBalances[msg.sender] = redeemDSSBalances[msg.sender].add(dss_amount);\\n        unclaimedPoolDSS = unclaimedPoolDSS.add(dss_amount);\\n\\n        lastRedeemed[msg.sender] = block.number; \\n        DScontract.pool_burn(msg.sender, DS_amount_18);\\n        DSScontract.pool_mint(address(this), dss_amount);\\n\\n\\n\\n    }\\n\\n    function collectRedemption(uint256 col_idx) external returns (uint256 dss_amount, uint256 collateral_amount) {\\n        // require(redeemPaused[col_idx] == false, \\\"Redeeming is paused\\\");\\n        // require((lastRedeemed[msg.sender].add(redemption_delay)) <= block.number, \\\"Too soon\\\");\\n        bool sendDSS = false; \\n        bool sendCollateral = false; \\n\\n        if (redeemDSSBalances[msg.sender]>0){\\n            dss_amount = redeemDSSBalances[msg.sender]; \\n            redeemDSSBalances[msg.sender] = 0; \\n            unclaimedPoolDSS = unclaimedPoolDSS.sub(dss_amount); \\n            sendDSS = true;\\n        }\\n\\n        if (redeemCollateralBalances[msg.sender]>0){\\n            collateral_amount = redeemCollateralBalances[msg.sender]; \\n            redeemCollateralBalances[msg.sender] = 0; \\n            unclaimedPoolCollateral = unclaimedPoolCollateral.sub(collateral_amount);\\n            sendCollateral = true;\\n        }\\n\\n        if (sendDSS){\\n            TransferHelper.safeTransfer(address(DSScontract), msg.sender, dss_amount);\\n        }\\n\\n        if (sendCollateral){\\n            TransferHelper.safeTransfer(collateral_address, msg.sender, collateral_amount);\\n\\n        }\\n\\n    }\\n    function setPoolParameters(uint256 new_ceiling, uint256 new_bonus_rate, uint256 new_redemption_delay, uint256 new_mint_fee, uint256 new_redeem_fee, uint256 new_buyback_fee, uint256 new_recollat_fee) external onlyByOwnGov {\\n        pool_ceiling = new_ceiling;\\n        bonus_rate = new_bonus_rate;\\n        redemption_delay = new_redemption_delay;\\n        minting_fee = new_mint_fee;\\n        redemption_fee = new_redeem_fee;\\n        buyback_fee = new_buyback_fee;\\n        recollat_fee = new_recollat_fee;\\n\\n        //emit PoolParametersSet(new_ceiling, new_bonus_rate, new_redemption_delay, new_mint_fee, new_redeem_fee, new_buyback_fee, new_recollat_fee);\\n    }\\n\\n}\",\"keccak256\":\"0xd35433b5b3fae787b96346a5bd04b4d3c501f34e1a28c280cd5ca842925ef728\"},\"contracts/stablecoin/owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.7.6;\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor (address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\",\"keccak256\":\"0x424e4023f916b150f1e478dc726a50b05c240504eb8e550621117744970f7f0f\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161119e38038061119e833981810160405260a081101561003357600080fd5b50805160208201516040830151606084015160809094015192939192909190816001600160a01b0381166100ae576040805162461bcd60e51b815260206004820152601960248201527f4f776e657220616464726573732063616e6e6f74206265203000000000000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038316908117825560408051928352602083019190915280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a1506001600160a01b0385161580159061012757506001600160a01b03841615155b801561013b57506001600160a01b03831615155b801561014f57506001600160a01b03821615155b801561016357506001600160a01b03811615155b6101b4576040805162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573732064657465637465640000000000000000000000604482015290519081900360640190fd5b601080546001600160a01b03199081166001600160a01b038881169182179093556011805483168885169081179091556002805484169092179091556003805483169091179055600480546005805484168786161790556006805484168686161790558216868416908117831681178255600f805490931617918290556040805163313ce56760e01b815290516102af94939093169263313ce56792828101926020929190829003018186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d602081101561029757600080fd5b505160129060ff166102bd602090811b61094e17901c565b600e555061031a9350505050565b600082821115610314576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b610e75806103296000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063abae2c4c11610066578063abae2c4c14610210578063bcecd40f14610236578063f43038c51461023e578063f57e3fa514610264576100cf565b80638da5cb5b146101a95780639d202bf8146101b15780639f59ae4d146101e7576100cf565b806308a7493d146100d45780631627540c1461010c5780634ebbe7621461013457806353a47bb71461017557806379ba5097146101995780637b0461e9146101a1575b600080fd5b6100fa600480360360208110156100ea57600080fd5b50356001600160a01b0316610287565b60408051918252519081900360200190f35b6101326004803603602081101561012257600080fd5b50356001600160a01b0316610299565b005b610132600480360360e081101561014a57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c00135610336565b61017d6103c2565b604080516001600160a01b039092168252519081900360200190f35b6101326103d1565b6100fa61048d565b61017d610493565b6101ce600480360360208110156101c757600080fd5b50356104a2565b6040805192835260208301919091528051918290030190f35b610132600480360360608110156101fd57600080fd5b508035906020810135906040013561056a565b6100fa6004803603602081101561022657600080fd5b50356001600160a01b0316610852565b6100fa610864565b6100fa6004803603602081101561025457600080fd5b50356001600160a01b031661086a565b6101326004803603604081101561027a57600080fd5b508035906020013561087c565b60136020526000908152604090205481565b6000546001600160a01b031633146102e25760405162461bcd60e51b815260040180806020018281038252602f815260200180610dcc602f913960400191505060405180910390fd5b600180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229181900360200190a150565b6006546001600160a01b031633148061035957506000546001600160a01b031633145b6103a2576040805162461bcd60e51b81526020600482015260156024820152744e6f74206f776e6572206f722074696d656c6f636b60581b604482015290519081900360640190fd5b600796909655600894909455600992909255600a55600b55600c55600d55565b6001546001600160a01b031681565b6001546001600160a01b0316331461041a5760405162461bcd60e51b8152600401808060200182810382526035815260200180610d976035913960400191505060405180910390fd5b600054600154604080516001600160a01b03938416815292909116602083015280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60145481565b6000546001600160a01b031681565b33600090815260126020526040812054819081908190156104e95733600090815260126020526040812080549190556015549094506104e1908561094e565b601555600191505b3360009081526013602052604090205415610529573360009081526013602052604081208054919055601454909350610522908461094e565b6014555060015b811561054657601154610546906001600160a01b031633866109b0565b801561056357600454610563906001600160a01b031633856109b0565b5050915091565b60105460408051634ed9ac1f60e01b815290516000926001600160a01b031691634ed9ac1f916004808301926020929190829003018186803b1580156105af57600080fd5b505afa1580156105c3573d6000803e3d6000fd5b505050506040513d60208110156105d957600080fd5b505160105460408051635451086360e01b815290519293506000926001600160a01b0390921691635451086391600480820192602092909190829003018186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d602081101561065057600080fd5b5051600e54909150600090610669908790600a0a610b19565b9050600061069c620f424061069661068f600b54620f424061094e90919063ffffffff16565b8a90610b19565b90610b79565b905060006106bb6106b4620f42406106968588610b19565b839061094e565b905060006106d08661069684620f4240610b19565b90508260006106e6620f4240610696848a610b19565b3360009081526013602052604090205490915081906107059082610be0565b336000908152601360205260409020556014546107229082610be0565b6014553360009081526012602052604090205461073f9085610be0565b3360009081526012602052604090205560155461075c9085610be0565b601555336000818152601660205260408082204390556010548151631211faed60e31b81526004810194909452602484018b905290516001600160a01b039091169263908fd76892604480830193919282900301818387803b1580156107c157600080fd5b505af11580156107d5573d6000803e3d6000fd5b505060115460408051635a7ab59360e11b81523060048201526024810189905290516001600160a01b03909216935063b4f56b26925060448082019260009290919082900301818387803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b50505050505050505050505050505050565b60166020526000908152604090205481565b60155481565b60126020526000908152604090205481565b6000600e54600a0a8302905060008190506108b6620f42406106966108af600a54620f424061094e90919063ffffffff16565b8490610b19565b9050808311156108c557600080fd5b600f546108dd906001600160a01b0316333087610c3a565b60105460408051635a7ab59360e11b81523360048201526024810184905290516001600160a01b039092169163b4f56b269160448082019260009290919082900301818387803b15801561093057600080fd5b505af1158015610944573d6000803e3d6000fd5b5050505050505050565b6000828211156109a5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b60208310610a2c5780518252601f199092019160209182019101610a0d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a8e576040519150601f19603f3d011682016040523d82523d6000602084013e610a93565b606091505b5091509150818015610ac1575080511580610ac15750808060200190516020811015610abe57600080fd5b50515b610b12576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600082610b28575060006109aa565b82820282848281610b3557fe5b0414610b725760405162461bcd60e51b8152600401808060200182810382526021815260200180610dfb6021913960400191505060405180910390fd5b9392505050565b6000808211610bcf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610bd857fe5b049392505050565b600082820183811015610b72576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310610cbe5780518252601f199092019160209182019101610c9f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610d20576040519150601f19603f3d011682016040523d82523d6000602084013e610d25565b606091505b5091509150818015610d53575080511580610d535750808060200190516020811015610d5057600080fd5b50515b610d8e5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e1c6024913960400191505060405180910390fd5b50505050505056fe596f75206d757374206265206e6f6d696e61746564206265666f726520796f752063616e20616363657074206f776e6572736869704f6e6c792074686520636f6e7472616374206f776e6572206d617920706572666f726d207468697320616374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220da9d4cd33f7e48e34a4201ac1eef9b55829561e8c1bf399671ee62e8f535ae7e64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063abae2c4c11610066578063abae2c4c14610210578063bcecd40f14610236578063f43038c51461023e578063f57e3fa514610264576100cf565b80638da5cb5b146101a95780639d202bf8146101b15780639f59ae4d146101e7576100cf565b806308a7493d146100d45780631627540c1461010c5780634ebbe7621461013457806353a47bb71461017557806379ba5097146101995780637b0461e9146101a1575b600080fd5b6100fa600480360360208110156100ea57600080fd5b50356001600160a01b0316610287565b60408051918252519081900360200190f35b6101326004803603602081101561012257600080fd5b50356001600160a01b0316610299565b005b610132600480360360e081101561014a57600080fd5b5080359060208101359060408101359060608101359060808101359060a08101359060c00135610336565b61017d6103c2565b604080516001600160a01b039092168252519081900360200190f35b6101326103d1565b6100fa61048d565b61017d610493565b6101ce600480360360208110156101c757600080fd5b50356104a2565b6040805192835260208301919091528051918290030190f35b610132600480360360608110156101fd57600080fd5b508035906020810135906040013561056a565b6100fa6004803603602081101561022657600080fd5b50356001600160a01b0316610852565b6100fa610864565b6100fa6004803603602081101561025457600080fd5b50356001600160a01b031661086a565b6101326004803603604081101561027a57600080fd5b508035906020013561087c565b60136020526000908152604090205481565b6000546001600160a01b031633146102e25760405162461bcd60e51b815260040180806020018281038252602f815260200180610dcc602f913960400191505060405180910390fd5b600180546001600160a01b0383166001600160a01b0319909116811790915560408051918252517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229181900360200190a150565b6006546001600160a01b031633148061035957506000546001600160a01b031633145b6103a2576040805162461bcd60e51b81526020600482015260156024820152744e6f74206f776e6572206f722074696d656c6f636b60581b604482015290519081900360640190fd5b600796909655600894909455600992909255600a55600b55600c55600d55565b6001546001600160a01b031681565b6001546001600160a01b0316331461041a5760405162461bcd60e51b8152600401808060200182810382526035815260200180610d976035913960400191505060405180910390fd5b600054600154604080516001600160a01b03938416815292909116602083015280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b60145481565b6000546001600160a01b031681565b33600090815260126020526040812054819081908190156104e95733600090815260126020526040812080549190556015549094506104e1908561094e565b601555600191505b3360009081526013602052604090205415610529573360009081526013602052604081208054919055601454909350610522908461094e565b6014555060015b811561054657601154610546906001600160a01b031633866109b0565b801561056357600454610563906001600160a01b031633856109b0565b5050915091565b60105460408051634ed9ac1f60e01b815290516000926001600160a01b031691634ed9ac1f916004808301926020929190829003018186803b1580156105af57600080fd5b505afa1580156105c3573d6000803e3d6000fd5b505050506040513d60208110156105d957600080fd5b505160105460408051635451086360e01b815290519293506000926001600160a01b0390921691635451086391600480820192602092909190829003018186803b15801561062657600080fd5b505afa15801561063a573d6000803e3d6000fd5b505050506040513d602081101561065057600080fd5b5051600e54909150600090610669908790600a0a610b19565b9050600061069c620f424061069661068f600b54620f424061094e90919063ffffffff16565b8a90610b19565b90610b79565b905060006106bb6106b4620f42406106968588610b19565b839061094e565b905060006106d08661069684620f4240610b19565b90508260006106e6620f4240610696848a610b19565b3360009081526013602052604090205490915081906107059082610be0565b336000908152601360205260409020556014546107229082610be0565b6014553360009081526012602052604090205461073f9085610be0565b3360009081526012602052604090205560155461075c9085610be0565b601555336000818152601660205260408082204390556010548151631211faed60e31b81526004810194909452602484018b905290516001600160a01b039091169263908fd76892604480830193919282900301818387803b1580156107c157600080fd5b505af11580156107d5573d6000803e3d6000fd5b505060115460408051635a7ab59360e11b81523060048201526024810189905290516001600160a01b03909216935063b4f56b26925060448082019260009290919082900301818387803b15801561082c57600080fd5b505af1158015610840573d6000803e3d6000fd5b50505050505050505050505050505050565b60166020526000908152604090205481565b60155481565b60126020526000908152604090205481565b6000600e54600a0a8302905060008190506108b6620f42406106966108af600a54620f424061094e90919063ffffffff16565b8490610b19565b9050808311156108c557600080fd5b600f546108dd906001600160a01b0316333087610c3a565b60105460408051635a7ab59360e11b81523360048201526024810184905290516001600160a01b039092169163b4f56b269160448082019260009290919082900301818387803b15801561093057600080fd5b505af1158015610944573d6000803e3d6000fd5b5050505050505050565b6000828211156109a5576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1781529251825160009485949389169392918291908083835b60208310610a2c5780518252601f199092019160209182019101610a0d565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610a8e576040519150601f19603f3d011682016040523d82523d6000602084013e610a93565b606091505b5091509150818015610ac1575080511580610ac15750808060200190516020811015610abe57600080fd5b50515b610b12576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600082610b28575060006109aa565b82820282848281610b3557fe5b0414610b725760405162461bcd60e51b8152600401808060200182810382526021815260200180610dfb6021913960400191505060405180910390fd5b9392505050565b6000808211610bcf576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610bd857fe5b049392505050565b600082820183811015610b72576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b178152925182516000948594938a169392918291908083835b60208310610cbe5780518252601f199092019160209182019101610c9f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610d20576040519150601f19603f3d011682016040523d82523d6000602084013e610d25565b606091505b5091509150818015610d53575080511580610d535750808060200190516020811015610d5057600080fd5b50515b610d8e5760405162461bcd60e51b8152600401808060200182810382526024815260200180610e1c6024913960400191505060405180910390fd5b50505050505056fe596f75206d757374206265206e6f6d696e61746564206265666f726520796f752063616e20616363657074206f776e6572736869704f6e6c792074686520636f6e7472616374206f776e6572206d617920706572666f726d207468697320616374696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e7366657248656c7065723a205452414e534645525f46524f4d5f4641494c4544a2646970667358221220da9d4cd33f7e48e34a4201ac1eef9b55829561e8c1bf399671ee62e8f535ae7e64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12811,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12813,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "nominatedOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 12238,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "ds_address",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 12240,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "dss_address",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 12242,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "collateral_address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 12244,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "creator_address",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 12246,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "timelock_address",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 12248,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "pool_ceiling",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12250,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "bonus_rate",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12252,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redemption_delay",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12254,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "minting_fee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 12256,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redemption_fee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 12258,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "buyback_fee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12260,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "recollat_fee",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12262,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "missing_decimals",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12267,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "collateral_token",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(ERC20)1013"
      },
      {
        "astId": 12269,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "DScontract",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(DS)11913"
      },
      {
        "astId": 12271,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "DSScontract",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(DSS)12065"
      },
      {
        "astId": 12275,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redeemDSSBalances",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12279,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "redeemCollateralBalances",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12281,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "unclaimedPoolCollateral",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 12283,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "unclaimedPoolDSS",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 12287,
        "contract": "contracts/stablecoin/lendingpool.sol:LendingPool",
        "label": "lastRedeemed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DS)11913": {
        "encoding": "inplace",
        "label": "contract DS",
        "numberOfBytes": "20"
      },
      "t_contract(DSS)12065": {
        "encoding": "inplace",
        "label": "contract DSS",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)1013": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}