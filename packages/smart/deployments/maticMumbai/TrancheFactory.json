{
  "address": "0xcBff2FEBd3Ddd1cF9F3620844D08290a298665Aa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ammFactory_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_want",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "_instruments",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "_ratios",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "_junior_weight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_promisedReturn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_time_to_maturity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            }
          ],
          "internalType": "struct TrancheFactory.InitParams",
          "name": "param",
          "type": "tuple"
        }
      ],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpshares",
          "type": "uint256"
        }
      ],
      "name": "decreaseLPTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getAmm",
      "outputs": [
        {
          "internalType": "contract StableSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getContracts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "splitter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "amm",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "_want",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "_instruments",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "_ratios",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "_junior_weight",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_promisedReturn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "_time_to_maturity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "vaultId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TrancheFactory.InitParams",
              "name": "param",
              "type": "tuple"
            }
          ],
          "internalType": "struct TrancheFactory.Contracts",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getLPTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getSplitter",
      "outputs": [
        {
          "internalType": "contract Splitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getSuperVault",
      "outputs": [
        {
          "internalType": "contract tVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpshares",
          "type": "uint256"
        }
      ],
      "name": "increaseLPTokenBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x578297b0a40b883d5bf684764fd1014e844687eefba41304011dda23aea199f4",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0xcBff2FEBd3Ddd1cF9F3620844D08290a298665Aa",
    "transactionIndex": 5,
    "gasUsed": "4968793",
    "logsBloom": "0x
    "blockHash": "0x68f4b9eb603e0d2820ca00921254b424a007ed7f30aa0b18f597f32a42183f33",
    "transactionHash": "0x578297b0a40b883d5bf684764fd1014e844687eefba41304011dda23aea199f4",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27668558,
        "transactionHash": "0x578297b0a40b883d5bf684764fd1014e844687eefba41304011dda23aea199f4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008d38ba2adba2860000000000000000000000000000000000000000000000028fefab9741db6cca0000000000000000000000000000000000000000000014107f84945e820c93a60000000000000000000000000000000000000000000000028f6272dd16ffca440000000000000000000000000000000000000000000014108011cd18ace8362c",
        "logIndex": 11,
        "blockHash": "0x68f4b9eb603e0d2820ca00921254b424a007ed7f30aa0b18f597f32a42183f33"
      }
    ],
    "blockNumber": 27668558,
    "cumulativeGasUsed": "5667891",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xa94Ab06f65A3D75dc183abBA737E9BF4f630BD91"
  ],
  "numDeployments": 1,
  "solcInputHash": "29a83bf9ac7eb91e37e2651095822cf1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammFactory_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_instruments\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_junior_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_promisedReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time_to_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct TrancheFactory.InitParams\",\"name\":\"param\",\"type\":\"tuple\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpshares\",\"type\":\"uint256\"}],\"name\":\"decreaseLPTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getAmm\",\"outputs\":[{\"internalType\":\"contract StableSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"splitter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"amm\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_want\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_instruments\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_junior_weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_promisedReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_time_to_maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"internalType\":\"struct TrancheFactory.InitParams\",\"name\":\"param\",\"type\":\"tuple\"}],\"internalType\":\"struct TrancheFactory.Contracts\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getLPTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getSplitter\",\"outputs\":[{\"internalType\":\"contract Splitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getSuperVault\",\"outputs\":[{\"internalType\":\"contract tVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpshares\",\"type\":\"uint256\"}],\"name\":\"increaseLPTokenBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createVault((address,address[],uint256[],uint256,uint256,uint256,uint256))\":{\"details\":\"a bid is filled when liquidity provider agrees to provide initial liq for senior/junior or vice versa.   so initial liq should be provided nonetheless \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createVault((address,address[],uint256[],uint256,uint256,uint256,uint256))\":{\"notice\":\"adds vaults, spllitters, and amms when tranche bids are filled  Bidders have to specify the  param want: underlying token for all the vaults e.g(usdc,eth) param instruments: addresses of all vaults for the want they want exposure to param ratios: how much they want to split between the instruments  param junior weight: how much the juniors are allocated; lower means higher leverage for juniors but lower safety for seniors param promisedReturn: how much fixed income seniors are getting paid primarily,  param timetomaturity: when the tVault matures and tranche token holders can redeem their tranche for tVault \"},\"increaseLPTokenBalance(address,uint256,uint256)\":{\"notice\":\"lp token balance is stored in this contract\"}},\"notice\":\"contract that stores the contracts and liquidity for each tranches \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/vault_tranche/tranchemaster.sol\":\"TrancheFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/prb/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x4) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\",\"keccak256\":\"0xe7c890390f136477835cd5ca21aff681fdf36f1d79a3166b679afcc9d8c3122b\",\"license\":\"Unlicense\"},\"contracts/prb/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\",\"keccak256\":\"0xf642499f1cbe1d382342af37d2850edc34d2348d4343e4abfd25148a34d03575\",\"license\":\"Unlicense\"},\"contracts/vaults/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n    mapping(address=>bool) Authorized; \\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        //Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return(user == owner || Authorized[user]);\\n        //return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setNewAuthority(address newAuthority) public {\\n        require(msg.sender == owner );\\n        Authorized[newAuthority] = true; \\n\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x46c0e8d518396b50d7dc7f0050d716a5643afad9320b0cd27490fd8e00689dc7\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/instrument.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport \\\"./vault.sol\\\";\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../prb/PRBMathUD60x18.sol\\\";\\n\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\nabstract contract Instrument {\\n\\n    modifier onlyUtilizer() {\\n        require(msg.sender == Utilizer, \\\"!Utilizer\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == Utilizer || msg.sender == vault.owner(), \\\"!authorized\\\");\\n        _;\\n    }\\n\\n\\n    ERC20 public underlying;\\n    Vault public vault; \\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    /// @notice address of user who submits the liquidity proposal \\n    address Utilizer; \\n\\n    /// @notice initializes a new Instrument \\n    function _initialize(\\n        address _vault,\\n        address _Utilizer\\n    ) internal {\\n        vault = Vault(_vault);\\n        underlying = ERC20(vault.UNDERLYING());\\n        underlying.approve(_vault, MAX_UINT); // Give Vault unlimited access \\n        Utilizer = _Utilizer;\\n\\n    }\\n\\n\\n    function setUtilizer(address _Utilizer) external onlyAuthorized {\\n        require(_Utilizer != address(0));\\n        Utilizer = _Utilizer;\\n    }\\n\\n\\n    /// @notice Withdraws a specific amount of underlying tokens from the Instrument.\\n    /// @param amount The amount of underlying tokens to withdraw.\\n    /// @return An error code, or 0 if the withdrawal was successful.\\n    function redeemUnderlying(uint256 amount) external  returns (bool){\\n        return underlying.transfer(address(vault), amount); \\n    }\\n\\n    /// @notice Returns a user's Instrument balance in underlying tokens.\\n    /// @param user The user to get the underlying balance of.\\n    /// @return The user's Instrument balance in underlying tokens.\\n    /// @dev May mutate the state of the Instrument by accruing interest.\\n    function balanceOfUnderlying(address user) external  returns (uint256){\\n        return underlying.balanceOf(user); \\n        }\\n}\\n\\n\\n\\n/// @notice Simple Instrument that provides USDC on stableswap 3pool \\ncontract Curve3pool_Instrument is Instrument{\\n\\n    /// @notice invests amount into Instrument \\n    function invest(uint256 amount ) external \\n    //onlyGuardian \\n    {   \\n        require(this.balanceOfUnderlying(address(this)) >= amount);\\n        _invest(amount);  \\n\\n    }\\n\\n    function _invest(uint256 _amount) internal {\\n\\n    }\\n\\n\\n\\n}\\n\\n\\n/// @notice Instrument that a) lends usdc fix rate at notional.finance and get zcb\\n/// b) use that zcb as collateral to borrow fiat from fiatdao, c) swap fiat dao to usdc\\n/// d) repeat\\ncontract LeveragedFixedRate_Instrument is Instrument{\\n\\n}\\n\\n/// @notice Instrument that lends to risky collateral in fuse pools\\ncontract RariLend_Instrument is Instrument{\\n\\n}\\n\\n\\n\\n \\n/// @notice Contract for unsecured loans, each instance will be associated to a borrower+marketId\\n/// approved borrowers will interact with this contract to borrow, repay. \\n/// and vault will supply principal and harvest principal/interest \\ncontract CreditLine is Instrument {\\n    using PRBMathUD60x18 for uint256;\\n\\n    //  variables initiated at creation\\n    uint256  principal;\\n    uint256  interestAPR; \\n    uint256  faceValue; //total amount due, i.e principal+interest\\n    uint256  duration; \\n\\n    // Modify-able Variables during repayments, borrow\\n    uint256 totalOwed; \\n    uint256 principalOwed; \\n    uint256 interestOwed; \\n    uint256 maturityDate;\\n\\n    constructor(\\n        address vault,\\n        address borrower, \\n        uint256 principal,\\n        uint256 interestAPR, \\n        uint256 duration,\\n        uint256 faceValue\\n    ) public {\\n        initialize(vault, borrower, principal, interestAPR, duration, faceValue);\\n    }\\n\\n    /// @notice CreditLine contract is initiated at proposal \\n    /// @dev include any Instrument specific initialization logic  \\n    /// @param _borrower stored as Utilizer \\n    function initialize(\\n        address _vault,\\n        address _borrower,         \\n        uint256 _principal,\\n        uint256 _interestAPR, \\n        uint256 _duration, \\n        uint256 _faceValue\\n    ) internal {\\n        _initialize(_vault, _borrower); \\n\\n        principal = _principal; \\n        interestAPR = _interestAPR; \\n        duration = _duration;   \\n        faceValue = _faceValue; \\n\\n        interestOwed = getOwedInterest(_interestAPR, _duration); \\n    }\\n\\n    /// @notice use APR and duration to get total owed interest \\n    function getOwedInterest(uint256 APR, uint256 duration) internal pure returns(uint256 owed){\\n        return APR; \\n    }\\n\\n    /// @notice Allows a borrower to borrow on their creditline.\\n    function drawdown(uint256 amount) external onlyUtilizer{\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\n        require(underlying.balanceOf(address(this)) > amount, \\\"Exceeds Credit\\\");\\n        require(block.timestamp <= maturityDate, \\\"Instrument must not have matured\\\");\\n        totalOwed += amount; \\n        principalOwed += amount; \\n        underlying.transfer(msg.sender, amount);\\n    }\\n\\n    /// @notice sets the maturity date for the instrument, after which the user can no longer borrow any funds.\\n    function setTime() external onlyUtilizer {\\n        maturityDate = block.timestamp + duration;\\n    }\\n\\n\\n    /// @notice allows a borrower to repay their loan\\n    function repay(uint256 repay_principal, uint256 repay_interest) external onlyUtilizer{\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\n        underlying.transferFrom(msg.sender, address(this), repay_principal + repay_interest);\\n        handleRepay(repay_principal, repay_interest); \\n    }   \\n\\n    /// @notice updates balances after repayment\\n    function handleRepay(uint256 repay_principal, uint256 repay_interest) internal {\\n        totalOwed -= Math.min((repay_principal + repay_interest), totalOwed); \\n        principalOwed -= Math.min(repay_principal, principalOwed);\\n        interestOwed -= Math.min(repay_interest, interestOwed);\\n    }\\n\\n    function resolveLoan() external onlyUtilizer{\\n        \\n    }\\n}\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x6201eaa09e7cd543f65b6219778166867702af22921ac042c31a31a5b8e40db8\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n// import {ERC20} from \\\"../../ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n   \\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe647a3196ee460c1f8f855c4c0982d2896ec8b3287367622716265ecfe5d4748\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\n        require(x < 1 << 248);\\n\\n        y = uint248(x);\\n    }\\n\\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\\n        require(x < 1 << 224);\\n\\n        y = uint224(x);\\n    }\\n\\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\\n        require(x < 1 << 192);\\n\\n        y = uint192(x);\\n    }\\n\\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\\n        require(x < 1 << 160);\\n\\n        y = uint160(x);\\n    }\\n\\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\n        require(x < 1 << 128);\\n\\n        y = uint128(x);\\n    }\\n\\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\n        require(x < 1 << 96);\\n\\n        y = uint96(x);\\n    }\\n\\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\n        require(x < 1 << 64);\\n\\n        y = uint64(x);\\n    }\\n\\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\n        require(x < 1 << 32);\\n\\n        y = uint32(x);\\n    }\\n\\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\\n        require(x < 1 << 24);\\n\\n        y = uint24(x);\\n    }\\n\\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\\n        require(x < 1 << 8);\\n\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x636e0f18c1b287c9342e14660a914b37a927d9f64d6c29e27016784979ce8d59\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/vault.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nimport {Auth} from \\\"./auth/Auth.sol\\\";\\nimport {ERC4626} from \\\"./mixins/ERC4626.sol\\\";\\n\\nimport {SafeCastLib} from \\\"./utils/SafeCastLib.sol\\\";\\nimport {SafeTransferLib} from \\\"./utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"./utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\nimport {Instrument} from \\\"./instrument.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n\\ncontract Vault is ERC4626, Auth{\\n\\tusing SafeCastLib for uint256; \\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n\\n    event InstrumentDeposit(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\n    event InstrumentWithdrawal(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\n    event InstrumentTrusted(address indexed user, Instrument indexed instrument);\\n    event InstrumentDistrusted(address indexed user, Instrument indexed instrument);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal BASE_UNIT;\\n    uint256 totalInstrumentHoldings; //total holdings deposited into all Instruments \\n    ERC20 public immutable UNDERLYING;\\n\\n    mapping(Instrument => InstrumentData) public getInstrumentData;\\n    mapping(address => uint256) public  num_proposals;\\n    mapping(uint256=> Instrument) Instruments; //marketID-> Instrument\\n\\n    /// @param trusted Whether the Instrument is trusted.\\n    /// @param balance The amount of underlying tokens held in the Instrument.\\n    struct InstrumentData {\\n        // Used to determine if the Vault will operate on a Instrument.\\n        bool trusted;\\n        // Balance of the contract denominated in Underlying, \\n        // used to determine profit and loss during harvests of the Instrument.  \\n        // represents the amount of debt the Instrument has incurred from this vault   \\n        uint248 balance;\\n        uint256 faceValue;\\n        uint256 marketId;\\n    \\tuint256 principal; //this is total available allowance\\n        uint256 expectedYield; // total interest paid over duration\\n        uint256 duration;\\n        string description;\\n        address Instrument_address;    \\n    }\\n\\n    constructor(address _UNDERLYING)\\n        ERC4626(\\n            ERC20(_UNDERLYING),\\n            string(abi.encodePacked(\\\"debita \\\", ERC20(_UNDERLYING).name(), \\\" Vault\\\")),\\n            string(abi.encodePacked(\\\"db\\\", ERC20(_UNDERLYING).symbol()))\\n        )  Auth(msg.sender)\\n\\n    {\\n        UNDERLYING = ERC20(_UNDERLYING);\\n        BASE_UNIT = 10**ERC20(_UNDERLYING).decimals();\\n\\n        //totalSupply = type(uint256).max;\\n    }\\n\\n\\n    /// @notice Harvest a trusted Instrument, records profit/loss \\n    function harvest(Instrument instrument) external requiresAuth{\\n        require(getInstrumentData[instrument].trusted, \\\"UNTRUSTED_Instrument\\\");\\n    \\tuint256 oldTotalInstrumentHoldings = totalInstrumentHoldings; \\n        uint256 balanceLastHarvest = getInstrumentData[instrument].balance;\\n        uint256 balanceThisHarvest = instrument.balanceOfUnderlying(address(instrument));\\n        \\n        getInstrumentData[instrument].balance = balanceThisHarvest.safeCastTo248();\\n        uint256 profit = balanceThisHarvest - balanceLastHarvest; \\n\\n        totalInstrumentHoldings = oldTotalInstrumentHoldings + profit; \\n\\n    }\\n\\n    /// @notice Deposit a specific amount of float into a trusted Instrument.\\n   \\t/// Called when market is approved. \\n   \\t/// Also has the role of granting a credit line to a credit-based Instrument like uncol.loans \\n    function depositIntoInstrument(Instrument instrument, uint256 underlyingAmount) external requiresAuth{\\n    \\trequire(getInstrumentData[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\n    \\ttotalInstrumentHoldings += underlyingAmount; \\n\\n        getInstrumentData[instrument].balance += underlyingAmount.safeCastTo248();\\n\\n        UNDERLYING.transfer(address(instrument), underlyingAmount);\\n        emit InstrumentDeposit(msg.sender, instrument, underlyingAmount);\\n\\n    }\\n\\n    /// @notice Withdraw a specific amount of underlying tokens from a Instrument.\\n    function withdrawFromInstrument(Instrument instrument, uint256 underlyingAmount) external requiresAuth{\\n    \\trequire(getInstrumentData[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\n        getInstrumentData[instrument].balance -= underlyingAmount.safeCastTo248();\\n        totalInstrumentHoldings -= underlyingAmount;\\n        require(instrument.redeemUnderlying(underlyingAmount), \\\"REDEEM_FAILED\\\");\\n        emit InstrumentWithdrawal(msg.sender, instrument, underlyingAmount);\\n\\n    }\\n\\n\\n    /// @notice Withdraws all underyling balance from the Instrument to the vault \\n    function withdrawAllFromInstrument(Instrument instrument) external requiresAuth{\\n    \\tuint248 total_Instrument_balance = instrument.balanceOfUnderlying(address(instrument)).safeCastTo248();\\n    \\tuint248 current_balance =  getInstrumentData[instrument].balance;\\n    \\tgetInstrumentData[instrument].balance -= Math.min(total_Instrument_balance, current_balance).safeCastTo248();\\n    \\tinstrument.redeemUnderlying(total_Instrument_balance);\\n\\n    }\\n\\n    /// @notice Stores a Instrument as trusted when its approved\\n    function trustInstrument(Instrument instrument) external requiresAuth{\\n    \\tgetInstrumentData[instrument].trusted = true;\\n\\n    }\\n\\n    /// @notice Stores a Instrument as untrusted\\n    function distrustInstrument(Instrument instrument) external requiresAuth{\\n    \\tgetInstrumentData[instrument].trusted = false; \\n    }\\n\\n\\n    /// @notice returns true if Instrument is approved\\n    function isTrusted(Instrument instrument) public view returns(bool){\\n    \\treturn getInstrumentData[instrument].trusted; \\n    }\\n\\n    /// @notice Calculates the total amount of underlying tokens the Vault holds, excluding profit \\n    function totalAssets() public view override returns(uint256){\\n    \\treturn totalInstrumentHoldings + totalFloat();\\n    }\\n\\n   \\t\\n    function totalFloat() public view returns (uint256) {\\n        return UNDERLYING.balanceOf(address(this));\\n    }\\n\\n    function fetchInstrumentData(uint256 marketId) public view returns(InstrumentData memory){\\n        return getInstrumentData[Instruments[marketId]];\\n    }\\n\\n    /// @notice add instrument proposal created by the Utilizer \\n    /// @dev Instrument instance should be created before this is called \\n    function addProposal(\\n        InstrumentData memory data\\n    ) external {\\n        require(data.principal > 0, \\\"principal must be greater than 0\\\");\\n        require(data.duration > 0, \\\"duration must be greater than 0\\\");\\n        require(data.faceValue > 0, \\\"faceValue must be greater than 0\\\");\\n        require(data.principal >= BASE_UNIT, \\\"Needs to be in decimal format\\\"); // should be collateral address, not DS. Can't be less than 1.0 X?\\n   \\n\\n        num_proposals[msg.sender] ++; \\n        getInstrumentData[Instrument(data.Instrument_address)] = (\\n        \\tInstrumentData(\\n        \\t\\tfalse, \\n                0, \\n                data.faceValue, \\n                data.marketId, \\n                data.principal, \\n                data.expectedYield, \\n                data.duration, \\n                data.description, \\n                data.Instrument_address\\n            )\\n        \\t); \\n\\n        Instruments[data.marketId] = Instrument(data.Instrument_address);\\n    }\\n}\",\"keccak256\":\"0x1e8d0114720703c084d263e80e31f3a3a2336c1b42d052bf00d390d29b8b4bf7\"},\"contracts/vaults/vault_tranche/splitter.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nimport {Auth} from \\\"../auth/Auth.sol\\\";\\nimport {ERC4626} from \\\"../mixins/ERC4626.sol\\\";\\n\\nimport {SafeCastLib} from \\\"../utils/SafeCastLib.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {Instrument} from \\\"../instrument.sol\\\";\\nimport {tVault} from \\\"./tVault.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n\\n\\n\\n/// @notice tokens for junior/senior tranches \\ncontract tToken is ERC20{\\n\\n\\tmodifier onlySplitter() {\\n        require(msg.sender == splitter, \\\"!Splitter\\\");\\n        _;\\n    }\\n\\n    address splitter; \\n    ERC20 asset; \\n\\n    /// @notice asset is the tVault  \\n    constructor(\\n        ERC20 _asset, \\n        string memory _name,\\n        string memory _symbol, \\n        address _splitter\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n        splitter = _splitter; \\n    }\\n\\n    function mint(address to, uint256 amount) external onlySplitter{\\n    \\t_mint(to, amount); \\n    }\\n\\n    function burn(address from, uint256 amount) external onlySplitter{\\n    \\t_burn(from, amount);\\n    }\\n\\n\\n}\\n\\n/// @notice Accepts ERC20 and splits them into senior/junior tokens\\n/// Will hold the ERC20 token in this contract\\n/// Before maturity, redemption only allowed for a pair, \\n/// After maturity, redemption allowed for individual tranche tokens, with the determined conversion rate\\n/// @dev new instance is generated for each vault\\ncontract Splitter{\\n\\tusing SafeCastLib for uint256; \\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    tVault underlying; \\n    tToken senior;\\n    tToken junior;  \\n\\n    //weight is in PRICE_PRECISION 6, i.e 5e5 = 0.5\\n    uint256 junior_weight; \\n    uint256 PRICE_PRECISION; \\n    uint promised_return; \\n\\n\\n    //Redemption Prices \\n    uint256 s_r; \\n    uint256 j_r; \\n\\n    constructor(\\n    \\ttVault _underlying //underlying vault token to split \\n    \\t){\\n    \\tunderlying = _underlying; \\n    \\tsenior = new tToken(_underlying, \\\"senior\\\", string(abi.encodePacked(\\\"se_\\\", _underlying.symbol())), address(this));\\n    \\tjunior = new tToken(_underlying, \\\"junior\\\", string(abi.encodePacked(\\\"ju_\\\", _underlying.symbol())), address(this));\\n\\n    \\tjunior_weight = underlying.getJuniorWeight(); \\n    \\tpromised_return = underlying.getPromisedReturn(); \\n    \\tPRICE_PRECISION = underlying.PRICE_PRECISION(); \\n    }\\n\\n\\t/// @notice accepts token_to_split and mints s,j tokens\\n\\t/// ex. 1 vault token-> 0.3 junior and 0.7 senior for weight of 0.3, 0.7\\n\\tfunction split(ERC20 token_to_split, uint256 amount) external returns(uint, uint) {\\n\\t\\trequire(token_to_split == underlying, \\\"Wrong Splitter\\\");\\n\\n\\t\\ttoken_to_split.safeTransferFrom(msg.sender, address(this), amount); \\n\\n\\t\\tuint junior_token_mint_amount = (amount * junior_weight)/PRICE_PRECISION;  \\n\\t\\tuint senior_token_mint_amount = amount - junior_token_mint_amount; \\n\\n\\t\\tjunior.mint(msg.sender, junior_token_mint_amount); \\n\\t\\tsenior.mint(msg.sender, senior_token_mint_amount);\\n\\n\\t\\treturn (junior_token_mint_amount, senior_token_mint_amount); \\n\\n\\t}\\n\\n\\t/// @notice aceepts junior and senior token and gives back token_to_merge(tVault tokens)\\n\\t/// Function to call when redeeming before maturity\\n\\t/// @param token_to_merge is the valut token\\n\\t/// @param junior_amount is amount of junior tokens user want to redeem\\n\\t/// @dev senior amount is automiatically computed when given junior amount \\n\\tfunction merge(ERC20 token_to_merge, uint256 junior_amount) external returns(uint){\\n\\t\\trequire(token_to_merge == underlying, \\\"Wrong Splitter\\\");\\n\\t\\tuint senior_multiplier = (PRICE_PRECISION *(PRICE_PRECISION - junior_weight))/junior_weight; //ex 2.3e6\\n\\t\\tuint senior_amount = (senior_multiplier * junior_amount)/PRICE_PRECISION; \\n\\t\\trequire(senior.balanceOf(msg.sender) >= senior_amount, \\\"Not enough senior tokens\\\"); \\n\\n\\t\\tjunior.burn(msg.sender, junior_amount);\\n\\t\\tsenior.burn(msg.sender, senior_amount);\\n\\t\\tunderlying.transfer(msg.sender, junior_amount+senior_amount); \\n\\t\\treturn junior_amount + senior_amount; \\n\\t}\\n\\n\\n\\t/// @notice only can called after set maturity by tranche token holders\\n\\tfunction redeem_after_maturity(tToken _tToken, uint256 amount) external {\\n\\t\\trequire(underlying.isMatured(), \\\"Vault not matured\\\");\\n\\t\\trequire(address(_tToken) == address(senior) || address(_tToken) == address(junior), \\\"Wrong Tranche Token\\\");\\n\\t\\tbool isSenior = (address(_tToken) == address(senior)) ? true : false; \\n\\t\\tuint redemption_price = isSenior? s_r: j_r; \\n\\t\\tuint token_redeem_amount = (redemption_price * amount)/PRICE_PRECISION; \\n\\n\\t\\t_tToken.burn(msg.sender, amount); \\n\\t\\tunderlying.transfer(msg.sender, token_redeem_amount); \\n\\t\\t\\n\\t}\\n\\n\\n\\t/// @notice calculate and store redemption Price for post maturity \\n\\t/// @dev should be only called once right after tToken matures, as totalSupply changes when redeeming \\n\\tfunction calcRedemptionPrice() private {\\n\\t\\tuint promised_return = underlying.getPromisedReturn(); //in 1e6 decimals i.e 5000 is 0.05\\n\\t\\tuint real_return = underlying.getCurrentRealReturn(); \\n\\t\\tuint _s_r = ((PRICE_PRECISION + promised_return)/(PRICE_PRECISION+real_return)) * PRICE_PRECISION; \\n\\t\\tuint max_s_r = (PRICE_PRECISION/(PRICE_PRECISION - junior_weight)) *PRICE_PRECISION; \\n\\t\\t\\n\\t\\ts_r = min(_s_r, max_s_r);\\n\\t\\t//total supply right after tVault matures \\n\\t\\tj_r = (underlying.totalSupply() - (senior.totalSupply() * s_r/PRICE_PRECISION))/(junior.totalSupply()); \\n\\n\\t}\\n\\n\\t/// @dev need to return in list format to index it easily \\n\\t/// 0 is always senior \\n\\tfunction getTrancheTokens() public view returns(address[] memory){\\n \\t\\taddress[] memory addresses = new address[](2);\\n \\t\\taddresses[0] =  address(senior); \\n \\t\\taddresses[1] =  address(junior); \\n\\t\\treturn addresses; \\n\\t}\\n\\n\\n\\tfunction max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    \\treturn a >= b ? a : b;\\n\\t}\\n\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    \\treturn a <= b ? a : b;\\n\\t}\\n}\",\"keccak256\":\"0x572487c0cfe58c0818fc72792233ace06e094265c3ba7a8de697b22365a9bbe6\"},\"contracts/vaults/vault_tranche/stableswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8;\\n\\n/*\\nInvariant - price of trade and amount of liquidity are determined by this equation\\n\\nAn^n sum(x_i) + D = ADn^n + D^(n + 1) / (n^n prod(x_i))\\n\\nTopics\\n0. Newton's method x_(n + 1) = x_n - f(x_n) / f'(x_n)\\n1. Invariant\\n2. Swap\\n   - Calculate Y\\n   - Calculate D\\n3. Get virtual price\\n4. Add liquidity\\n   - Imbalance fee\\n5. Remove liquidity\\n6. Remove liquidity one token\\n   - Calculate withdraw one token\\n   - getYD\\nTODO: test?\\n*/\\n\\nlibrary Math {\\n    function abs(uint x, uint y) internal pure returns (uint) {\\n        return x >= y ? x - y : y - x;\\n    }\\n}\\n\\ncontract StableSwap {\\n    // Number of tokens\\n    uint private constant N = 2;\\n    // Amplification coefficient multiplied by N^(N - 1)\\n    // Higher value makes the curve more flat\\n    // Lower value makes the curve more like constant product AMM\\n    uint private constant A = 1000 * (N**(N - 1));\\n    // 0.03%\\n    uint private constant SWAP_FEE = 300;\\n    // Liquidity fee is derived from 2 constraints\\n    // 1. Fee is 0 for adding / removing liquidity that results in a balanced pool\\n    // 2. Swapping in a balanced pool is like adding and then removing liquidity\\n    //    from a balanced pool\\n    // swap fee = add liquidity fee + remove liquidity fee\\n    uint private constant LIQUIDITY_FEE = (SWAP_FEE * N) / (4 * (N - 1));\\n    uint private constant FEE_DENOMINATOR = 1e6;\\n\\n    address[N] public tokens;\\n    // Normalize each token to 18 decimals\\n    // Example - DAI (18 decimals), USDC (6 decimals), USDT (6 decimals)\\n    //uint[N] private multipliers = [1, 1e12, 1e12];\\n    uint[N] private multipliers = [1, 1];\\n\\n    uint[N] public balances;\\n\\n    // 1 share = 1e18, 18 decimals\\n    uint private constant DECIMALS = 18;\\n    uint public totalSupply;\\n    mapping(address => uint) public balanceOf;\\n\\n    function _mint(address _to, uint _amount) private {\\n        balanceOf[_to] += _amount;\\n        totalSupply += _amount;\\n    }\\n\\n    function _burn(address _from, uint _amount) private {\\n        balanceOf[_from] -= _amount;\\n        totalSupply -= _amount;\\n    }\\n\\n\\n    // Return precision-adjusted balances, adjusted to 18 decimals\\n    function _xp() private view returns (uint[N] memory xp) {\\n        for (uint i; i < N; ++i) {\\n            xp[i] = balances[i] * multipliers[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculate D, sum of balances in a perfectly balanced pool\\n     * If balances of x_0, x_1, ... x_(n-1) then sum(x_i) = D\\n     * @param xp Precision-adjusted balances\\n     * @return D\\n     */\\n    function _getD(uint[N] memory xp) private pure returns (uint) {\\n        /*\\n        Newton's method to compute D\\n        -----------------------------\\n        f(D) = ADn^n + D^(n + 1) / (n^n prod(x_i)) - An^n sum(x_i) - D \\n        f'(D) = An^n + (n + 1) D^n / (n^n prod(x_i)) - 1\\n\\n                     (as + np)D_n\\n        D_(n+1) = -----------------------\\n                  (a - 1)D_n + (n + 1)p\\n\\n        a = An^n\\n        s = sum(x_i)\\n        p = (D_n)^(n + 1) / (n^n prod(x_i))\\n        */\\n        uint a = A * N; // An^n\\n\\n        uint s; // x_0 + x_1 + ... + x_(n-1)\\n        for (uint i; i < N; ++i) {\\n            s += xp[i];\\n        }\\n\\n        // Newton's method\\n        // Initial guess, d <= s\\n        uint d = s;\\n        uint d_prev;\\n        for (uint i; i < 255; ++i) {\\n            // p = D^(n + 1) / (n^n * x_0 * ... * x_(n-1))\\n            uint p = d;\\n            for (uint j; j < N; ++j) {\\n                p = (p * d) / (N * xp[j]);\\n            }\\n            d_prev = d;\\n            d = ((a * s + N * p) * d) / ((a - 1) * d + (N + 1) * p);\\n\\n            if (Math.abs(d, d_prev) <= 1) {\\n                return d;\\n            }\\n        }\\n        revert(\\\"D didn't converge\\\");\\n    }\\n\\n\\n   /**\\n    * @notice Calculate required dx to get dy\\n    * @param indexX is the index of the tokenIn\\n    * @dev only works in binary settins for now, indexX is 0 if senior, 1 if junior \\n    * y is tokenOut, so dy should be subtracted, x is tokenIn, so should be added\\n    */\\n\\n    function getDx(\\n        uint dy,\\n        uint indexX\\n        ) \\n    public view returns(uint){\\n        uint[N] memory xp = _xp(); \\n        uint xamount = xp[indexX]; \\n        uint yamount = xp[1-indexX]; \\n\\n        uint new_yamount = yamount - dy; \\n\\n        uint new_xamount = _getY(1-indexX, indexX, new_yamount, xp); \\n        uint dx = new_xamount - xamount; \\n        return dx; \\n    }\\n    \\n    /**\\n     * @notice Calculate the new balance of token j given the new balance of token i\\n     * @param i Index of token in\\n     * @param j Index of token out\\n     * @param x New balance of token i\\n     * @param xp Current precision-adjusted balances\\n     */\\n    function _getY(\\n        uint i,\\n        uint j,\\n        uint x,\\n        uint[N] memory xp\\n    ) private pure returns (uint) {\\n        /*\\n        Newton's method to compute y\\n        -----------------------------\\n        y = x_j\\n\\n        f(y) = y^2 + y(b - D) - c\\n\\n                    y_n^2 + c\\n        y_(n+1) = --------------\\n                   2y_n + b - D\\n\\n        where\\n        s = sum(x_k), k != j\\n        p = prod(x_k), k != j\\n        b = s + D / (An^n)\\n        c = D^(n + 1) / (n^n * p * An^n)\\n        */\\n        uint a = A * N;\\n        uint d = _getD(xp);\\n        uint s;\\n        uint c = d;\\n\\n        uint _x;\\n        for (uint k; k < N; ++k) {\\n            if (k == i) {\\n                _x = x;\\n            } else if (k == j) {\\n                continue;\\n            } else {\\n                _x = xp[k];\\n            }\\n\\n            s += _x;\\n            c = (c * d) / (N * _x);\\n        }\\n        c = (c * d) / (N * a);\\n        uint b = s + d / a;\\n\\n        // Newton's method\\n        uint y_prev;\\n        // Initial guess, y <= d\\n        uint y = d;\\n        for (uint _i; _i < 255; ++_i) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - d);\\n            if (Math.abs(y, y_prev) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"y didn't converge\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate the new balance of token i given precision-adjusted\\n     * balances xp and liquidity d\\n     * @dev Equation is calculate y is same as _getY\\n     * @param i Index of token to calculate the new balance\\n     * @param xp Precision-adjusted balances\\n     * @param d Liquidity d\\n     * @return New balance of token i\\n     */\\n    function _getYD(\\n        uint i,\\n        uint[N] memory xp,\\n        uint d\\n    ) private pure returns (uint) {\\n        uint a = A * N;\\n        uint s;\\n        uint c = d;\\n\\n        uint _x;\\n        for (uint k; k < N; ++k) {\\n            if (k != i) {\\n                _x = xp[k];\\n            } else {\\n                continue;\\n            }\\n\\n            s += _x;\\n            c = (c * d) / (N * _x);\\n        }\\n        c = (c * d) / (N * a);\\n        uint b = s + d / a;\\n\\n        // Newton's method\\n        uint y_prev;\\n        // Initial guess, y <= d\\n        uint y = d;\\n        for (uint _i; _i < 255; ++_i) {\\n            y_prev = y;\\n            y = (y * y + c) / (2 * y + b - d);\\n            if (Math.abs(y, y_prev) <= 1) {\\n                return y;\\n            }\\n        }\\n        revert(\\\"y didn't converge\\\");\\n    }\\n\\n    // Estimate value of 1 share\\n    // How many tokens is one share worth?\\n    function getVirtualPrice() external view returns (uint) {\\n        uint d = _getD(_xp());\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply > 0) {\\n            return (d * 10**DECIMALS) / _totalSupply;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Swap dx amount of token i for token j\\n     * @param i Index of token in\\n     * @param j Index of token out\\n     * @param dx Token in amount\\n     * @param minDy Minimum token out\\n     */\\n    function swap(\\n        uint i,\\n        uint j,\\n        uint dx,\\n        uint minDy\\n    ) external returns (uint dy) {\\n        require(i != j, \\\"i = j\\\");\\n\\n        IERC20(tokens[i]).transferFrom(msg.sender, address(this), dx);\\n\\n        // Calculate dy\\n        uint[N] memory xp = _xp();\\n        uint x = xp[i] + dx * multipliers[i];\\n\\n        uint y0 = xp[j];\\n        uint y1 = _getY(i, j, x, xp);\\n        // y0 must be >= y1, since x has increased\\n        // -1 to round down\\n        dy = (y0 - y1 - 1) / multipliers[j];\\n\\n        // Subtract fee from dy\\n        uint fee = (dy * SWAP_FEE) / FEE_DENOMINATOR;\\n        dy -= fee;\\n        require(dy >= minDy, \\\"dy < min\\\");\\n\\n        balances[i] += dx;\\n        balances[j] -= dy;\\n\\n        IERC20(tokens[j]).transfer(msg.sender, dy);\\n    }\\n\\n    function addLiquidity(uint[N] calldata amounts, uint minShares)\\n        external\\n        returns (uint shares)\\n    {\\n        // calculate current liquidity d0\\n        uint _totalSupply = totalSupply;\\n        uint d0;\\n        uint[N] memory old_xs = _xp();\\n        if (_totalSupply > 0) {\\n            d0 = _getD(old_xs);\\n        }\\n\\n        // Transfer tokens in\\n        uint[N] memory new_xs;\\n        for (uint i; i < N; ++i) {\\n            uint amount = amounts[i];\\n            if (amount > 0) {\\n                IERC20(tokens[i]).transferFrom(msg.sender, address(this), amount);\\n                new_xs[i] = old_xs[i] + amount * multipliers[i];\\n            } else {\\n                new_xs[i] = old_xs[i];\\n            }\\n        }\\n\\n        // Calculate new liquidity d1\\n        uint d1 = _getD(new_xs);\\n        require(d1 > d0, \\\"liquidity didn't increase\\\");\\n\\n        // Reccalcuate D accounting for fee on imbalance\\n        uint d2;\\n        if (_totalSupply > 0) {\\n            for (uint i; i < N; ++i) {\\n                // TODO: why old_xs[i] * d1 / d0? why not d1 / N?\\n                uint idealBalance = (old_xs[i] * d1) / d0;\\n                uint diff = Math.abs(new_xs[i], idealBalance);\\n                new_xs[i] -= (LIQUIDITY_FEE * diff) / FEE_DENOMINATOR;\\n            }\\n\\n            d2 = _getD(new_xs);\\n        } else {\\n            d2 = d1;\\n        }\\n\\n        // Update balances\\n        for (uint i; i < N; ++i) {\\n            balances[i] += amounts[i];\\n        }\\n\\n        // Shares to mint = (d2 - d0) / d0 * total supply\\n        // d1 >= d2 >= d0\\n        if (_totalSupply > 0) {\\n            shares = ((d2 - d0) * _totalSupply) / d0;\\n        } else {\\n            shares = d2;\\n        }\\n        require(shares >= minShares, \\\"shares < min\\\");\\n        _mint(msg.sender, shares);\\n    }\\n\\n    function removeLiquidity(uint shares, uint[N] memory minAmountsOut)\\n        external\\n        returns (uint[N] memory amountsOut)\\n    {\\n        uint _totalSupply = totalSupply;\\n\\n        for (uint i; i < N; ++i) {\\n            uint amountOut = (balances[i] * shares) / _totalSupply;\\n            require(amountOut >= minAmountsOut[i], \\\"out < min\\\");\\n\\n            balances[i] -= amountOut;\\n            amountsOut[i] = amountOut;\\n\\n            IERC20(tokens[i]).transfer(msg.sender, amountOut);\\n        }\\n\\n        _burn(msg.sender, shares);\\n    }\\n\\n    /**\\n     * @notice Calculate amount of token i to receive for shares\\n     * @param shares Shares to burn\\n     * @param i Index of token to withdraw\\n     * @return dy Amount of token i to receive\\n     *         fee Fee for withdraw. Fee already included in dy\\n     */\\n    function _calcWithdrawOneToken(uint shares, uint i)\\n        private\\n        view\\n        returns (uint dy, uint fee)\\n    {\\n        uint _totalSupply = totalSupply;\\n        uint[N] memory xp = _xp();\\n\\n        // Calculate d0 and d1\\n        uint d0 = _getD(xp);\\n        uint d1 = d0 - (d0 * shares) / _totalSupply;\\n\\n        // Calculate reduction in y if D = d1\\n        uint y0 = _getYD(i, xp, d1);\\n        // d1 <= d0 so y must be <= xp[i]\\n        uint dy0 = (xp[i] - y0) / multipliers[i];\\n\\n        // Calculate imbalance fee, update xp with fees\\n        uint dx;\\n        for (uint j; j < N; ++j) {\\n            if (j == i) {\\n                dx = (xp[j] * d1) / d0 - y0;\\n            } else {\\n                // d1 / d0 <= 1\\n                dx = xp[j] - (xp[j] * d1) / d0;\\n            }\\n            xp[j] -= (LIQUIDITY_FEE * dx) / FEE_DENOMINATOR;\\n        }\\n\\n        // Recalculate y with xp including imbalance fees\\n        uint y1 = _getYD(i, xp, d1);\\n        // - 1 to round down\\n        dy = (xp[i] - y1 - 1) / multipliers[i];\\n        fee = dy0 - dy;\\n    }\\n\\n    function calcWithdrawOneToken(uint shares, uint i)\\n        external\\n        view\\n        returns (uint dy, uint fee)\\n    {\\n        return _calcWithdrawOneToken(shares, i);\\n    }\\n\\n    /**\\n     * @notice Withdraw liquidity in token i\\n     * @param shares Shares to burn\\n     * @param i Token to withdraw\\n     * @param minAmountOut Minimum amount of token i that must be withdrawn\\n     */\\n    function removeLiquidityOneToken(\\n        uint shares,\\n        uint i,\\n        uint minAmountOut\\n    ) external returns (uint amountOut) {\\n        (amountOut, ) = _calcWithdrawOneToken(shares, i);\\n        require(amountOut >= minAmountOut, \\\"out < min\\\");\\n\\n        balances[i] -= amountOut;\\n        _burn(msg.sender, shares);\\n\\n        IERC20(tokens[i]).transfer(msg.sender, amountOut);\\n    }\\n\\n\\n\\n\\n\\n    function xp() public view returns(uint[N] memory){\\n        return _xp(); \\n    }\\n\\n\\n\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function transfer(address recipient, uint amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n}\",\"keccak256\":\"0x7b0e970018bdfeae8a7e2e9d6c5ff250fbf85e203516c63ad56268d8d03ce3be\",\"license\":\"MIT\"},\"contracts/vaults/vault_tranche/tVault.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nimport {Auth} from \\\"../auth/Auth.sol\\\";\\nimport {ERC4626} from \\\"../mixins/ERC4626.sol\\\";\\n\\nimport {SafeCastLib} from \\\"../utils/SafeCastLib.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {Instrument} from \\\"../instrument.sol\\\";\\nimport {Vault} from \\\"../vault.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {TrancheFactory} from \\\"./tranchemaster.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @notice super vault that accepts any combinations of ERC4626 instruments at initialization, and will\\n/// automatically invest/divest when minting/redeeming \\n/// @dev instance is generated for every splitter\\ncontract tVault is ERC4626{\\n\\tusing SafeCastLib for uint256; \\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    uint256 num_instrument; \\n    uint256[] ratios; \\n    address[] instruments; \\n    uint256 init_time; \\n    uint256 junior_weight; \\n    uint256 promisedReturn; \\n    uint256 time_to_maturity; \\n    ERC20 want; \\n\\n    mapping(address=>uint256) addressToIndex; \\n\\n    uint256[] initial_exchange_rates; \\n\\n    uint256 public PRICE_PRECISION; \\n\\n    /// @notice when intialized, will take in a few ERC4626 instruments (address) as base instruments\\n    /// param _want is the base assets for all the instruments e.g usdc\\n    /// param _instruments are ERC4626 addresses that will comprise this super vault\\n    /// param _ratios are the weight of value invested for each instruments, should sum to 1 \\n    /// param _junior_weight is the allocation between junior/senior tranche (senior is 1-junior)\\n    /// param _time_to_maturity is time until the tranche tokens redemption price will be determined\\n    /// and tranche tokens can be redeemed separately \\n    /// param _promisedReturn is the promised senior return gauranteed by junior holders \\n    constructor(\\n        TrancheFactory.InitParams memory param)\\n        ERC4626(\\n            ERC20(param._want),\\n            string(abi.encodePacked(\\\"super \\\", ERC20(param._want).name(), \\\" Vault\\\")),\\n            string(abi.encodePacked(\\\"t\\\", ERC20(param._want).symbol()))\\n        )  \\n    \\t//Vault(address(_want))\\n    {\\n        want = ERC20(param._want); \\n        instruments = param._instruments; \\n        num_instrument = param._instruments.length; \\n        ratios = param._ratios; \\n        junior_weight = param._junior_weight; \\n        promisedReturn = param._promisedReturn; \\n        time_to_maturity = param._time_to_maturity; \\n        init_time = block.timestamp; \\n\\n        initial_exchange_rates = new uint[](num_instrument); \\n        PRICE_PRECISION = 10**want.decimals(); \\n\\n        //need to get initial exchange rate between the instruments and want \\n        for (uint i=0; i< num_instrument; i++){\\n            addressToIndex[instruments[i]] = i; \\n            initial_exchange_rates[i] = get_exchange_rate(instruments[i]); \\n        }\\n    }\\n\\n\\n    /// @notice get the amount of shares for the instrument one would obtain\\n    /// by depositing one want token \\n    function get_exchange_rate(address instrument) internal view returns(uint256){\\n    \\treturn ERC4626(instrument).previewDeposit(PRICE_PRECISION); \\n    }\\n\\n    /// @notice will automatically invest into the ERC4626 instruments and give out \\n    /// vault tokens as share\\n    function mint(uint256 shares, address receiver) public override returns(uint assets)  {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n        console.log('here', msg.sender);\\n\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n        invest(shares); \\n\\n        _mint(receiver, shares);\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n        afterDeposit(assets, shares);\\n\\n    }\\n\\n\\n    /// @notice will automatically divest from the instruments\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public override returns(uint assets){\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n        divest(assets); \\n\\n        beforeWithdraw(assets, shares);\\n        _burn(owner, shares);\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n        asset.safeTransfer(receiver, assets);\\n\\n    }\\n\\n    /// @notice will invest into the current instruments, which is equivalent to minting erc4626\\n    /// @param shares are denominated in vault token, in PRICE_PRECISION\\n    function invest(uint256 shares) internal {\\n    \\t\\n    \\tuint num_asset_for_this; \\n    \\tfor (uint i=0; i< num_instrument; i++){\\n    \\t\\tnum_asset_for_this = convertToAssets((shares*ratios[i])/PRICE_PRECISION);  \\n            asset.safeApprove(instruments[i], num_asset_for_this); \\n    \\t\\tuint receivedShares = ERC4626(instruments[i]).deposit(num_asset_for_this, address(this)); //will mint the instrument to this contract\\n    \\t}\\n    }\\n\\n    /// @notice will divest from current instruments, which is equivalent to redeeming erc4626\\n    /// @param assets are denominated in underlying token\\n    function divest(uint256 assets) internal{\\n    \\tuint num_assets_for_this; \\n    \\tfor (uint i=0; i< num_instrument; i++){\\n    \\t\\tnum_assets_for_this = (assets* ratios[i]/PRICE_PRECISION); \\n    \\t\\tERC4626(instruments[i]).withdraw(num_assets_for_this, address(this), address(this)); \\n    \\t}\\n\\n    }\\n\\n\\n    function isMatured() public view returns(bool){\\n    \\treturn (block.timestamp - init_time) > time_to_maturity; \\n    }\\n\\n    function getUnderlying() public view returns(address){\\n    \\treturn address(want); \\n    }\\n\\n    function getJuniorWeight() public view returns(uint256){\\n    \\treturn junior_weight; \\n    }\\n\\n    function getPromisedReturn() public view returns(uint256){\\n    \\treturn promisedReturn; \\n    }\\n    function getInitialExchangeRates() public view returns(uint[] memory){\\n        return initial_exchange_rates; \\n    }\\n\\n    /// @notice get average real returns collected by the vault in this supervault until now  \\n    /// real return is computed by (final_value_of_vault/initial_value_of_vault) - 1\\n    function getCurrentRealReturn() public view returns(uint256){\\n    \\tuint256[] memory real_returns = new uint256[](num_instrument); \\n    \\tuint256 sum_return; \\n    \\tfor (uint i=0; i< num_instrument; i++){\\n    \\t\\treal_returns[i] = (get_exchange_rate(instruments[i])/initial_exchange_rates[i])*PRICE_PRECISION;\\n    \\t\\tsum_return += real_returns[i] - PRICE_PRECISION; \\n\\t\\t}\\n\\n\\t\\treturn (sum_return/num_instrument); \\n\\t\\t\\n    }\\n\\n    /// @notice sums over all assets in want tokens \\n    function totalAssets() public view override returns (uint256){\\n        uint sumAssets; \\n        for (uint i=0; i< num_instrument; i++){\\n            sumAssets += ERC4626(instruments[i]).totalAssets(); \\n        }\\n        return sumAssets; \\n\\n    }\\n\\n\\n \\n\\n}\\n\",\"keccak256\":\"0xbbbc59c512a80dff2d41374a700218c626ad701456a1b711245306b3e36ae7bc\"},\"contracts/vaults/vault_tranche/tranchemaster.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nimport {Auth} from \\\"../auth/Auth.sol\\\";\\nimport {ERC4626} from \\\"../mixins/ERC4626.sol\\\";\\n\\nimport {SafeCastLib} from \\\"../utils/SafeCastLib.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {Splitter} from \\\"./splitter.sol\\\";\\nimport {tVault} from \\\"./tVault.sol\\\";\\nimport {StableSwap} from \\\"./stableswap.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @notice have to separate factories because of code size limit \\ncontract TrancheAMMFactory{\\n\\n\\tfunction newPool() external returns(address){\\n\\t\\tStableSwap amm = new StableSwap(); \\n\\t\\treturn address(amm); \\n\\t}\\n} \\n\\n\\n/// @notice contract that stores the contracts and liquidity for each tranches \\ncontract TrancheFactory{\\n\\n\\tuint256 numVaults; \\n    address owner; \\n\\n    TrancheAMMFactory ammFactory; \\n\\n\\t/// @notice initialization parameters for the vault\\n\\tstruct InitParams{\\n\\t\\taddress _want; \\n    \\taddress[]  _instruments;\\n    \\tuint256[]  _ratios;\\n    \\tuint256 _junior_weight; \\n    \\tuint256 _promisedReturn; \\n    \\tuint256 _time_to_maturity;\\n    \\tuint256 vaultId; \\n\\t}\\n\\n\\tstruct Contracts{\\n\\t\\taddress vault; \\n\\t\\taddress splitter; \\n\\t\\taddress amm; \\n\\t\\tInitParams param; \\n\\t}\\n\\n\\tmapping(uint256=>Contracts) vaultContracts;\\n\\tmapping(uint256=>mapping(address=>uint256)) lp_holdings;  //vaultId-> LP holdings for providrers\\n\\n    constructor(\\n        address _owner, \\n        address ammFactory_address\\n    ) public {\\n        owner = _owner;\\n        ammFactory = TrancheAMMFactory(ammFactory_address); \\n\\n    }\\n\\n\\n\\n\\t/// @notice adds vaults, spllitters, and amms when tranche bids are filled \\n\\t/// Bidders have to specify the \\n\\t/// param want: underlying token for all the vaults e.g(usdc,eth)\\n\\t/// param instruments: addresses of all vaults for the want they want exposure to\\n\\t/// param ratios: how much they want to split between the instruments \\n\\t/// param junior weight: how much the juniors are allocated; lower means higher leverage for juniors but lower safety for seniors\\n\\t/// param promisedReturn: how much fixed income seniors are getting paid primarily, \\n\\t/// param timetomaturity: when the tVault matures and tranche token holders can redeem their tranche for tVault \\n\\t/// @dev a bid is filled when liquidity provider agrees to provide initial liq for senior/junior or vice versa.  \\n\\t/// so initial liq should be provided nonetheless \\n\\tfunction createVault(InitParams memory param) public {\\n\\n\\t\\ttVault newvault = new tVault(param); \\n\\t\\tSplitter splitter = new Splitter(newvault);\\n\\t\\taddress amm_ad = ammFactory.newPool(); \\n\\n\\t\\tuint vaultId = param.vaultId; \\n\\t\\tContracts storage contracts = vaultContracts[vaultId]; \\n\\t\\tcontracts.vault = address(newvault); \\n\\t\\tcontracts.splitter = address(splitter);\\n\\t\\tcontracts.amm = amm_ad; \\n\\t\\tcontracts.param = param;\\n\\n\\n\\t\\tnumVaults++; \\n\\t}\\t\\n\\n\\n\\t/// @notice lp token balance is stored in this contract\\n\\tfunction increaseLPTokenBalance(address to, uint vaultId, uint lpshares) external{\\n\\t\\tlp_holdings[vaultId][to] += lpshares; \\n\\t}\\n\\tfunction decreaseLPTokenBalance(address to, uint vaultId, uint lpshares) external{\\n\\t\\tlp_holdings[vaultId][to] -= lpshares; \\n\\t}\\n\\n\\tfunction getContracts(uint vaultId) external view returns(Contracts memory){\\n\\t\\treturn vaultContracts[vaultId]; \\n\\t}\\n\\n\\tfunction getLPTokenBalance(address to, uint vaultId) external view returns(uint256){\\n\\t\\treturn lp_holdings[vaultId][to]; \\n\\t}\\n\\n\\tfunction getSuperVault(uint vaultId) external view returns(tVault){\\n\\t\\treturn tVault(vaultContracts[vaultId].vault); \\n\\t}\\n\\tfunction getSplitter(uint vaultId) external view returns(Splitter){\\n\\t\\treturn Splitter(vaultContracts[vaultId].splitter); \\n\\t}\\n\\tfunction getAmm(uint vaultId) external view returns(StableSwap){\\n\\t\\treturn StableSwap(vaultContracts[vaultId].amm); \\n\\t}\\n\\t//function getNumVaults\\n\\t// function getVaultId(InitParams memory param) external view returns(uint){\\n\\t// \\treturn vaultIdMapping[param]; \\n\\t// }\\n\\n\\n}\\n\\n/// @notice handles all trading related stuff \\ncontract TrancheMaster{\\n\\n\\tTrancheFactory tFactory;\\n\\n\\tconstructor(TrancheFactory _tFactory){\\n\\t\\ttFactory = _tFactory; \\n\\t}\\n\\n\\n\\t/// @notice adds liquidity to pool with vaultId\\n\\t/// @dev amount is denominated in want of the tVault, so want-> mint tVault-> split -> provide \\n\\tfunction addLiquidity(\\n\\t\\taddress provider,\\n\\t\\t uint amount, \\n\\t\\t uint vaultId) external \\n\\t{\\t\\n\\n\\t\\tTrancheFactory.Contracts memory contracts = tFactory.getContracts(vaultId); \\n\\t\\tERC20 want = ERC20(contracts.param._want); \\n\\t\\ttVault vault = tVault(contracts.vault); \\n\\t\\tStableSwap amm = StableSwap(contracts.amm); \\n\\t\\tSplitter splitter = Splitter(contracts.splitter); \\n\\n\\t\\t//Mint tVault\\n\\t\\twant.transferFrom(provider, address(this), amount); \\n\\t\\twant.approve(address(vault), amount ); \\n\\t\\tuint shares = vault.convertToShares(amount);\\n\\t\\tvault.mint(shares, address(this)); \\n\\n\\t\\t//Split \\n\\t\\tvault.approve(address(splitter), shares);\\n\\t\\t(uint ja, uint sa) = splitter.split(vault, shares); \\n\\n\\t\\t//provide\\n\\t\\tuint[2] memory amounts; \\n\\t\\tamounts[0] = sa; \\n\\t\\tamounts[1] = ja; \\n\\t\\tuint lpshares = amm.addLiquidity(amounts, 0); \\n\\n\\t\\t//Transfer\\n\\t\\ttFactory.increaseLPTokenBalance(provider, vaultId, lpshares);\\n\\n\\t}\\n\\n\\t/// @notice remove liquidity from the pool, and gives back merged token\\n\\tfunction removeLiquidity(\\n\\t\\taddress taker, \\n\\t\\tuint shares, \\n\\t\\tuint vaultId) external \\n\\t{\\n\\t\\tTrancheFactory.Contracts memory contracts = tFactory.getContracts(vaultId); \\n\\t\\tERC20 want = ERC20(contracts.param._want); \\n\\t\\ttVault vault = tVault(contracts.vault); \\n\\t\\tStableSwap amm = StableSwap(contracts.amm); \\n\\t\\tSplitter splitter = Splitter(contracts.splitter); \\n\\n\\t\\t//Transfer\\n\\t\\ttFactory.decreaseLPTokenBalance(taker, vaultId, shares); \\n\\n\\t\\t//Remove\\n\\t\\tuint[2] memory minAmounts;\\n\\t\\tminAmounts[0] =0;\\n\\t\\tminAmounts[1] =1;\\n\\t\\tuint[2] memory amountsOut = amm.removeLiquidity(shares,minAmounts);\\n\\t\\tuint junioramount = amountsOut[1]; \\n\\n\\t\\t//Merge-> junior and senior in, tVault out to this address\\n\\t\\tuint merged_token_amount = splitter.merge(vault, junioramount); \\n\\n\\t\\t//Redeem vault \\n\\t\\tvault.redeem(merged_token_amount, taker, address(this)); \\n\\n\\n\\t}\\n\\n\\n\\n\\t/// @notice buy tranche token in one tx from underlying tVault collatera; \\n\\t/// @param amount is collateral in \\n\\t/// @dev 1.Mints vault token\\n\\t/// 2. Splits Vault token from splitter \\n\\t/// 3. Swap unwanted tToken to wanted tToken\\n\\t/// 4. Transfer wanted tToken to user \\n\\tfunction buy_tranche(\\n\\t\\tuint vaultId, \\n\\t\\tuint amount, \\n\\t\\tbool isSenior\\n\\t\\t) external \\n\\t{\\n\\t\\tTrancheFactory.Contracts memory contracts = tFactory.getContracts(vaultId); \\n\\t\\tERC20 want = ERC20(contracts.param._want); \\n\\t\\ttVault vault = tVault(contracts.vault); \\n\\t\\tStableSwap amm = StableSwap(contracts.amm); \\n\\t\\tSplitter splitter = Splitter(contracts.splitter); \\n\\n\\t\\t//1.Mint\\n\\t\\twant.transferFrom(msg.sender, address(this), amount); \\n\\t\\twant.approve(address(vault), amount); \\n\\t\\tuint shares = vault.convertToShares(amount); \\n\\t\\tvault.mint(shares, address(this));\\n\\n\\t\\t//2. Split\\n\\t\\tvault.approve(address(splitter), shares); \\n\\t\\t(uint ja, uint sa) = splitter.split(vault, shares); //junior and senior now minted to this address \\n\\n\\t\\t//Senior tokens are indexed at 0 in each amm \\n\\t\\tuint tokenIn = isSenior? 0 : 1;\\n\\t\\tuint tokenOut = 1-tokenIn; \\n\\t\\tuint tokenInAmount = isSenior? sa: ja; \\n\\t\\taddress[] memory tranches = splitter.getTrancheTokens(); \\n\\t\\tERC20(tranches[tokenIn]).approve(address(amm), tokenInAmount); \\n\\n\\t\\t//3. Swap \\n\\t\\tuint tokenOutAmount = amm.swap(tokenIn, tokenOut, tokenInAmount, 0); //this will give this contract tokenOut\\n\\n\\t\\t//4. Transfer \\n\\t\\tERC20(tranches[tokenOut]).transfer(msg.sender, tokenOutAmount); \\n\\n\\t}\\n\\n\\t/// @notice sell tranche token for collateral in one tx\\n\\t/// 1. Transfer tToken \\n\\t/// 2. Swap tTokens to get in correct ratio\\n\\tfunction sell_tranche(\\n\\t\\tuint vaultId, \\n\\t\\tuint amount, \\n\\t\\tbool isSenior \\n\\t\\t) external \\n\\t{\\n\\t\\tTrancheFactory.Contracts memory contracts = tFactory.getContracts(vaultId); \\n\\t\\tERC20 want = ERC20(contracts.param._want); \\n\\t\\ttVault vault = tVault(contracts.vault); \\n\\t\\tStableSwap amm = StableSwap(contracts.amm); \\n\\t\\tSplitter splitter = Splitter(contracts.splitter); \\n\\n\\t\\t//1. Transfer tToken to this contract\\n\\t\\taddress[] memory tranches = splitter.getTrancheTokens(); \\n\\t\\tuint tokenIn = isSenior? 0:1; \\n\\t\\tERC20(tranches[tokenIn]).transfer(msg.sender, amount); \\n\\n\\t\\t//2. Swap to get correct ratio, if intoken is senior then need junior, \\n\\t\\t(uint pairTokenAmount, uint swappedTokenAmount) = swapToRatio(amount, !isSenior, tranches, vault, amm); \\n\\t\\tuint amountAfterSwap =  amount - swappedTokenAmount; \\n\\t\\t//amountAfterSwap, pairTokenAmount should be the amount of tranche tokens in ratio \\n\\n\\t\\t//3.Merge the tokens (merged tVault token will be directed to this contract)\\n\\t\\tuint junior_amount = isSenior? pairTokenAmount: swappedTokenAmount;  \\n\\t\\tuint totalAmountMerged = splitter.merge(vault, junior_amount); \\n\\n\\t\\t//4.Redeem merged token in tVault  \\n\\t\\tvault.redeem(totalAmountMerged, msg.sender, address(this)); \\n\\n\\n\\t}\\n\\n\\t/// @notice swap portion of tToken to another to get the correct ratio\\n\\t/// e.x 100 junior-> 30 senior, 70 junior, when ratio is 3:7\\n\\tfunction swapToRatio(\\n\\t\\tuint tokenInAmount, \\n\\t\\tbool needSenior,\\n\\t\\taddress[] memory tranches,\\n\\t\\ttVault vault, \\n\\t\\tStableSwap amm) internal returns(uint, uint){\\n\\t\\n\\t\\t//get swapping Token index; if senior is needed swap junior\\n\\t\\tuint tokenInIndex = needSenior? 1:0;\\n\\t\\tuint tokenOutIndex = 1- tokenInIndex; \\n\\t\\taddress neededToken = tranches[tokenOutIndex]; \\n\\t\\taddress swappingToken = tranches[tokenInIndex]; \\n\\t\\tuint junior_weight = vault.getJuniorWeight();\\n\\t\\tuint PRICE_PRECISION = vault.PRICE_PRECISION();   \\n\\t\\t\\n\\t\\t//ex. 100j -> 30j, 70s (determined by ratio)\\n\\t\\t// need x amount of juniors for 70s \\n\\t\\tuint neededTokenOutAmount; \\n\\t\\tif (needSenior)  neededTokenOutAmount = (PRICE_PRECISION - junior_weight) * tokenInAmount; \\n\\t\\telse  neededTokenOutAmount = junior_weight * tokenInAmount; \\n\\n\\t\\t//Get how much tokenInAmount I need to get needed tokenoutAmount \\n\\t\\tuint neededTokenInAmount = amm.getDx(neededTokenOutAmount, tokenInIndex); \\n\\t\\tuint TokenOutAmount = amm.swap(tokenInIndex, tokenOutIndex, neededTokenInAmount,0 ); \\n\\t\\t//Now this contract has the neededTokenAmountOut tokens\\n\\n\\t\\treturn (TokenOutAmount, neededTokenInAmount);\\n\\t}\\n\\n\\n\\n}\",\"keccak256\":\"0xcfeb6db32435f8d601443b2faf602efd986657a8576bc0d44a73e54314cf72cf\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000935760003560e01c8063439e23fd1162000062578063439e23fd146200012857806389980366146200014e578063991a126e146200017d5780639cbfaea914620001ac57600080fd5b806338b3e69214620000985780633f96f9a714620000b1578063403e8fd114620000fa5780634227577d1462000111575b600080fd5b620000af620000a936600462000862565b620001f3565b005b620000dd620000c23660046200096e565b6000908152600360205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b620000af6200010b36600462000899565b62000231565b620000af6200012236600462000862565b6200042a565b6200013f620001393660046200096e565b6200045e565b604051620000f1919062000a71565b620000dd6200015f3660046200096e565b6000908152600360205260409020600101546001600160a01b031690565b620000dd6200018e3660046200096e565b6000908152600360205260409020600201546001600160a01b031690565b620001e4620001bd36600462000834565b60009081526004602090815260408083206001600160a01b03949094168352929052205490565b604051908152602001620000f1565b60008281526004602090815260408083206001600160a01b0387168452909152812080548392906200022790849062000b5e565b9091555050505050565b6000816040516200024290620005b1565b6200024e919062000ac2565b604051809103906000f0801580156200026b573d6000803e3d6000fd5b5090506000816040516200027f90620005bf565b6001600160a01b039091168152602001604051809103906000f080158015620002ac573d6000803e3d6000fd5b5090506000600260009054906101000a90046001600160a01b03166001600160a01b0316630f11779b6040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156200030257600080fd5b505af115801562000317573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033d91906200080e565b60c0850151600081815260036020818152604090922080546001600160a01b03199081166001600160a01b038a811691909117835560018301805483168a831617905560028301805483168883161790558a5193830180549092169316929092178255828901518051959650939490938993620003c392600487019290910190620005cd565b5060408201518051620003e191600284019160209091019062000637565b50606082015160038201556080820151600482015560a0820151600582015560c0909101516006909101556000805490806200041d8362000b93565b9190505550505050505050565b60008281526004602090815260408083206001600160a01b0387168452909152812080548392906200022790849062000b79565b6200046862000675565b600082815260036020818152604092839020835160808101855281546001600160a01b03908116825260018301548116828501526002830154811682870152855160e08101875294830180549091168552600483018054875181870281018701909852808852929693956060880195909492938582019392918301828280156200051c57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620004fd575b50505050508152602001600282018054806020026020016040519081016040528092919081815260200182805480156200057657602002820191906000526020600020905b81548152602001906001019080831162000561575b505050918352505060038201546020820152600482015460408201526005820154606082015260069091015460809091015290525092915050565b6129fb8062000bf783390190565b61221e80620035f283390190565b82805482825590600052602060002090810192821562000625579160200282015b828111156200062557825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620005ee565b5062000633929150620006ff565b5090565b82805482825590600052602060002090810192821562000625579160200282015b828111156200062557825182559160200191906001019062000658565b604051806080016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001620006fa6040518060e0016040528060006001600160a01b031681526020016060815260200160608152602001600081526020016000815260200160008152602001600081525090565b905290565b5b8082111562000633576000815560010162000700565b8035620007238162000bdd565b919050565b600082601f83011262000739578081fd5b81356020620007526200074c8362000b37565b62000b03565b80838252828201915082860187848660051b890101111562000772578586fd5b855b858110156200079d5781356200078a8162000bdd565b8452928401929084019060010162000774565b5090979650505050505050565b600082601f830112620007bb578081fd5b81356020620007ce6200074c8362000b37565b80838252828201915082860187848660051b8901011115620007ee578586fd5b855b858110156200079d57813584529284019290840190600101620007f0565b60006020828403121562000820578081fd5b81516200082d8162000bdd565b9392505050565b6000806040838503121562000847578081fd5b8235620008548162000bdd565b946020939093013593505050565b60008060006060848603121562000877578081fd5b8335620008848162000bdd565b95602085013595506040909401359392505050565b600060208284031215620008ab578081fd5b813567ffffffffffffffff80821115620008c3578283fd5b9083019060e08286031215620008d7578283fd5b620008e162000ad7565b620008ec8362000716565b815260208301358281111562000900578485fd5b6200090e8782860162000728565b60208301525060408301358281111562000926578485fd5b6200093487828601620007aa565b604083015250606083013560608201526080830135608082015260a083013560a082015260c083013560c082015280935050505092915050565b60006020828403121562000980578081fd5b5035919050565b6000815180845260208085019450808401835b83811015620009b8578151875295820195908201906001016200099a565b509495945050505050565b80516001600160a01b03908116835260208083015160e08286018190528151908601819052600093918301929084906101008801905b8083101562000a1d57855185168252948301946001929092019190830190620009f9565b5060408701519450878103604089015262000a39818662000987565b945050505050606083015160608501526080830151608085015260a083015160a085015260c083015160c08501528091505092915050565b60208152600060018060a01b0380845116602084015280602085015116604084015280604085015116606084015250606083015160808084015262000aba60a0840182620009c3565b949350505050565b6020815260006200082d6020830184620009c3565b60405160e0810167ffffffffffffffff8111828210171562000afd5762000afd62000bc7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171562000b2f5762000b2f62000bc7565b604052919050565b600067ffffffffffffffff82111562000b545762000b5462000bc7565b5060051b60200190565b6000821982111562000b745762000b7462000bb1565b500190565b60008282101562000b8e5762000b8e62000bb1565b500390565b600060001982141562000baa5762000baa62000bb1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000bf357600080fd5b5056fe6101006040523480156200001257600080fd5b50604051620029fb380380620029fb8339810160408190526200003591620008d0565b806000015181600001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200007857600080fd5b505afa1580156200008d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000b7919081019062000836565b604051602001620000c9919062000ab5565b60405160208183030381529060405282600001516001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200011657600080fd5b505afa1580156200012b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000155919081019062000836565b60405160200162000167919062000a8a565b6040516020818303038152906040528181846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620001b257600080fd5b505afa158015620001c7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ed9190620009bd565b825162000202906000906020860190620005fa565b50815162000218906001906020850190620005fa565b507fff0000000000000000000000000000000000000000000000000000000000000060f882901b166080524660a05262000251620004cf565b60c052505050505060601b6001600160601b03191660e0528051600d80546001600160a01b0319166001600160a01b039092169190911790556020808201518051620002a292600892019062000689565b506020808201515160065560408201518051620002c4926007920190620006e1565b506060810151600a556080810151600b5560a0810151600c55426009556006546001600160401b038111156200030a57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562000334578160200160208202803683370190505b5080516200034b91600f91602090910190620006e1565b50600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200039b57600080fd5b505afa158015620003b0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d69190620009bd565b620003e390600a62000bc2565b60105560005b600654811015620004c75780600e6000600884815481106200041b57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b0316835282019290925260400190205560088054620004849190839081106200046957634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03166200056b565b600f8281548110620004a657634e487b7160e01b600052603260045260246000fd5b60009182526020909120015580620004be8162000cf1565b915050620003e9565b505062000d3b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620005039190620009e7565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60105460405163ef8b30f760e01b81526000916001600160a01b0384169163ef8b30f791620005a09160040190815260200190565b60206040518083038186803b158015620005b957600080fd5b505afa158015620005ce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005f49190620009a4565b92915050565b828054620006089062000cb4565b90600052602060002090601f0160209004810192826200062c576000855562000677565b82601f106200064757805160ff191683800117855562000677565b8280016001018555821562000677579182015b82811115620006775782518255916020019190600101906200065a565b50620006859291506200071e565b5090565b82805482825590600052602060002090810192821562000677579160200282015b828111156200067757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620006aa565b828054828255906000526020600020908101928215620006775791602002820182811115620006775782518255916020019190600101906200065a565b5b808211156200068557600081556001016200071f565b80516001600160a01b03811681146200074d57600080fd5b919050565b600082601f83011262000763578081fd5b815160206200077c620007768362000b53565b62000b20565b80838252828201915082860187848660051b89010111156200079c578586fd5b855b85811015620007c557620007b28262000735565b845292840192908401906001016200079e565b5090979650505050505050565b600082601f830112620007e3578081fd5b81516020620007f6620007768362000b53565b80838252828201915082860187848660051b890101111562000816578586fd5b855b85811015620007c55781518452928401929084019060010162000818565b60006020828403121562000848578081fd5b81516001600160401b03808211156200085f578283fd5b818401915084601f83011262000873578283fd5b81518181111562000888576200088862000d25565b6200089d601f8201601f191660200162000b20565b9150808252856020828501011115620008b4578384fd5b620008c781602084016020860162000c81565b50949350505050565b600060208284031215620008e2578081fd5b81516001600160401b0380821115620008f9578283fd5b9083019060e082860312156200090d578283fd5b6200091762000af5565b620009228362000735565b815260208301518281111562000936578485fd5b620009448782860162000752565b6020830152506040830151828111156200095c578485fd5b6200096a87828601620007d2565b604083015250606083015160608201526080830151608082015260a083015160a082015260c083015160c082015280935050505092915050565b600060208284031215620009b6578081fd5b5051919050565b600060208284031215620009cf578081fd5b815160ff81168114620009e0578182fd5b9392505050565b600080835482600182811c91508083168062000a0457607f831692505b602080841082141562000a2557634e487b7160e01b87526022600452602487fd5b81801562000a3c576001811462000a4e5762000a7c565b60ff1986168952848901965062000a7c565b60008a815260209020885b8681101562000a745781548b82015290850190830162000a59565b505084890196505b509498975050505050505050565b601d60fa1b81526000825162000aa881600185016020870162000c81565b9190910160010192915050565b65039bab832b9160d51b81526000825162000ad881600685016020870162000c81565b650815985d5b1d60d21b6006939091019283015250600c01919050565b60405160e081016001600160401b038111828210171562000b1a5762000b1a62000d25565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000b4b5762000b4b62000d25565b604052919050565b60006001600160401b0382111562000b6f5762000b6f62000d25565b5060051b60200190565b600181815b8085111562000bba57816000190482111562000b9e5762000b9e62000d0f565b8085161562000bac57918102915b93841c939080029062000b7e565b509250929050565b6000620009e060ff84168360008262000bde57506001620005f4565b8162000bed57506000620005f4565b816001811462000c06576002811462000c115762000c31565b6001915050620005f4565b60ff84111562000c255762000c2562000d0f565b50506001821b620005f4565b5060208310610133831016604e8410600b841016171562000c56575081810a620005f4565b62000c62838362000b79565b806000190482111562000c795762000c7962000d0f565b029392505050565b60005b8381101562000c9e57818101518382015260200162000c84565b8381111562000cae576000848401525b50505050565b600181811c9082168062000cc957607f821691505b6020821081141562000ceb57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000d085762000d0862000d0f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b60805160f81c60a05160c05160e05160601c611c5d62000d9e600039600081816102f901528181610a3601528181610b0d01528181610d5201528181610e9a015261147b01526000610834015260006107ff015260006102b00152611c5d6000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80637f2b6a0d11610125578063ba087652116100ad578063d505accf1161007c578063d505accf1461047a578063d905777e1461048f578063dd62ed3e146104b8578063e31fbfa2146104e3578063ef8b30f7146104eb57600080fd5b8063ba08765214610441578063c63d75b614610333578063c6e6f59214610454578063ce96cb771461046757600080fd5b80639816f473116100f45780639816f473146103e2578063a2b379d7146103f3578063a9059cbb14610408578063b3d7f6b91461041b578063b460af941461042e57600080fd5b80637f2b6a0d146103b657806394bf804d146103be57806395082d25146103d157806395d89b41146103da57600080fd5b806334fd2eca116101a85780634cdad506116101775780634cdad50614610348578063695f7af01461035b5780636e553f651461036357806370a08231146103765780637ecebe001461039657600080fd5b806334fd2eca146102e45780633644e515146102ec57806338d52e0f146102f4578063402d267d1461033357600080fd5b80630a28a477116101e45780630a28a4771461027c57806318160ddd1461028f57806323b872dd14610298578063313ce567146102ab57600080fd5b806301e1d1141461021657806306fdde031461023157806307a2d13a14610246578063095ea7b314610259575b600080fd5b61021e6104fe565b6040519081526020015b60405180910390f35b6102396105d3565b6040516102289190611af6565b61021e61025436600461193f565b610661565b61026c610267366004611916565b61068e565b6040519015158152602001610228565b61021e61028a36600461193f565b6106fb565b61021e60025481565b61026c6102a636600461186a565b61071b565b6102d27f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610228565b600b5461021e565b61021e6107fb565b61031b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610228565b61021e61034136600461181e565b5060001990565b61021e61035636600461193f565b610856565b61021e610861565b61021e61037136600461196f565b6109dc565b61021e61038436600461181e565b60036020526000908152604090205481565b61021e6103a436600461181e565b60056020526000908152604090205481565b61026c610ab4565b61021e6103cc36600461196f565b610acd565b61021e60105481565b610239610b8b565b600d546001600160a01b031661031b565b6103fb610b98565b6040516102289190611ab2565b61026c610416366004611916565b610bf0565b61021e61042936600461193f565b610c56565b61021e61043c366004611991565b610c75565b61021e61044f366004611991565b610d79565b61021e61046236600461193f565b610ec1565b61021e61047536600461181e565b610ee1565b61048d6104883660046118a5565b610f03565b005b61021e61049d36600461181e565b6001600160a01b031660009081526003602052604090205490565b61021e6104c6366004611838565b600460209081526000928352604080842090915290825290205481565b600a5461021e565b61021e6104f936600461193f565b611147565b60008060005b6006548110156105cd576008818154811061052f57634e487b7160e01b600052603260045260246000fd5b60009182526020918290200154604080516278744560e21b815290516001600160a01b03909216926301e1d11492600480840193829003018186803b15801561057757600080fd5b505afa15801561058b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105af9190611957565b6105b99083611b33565b9150806105c581611bd6565b915050610504565b50919050565b600080546105e090611ba1565b80601f016020809104026020016040519081016040528092919081815260200182805461060c90611ba1565b80156106595780601f1061062e57610100808354040283529160200191610659565b820191906000526020600020905b81548152906001019060200180831161063c57829003601f168201915b505050505081565b6002546000908015610685576106806106786104fe565b849083611152565b610687565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906106e99086815260200190565b60405180910390a35060015b92915050565b600254600090801561068557610680816107136104fe565b859190611171565b6001600160a01b03831660009081526004602090815260408083203384529091528120546000198114610777576107528382611b8a565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b0385166000908152600360205260408120805485929061079f908490611b8a565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020611c08833981519152906107e89087815260200190565b60405180910390a3506001949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146108315761082c61119f565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b60006106f582610661565b60008060065467ffffffffffffffff81111561088d57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108b6578160200160208202803683370190505b5090506000805b6006548110156109c757601054600f82815481106108eb57634e487b7160e01b600052603260045260246000fd5b90600052602060002001546109346008848154811061091a57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316611239565b61093e9190611b4b565b6109489190611b6b565b83828151811061096857634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060105483828151811061099757634e487b7160e01b600052603260045260246000fd5b60200260200101516109a99190611b8a565b6109b39083611b33565b9150806109bf81611bd6565b9150506108bd565b506006546109d59082611b4b565b9250505090565b60006109e783611147565b905080610a295760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f53484152455360a81b60448201526064015b60405180910390fd5b610a5e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866112bd565b610a688282611347565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d791015b60405180910390a36106f5565b6000600c5460095442610ac79190611b8a565b11905090565b6000610ad883610c56565b9050610b00604051806040016040528060048152602001636865726560e01b815250336113a5565b610b356001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846112bd565b610b3e836113ea565b610b488284611347565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d79101610aa7565b600180546105e090611ba1565b6060600f805480602002602001604051908101604052809291908181526020018280548015610be657602002820191906000526020600020905b815481526020019060010190808311610bd2575b5050505050905090565b33600090815260036020526040812080548391908390610c11908490611b8a565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020611c08833981519152906106e99086815260200190565b600254600090801561068557610680610c6d6104fe565b849083611171565b6000610c80846106fb565b9050336001600160a01b03831614610cf0576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114610cee57610cc98282611b8a565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b610cfa828261156e565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a46106876001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684866115d0565b6000336001600160a01b03831614610de9576001600160a01b03821660009081526004602090815260408083203384529091529020546000198114610de757610dc28582611b8a565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b610df284610856565b905080610e2f5760405162461bcd60e51b815260206004820152600b60248201526a5a45524f5f41535345545360a81b6044820152606401610a20565b610e388161164e565b610e42828561156e565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a46106876001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684836115d0565b60025460009080156106855761068081610ed96104fe565b859190611152565b6001600160a01b0381166000908152600360205260408120546106f590610661565b42841015610f535760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610a20565b60006001610f5f6107fb565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561106b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906110a15750876001600160a01b0316816001600160a01b0316145b6110de5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610a20565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60006106f582610ec1565b82820281151584158583048514171661116a57600080fd5b0492915050565b82820281151584158583048514171661118957600080fd5b6001826001830304018115150290509392505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516111d19190611a17565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60105460405163ef8b30f760e01b81526000916001600160a01b0384169163ef8b30f79161126d9160040190815260200190565b60206040518083038186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f59190611957565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806113405760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610a20565b5050505050565b80600260008282546113599190611b33565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020611c0883398151915291015b60405180910390a35050565b5050565b6113a182826040516024016113bb929190611b09565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261176a565b6000805b6006548110156115695761143f6010546007838154811061141f57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154856114359190611b6b565b6102549190611b4b565b91506114a46008828154811061146557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168461178b565b6000600882815481106114c757634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051636e553f6560e01b8152600481018590523060248201526001600160a01b0390911690636e553f6590604401602060405180830381600087803b15801561151c57600080fd5b505af1158015611530573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115549190611957565b5081905061156181611bd6565b9150506113ee565b505050565b6001600160a01b03821660009081526003602052604081208054839290611596908490611b8a565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020611c0883398151915290602001611395565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806116485760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610a20565b50505050565b6000805b600654811015611569576010546007828154811061168057634e487b7160e01b600052603260045260246000fd5b9060005260206000200154846116969190611b6b565b6116a09190611b4b565b9150600881815481106116c357634e487b7160e01b600052603260045260246000fd5b600091825260209091200154604051632d182be560e21b815260048101849052306024820181905260448201526001600160a01b039091169063b460af9490606401602060405180830381600087803b15801561171f57600080fd5b505af1158015611733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117579190611957565b508061176281611bd6565b915050611652565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600060405163095ea7b360e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806116485760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606401610a20565b80356001600160a01b038116811461181957600080fd5b919050565b60006020828403121561182f578081fd5b61068782611802565b6000806040838503121561184a578081fd5b61185383611802565b915061186160208401611802565b90509250929050565b60008060006060848603121561187e578081fd5b61188784611802565b925061189560208501611802565b9150604084013590509250925092565b600080600080600080600060e0888a0312156118bf578283fd5b6118c888611802565b96506118d660208901611802565b95506040880135945060608801359350608088013560ff811681146118f9578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215611928578182fd5b61193183611802565b946020939093013593505050565b600060208284031215611950578081fd5b5035919050565b600060208284031215611968578081fd5b5051919050565b60008060408385031215611981578182fd5b8235915061186160208401611802565b6000806000606084860312156119a5578283fd5b833592506119b560208501611802565b91506119c360408501611802565b90509250925092565b60008151808452815b818110156119f1576020818501810151868301820152016119d5565b81811115611a025782602083870101525b50601f01601f19169290920160200192915050565b600080835482600182811c915080831680611a3357607f831692505b6020808410821415611a5357634e487b7160e01b87526022600452602487fd5b818015611a675760018114611a7857611aa4565b60ff19861689528489019650611aa4565b60008a815260209020885b86811015611a9c5781548b820152908501908301611a83565b505084890196505b509498975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611aea57835183529284019291840191600101611ace565b50909695505050505050565b60208152600061068760208301846119cc565b604081526000611b1c60408301856119cc565b905060018060a01b03831660208301529392505050565b60008219821115611b4657611b46611bf1565b500190565b600082611b6657634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611b8557611b85611bf1565b500290565b600082821015611b9c57611b9c611bf1565b500390565b600181811c90821680611bb557607f821691505b602082108114156105cd57634e487b7160e01b600052602260045260246000fd5b6000600019821415611bea57611bea611bf1565b5060010190565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122043e4b31d5afcf600e5db9a77fbae62f9922385c776576b341087709b90c31cea64736f6c6343000804003360806040523480156200001157600080fd5b506040516200221e3803806200221e8339810160408190526200003491620003d1565b600080546001600160a01b0319166001600160a01b0383169081178255604080516395d89b4160e01b8152905184936395d89b419260048082019391829003018186803b1580156200008557600080fd5b505afa1580156200009a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000c4919081019062000401565b604051602001620000d69190620004fc565b60405160208183030381529060405230604051620000f490620003c3565b62000102939291906200059d565b604051809103906000f0801580156200011f573d6000803e3d6000fd5b50600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200018157600080fd5b505afa15801562000196573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001c0919081019062000401565b604051602001620001d2919062000529565b60405160208183030381529060405230604051620001f090620003c3565b620001fe9392919062000549565b604051809103906000f0801580156200021b573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b039283161790556000546040805163718fdfd160e11b81529051919092169163e31fbfa2916004808301926020929190829003018186803b1580156200027657600080fd5b505afa1580156200028b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b19190620004b5565b60035560005460408051631a7e976560e11b815290516001600160a01b03909216916334fd2eca91600480820192602092909190829003018186803b158015620002fa57600080fd5b505afa1580156200030f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003359190620004b5565b600555600054604080516395082d2560e01b815290516001600160a01b03909216916395082d2591600480820192602092909190829003018186803b1580156200037e57600080fd5b505afa15801562000393573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003b99190620004b5565b6004555062000627565b61118f806200108f83390190565b600060208284031215620003e3578081fd5b81516001600160a01b0381168114620003fa578182fd5b9392505050565b60006020828403121562000413578081fd5b81516001600160401b03808211156200042a578283fd5b818401915084601f8301126200043e578283fd5b81518181111562000453576200045362000611565b604051601f8201601f19908116603f011681019083821181831017156200047e576200047e62000611565b8160405282815287602084870101111562000497578586fd5b620004aa836020830160208801620005de565b979650505050505050565b600060208284031215620004c7578081fd5b5051919050565b60008151808452620004e8816020860160208601620005de565b601f01601f19169290920160200192915050565b6273655f60e81b8152600082516200051c816003850160208701620005de565b9190910160030192915050565b626a755f60e81b8152600082516200051c816003850160208701620005de565b600060018060a01b038086168352608060208401526006608084015265353ab734b7b960d11b60a084015260c060408401526200058a60c0840186620004ce565b9150808416606084015250949350505050565b600060018060a01b03808616835260806020840152600660808401526539b2b734b7b960d11b60a084015260c060408401526200058a60c0840186620004ce565b60005b83811015620005fb578181015183820152602001620005e1565b838111156200060b576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b610a5880620006376000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806317a4cf49146100515780635d1e2d1b14610077578063aa17a2cc1461009f578063e9c52e58146100b4575b600080fd5b61006461005f3660046108e4565b6100c9565b6040519081526020015b60405180910390f35b61008a6100853660046108e4565b6103ac565b6040805192835260208301919091520161006e565b6100b26100ad36600461090f565b610512565b005b6100bc610784565b60405161006e9190610939565b600080546001600160a01b0384811691161461011d5760405162461bcd60e51b815260206004820152600e60248201526d2bb937b7339029b83634ba3a32b960911b60448201526064015b60405180910390fd5b600060035460035460045461013291906109dd565b60045461013f91906109be565b610149919061099e565b90506000600454848361015c91906109be565b610166919061099e565b6001546040516370a0823160e01b815233600482015291925082916001600160a01b03909116906370a082319060240160206040518083038186803b1580156101ae57600080fd5b505afa1580156101c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e69190610921565b10156102345760405162461bcd60e51b815260206004820152601860248201527f4e6f7420656e6f7567682073656e696f7220746f6b656e7300000000000000006044820152606401610114565b600254604051632770a7eb60e21b8152336004820152602481018690526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561028057600080fd5b505af1158015610294573d6000803e3d6000fd5b5050600154604051632770a7eb60e21b8152336004820152602481018590526001600160a01b039091169250639dc29fac9150604401600060405180830381600087803b1580156102e457600080fd5b505af11580156102f8573d6000803e3d6000fd5b50506000546001600160a01b0316915063a9059cbb90503361031a8488610986565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561036057600080fd5b505af1158015610374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039891906108bd565b506103a38185610986565b95945050505050565b6000805481906001600160a01b038581169116146103fd5760405162461bcd60e51b815260206004820152600e60248201526d2bb937b7339029b83634ba3a32b960911b6044820152606401610114565b6104126001600160a01b038516333086610833565b60006004546003548561042591906109be565b61042f919061099e565b9050600061043d82866109dd565b6002546040516340c10f1960e01b8152336004820152602481018590529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b50506001546040516340c10f1960e01b8152336004820152602481018590526001600160a01b0390911692506340c10f199150604401600060405180830381600087803b1580156104ee57600080fd5b505af1158015610502573d6000803e3d6000fd5b5093989297509195505050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316637f2b6a0d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561055e57600080fd5b505afa158015610572573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059691906108bd565b6105d65760405162461bcd60e51b815260206004820152601160248201527015985d5b1d081b9bdd081b585d1d5c9959607a1b6044820152606401610114565b6001546001600160a01b03838116911614806105ff57506002546001600160a01b038381169116145b6106415760405162461bcd60e51b81526020600482015260136024820152722bb937b733902a3930b731b432902a37b5b2b760691b6044820152606401610114565b6001546000906001600160a01b03848116911614610660576000610663565b60015b905060008161067457600754610678565b6006545b90506000600454848361068b91906109be565b610695919061099e565b604051632770a7eb60e21b8152336004820152602481018690529091506001600160a01b03861690639dc29fac90604401600060405180830381600087803b1580156106e057600080fd5b505af11580156106f4573d6000803e3d6000fd5b505060005460405163a9059cbb60e01b8152336004820152602481018590526001600160a01b03909116925063a9059cbb9150604401602060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c91906108bd565b505050505050565b60408051600280825260608083018452926000929190602083019080368337505060015482519293506001600160a01b0316918391506000906107d757634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260025482519116908290600190811061081657634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152919050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d11600160005114161716915050806108b65760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610114565b5050505050565b6000602082840312156108ce578081fd5b815180151581146108dd578182fd5b9392505050565b600080604083850312156108f6578081fd5b823561090181610a0a565b946020939093013593505050565b600080604083850312156108f6578182fd5b600060208284031215610932578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b8181101561097a5783516001600160a01b031683529284019291840191600101610955565b50909695505050505050565b60008219821115610999576109996109f4565b500190565b6000826109b957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156109d8576109d86109f4565b500290565b6000828210156109ef576109ef6109f4565b500390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610a1f57600080fd5b5056fea26469706673582212207507e4070f42dedb25324b7bd2ca84290270b9014bc99fc57c7ee2ca8956265764736f6c6343000804003360e06040523480156200001157600080fd5b506040516200118f3803806200118f833981016040819052620000349162000343565b8282856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200007057600080fd5b505afa15801562000085573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ab9190620003d4565b8251620000c0906000906020860190620001ea565b508151620000d6906001906020850190620001ea565b507fff0000000000000000000000000000000000000000000000000000000000000060f882901b166080524660a0526200010f6200014e565b60c0525050600780546001600160a01b039687166001600160a01b0319918216179091556006805493909616921691909117909355506200050d915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001829190620003fe565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b828054620001f890620004a1565b90600052602060002090601f0160209004810192826200021c576000855562000267565b82601f106200023757805160ff191683800117855562000267565b8280016001018555821562000267579182015b82811115620002675782518255916020019190600101906200024a565b506200027592915062000279565b5090565b5b808211156200027557600081556001016200027a565b600082601f830112620002a1578081fd5b81516001600160401b0380821115620002be57620002be620004de565b604051601f8301601f19908116603f01168101908282118183101715620002e957620002e9620004de565b8160405283815260209250868385880101111562000305578485fd5b8491505b8382101562000328578582018301518183018401529082019062000309565b838211156200033957848385830101525b9695505050505050565b6000806000806080858703121562000359578384fd5b84516200036681620004f4565b60208601519094506001600160401b038082111562000383578485fd5b620003918883890162000290565b94506040870151915080821115620003a7578384fd5b50620003b68782880162000290565b9250506060850151620003c981620004f4565b939692955090935050565b600060208284031215620003e6578081fd5b815160ff81168114620003f7578182fd5b9392505050565b600080835482600182811c9150808316806200041b57607f831692505b60208084108214156200043c57634e487b7160e01b87526022600452602487fd5b818015620004535760018114620004655762000493565b60ff1986168952848901965062000493565b60008a815260209020885b868110156200048b5781548b82015290850190830162000470565b505084890196505b509498975050505050505050565b600181811c90821680620004b657607f821691505b60208210811415620004d857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200050a57600080fd5b50565b60805160f81c60a05160c051610c4f62000540600039600061046f0152600061043a0152600061015f0152610c4f6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c5780639dc29fac116100665780639dc29fac146101f8578063a9059cbb1461020b578063d505accf1461021e578063dd62ed3e1461023157600080fd5b806370a08231146101b05780637ecebe00146101d057806395d89b41146101f057600080fd5b806323b872dd116100c857806323b872dd14610147578063313ce5671461015a5780633644e5151461019357806340c10f191461019b57600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761025c565b6040516101049190610b26565b60405180910390f35b61012061011b366004610a62565b6102ea565b6040519015158152602001610104565b61013960025481565b604051908152602001610104565b6101206101553660046109b6565b610356565b6101817f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610104565b610139610436565b6101ae6101a9366004610a62565b610491565b005b6101396101be366004610963565b60036020526000908152604090205481565b6101396101de366004610963565b60056020526000908152604090205481565b6100f76104ea565b6101ae610206366004610a62565b6104f7565b610120610219366004610a62565b610547565b6101ae61022c3660046109f1565b6105ad565b61013961023f366004610984565b600460209081526000928352604080842090915290825290205481565b6000805461026990610ba8565b80601f016020809104026020016040519081016040528092919081815260200182805461029590610ba8565b80156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103459086815260200190565b60405180910390a350600192915050565b6001600160a01b038316600090815260046020908152604080832033845290915281205460001981146103b25761038d8382610b91565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906103da908490610b91565b90915550506001600160a01b0380851660008181526003602052604090819020805487019055519091871690600080516020610bfa833981519152906104239087815260200190565b60405180910390a3506001949350505050565b60007f0000000000000000000000000000000000000000000000000000000000000000461461046c576104676107f1565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6006546001600160a01b031633146104dc5760405162461bcd60e51b815260206004820152600960248201526810a9b83634ba3a32b960b91b60448201526064015b60405180910390fd5b6104e6828261088b565b5050565b6001805461026990610ba8565b6006546001600160a01b0316331461053d5760405162461bcd60e51b815260206004820152600960248201526810a9b83634ba3a32b960b91b60448201526064016104d3565b6104e682826108e5565b33600090815260036020526040812080548391908390610568908490610b91565b90915550506001600160a01b03831660008181526003602052604090819020805485019055513390600080516020610bfa833981519152906103459086815260200190565b428410156105fd5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f4558504952454400000000000000000060448201526064016104d3565b60006001610609610436565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610715573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061074b5750876001600160a01b0316816001600160a01b0316145b6107885760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b60448201526064016104d3565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516108239190610a8b565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b806002600082825461089d9190610b79565b90915550506001600160a01b038216600081815260036020908152604080832080548601905551848152600080516020610bfa83398151915291015b60405180910390a35050565b6001600160a01b0382166000908152600360205260408120805483929061090d908490610b91565b90915550506002805482900390556040518181526000906001600160a01b03841690600080516020610bfa833981519152906020016108d9565b80356001600160a01b038116811461095e57600080fd5b919050565b600060208284031215610974578081fd5b61097d82610947565b9392505050565b60008060408385031215610996578081fd5b61099f83610947565b91506109ad60208401610947565b90509250929050565b6000806000606084860312156109ca578081fd5b6109d384610947565b92506109e160208501610947565b9150604084013590509250925092565b600080600080600080600060e0888a031215610a0b578283fd5b610a1488610947565b9650610a2260208901610947565b95506040880135945060608801359350608088013560ff81168114610a45578384fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610a74578182fd5b610a7d83610947565b946020939093013593505050565b600080835482600182811c915080831680610aa757607f831692505b6020808410821415610ac757634e487b7160e01b87526022600452602487fd5b818015610adb5760018114610aec57610b18565b60ff19861689528489019650610b18565b60008a815260209020885b86811015610b105781548b820152908501908301610af7565b505084890196505b509498975050505050505050565b6000602080835283518082850152825b81811015610b5257858101830151858201604001528201610b36565b81811115610b635783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610b8c57610b8c610be3565b500190565b600082821015610ba357610ba3610be3565b500390565b600181811c90821680610bbc57607f821691505b60208210811415610bdd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212201d97d1b03b0fa5f41f3548f22c7484a3d9d8fccf997ef97c9af730c65481c2c564736f6c63430008040033a26469706673582212208715cc84db704e68c62723b95f8975479c3ac7143c1862f1a681be51ae61a2e264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256))": {
        "details": "a bid is filled when liquidity provider agrees to provide initial liq for senior/junior or vice versa.   so initial liq should be provided nonetheless "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createVault((address,address[],uint256[],uint256,uint256,uint256,uint256))": {
        "notice": "adds vaults, spllitters, and amms when tranche bids are filled  Bidders have to specify the  param want: underlying token for all the vaults e.g(usdc,eth) param instruments: addresses of all vaults for the want they want exposure to param ratios: how much they want to split between the instruments  param junior weight: how much the juniors are allocated; lower means higher leverage for juniors but lower safety for seniors param promisedReturn: how much fixed income seniors are getting paid primarily,  param timetomaturity: when the tVault matures and tranche token holders can redeem their tranche for tVault "
      },
      "increaseLPTokenBalance(address,uint256,uint256)": {
        "notice": "lp token balance is stored in this contract"
      }
    },
    "notice": "contract that stores the contracts and liquidity for each tranches ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54674,
        "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
        "label": "numVaults",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 54676,
        "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 54679,
        "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
        "label": "ammFactory",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(TrancheAMMFactory)54671"
      },
      {
        "astId": 54711,
        "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
        "label": "vaultContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Contracts)54706_storage)"
      },
      {
        "astId": 54717,
        "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
        "label": "lp_holdings",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(TrancheAMMFactory)54671": {
        "encoding": "inplace",
        "label": "contract TrancheAMMFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Contracts)54706_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrancheFactory.Contracts)",
        "numberOfBytes": "32",
        "value": "t_struct(Contracts)54706_storage"
      },
      "t_struct(Contracts)54706_storage": {
        "encoding": "inplace",
        "label": "struct TrancheFactory.Contracts",
        "members": [
          {
            "astId": 54698,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "vault",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 54700,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "splitter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 54702,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "amm",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 54705,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "param",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(InitParams)54696_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(InitParams)54696_storage": {
        "encoding": "inplace",
        "label": "struct TrancheFactory.InitParams",
        "members": [
          {
            "astId": 54681,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "_want",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 54684,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "_instruments",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 54687,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "_ratios",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 54689,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "_junior_weight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 54691,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "_promisedReturn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 54693,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "_time_to_maturity",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 54695,
            "contract": "contracts/vaults/vault_tranche/tranchemaster.sol:TrancheFactory",
            "label": "vaultId",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}