{
  "address": "0x056AcF0F215CD2b21B861f475b30ED94bd77158A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Full",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shareFactor",
          "type": "uint256"
        },
        {
          "internalType": "contract FeePot",
          "name": "_feePot",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_fees",
          "type": "uint256[3]"
        },
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "MarketActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "initialOdds",
          "type": "uint256[]"
        }
      ],
      "name": "MarketCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winnerIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "winnerName",
          "type": "string"
        }
      ],
      "name": "MarketResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesBurned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "SharesMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "winningOutcome",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "winningIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "winningName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "settlementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "WinningsClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accumulatedProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accumulatedSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sharesToBurn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "calcCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        }
      ],
      "name": "calcShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimManyWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimSettlementFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "claimWinnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateral",
      "outputs": [
        {
          "internalType": "contract IERC20Full",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_names",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_odds",
          "type": "uint256[]"
        }
      ],
      "name": "createMarket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePot",
      "outputs": [
        {
          "internalType": "contract FeePot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "settlementAddress",
              "type": "address"
            },
            {
              "internalType": "contract OwnedERC20[]",
              "name": "shareTokens",
              "type": "address[]"
            },
            {
              "internalType": "contract OwnedERC20",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "winnerIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "settlementFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creationTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "resolutionTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "initialOdds",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            }
          ],
          "internalType": "struct AbstractMarketFactoryV3.Market",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "getMarketDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedMarketFactoryV3.MarketDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getRewardEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        }
      ],
      "name": "getTradeDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isMarketResolved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        }
      ],
      "name": "logTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareToMint",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "mintShares",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newProtocol",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_claimFirst",
          "type": "bool"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setSettlementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newFee",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settlementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_winningOutcome",
          "type": "uint256"
        }
      ],
      "name": "trustedResolveMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x66a823c0a23cb1653add0e33806a9bea38637668c7ee091f48ca88f8c59af4ea",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0x056AcF0F215CD2b21B861f475b30ED94bd77158A",
    "transactionIndex": 9,
    "gasUsed": "3569894",
    "logsBloom": "0x0000000000000002000000000008000000000000000080000000000000000000000000000000000000000000000000000000c000000000000000000000200000000000000000000000000000000000800000000000000000000100000000000000000000000000080000000000000000000000000000000080000200000000000004000000000000000000000000000000000000020000000000000000000000220000000000000020000010000000000001000000000000000100000000004000000000000000020001000000000000000000000000000000100000000000000010000000000000000000000000000000020000000000000000000000100000",
    "blockHash": "0x46e92cf269194732fbe518b0f88774becf08606a05e0a08bb3c8b2ac4b7b0591",
    "transactionHash": "0x66a823c0a23cb1653add0e33806a9bea38637668c7ee091f48ca88f8c59af4ea",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 27289099,
        "transactionHash": "0x66a823c0a23cb1653add0e33806a9bea38637668c7ee091f48ca88f8c59af4ea",
        "address": "0xb21ae1581F747C7913B9d8e3026A949f0cB0221b",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000056acf0f215cd2b21b861f475b30ed94bd77158a",
          "0x000000000000000000000000d0780fd29f17cf568f45d26d4f71f66ed747e605"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 25,
        "blockHash": "0x46e92cf269194732fbe518b0f88774becf08606a05e0a08bb3c8b2ac4b7b0591"
      },
      {
        "transactionIndex": 9,
        "blockNumber": 27289099,
        "transactionHash": "0x66a823c0a23cb1653add0e33806a9bea38637668c7ee091f48ca88f8c59af4ea",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000657665bc219fea0000000000000000000000000000000000000000000000026be65c3bc8a068f300000000000000000000000000000000000000000000120abc40b8b73d8a70160000000000000000000000000000000000000000000000026b80e5d60c7ec90900000000000000000000000000000000000000000000120abca62f1cf9ac1000",
        "logIndex": 26,
        "blockHash": "0x46e92cf269194732fbe518b0f88774becf08606a05e0a08bb3c8b2ac4b7b0591"
      }
    ],
    "blockNumber": 27289099,
    "cumulativeGasUsed": "4895429",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xb21ae1581F747C7913B9d8e3026A949f0cB0221b",
    "1000000000000",
    "0xd0780FD29f17cF568f45d26d4F71f66ed747e605",
    [
      0,
      "500000000000000",
      0
    ],
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692"
  ],
  "numDeployments": 2,
  "solcInputHash": "f1e7de409326fef85577dc516fa72386",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Full\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"_feePot\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_fees\",\"type\":\"uint256[3]\"},{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MarketActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"name\":\"MarketCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winnerName\",\"type\":\"string\"}],\"name\":\"MarketResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"SharesMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winningOutcome\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"winningName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"WinningsClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accumulatedSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sharesToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"calcCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimManyWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimSettlementFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"claimWinnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateral\",\"outputs\":[{\"internalType\":\"contract IERC20Full\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_odds\",\"type\":\"uint256[]\"}],\"name\":\"createMarket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePot\",\"outputs\":[{\"internalType\":\"contract FeePot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"settlementAddress\",\"type\":\"address\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winnerIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resolutionTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct AbstractMarketFactoryV3.Market\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getMarketDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedMarketFactoryV3.MarketDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getRewardEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"}],\"name\":\"getTradeDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isMarketResolved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"logTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareToMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newProtocol\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimFirst\",\"type\":\"bool\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setSettlementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settlementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_winningOutcome\",\"type\":\"uint256\"}],\"name\":\"trustedResolveMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/TrustedMarketFactoryV3.sol\":\"TrustedMarketFactoryV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface BColor {\\r\\n    function getColor() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ncontract BBronze is BColor {\\r\\n    function getColor() external pure override returns (bytes32) {\\r\\n        return bytes32(\\\"BRONZE\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5684acd4711203183665f2ab65bafb6d12d22d08d18423e4bb143d79d1d6c\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BColor.sol\\\";\\r\\n\\r\\ncontract BConst is BBronze {\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\r\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\r\\n\\r\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\r\\n    uint256 public constant MAX_FEE = BONE / 10;\\r\\n    uint256 public constant EXIT_FEE = 0;\\r\\n\\r\\n    uint256 public constant MIN_WEIGHT = BONE;\\r\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\r\\n\\r\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\r\\n\\r\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\r\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\r\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\r\\n\\r\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\r\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\r\\n}\\r\\n\",\"keccak256\":\"0x861f4d61a141af61fbc9c4824e0952b112c4dcb5329093ac73c5c31bdf83aec2\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ncontract BMath is BBronze, BConst, BNum {\\r\\n    /**********************************************************************************************\\r\\n    // calcSpotPrice                                                                             //\\r\\n    // sP = spotPrice                                                                            //\\r\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\r\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\r\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcSpotPrice(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 spotPrice) {\\r\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\r\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\r\\n        uint256 ratio = bdiv(numer, denom);\\r\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\r\\n        return (spotPrice = bmul(ratio, scale));\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcOutGivenIn                                                                            //\\r\\n    // aO = tokenAmountOut                                                                       //\\r\\n    // bO = tokenBalanceOut                                                                      //\\r\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\r\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\r\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcOutGivenIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\r\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\r\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\r\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        uint256 bar = bsub(BONE, foo);\\r\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcInGivenOut                                                                            //\\r\\n    // aI = tokenAmountIn                                                                        //\\r\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\r\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\r\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\r\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\r\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcInGivenOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\r\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\r\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        foo = bsub(foo, BONE);\\r\\n        tokenAmountIn = bsub(BONE, swapFee);\\r\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolOutGivenSingleIn                                                                  //\\r\\n    // pAo = poolAmountOut         /                                              \\\\              //\\r\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\r\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\r\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\r\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\r\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\r\\n    // sF = swapFee                \\\\                                              /              //\\r\\n    **********************************************************************************************/\\r\\n\\r\\n    // Charge the trading fee for the proportion of tokenAi\\r\\n    ///  which is implicitly traded to the other pool tokens.\\r\\n    // That proportion is (1- weightTokenIn)\\r\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\r\\n\\r\\n    function calcPoolOutGivenSingleIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\r\\n\\r\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\r\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\r\\n\\r\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleInGivenPoolOut                                                                  //\\r\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\r\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\r\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\r\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\r\\n    // wI = weightIn                              /      wI  \\\\                                   //\\r\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\r\\n    // sF = swapFee                               \\\\      tW  /                                   //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleInGivenPoolOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\r\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\r\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\r\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\r\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\r\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\r\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\r\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\r\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleOutGivenPoolIn                                                                  //\\r\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\r\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\r\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\r\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\r\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\r\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\r\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\r\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleOutGivenPoolIn(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\r\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\r\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\r\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\r\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\r\\n\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\r\\n\\r\\n        // charge swap fee on the output token side\\r\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolInGivenSingleOut                                                                  //\\r\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\r\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\r\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\r\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\r\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\r\\n    // tW = totalWeight           -------------------------------------------------------------  //\\r\\n    // sF = swapFee                                        ( 1 - eF )                            //\\r\\n    // eF = exitFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcPoolInGivenSingleOut(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountIn) {\\r\\n        // charge swap fee on the output token side\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\r\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\r\\n        uint256 zar = bmul(zoo, swapFee);\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\r\\n\\r\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\r\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\r\\n\\r\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\r\\n\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\r\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9051281ae3cdaab135eb51e0d1e5b6e16bc1fe29f756bcf0a248c061163df7ea\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BConst.sol\\\";\\r\\n\\r\\ncontract BNum is BConst {\\r\\n    function btoi(uint256 a) internal pure returns (uint256) {\\r\\n        return a / BONE;\\r\\n    }\\r\\n\\r\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\r\\n        return btoi(a) * BONE;\\r\\n    }\\r\\n\\r\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        (uint256 c, bool flag) = bsubSign(a, b);\\r\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\r\\n        if (a >= b) {\\r\\n            return (a - b, false);\\r\\n        } else {\\r\\n            return (b - a, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c0 = a * b;\\r\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c1 = c0 + (BONE / 2);\\r\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c2 = c1 / BONE;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\r\\n        uint256 c0 = a * BONE;\\r\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\r\\n        uint256 c1 = c0 + (b / 2);\\r\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\r\\n        uint256 c2 = c1 / b;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    // DSMath.wpow\\r\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 z = n % 2 != 0 ? a : BONE;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            a = bmul(a, a);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = bmul(z, a);\\r\\n            }\\r\\n        }\\r\\n        return z;\\r\\n    }\\r\\n\\r\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\r\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\r\\n    // of approximation of b^0.w\\r\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\r\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\r\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\r\\n\\r\\n        uint256 whole = bfloor(exp);\\r\\n        uint256 remain = bsub(exp, whole);\\r\\n\\r\\n        uint256 wholePow = bpowi(base, btoi(whole));\\r\\n\\r\\n        if (remain == 0) {\\r\\n            return wholePow;\\r\\n        }\\r\\n\\r\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\r\\n        return bmul(wholePow, partialResult);\\r\\n    }\\r\\n\\r\\n    function bpowApprox(\\r\\n        uint256 base,\\r\\n        uint256 exp,\\r\\n        uint256 precision\\r\\n    ) internal pure returns (uint256) {\\r\\n        // term 0:\\r\\n        uint256 a = exp;\\r\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\r\\n        uint256 term = BONE;\\r\\n        uint256 sum = term;\\r\\n        bool negative = false;\\r\\n\\r\\n        // term(k) = numer / denom\\r\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\r\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\r\\n        // continue until term is less than precision\\r\\n        for (uint256 i = 1; term >= precision; i++) {\\r\\n            uint256 bigK = i * BONE;\\r\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\r\\n            term = bmul(term, bmul(c, x));\\r\\n            term = bdiv(term, bigK);\\r\\n            if (term == 0) break;\\r\\n\\r\\n            if (xneg) negative = !negative;\\r\\n            if (cneg) negative = !negative;\\r\\n            if (negative) {\\r\\n                sum = bsub(sum, term);\\r\\n            } else {\\r\\n                sum = badd(sum, term);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ae56173eeb8f5522a3bbbfde10905514f68320bbcad3dd7e46ba546dd4010a\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BToken.sol\\\";\\r\\nimport \\\"./BMath.sol\\\";\\r\\n\\r\\ncontract BPool is BBronze, BToken, BMath {\\r\\n    struct Record {\\r\\n        bool bound; // is token bound to pool\\r\\n        uint256 index; // private\\r\\n        uint256 denorm; // denormalized weight\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    event LOG_SWAP(\\r\\n        address indexed caller,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 tokenAmountOut\\r\\n    );\\r\\n\\r\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\r\\n\\r\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\r\\n\\r\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\r\\n\\r\\n    modifier _logs_() {\\r\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    modifier _viewlock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    bool private _mutex;\\r\\n\\r\\n    address private _factory; // BFactory address to push token exitFee to\\r\\n    address private _controller; // has CONTROL role\\r\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\r\\n\\r\\n    // `setSwapFee` and `finalize` require CONTROL\\r\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\r\\n    uint256 private _swapFee;\\r\\n    bool private _finalized;\\r\\n\\r\\n    address[] private _tokens;\\r\\n    mapping(address => Record) private _records;\\r\\n    uint256 private _totalWeight;\\r\\n\\r\\n    constructor() {\\r\\n        _controller = msg.sender;\\r\\n        _factory = msg.sender;\\r\\n        _swapFee = MIN_FEE;\\r\\n        _publicSwap = false;\\r\\n        _finalized = false;\\r\\n    }\\r\\n\\r\\n    function isPublicSwap() external view returns (bool) {\\r\\n        return _publicSwap;\\r\\n    }\\r\\n\\r\\n    function isFinalized() external view returns (bool) {\\r\\n        return _finalized;\\r\\n    }\\r\\n\\r\\n    function isBound(address t) external view returns (bool) {\\r\\n        return _records[t].bound;\\r\\n    }\\r\\n\\r\\n    function getNumTokens() external view returns (uint256) {\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].denorm;\\r\\n    }\\r\\n\\r\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\r\\n        return _totalWeight;\\r\\n    }\\r\\n\\r\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        uint256 denorm = _records[token].denorm;\\r\\n        return bdiv(denorm, _totalWeight);\\r\\n    }\\r\\n\\r\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].balance;\\r\\n    }\\r\\n\\r\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\r\\n        return _swapFee;\\r\\n    }\\r\\n\\r\\n    function getController() external view _viewlock_ returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\r\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\r\\n        _swapFee = swapFee;\\r\\n    }\\r\\n\\r\\n    function setController(address manager) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _controller = manager;\\r\\n    }\\r\\n\\r\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _publicSwap = public_;\\r\\n    }\\r\\n\\r\\n    function finalize() external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\r\\n\\r\\n        _finalized = true;\\r\\n        _publicSwap = true;\\r\\n\\r\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\r\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function bind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    )\\r\\n        external\\r\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\r\\n    {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\r\\n\\r\\n        _records[token] = Record({\\r\\n            bound: true,\\r\\n            index: _tokens.length,\\r\\n            denorm: 0, // balance and denorm will be validated\\r\\n            balance: 0 // and set by `rebind`\\r\\n        });\\r\\n        _tokens.push(token);\\r\\n        rebind(token, balance, denorm);\\r\\n    }\\r\\n\\r\\n    function rebind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    ) public _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n\\r\\n        // Adjust the denorm and totalWeight\\r\\n        uint256 oldWeight = _records[token].denorm;\\r\\n        if (denorm > oldWeight) {\\r\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\r\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n        } else if (denorm < oldWeight) {\\r\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\r\\n        }\\r\\n        _records[token].denorm = denorm;\\r\\n\\r\\n        // Adjust the balance record and actual token balance\\r\\n        uint256 oldBalance = _records[token].balance;\\r\\n        _records[token].balance = balance;\\r\\n        if (balance > oldBalance) {\\r\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\r\\n        } else if (balance < oldBalance) {\\r\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\r\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\r\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\r\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\r\\n            _pushUnderlying(token, _factory, tokenExitFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unbind(address token) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        uint256 tokenBalance = _records[token].balance;\\r\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\r\\n\\r\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\r\\n\\r\\n        // Swap the token-to-unbind with the last token,\\r\\n        // then delete the last token\\r\\n        uint256 index = _records[token].index;\\r\\n        uint256 last = _tokens.length - 1;\\r\\n        _tokens[index] = _tokens[last];\\r\\n        _records[_tokens[index]].index = index;\\r\\n        _tokens.pop();\\r\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\r\\n\\r\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\r\\n        _pushUnderlying(token, _factory, tokenExitFee);\\r\\n    }\\r\\n\\r\\n    // Absorb any tokens that have been sent to this contract into the pool\\r\\n    function gulp(address token) external _logs_ _lock_ {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n    }\\r\\n\\r\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\r\\n        external\\r\\n        view\\r\\n        _viewlock_\\r\\n        returns (uint256 spotPrice)\\r\\n    {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\r\\n    }\\r\\n\\r\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\r\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\r\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\r\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\r\\n        }\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    }\\r\\n\\r\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _burnPoolShare(pAiAfterExitFee);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\r\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\r\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\r\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n\\r\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n\\r\\n            _amounts[i] = bmul(ratio, bal);\\r\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\r\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n        }\\r\\n\\r\\n        return _amounts;\\r\\n    }\\r\\n\\r\\n    function swapExactAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 minAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountOut = calcOutGivenIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountOut, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function swapExactAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 maxAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountIn = calcInGivenOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountIn, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function joinswapExternAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 minPoolAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    function joinswapPoolAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 maxAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    function exitswapPoolAmountIn(\\r\\n        address tokenOut,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 minAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    function exitswapExternAmountOut(\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPoolAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        poolAmountIn = calcPoolInGivenSingleOut(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n\\r\\n    // ==\\r\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\r\\n    // You must `_lock_` or otherwise ensure reentry-safety\\r\\n\\r\\n    function _pullUnderlying(\\r\\n        address erc20,\\r\\n        address from,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pushUnderlying(\\r\\n        address erc20,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pullPoolShare(address from, uint256 amount) internal {\\r\\n        _pull(from, amount);\\r\\n    }\\r\\n\\r\\n    function _pushPoolShare(address to, uint256 amount) internal {\\r\\n        _push(to, amount);\\r\\n    }\\r\\n\\r\\n    function _mintPoolShare(uint256 amount) internal {\\r\\n        _mint(amount);\\r\\n    }\\r\\n\\r\\n    function _burnPoolShare(uint256 amount) internal {\\r\\n        _burn(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7158032f88b03d54bba37cc3bdb432fa1906ab69bcd69d1baa43591a36e5f13a\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ninterface IERC20Balancer {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address whom) external view returns (uint256);\\r\\n\\r\\n    function allowance(address src, address dst) external view returns (uint256);\\r\\n\\r\\n    function approve(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract BTokenBase is BNum {\\r\\n    mapping(address => uint256) internal _balance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n    function _mint(uint256 amt) internal {\\r\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\r\\n        _totalSupply = badd(_totalSupply, amt);\\r\\n        emit Transfer(address(0), address(this), amt);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 amt) internal {\\r\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\r\\n        _totalSupply = bsub(_totalSupply, amt);\\r\\n        emit Transfer(address(this), address(0), amt);\\r\\n    }\\r\\n\\r\\n    function _move(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) internal {\\r\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[src] = bsub(_balance[src], amt);\\r\\n        _balance[dst] = badd(_balance[dst], amt);\\r\\n        emit Transfer(src, dst, amt);\\r\\n    }\\r\\n\\r\\n    function _push(address to, uint256 amt) internal {\\r\\n        _move(address(this), to, amt);\\r\\n    }\\r\\n\\r\\n    function _pull(address from, uint256 amt) internal {\\r\\n        _move(from, address(this), amt);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BToken is BTokenBase, IERC20Balancer {\\r\\n    string private _name = \\\"Balancer Pool Token\\\";\\r\\n    string private _symbol = \\\"BPT\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address dst) external view override returns (uint256) {\\r\\n        return _allowance[src][dst];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address whom) external view override returns (uint256) {\\r\\n        return _balance[whom];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\r\\n        _allowance[msg.sender][dst] = amt;\\r\\n        emit Approval(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        uint256 oldValue = _allowance[msg.sender][dst];\\r\\n        if (amt > oldValue) {\\r\\n            _allowance[msg.sender][dst] = 0;\\r\\n        } else {\\r\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\r\\n        }\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\r\\n        _move(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external override returns (bool) {\\r\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\r\\n        _move(src, dst, amt);\\r\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\r\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\r\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcbe41ffe3ae5f17388e0418cc5aa0e85c9acc4094e89fdf695d223c15b6f56b7\",\"license\":\"MIT\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\nabstract contract CalculateLinesToBPoolOdds {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\r\\n\\r\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _total = sum(_proportions);\\r\\n\\r\\n        _odds = new uint256[](_proportions.length);\\r\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\r\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\r\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\r\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\r\\n            _sum += _numbers[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\r\\n        _odds = new uint256[](_size);\\r\\n\\r\\n        if (_invalid) _odds[0] = 1e18; // 2%\\r\\n\\r\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\r\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\r\\n            _odds[i] = _each;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\r\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\r\\n\\r\\n        uint256 _total = _odds1 + _odds2;\\r\\n\\r\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\r\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\r\\n\\r\\n        // Moneyline odds are too skewed: would have under 2% odds.\\r\\n        require(_odds1 >= 1e18);\\r\\n        require(_odds2 >= 1e18);\\r\\n\\r\\n        _odds = new uint256[](3);\\r\\n        _odds[0] = 1e18; // Invalid, 2%\\r\\n        _odds[1] = _odds1;\\r\\n        _odds[2] = _odds2;\\r\\n    }\\r\\n\\r\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\r\\n        if (_line < 0) {\\r\\n            // favored\\r\\n            uint256 _posLine = uint256(-_line);\\r\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\r\\n        } else {\\r\\n            // underdog\\r\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x416898d926442f8779f85482a1b0e5f0e7c9d1933a2c1293d8d72f45bc84feaf\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Full is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x41ff2e58c059015e2253de4dd9662eb9c508dbe06173d6c86d40eaf9931a825a\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address _newOwner) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x76d07e413556985a60ee4605c19060e334d2837d5a6a516c9778a10f6762a4ca\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\nabstract contract Ownable is IOwnable {\\r\\n    address internal owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view override returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param _newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\r\\n        require(_newOwner != address(0));\\r\\n        onTransferOwnership(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\r\\n    function onTransferOwnership(address, address) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x88fbb6eef836056a42280c96f7f5f2a721f7f714c4b4681f53193812cd38958e\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Rewardable {\\r\\n    // Rewards will be paid out over the lifetime of an event.\\r\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\r\\n\\r\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\r\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x45a1a84b8cd35d8663aa8e93a8cc33acdcd5f81939d71d25e36425f23e2d3cbe\",\"license\":\"MIT\"},\"contracts/libraries/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Versioned {\\r\\n    string internal version;\\r\\n\\r\\n    constructor(string memory _version) {\\r\\n        version = _version;\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (string memory) {\\r\\n        return version;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5ba98803ed1e2332153aba2d4124c242ac1d009579e875c5d286f0ac8bf7264c\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"../libraries/Rewardable.sol\\\";\\r\\n\\r\\nabstract contract AbstractMarketFactoryV3 is TurboShareTokenFactory, Ownable, Rewardable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\r\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\r\\n    event MarketActivated(uint256 id);\\r\\n\\r\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\r\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\r\\n    event WinningsClaimed(\\r\\n        uint256 id,\\r\\n        address winningOutcome,\\r\\n        uint256 winningIndex,\\r\\n        string winningName,\\r\\n        uint256 amount,\\r\\n        uint256 settlementFee,\\r\\n        uint256 payout,\\r\\n        address indexed receiver\\r\\n    );\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    FeePot public feePot;\\r\\n\\r\\n    // fees are out of 1e18 and only apply to new markets\\r\\n    uint256 public stakerFee;\\r\\n    uint256 public settlementFee;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    address public protocol; // collects protocol fees\\r\\n\\r\\n    uint256 public accumulatedProtocolFee = 0;\\r\\n    // settlement address => amount of collateral\\r\\n    mapping(address => uint256) public accumulatedSettlementFees;\\r\\n\\r\\n    // How many shares equals one collateral.\\r\\n    // Necessary to account for math errors from small numbers in balancer.\\r\\n    // shares = collateral / shareFactor\\r\\n    // collateral = shares * shareFactor\\r\\n    uint256 public shareFactor;\\r\\n\\r\\n    struct Market {\\r\\n        address settlementAddress;\\r\\n        OwnedERC20[] shareTokens;\\r\\n        OwnedERC20 winner;\\r\\n        uint256 winnerIndex;\\r\\n        uint256 settlementFee;\\r\\n        uint256 protocolFee;\\r\\n        uint256 stakerFee;\\r\\n        uint256 creationTimestamp;\\r\\n        uint256 resolutionTimestamp; // when winner is declared\\r\\n        uint256[] initialOdds;\\r\\n        bool active; // false if not ready to use or if resolved\\r\\n    }\\r\\n    Market[] internal markets;\\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees, // staker, settlement, protocol\\r\\n        address _protocol\\r\\n    ) {\\r\\n        owner = _owner; // controls fees for new markets\\r\\n        collateral = _collateral;\\r\\n        shareFactor = _shareFactor;\\r\\n        feePot = _feePot;\\r\\n        stakerFee = _fees[0];\\r\\n        settlementFee = _fees[1];\\r\\n        protocolFee = _fees[2];\\r\\n        protocol = _protocol;\\r\\n\\r\\n        _collateral.approve(address(_feePot), MAX_UINT);\\r\\n\\r\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\r\\n        markets.push(makeEmptyMarket());\\r\\n    }\\r\\n        \\r\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n\\r\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n        return TradeDetails[_marketId][_outcome]; \\r\\n    }\\r\\n    // Returns an empty struct if the market doesn't exist.\\r\\n    // Can check market existence before calling this by comparing _id against markets.length.\\r\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\r\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n            return makeEmptyMarket();\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketCount() public view returns (uint256) {\\r\\n        return markets.length;\\r\\n    }\\r\\n\\r\\n    // Returns factory-specific details about a market.\\r\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\r\\n\\r\\n    function mintShares(\\r\\n        uint256 _id,\\r\\n        uint256 _shareToMint,\\r\\n        address _receiver\\r\\n    ) public {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        uint256 _cost = calcCost(_shareToMint);\\r\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\r\\n        }\\r\\n\\r\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\r\\n    }\\r\\n\\r\\n    function burnShares(\\r\\n        uint256 _id,\\r\\n        uint256 _sharesToBurn,\\r\\n        address _receiver\\r\\n    ) public returns (uint256) {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            // errors if sender doesn't have enough shares\\r\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\r\\n        }\\r\\n\\r\\n        uint256 _payout = calcCost(_sharesToBurn);\\r\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\r\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\r\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\r\\n\\r\\n        accumulatedProtocolFee += _protocolFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n        feePot.depositFees(_stakerFee);\\r\\n\\r\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\r\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\r\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\r\\n\\r\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\r\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\r\\n        _payout = _payout.sub(_settlementFee);\\r\\n\\r\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n\\r\\n        uint256 _winningIndex = _market.winnerIndex;\\r\\n        string memory _winningName = _market.winner.name();\\r\\n\\r\\n        emit WinningsClaimed(\\r\\n            _id,\\r\\n            address(_market.winner),\\r\\n            _winningIndex,\\r\\n            _winningName,\\r\\n            _winningShares,\\r\\n            _settlementFee,\\r\\n            _payout,\\r\\n            _receiver\\r\\n        );\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\r\\n        uint256 _totalWinnings = 0;\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\r\\n        }\\r\\n        return _totalWinnings;\\r\\n    }\\r\\n\\r\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\r\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\r\\n        if (_fees > 0) {\\r\\n            accumulatedSettlementFees[msg.sender] = 0;\\r\\n            collateral.transfer(_receiver, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees() public returns (uint256) {\\r\\n        require(msg.sender == protocol || msg.sender == address(this));\\r\\n        uint256 _fees = accumulatedProtocolFee;\\r\\n        if (_fees > 0) {\\r\\n            accumulatedProtocolFee = 0;\\r\\n            collateral.transfer(protocol, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\r\\n        settlementFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\r\\n        stakerFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\r\\n        protocolFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\r\\n        if (_claimFirst) {\\r\\n            claimProtocolFees();\\r\\n        }\\r\\n        protocol = _newProtocol;\\r\\n    }\\r\\n\\r\\n    function startMarket(\\r\\n        address _settlementAddress,\\r\\n        string[] memory _names,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active\\r\\n    ) internal returns (uint256 _marketId) {\\r\\n        _marketId = markets.length;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                createShareTokens(_names, address(this)),\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n            )\\r\\n        );\\r\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function activateMarket(uint256 _marketId) internal {\\r\\n        markets[_marketId].active = true;\\r\\n        emit MarketActivated(_marketId);\\r\\n    }\\r\\n\\r\\n    function makeEmptyMarket() private pure returns (Market memory) {\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\r\\n        uint256[] memory _initialOdds = new uint256[](0);\\r\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\r\\n    }\\r\\n\\r\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\r\\n        Market storage _market = markets[_marketId];\\r\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\r\\n\\r\\n        _market.winner = _winner;\\r\\n        _market.active = false;\\r\\n        _market.winnerIndex = _winningOutcome;\\r\\n        _market.resolutionTimestamp = block.timestamp;\\r\\n        string memory _outcomeName = _winner.name();\\r\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\r\\n    }\\r\\n\\r\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\r\\n        Market memory _market = markets[_id];\\r\\n        return _market.winner != OwnedERC20(address(0));\\r\\n    }\\r\\n\\r\\n    // shares => collateral\\r\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\r\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\r\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\r\\n        return _shares / shareFactor;\\r\\n    }\\r\\n\\r\\n    // collateral => shares\\r\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\r\\n        return _collateralIn * shareFactor;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0x65850f44f42930591a35b0b26f1b0113daf6b61fabc85692ab121c1fd88f8bd9\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\n\\r\\ncontract FeePot is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant magnitude = 2**128;\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    IERC20Full public reputationToken;\\r\\n\\r\\n    uint256 public magnifiedFeesPerShare;\\r\\n\\r\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\r\\n    mapping(address => uint256) public storedFees;\\r\\n\\r\\n    uint256 public feeReserve;\\r\\n\\r\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\r\\n        ERC20(\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\r\\n        )\\r\\n    {\\r\\n        collateral = _collateral;\\r\\n        reputationToken = _reputationToken;\\r\\n\\r\\n        require(_collateral != IERC20Full(address(0)));\\r\\n    }\\r\\n\\r\\n    function depositFees(uint256 _amount) public returns (bool) {\\r\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\r\\n        if (_totalSupply == 0) {\\r\\n            feeReserve = feeReserve.add(_amount);\\r\\n            return true;\\r\\n        }\\r\\n        if (feeReserve > 0) {\\r\\n            _amount = _amount.add(feeReserve);\\r\\n            feeReserve = 0;\\r\\n        }\\r\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\r\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\r\\n    }\\r\\n\\r\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\r\\n        uint256 _ownerBalance = balanceOf(_owner);\\r\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\r\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\r\\n        super._transfer(_from, _to, _amount);\\r\\n\\r\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\r\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external returns (bool) {\\r\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        _mint(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\r\\n            magnifiedFeesPerShare.mul(_amount)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function exit(uint256 _amount) external returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        _burn(msg.sender, _amount);\\r\\n        reputationToken.transfer(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeem() public returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeemInternal(address _account) internal {\\r\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\r\\n        if (_withdrawableFees > 0) {\\r\\n            storedFees[_account] = 0;\\r\\n            collateral.transfer(_account, _withdrawableFees);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0045efc6b0eb6013e765caa47470f1d66ac487fcd9fd2bfafc04c6c61b3c6865\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../libraries/Ownable.sol\\\";\\r\\n\\r\\ncontract OwnedERC20 is ERC20, Ownable {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _owner\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function trustedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        _transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\r\\n        _mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\r\\n        _burn(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\r\\n        uint256 _balance = balanceOf(_target);\\r\\n        _burn(_target, _balance);\\r\\n        return _balance;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xbf92d998fc0b4d44b77f863ce32ebadf43ecc4091c3c9c44f556b9618eec6111\",\"license\":\"MIT\"},\"contracts/turbo/TrustedMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\n\\r\\ncontract TrustedMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\r\\n\\r\\n    struct MarketDetails {\\r\\n        string description;\\r\\n    }\\r\\n    MarketDetails[] internal marketDetails;\\r\\n    // mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n\\r\\n    modifier onlyOwnerManager() {\\r\\n        require(msg.sender == owner || managers[msg.sender] , \\\"Only Validators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(address=>bool) managers; \\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol\\r\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.1.0\\\") {}\\r\\n\\r\\n    //TODO add managers \\r\\n    function createMarket(\\r\\n        address _creator,\\r\\n        string calldata _description,\\r\\n        string[] calldata _names,\\r\\n        uint256[] calldata _odds\\r\\n    ) public  returns (uint256) {\\r\\n        marketDetails.push(MarketDetails(_description));\\r\\n        return startMarket(_creator, _names, _odds, true);\\r\\n    }\\r\\n\\r\\n    //TODO add managers \\r\\n    function trustedResolveMarket(uint256 _id, uint256 _winningOutcome) public {\\r\\n        endMarket(_id, _winningOutcome);\\r\\n    }\\r\\n\\r\\n    function getMarketDetails(uint256 _id) public view returns (MarketDetails memory) {\\r\\n        return marketDetails[_id];\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n   // function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n   //      TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n   //  }\\r\\n\\r\\n   //  function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n   //      return TradeDetails[_marketId][_outcome]; \\r\\n   //  }\\r\\n}\\r\\n\",\"keccak256\":\"0x0bd5c051184399d085e523289867a3b48a894cc9b001d3aa78c38a4755b9ccbc\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./OwnedShareToken.sol\\\";\\r\\n\\r\\nabstract contract TurboShareTokenFactory {\\r\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract TurboShareTokenFactoryV1 {\\r\\n    function createShareTokens(\\r\\n        string[] memory _names,\\r\\n        string[] memory _symbols,\\r\\n        address _owner\\r\\n    ) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x06804e9fbaa93f213284e3d5753d0cb72bb05caaedac4a29bf66cf8663243c90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620002255760003560e01c80637d1d7fb81162000131578063b0e21e8a11620000bb578063e5678dfa1162000086578063e5678dfa14620004ca578063ea05487914620004e1578063eb44fdd314620004f8578063ec979082146200051e578063f2fde38b146200052757600080fd5b8063b0e21e8a146200047e578063cc87adea1462000488578063d5da4f1d146200049f578063d8dfeb4514620004b657600080fd5b806397eef18711620000fc57806397eef1871462000420578063992c90791462000437578063a544a62c146200044e578063b06c1ba3146200045857600080fd5b80637d1d7fb814620003d9578063893d20e814620003e35780638ce7442614620003f55780638e0ed193146200040957600080fd5b806349a4d93411620001b357806353ac55f5116200017e57806353ac55f514620003795780636a87a1c514620003a15780637641ab0114620003b8578063787dce3d14620003c257600080fd5b806349a4d93414620003155780634a7d036914620003385780634b2d9ffc14620003425780634c9f66c7146200034c57600080fd5b806335a9cdad11620001f457806335a9cdad14620002b95780633f8dd7aa14620002d057806342e0ed1614620002e7578063473a6d5214620002fe57600080fd5b80630d8e6e2c146200022a5780630d9d7111146200024c578063221fff81146200028957806332ecabe914620002a2575b600080fd5b620002346200053e565b6040516200024391906200265a565b60405180910390f35b6200027a6200025d36600462002531565b6000918252600b6020908152604080842092845291905290205490565b60405190815260200162000243565b620002a06200029a36600462002553565b620005d8565b005b620002a0620002b336600462002266565b62000961565b6200027a620002ca36600462002553565b620009af565b620002a0620002e136600462002531565b62000e3e565b6200027a620002f8366004620024d1565b50600090565b6200027a6200030f366004620024d1565b62000e4e565b6200027a6200032636600462002249565b60086020526000908152604090205481565b6200027a62000e8e565b6200027a60035481565b60025462000360906001600160a01b031681565b6040516001600160a01b03909116815260200162000243565b620003906200038a366004620024d1565b62000f56565b604051901515815260200162000243565b6200027a620003b2366004620022a1565b620010f4565b6200027a60095481565b620002a0620003d3366004620024d1565b620011c1565b6200027a60045481565b6000546001600160a01b031662000360565b60065462000360906001600160a01b031681565b6200027a6200041a36600462002249565b620011de565b620002a062000431366004620024d1565b62001299565b6200027a6200044836600462002503565b620012b6565b6200027a60075481565b6200046f62000469366004620024d1565b62001727565b604051620002439190620026b1565b6200027a60055481565b6200027a62000499366004620024d1565b6200180e565b620002a0620004b0366004620024d1565b62001820565b60015462000360906001600160a01b031681565b6200027a620004db36600462002380565b6200183d565b620002a0620004f23660046200258a565b620018ab565b6200050f62000509366004620024d1565b620018f1565b604051620002439190620026ce565b600a546200027a565b620003906200053836600462002249565b62001a9a565b6060600c80546200054f9062002a7b565b80601f01602080910402602001604051908101604052809291908181526020018280546200057d9062002a7b565b8015620005ce5780601f10620005a257610100808354040283529160200191620005ce565b820191906000526020600020905b815481529060010190602001808311620005b057829003601f168201915b5050505050905090565b600a548310620005e757600080fd5b600a83815481106200060957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600a600b90920201015460ff166200062a57600080fd5b6000620006378362000e4e565b6001546040516323b872dd60e01b8152336004820152306024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156200068b57600080fd5b505af1158015620006a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c6919062002436565b506000600a8581548110620006eb57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805161016081018252600b90930290910180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200076f57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000750575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982018054806020026020016040519081016040528092919081815260200182805480156200083457602002820191906000526020600020905b8154815260200190600101908083116200081f575b5050509183525050600a919091015460ff161515602090910152905060005b8160200151518110156200090c57816020015181815181106200088657634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604051636012669360e11b81526001600160a01b038681166004830152602482018890529091169063c024cd2690604401600060405180830381600087803b158015620008dd57600080fd5b505af1158015620008f2573d6000803e3d6000fd5b505050508080620009039062002ab2565b91505062000853565b5060408051868152602081018690526001600160a01b038516918101919091527fd81c0442e10068a9818f3aa093c9ccb804584690df572d7df3da2d892a6973f2906060015b60405180910390a15050505050565b6000546001600160a01b031633146200097957600080fd5b80156200098c576200098a62000e8e565b505b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a546000908410620009c157600080fd5b600a8481548110620009e357634e487b7160e01b600052603260045260246000fd5b60009182526020909120600a600b90920201015460ff1662000a0457600080fd5b6000600a858154811062000a2857634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805161016081018252600b90930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000aac57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000a8d575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820180548060200260200160405190810160405280929190818152602001828054801562000b7157602002820191906000526020600020905b81548152602001906001019080831162000b5c575b5050509183525050600a919091015460ff161515602090910152905060005b81602001515181101562000c47578160200151818151811062000bc357634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516342986e1360e01b8152336004820152602481018790526001600160a01b03909116906342986e1390604401600060405180830381600087803b15801562000c1857600080fd5b505af115801562000c2d573d6000803e3d6000fd5b50505050808062000c3e9062002ab2565b91505062000b90565b50600062000c558562000e4e565b9050600062000c86670de0b6b3a764000062000c7f8560a001518562001aec90919063ffffffff16565b9062001b01565b9050600062000cb0670de0b6b3a764000062000c7f8660c001518662001aec90919063ffffffff16565b905062000cca8162000cc3858562001b0f565b9062001b0f565b9250816007600082825462000ce0919062002923565b909155505060015460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018690529091169063a9059cbb90604401602060405180830381600087803b15801562000d3457600080fd5b505af115801562000d49573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d6f919062002436565b50600254604051630ebdac0960e41b8152600481018390526001600160a01b039091169063ebdac09090602401602060405180830381600087803b15801562000db757600080fd5b505af115801562000dcc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000df2919062002436565b506040805189815260208101899052338183015290517fb6fdb729b2ed801daf629f0ab713e4a7a73619505790f6f27fd92d6f2c9688d79181900360600190a150909695505050505050565b62000e4a828262001b1d565b5050565b6000600954821015801562000e6f575060095462000e6d908362002ad0565b155b62000e7957600080fd5b60095462000e8890836200293e565b92915050565b6006546000906001600160a01b031633148062000eaa57503330145b62000eb457600080fd5b600754801562000f5157600060075560015460065460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b15801562000f1457600080fd5b505af115801562000f29573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f4f919062002436565b505b919050565b600080600a838154811062000f7b57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805161016081018252600b90930290910180546001600160a01b0316835260018101805483518187028101870190945280845293949193858301939283018282801562000fff57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000fe0575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201805480602002602001604051908101604052809291908181526020018280548015620010c457602002820191906000526020600020905b815481526020019060010190808311620010af575b5050509183525050600a919091015460ff161515602090910152604001516001600160a01b031615159392505050565b604080516020601f880181900481028201830183528101878152600092600d929182918b908b9081908501838280828437600092018290525093909452505083546001810185559381526020908190208351805194959190910193620011629350849291909101906200202d565b50620011b5915089905062001178868862002991565b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506001925062001c6e915050565b98975050505050505050565b6000546001600160a01b03163314620011d957600080fd5b600555565b33600090815260086020526040812054801562000e88573360009081526008602052604080822091909155600154905163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156200125757600080fd5b505af11580156200126c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001292919062002436565b5092915050565b6000546001600160a01b03163314620012b157600080fd5b600355565b6000620012c38362000f56565b620013085760405162461bcd60e51b81526020600482015260116024820152701b585c9ad95d081d5b9c995cdbdb1d9959607a1b604482015260640160405180910390fd5b6000600a84815481106200132c57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805161016081018252600b90930290910180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620013b057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001391575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982018054806020026020016040519081016040528092919081815260200182805480156200147557602002820191906000526020600020905b81548152602001906001019080831162001460575b5050509183525050600a919091015460ff1615156020909101526040818101519051631c4a5de160e21b81523360048201529192506000916001600160a01b0390911690637129778490602401602060405180830381600087803b158015620014dd57600080fd5b505af1158015620014f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620015189190620024ea565b6009549091506200152a81836200293e565b62001536919062002955565b90506000620015458262000e4e565b905060006200156f670de0b6b3a764000062000c7f86608001518562001aec90919063ffffffff16565b90506200157d828262001b0f565b84516001600160a01b0316600090815260086020526040812080549294508392909190620015ad90849062002923565b909155505060015460405163a9059cbb60e01b81526001600160a01b038881166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b1580156200160157600080fd5b505af115801562001616573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200163c919062002436565b50600084606001519050600085604001516001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156200168657600080fd5b505afa1580156200169b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620016c5919081019062002455565b9050876001600160a01b03167f76ea0c89f1eef8b1ac3908910bbe5ee5120ff997f6b3bcc900659973e6a2ff128a886040015185858a898b604051620017129796959493929190620027d7565b60405180910390a25091979650505050505050565b604080516020810190915260608152600d82815481106200175857634e487b7160e01b600052603260045260246000fd5b906000526020600020016040518060200160405290816000820180546200177f9062002a7b565b80601f0160208091040260200160405190810160405280929190818152602001828054620017ad9062002a7b565b8015620017fe5780601f10620017d257610100808354040283529160200191620017fe565b820191906000526020600020905b815481529060010190602001808311620017e057829003601f168201915b5050505050815250509050919050565b60006009548262000e88919062002955565b6000546001600160a01b031633146200183857600080fd5b600455565b600080805b8451811015620018a3576200188c620018848683815181106200187557634e487b7160e01b600052603260045260246000fd5b602002602001015186620012b6565b839062001e5d565b9150806200189a8162002ab2565b91505062001842565b509392505050565b6000838152600b60209081526040808320858452909152902054620018d290829062002923565b6000938452600b60209081526040808620948652939052919092205550565b620018fb620020bc565b600a5482106200190f5762000e8862001e6b565b600a82815481106200193157634e487b7160e01b600052603260045260246000fd5b60009182526020918290206040805161016081018252600b90930290910180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620019b557602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162001996575b505050505081526020016002820160009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b031681526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820180548060200260200160405190810160405280929190818152602001828054801562001a7a57602002820191906000526020600020905b81548152602001906001019080831162001a65575b5050509183525050600a919091015460ff16151560209091015292915050565b600080546001600160a01b0316331462001ab357600080fd5b6001600160a01b03821662001ac757600080fd5b50600080546001600160a01b0383166001600160a01b03199091161790556001919050565b600062001afa828462002955565b9392505050565b600062001afa82846200293e565b600062001afa828462002977565b6000600a838154811062001b4157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600b02019050600081600101838154811062001b7757634e487b7160e01b600052603260045260246000fd5b60009182526020822001546002840180546001600160a01b0319166001600160a01b039092169182179055600a8401805460ff1916905560038401859055426008850155604080516306fdde0360e01b8152905191935083916306fdde03916004808201928692909190829003018186803b15801562001bf657600080fd5b505afa15801562001c0b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262001c35919081019062002455565b90507f8008bbeee2e3c054e71d4965b4c22b41a2287cd6cc67c714bf918b538338be5f858386846040516200095294939291906200279e565b600a80546040805161016081019091526001600160a01b03871681529091906020810162001c9d873062001ee1565b815260006020808301829052604083018290526004546060840152600554608084015260035460a08401524260c084015260e08301829052610100830188905286151561012090930192909252835460018082018655948252908290208351600b9092020180546001600160a01b0319166001600160a01b039092169190911781558282015180519394919362001d3d939285019291909101906200212a565b5060408201516002820180546001600160a01b0319166001600160a01b03909216919091179055606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201556101008201516008820155610120820151805162001dbf91600984019160209091019062002182565b506101409190910151600a909101805460ff19169115159190911790556040517f037fdac9e4b37ad8b184ce958d7b275e578c9e03d4cfbc51aa75de25fdb6bbec9062001e129083908790879062002825565b60405180910390a1811562001e55576040518181527fee570fee9d8debeedea533b8cdfde6b9d9995b915869d4d10d350e75a9bf0f889060200160405180910390a15b949350505050565b600062001afa828462002923565b62001e75620020bc565b50604080516000808252602082018181526101a083018452928201818152606083018390526080830182905260a0830182905260c0830182905260e083018290526101008301829052610120830182905261014083018290526101608301939093526101809091015290565b815160609060008167ffffffffffffffff81111562001f1057634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801562001f3a578160200160208202803683370190505b50905060005b82811015620020245785818151811062001f6a57634e487b7160e01b600052603260045260246000fd5b602002602001015186828151811062001f9357634e487b7160e01b600052603260045260246000fd5b60200260200101518660405162001faa90620021bf565b62001fb8939291906200266f565b604051809103906000f08015801562001fd5573d6000803e3d6000fd5b5082828151811062001ff757634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806200201b8162002ab2565b91505062001f40565b50949350505050565b8280546200203b9062002a7b565b90600052602060002090601f0160209004810192826200205f5760008555620020aa565b82601f106200207a57805160ff1916838001178555620020aa565b82800160010185558215620020aa579182015b82811115620020aa5782518255916020019190600101906200208d565b50620020b8929150620021cd565b5090565b60405180610160016040528060006001600160a01b031681526020016060815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001606081526020016000151581525090565b828054828255906000526020600020908101928215620020aa579160200282015b82811115620020aa57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200214b565b828054828255906000526020600020908101928215620020aa5791602002820182811115620020aa5782518255916020019190600101906200208d565b610f828062002b3c83390190565b5b80821115620020b85760008155600101620021ce565b80356001600160a01b038116811462000f5157600080fd5b60008083601f8401126200220e578182fd5b50813567ffffffffffffffff81111562002226578182fd5b6020830191508360208260051b85010111156200224257600080fd5b9250929050565b6000602082840312156200225b578081fd5b62001afa82620021e4565b6000806040838503121562002279578081fd5b6200228483620021e4565b91506020830135620022968162002b29565b809150509250929050565b60008060008060008060006080888a031215620022bc578283fd5b620022c788620021e4565b9650602088013567ffffffffffffffff80821115620022e4578485fd5b818a0191508a601f830112620022f8578485fd5b81358181111562002307578586fd5b8b602082850101111562002319578586fd5b6020830198508097505060408a013591508082111562002337578485fd5b620023458b838c01620021fc565b909650945060608a01359150808211156200235e578384fd5b506200236d8a828b01620021fc565b989b979a50959850939692959293505050565b6000806040838503121562002393578182fd5b823567ffffffffffffffff811115620023aa578283fd5b8301601f81018513620023bb578283fd5b80356020620023d4620023ce83620028d1565b6200289d565b80838252828201915082850189848660051b8801011115620023f4578788fd5b8795505b8486101562002418578035835260019590950194918301918301620023f8565b5095506200242a9050868201620021e4565b93505050509250929050565b60006020828403121562002448578081fd5b815162001afa8162002b29565b60006020828403121562002467578081fd5b815167ffffffffffffffff8111156200247e578182fd5b8201601f810184136200248f578182fd5b8051620024a0620023ce82620028f8565b818152856020838501011115620024b5578384fd5b620024c882602083016020860162002a48565b95945050505050565b600060208284031215620024e3578081fd5b5035919050565b600060208284031215620024fc578081fd5b5051919050565b6000806040838503121562002516578182fd5b823591506200252860208401620021e4565b90509250929050565b6000806040838503121562002544578182fd5b50508035926020909101359150565b60008060006060848603121562002568578081fd5b83359250602084013591506200258160408501620021e4565b90509250925092565b6000806000606084860312156200259f578081fd5b505081359360208301359350604090920135919050565b6000815180845260208085019450808401835b83811015620025f05781516001600160a01b031687529582019590820190600101620025c9565b509495945050505050565b6000815180845260208085019450808401835b83811015620025f0578151875295820195908201906001016200260e565b600081518084526200264681602086016020860162002a48565b601f01601f19169290920160200192915050565b60208152600062001afa60208301846200262c565b6060815260006200268460608301866200262c565b82810360208401526200269881866200262c565b91505060018060a01b0383166040830152949350505050565b602081526000825160208084015262001e5560408401826200262c565b60208152620026e96020820183516001600160a01b03169052565b6000602083015161016080604085015262002709610180850183620025b6565b915060408501516200272660608601826001600160a01b03169052565b5060608501516080850152608085015160a085015260a085015160c085015260c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151915050610140601f1986850301818701526200278c8483620025fb565b96015115159190940152509192915050565b84815260018060a01b0384166020820152826040820152608060608201526000620027cd60808301846200262c565b9695505050505050565b87815260018060a01b038716602082015285604082015260e0606082015260006200280660e08301876200262c565b60808301959095525060a081019290925260c090910152949350505050565b600060608201858352602060608185015281865180845260808601915060808160051b8701019350828801855b828110156200288457607f19888703018452620028718683516200262c565b9550928401929084019060010162002852565b50505050508281036040840152620027cd8185620025fb565b604051601f8201601f1916810167ffffffffffffffff81118282101715620028c957620028c962002b13565b604052919050565b600067ffffffffffffffff821115620028ee57620028ee62002b13565b5060051b60200190565b600067ffffffffffffffff82111562002915576200291562002b13565b50601f01601f191660200190565b6000821982111562002939576200293962002ae7565b500190565b60008262002950576200295062002afd565b500490565b600081600019048311821515161562002972576200297262002ae7565b500290565b6000828210156200298c576200298c62002ae7565b500390565b6000620029a2620023ce84620028d1565b808482526020808301925084368760051b87011115620029c0578485fd5b845b8781101562002a3c57813567ffffffffffffffff811115620029e2578687fd5b870136601f820112620029f3578687fd5b803562002a04620023ce82620028f8565b818152368683850101111562002a18578889fd5b818684018783013790810185018890528652509382019390820190600101620029c2565b50919695505050505050565b60005b8381101562002a6557818101518382015260200162002a4b565b8381111562002a75576000848401525b50505050565b600181811c9082168062002a9057607f821691505b6020821081141562000f4f57634e487b7160e01b600052602260045260246000fd5b600060001982141562002ac95762002ac962002ae7565b5060010190565b60008262002ae25762002ae262002afd565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b801515811462002b3857600080fd5b5056fe60806040523480156200001157600080fd5b5060405162000f8238038062000f828339810160408190526200003491620001f0565b8251839083906200004d90600390602085019062000097565b5080516200006390600490602084019062000097565b5050600580546001600160a01b031990811633909116176001600160a01b03939093169290921790915550620002cc915050565b828054620000a59062000279565b90600052602060002090601f016020900481019282620000c9576000855562000114565b82601f10620000e457805160ff191683800117855562000114565b8280016001018555821562000114579182015b8281111562000114578251825591602001919060010190620000f7565b506200012292915062000126565b5090565b5b8082111562000122576000815560010162000127565b600082601f8301126200014e578081fd5b81516001600160401b03808211156200016b576200016b620002b6565b604051601f8301601f19908116603f01168101908282118183101715620001965762000196620002b6565b81604052838152602092508683858801011115620001b2578485fd5b8491505b83821015620001d55785820183015181830184015290820190620001b6565b83821115620001e657848385830101525b9695505050505050565b60008060006060848603121562000205578283fd5b83516001600160401b03808211156200021c578485fd5b6200022a878388016200013d565b9450602086015191508082111562000240578384fd5b506200024f868287016200013d565b604086015190935090506001600160a01b03811681146200026e578182fd5b809150509250925092565b600181811c908216806200028e57607f821691505b60208210811415620002b057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b610ca680620002dc6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d71461021f578063a9059cbb14610232578063c024cd2614610245578063dd62ed3e14610258578063f2fde38b1461026b57600080fd5b806370a08231146101c057806371297784146101e9578063893d20e8146101fc57806395d89b411461021757600080fd5b806323b872dd116100de57806323b872dd14610178578063313ce5671461018b578063395093511461019a57806342986e13146101ad57600080fd5b806306fdde0314610110578063095ea7b31461012e5780630fb665571461015157806318160ddd14610166575b600080fd5b61011861027e565b6040516101259190610b9d565b60405180910390f35b61014161013c366004610b74565b610310565b6040519015158152602001610125565b61016461015f366004610b39565b610328565b005b6002545b604051908152602001610125565b610141610186366004610b39565b61034f565b60405160128152602001610125565b6101416101a8366004610b74565b610373565b6101646101bb366004610b74565b610395565b61016a6101ce366004610ae6565b6001600160a01b031660009081526020819052604090205490565b61016a6101f7366004610ae6565b6103ba565b6005546040516001600160a01b039091168152602001610125565b6101186103ff565b61014161022d366004610b74565b61040e565b610141610240366004610b74565b61048e565b610164610253366004610b74565b61049c565b61016a610266366004610b07565b6104bd565b610141610279366004610ae6565b6104e8565b60606003805461028d90610c1f565b80601f01602080910402602001604051908101604052809291908181526020018280546102b990610c1f565b80156103065780601f106102db57610100808354040283529160200191610306565b820191906000526020600020905b8154815290600101906020018083116102e957829003601f168201915b5050505050905090565b60003361031e81858561053a565b5060019392505050565b6005546001600160a01b0316331461033f57600080fd5b61034a83838361065e565b505050565b60003361035d85828561082e565b61036885858561065e565b506001949350505050565b60003361031e81858561038683836104bd565b6103909190610bf0565b61053a565b6005546001600160a01b031633146103ac57600080fd5b6103b682826108a2565b5050565b6005546000906001600160a01b031633146103d457600080fd5b6001600160a01b0382166000908152602081905260409020546103f783826108a2565b90505b919050565b60606004805461028d90610c1f565b6000338161041c82866104bd565b9050838110156104815760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610368828686840361053a565b60003361031e81858561065e565b6005546001600160a01b031633146104b357600080fd5b6103b682826109f0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6005546000906001600160a01b0316331461050257600080fd5b6001600160a01b03821661051557600080fd5b50600580546001600160a01b0383166001600160a01b03199091161790556001919050565b6001600160a01b03831661059c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610478565b6001600160a01b0382166105fd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610478565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166106c25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610478565b6001600160a01b0382166107245760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610478565b6001600160a01b0383166000908152602081905260409020548181101561079c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610478565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906107d3908490610bf0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161081f91815260200190565b60405180910390a35b50505050565b600061083a84846104bd565b9050600019811461082857818110156108955760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610478565b610828848484840361053a565b6001600160a01b0382166109025760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610478565b6001600160a01b038216600090815260208190526040902054818110156109765760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610478565b6001600160a01b03831660009081526020819052604081208383039055600280548492906109a5908490610c08565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038216610a465760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610478565b8060026000828254610a589190610bf0565b90915550506001600160a01b03821660009081526020819052604081208054839290610a85908490610bf0565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b03811681146103fa57600080fd5b600060208284031215610af7578081fd5b610b0082610acf565b9392505050565b60008060408385031215610b19578081fd5b610b2283610acf565b9150610b3060208401610acf565b90509250929050565b600080600060608486031215610b4d578081fd5b610b5684610acf565b9250610b6460208501610acf565b9150604084013590509250925092565b60008060408385031215610b86578182fd5b610b8f83610acf565b946020939093013593505050565b6000602080835283518082850152825b81811015610bc957858101830151858201604001528201610bad565b81811115610bda5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610c0357610c03610c5a565b500190565b600082821015610c1a57610c1a610c5a565b500390565b600181811c90821680610c3357607f821691505b60208210811415610c5457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220e452cdb4a719913f78085751e4a8b4a7e94a6b830dab625ede4dc151dd3028d264736f6c63430008040033a26469706673582212203b5422e22dcc211dcddbca26d6f225a0594b3588a614f49b41e53b4c63e592b664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "_newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13016,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 26151,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "collateral",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20Full)12848"
      },
      {
        "astId": 26154,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "feePot",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FeePot)30001"
      },
      {
        "astId": 26156,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "stakerFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 26158,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "settlementFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 26160,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "protocolFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 26162,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "protocol",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 26165,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "accumulatedProtocolFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 26169,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "accumulatedSettlementFees",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26171,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "shareFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 26202,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "markets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(Market)26198_storage)dyn_storage"
      },
      {
        "astId": 26290,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "TradeDetails",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14006,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "version",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 40361,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "marketDetails",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(MarketDetails)40357_storage)dyn_storage"
      },
      {
        "astId": 40382,
        "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
        "label": "managers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(OwnedERC20)37237)dyn_storage": {
        "base": "t_contract(OwnedERC20)37237",
        "encoding": "dynamic_array",
        "label": "contract OwnedERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Market)26198_storage)dyn_storage": {
        "base": "t_struct(Market)26198_storage",
        "encoding": "dynamic_array",
        "label": "struct AbstractMarketFactoryV3.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MarketDetails)40357_storage)dyn_storage": {
        "base": "t_struct(MarketDetails)40357_storage",
        "encoding": "dynamic_array",
        "label": "struct TrustedMarketFactoryV3.MarketDetails[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FeePot)30001": {
        "encoding": "inplace",
        "label": "contract FeePot",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Full)12848": {
        "encoding": "inplace",
        "label": "contract IERC20Full",
        "numberOfBytes": "20"
      },
      "t_contract(OwnedERC20)37237": {
        "encoding": "inplace",
        "label": "contract OwnedERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Market)26198_storage": {
        "encoding": "inplace",
        "label": "struct AbstractMarketFactoryV3.Market",
        "members": [
          {
            "astId": 26173,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "settlementAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26177,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "shareTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_contract(OwnedERC20)37237)dyn_storage"
          },
          {
            "astId": 26180,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "winner",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(OwnedERC20)37237"
          },
          {
            "astId": 26182,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "winnerIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 26184,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "settlementFee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 26186,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "protocolFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 26188,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "stakerFee",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 26190,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "creationTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 26192,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "resolutionTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 26195,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "initialOdds",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 26197,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "active",
            "offset": 0,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(MarketDetails)40357_storage": {
        "encoding": "inplace",
        "label": "struct TrustedMarketFactoryV3.MarketDetails",
        "members": [
          {
            "astId": 40356,
            "contract": "contracts/turbo/TrustedMarketFactoryV3.sol:TrustedMarketFactoryV3",
            "label": "description",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}