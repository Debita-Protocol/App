{
  "address": "0x9d5FBCf67985040d1479069958F8663350122dba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ammFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "lpTokens",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "sharesReturned",
          "type": "uint256[]"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ammFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "MarketFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "OriginEarlyDepositBonusRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "OriginrewardsPeriods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "OriginRewardsPerPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "EarlyDepositBonusRewards",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsPeriods",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "RewardsPerPeriod",
          "type": "uint256"
        }
      ],
      "name": "TrustMarketFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_nextPID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLPTokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsPerMarket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rewardDaysPerMarket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earlyDepositBonusRewards",
          "type": "uint256"
        }
      ],
      "name": "addRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositByMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getEarlyDepositEndTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earlyDepositEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardsAccrued",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "created",
              "type": "bool"
            }
          ],
          "internalType": "struct MasterChef.PoolStatusInfo",
          "name": "_poolStatusInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolLPToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolLPTokenTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getPoolRewardEndTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPoolTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getTimeElapsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "getUserPendingRewardInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "beginTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "earlyDepositEndTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedStandardRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accruedEarlyDepositBonusRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pendingEarlyDepositBonusRewards",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "created",
              "type": "bool"
            }
          ],
          "internalType": "struct MasterChef.PendingRewardInfo",
          "name": "_pendingRewardInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "accRewardsPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEarlyDepositBonusRewardShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "beginTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earlyDepositBonusRewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardsPerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokensIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralRecipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_collateralOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPoolLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "created",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammFactory",
          "type": "address"
        }
      ],
      "name": "trustAMMFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ammFactory",
          "type": "address"
        }
      ],
      "name": "untrustAMMFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastActionTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawByMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x249e66751b34850e59126bc571a26edf4713221f7e24f01ef0f848999415b216",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0x9d5FBCf67985040d1479069958F8663350122dba",
    "transactionIndex": 63,
    "gasUsed": "3119695",
    "logsBloom": "0x
    "blockHash": "0x80c8fa7e72a461ff30fb46094f238bec1af8729786b29a62200767163f01920d",
    "transactionHash": "0x249e66751b34850e59126bc571a26edf4713221f7e24f01ef0f848999415b216",
    "logs": [
      {
        "transactionIndex": 63,
        "blockNumber": 27685505,
        "transactionHash": "0x249e66751b34850e59126bc571a26edf4713221f7e24f01ef0f848999415b216",
        "address": "0x9d5FBCf67985040d1479069958F8663350122dba",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692"
        ],
        "data": "0x",
        "logIndex": 123,
        "blockHash": "0x80c8fa7e72a461ff30fb46094f238bec1af8729786b29a62200767163f01920d"
      },
      {
        "transactionIndex": 63,
        "blockNumber": 27685505,
        "transactionHash": "0x249e66751b34850e59126bc571a26edf4713221f7e24f01ef0f848999415b216",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000058aac4c096433900000000000000000000000000000000000000000000000284964932a23bd76200000000000000000000000000000000000000000000143090f1418b09a6a360000000000000000000000000000000000000000000000002843d9e6de1a594290000000000000000000000000000000000000000000014309149ec4fca3ce699",
        "logIndex": 124,
        "blockHash": "0x80c8fa7e72a461ff30fb46094f238bec1af8729786b29a62200767163f01920d"
      }
    ],
    "blockNumber": 27685505,
    "cumulativeGasUsed": "19270681",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5799bFe361BEea69f808328FF4884DF92f1f66f0"
  ],
  "numDeployments": 5,
  "solcInputHash": "aff3ef3d431d8e648b9071dcc4406028",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ammFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lpTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sharesReturned\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ammFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"MarketFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OriginEarlyDepositBonusRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OriginrewardsPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"OriginRewardsPerPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"EarlyDepositBonusRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsPeriods\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"RewardsPerPeriod\",\"type\":\"uint256\"}],\"name\":\"TrustMarketFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextPID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLPTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPerMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardDaysPerMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earlyDepositBonusRewards\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositByMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getEarlyDepositEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsAccrued\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChef.PoolStatusInfo\",\"name\":\"_poolStatusInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolLPToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolLPTokenTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getTimeElapsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"getUserPendingRewardInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedStandardRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedEarlyDepositBonusRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingEarlyDepositBonusRewards\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChef.PendingRewardInfo\",\"name\":\"_pendingRewardInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"accRewardsPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarlyDepositBonusRewardShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositBonusRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralRecipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPoolLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammFactory\",\"type\":\"address\"}],\"name\":\"trustAMMFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ammFactory\",\"type\":\"address\"}],\"name\":\"untrustAMMFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastActionTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/MasterChef.sol\":\"MasterChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6d3291d0338666da918131e0b475b360e02f9642401746e7abd2cf5a39f16398\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x329a7ddac03d6ab6f9842504b4c66009a8e829782538946be262aef9fc5ac9b3\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is disstributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\n\\nimport \\\"./BPool.sol\\\";\\n\\ncontract BFactory is BBronze {\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\n\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\n\\n    mapping(address => bool) private _isBPool;\\n\\n    function isBPool(address b) external view returns (bool) {\\n        return _isBPool[b];\\n    }\\n\\n    function newBPool() external returns (BPool) {\\n        BPool bpool = new BPool();\\n        _isBPool[address(bpool)] = true;\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\n        bpool.setController(msg.sender);\\n        return bpool;\\n    }\\n\\n    address private _blabs;\\n\\n    constructor() {\\n        _blabs = msg.sender;\\n    }\\n\\n    function getBLabs() external view returns (address) {\\n        return _blabs;\\n    }\\n\\n    function setBLabs(address b) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        emit LOG_BLABS(msg.sender, b);\\n        _blabs = b;\\n    }\\n\\n    function collect(BPool pool) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\n        bool xfer = pool.transfer(_blabs, collected);\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb8a30f5089a3e49d13fa63ca815761b1e67d5985c5549b11d5b5ea88cab45ec5\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x14c1eb51464ef7673b8497df8441093f92f949f374ba58be6c57264f90405ecd\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xce47c1071dc0cce2a78b9e34540ebcda49b4d26de2e011090e99476862a985fd\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c65c1a2966e2e6d775beea034f3023ce1fb0182fd84da5a83820191fe494664\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4bad2e0da3c0daa4cca2ff05e40cfae7287c5504119e419cb561ee67ab382f43\",\"license\":\"MIT\"},\"contracts/bonds/Ibondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4; \\n\\n\\ninterface IBondingCurve{\\n\\tfunction setMarketManager(address _market_manager) external;\\n\\tfunction getTotalZCB(uint256 marketId) external returns (uint256 result);\\n\\tfunction getTotalDS(uint256 marketId) external returns (uint256 result);\\n\\tfunction getMaxQuantity(uint256 marketId) external view returns (uint256 result);\\n\\tfunction curveInit(uint256 marketId) external;\\n\\tfunction getExpectedPrice(uint256 marketId, uint256 amountIn) external view returns (uint256 result);\\n\\tfunction getCollateral() external returns (address);\\n\\tfunction buy(\\n\\t\\taddress marketFactoryAddress, \\n\\t\\taddress trader,\\n\\t\\tuint256 amountIn, \\n\\t\\tuint256 marketId\\n\\t) external returns(uint256);\\n\\tfunction sell(\\n\\t\\taddress marketFactoryAddress, \\n\\t\\taddress trader,\\n\\t\\tuint256 amountIn, \\n\\t\\tuint256 marketId\\n\\t) external returns (uint256);\\n\\tfunction redeem(\\n\\t\\tuint256 marketId, \\n\\t\\taddress receiver, \\n\\t\\tuint256 zcb_redeem_amount, \\n\\t\\tuint256 collateral_redeem_amount\\n\\t) external;\\n\\tfunction redeemPostAssessment(\\n\\t\\tuint256 marketId, \\n\\t\\taddress redeemer,\\n\\t\\tuint256 collateral_amount\\n\\t) external;\\n\\tfunction burnFirstLoss(\\n\\t\\tuint256 marketId, \\n\\t\\tuint256 burn_collateral_amount\\n\\t) external;\\n\\tfunction mint(\\n\\t\\tuint256 marketId, \\n\\t\\tuint256 mintAmount,\\n\\t\\taddress to\\n\\t) external;\\n\\tfunction burn(\\n\\t\\tuint256 marketId, \\n\\t\\tuint256 burnAmount, \\n\\t\\taddress to\\n\\t) external;\\n}\",\"keccak256\":\"0xe845e38e8bd98c0f9be5a6e585cad5965419d50a72f7d7bd06d2496641a9376a\"},\"contracts/bonds/LinearBondingCurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @notice y = a * x + b\\n/// @dev NEED TO REDO FOR GAS EFFICIENT\\ncontract LinearBondingCurve is BondingCurve {\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\n    using FixedPointMathLib for uint256;\\n    uint256 a;\\n    uint256 b;\\n\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address owner,\\n        address collateral,\\n        uint256 _a,\\n        uint256 _b\\n    ) BondingCurve(name, symbol, owner, collateral) {\\n        a = _a;\\n        b = _b;\\n    }\\n    /**\\n     @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\n     @param amount: amount collateral in => has collateral decimal number.\\n     tokens returned in 60.18\\n     */\\n    function _calculatePurchaseReturn(uint256 amount) view internal override virtual returns(uint256) {\\n        uint256 s = totalSupply() ;\\n        uint256 _amount = amount * 10 ** (18 - collateral_dec);\\n        console.log('s', s, a); \\n        console.log('b', b); \\n\\n        uint256 x = ((a.mulWadDown(s) + b) ** 2)/math_precision; \\n        console.log('x', x); \\n\\n        uint256 y = 2*( a.mulWadDown(_amount)); \\n        console.log('y', y); \\n\\n        uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\n        console.log('x_y_sqrt', x_y_sqrt); \\n\\n        uint256 z = (a.mulWadDown(s) + b); \\n        console.log('z', z); \\n\\n        uint256 result = (x_y_sqrt-z).divWadDown(a);\\n        console.log('result', result); \\n\\n        return result; \\n\\n\\n        // uint256 two = uint256(2).fromUint();\\n        // result = (((a.mul(s) + b).pow(two) + two.mul(a).mul(amount)).sqrt() - (a.mul(s) + b)).div(a);\\n        //result = ( ( ( ((a.mulWadDown(s) + b) ** 2)/math_precision + 2 * a.mulWadDown(_amount) ) * math_precision ).sqrt() - (a.mulWadDown(s) + b) ).divWadDown(a);\\n    }\\n\\n    /// @notice calculates area under the curve from current supply to s+amount\\n    /// result = a * amount / 2  * (2* supply + amount) + b * amount\\n    /// @dev amount is in 60.18.\\n    /// returned in collateral decimals\\n    function _calcAreaUnderCurve(uint256 amount) internal view override virtual returns(uint256){\\n        uint256 s = totalSupply(); \\n    \\n        uint256 result = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\n        console.log('result', result); \\n        result /= (10 ** (18 - collateral_dec));\\n\\n        return result; \\n    }\\n\\n    /**\\n     @notice calculates area under curve from s-amount to s, is c(as-ac/2+b) where c is amount \\n     @dev collateral tokens returned\\n     @param amount: tokens burning => 60.18 amount needs to be in 18 decimal \\n     @dev returns amount of collateral tokens with collateral decimals\\n     */\\n    function _calculateSaleReturn(uint256 amount) view internal override virtual returns (uint256) {\\n        uint s = totalSupply();\\n\\n        console.log('amount', amount, s); \\n\\n        uint256 x = a.mulWadDown(s); \\n        console.log('x', x); \\n        uint256 y = a.mulWadDown(amount)/2; \\n        console.log('y', y); \\n        uint256 z = b + x - y; \\n        console.log('z', z); \\n        uint256 result = amount.mulWadDown(z); \\n        console.log('result', result); \\n\\n        result = result / (10 ** (18 - collateral_dec));\\n\\n        return result; \\n        \\n        // uint256 _reserves = reserves * 10 ** (18 - collateral_dec);\\n\\n        // console.log(\\\"_reserves\\\", _reserves);\\n        // result = _reserves - ( (a / 2).mulWadDown((((s - amount)**2) / math_precision)) + b.mulWadDown(s - amount) );\\n        // console.log(\\\"s - amount\\\", s - amount);\\n        // result /= (10 ** (18 - collateral_dec));\\n    }\\n\\n    /**\\n     @param amount: amount added in 60.18\\n     @dev returns price in 60.18\\n     */\\n    function _calculateExpectedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\n        uint256 s = totalSupply();\\n\\n        result = (s + amount).mulWadDown(a) + b;\\n    }\\n\\n    function _calculateDecreasedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\n        result = (totalSupply() - amount).mulWadDown(a) + b;\\n    }\\n\\n    /**\\n     @notice probability = a * x + b, 60.18\\n     returns probability in 60.18\\n     */\\n    function _calculateProbability(uint256 amount) view internal override virtual returns (uint256 score) {\\n        //score = amount.mul(a) + b;\\n        score = amount.mulWadDown(a) + b;\\n    }\\n\\n\\n\\n   function _calculateScore(uint256 priceOut, bool atLoss)view internal override virtual returns (uint256 score) {\\n        // uint256 two = uint256(2).fromUint();\\n        // if (atLoss) {score =  ((priceOut-math_precision).div(math_precision)).pow(two);}\\n        // else {score = ((priceOut).div(math_precision)).pow(two);}\\n        if (atLoss) {\\n            score = ((priceOut - math_precision) ** 2) / math_precision;\\n        } else {\\n            score = (priceOut ** 2) / math_precision;\\n        }\\n\\n    }\\n }\",\"keccak256\":\"0x3feda2ff7a8af9342ec099ef4631168a22a41206067d5a0d93f2998464e80afa\"},\"contracts/bonds/bondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n//TODO need to actually review for security and shit.\\nabstract contract BondingCurve is OwnedERC20 {\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\n    using SafeERC20 for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    uint256 internal price_upper_bound;\\n    uint256 internal price_lower_bound;\\n    uint256 internal reserves;\\n    uint256 internal max_quantity;\\n    uint256 internal math_precision; \\n    uint256 internal collateral_dec;\\n    ERC20 collateral; // NEED TO CHANGE ONCE VAULT IS DONE\\n    address[] private buyers; // keeps track for final reputation.\\n\\n\\n    constructor (\\n        string memory name,\\n        string memory symbol,\\n        address owner, // market manager.\\n        address _collateral\\n    ) OwnedERC20(name, symbol, owner) {\\n        collateral = ERC20(_collateral);\\n        math_precision = 1e18;\\n        collateral_dec = collateral.decimals();\\n    }\\n\\n    function setUpperBound(uint256 upper_bound) public onlyOwner {\\n        price_upper_bound = upper_bound;\\n    }\\n\\n    function setLowerBound(uint256 lower_bound) public onlyOwner {\\n        price_lower_bound = lower_bound;\\n    }\\n\\n    function setMaxQuantity(uint256 _max_quantity) public onlyOwner {\\n        max_quantity = _max_quantity;\\n    }\\n\\n    /**\\n     @notice called by market manager, like trustedMint but returns amount out\\n     @param collateral_amount: amount of collateral in. => w/ collateral decimals\\n     */\\n    function trustedBuy(address trader, uint256 collateral_amount) public onlyOwner returns (uint256) {\\n        uint256 tokens = _calculatePurchaseReturn(collateral_amount);\\n        console.log('TOKENS', tokens, collateral_amount); \\n        reserves += collateral_amount;\\n\\n        require(collateral.balanceOf(trader)>= collateral_amount,\\\"not enough balance\\\"); \\n        collateral.safeTransferFrom(trader, address(this), collateral_amount);\\n        _mint(trader, tokens);\\n        return tokens;\\n    }\\n\\n    /**\\n     @param zcb_amount: amount of zcb tokens burned, needs to be in 18 decimals \\n     */\\n    function trustedSell(address trader, uint256 zcb_amount) public onlyOwner returns (uint256) {\\n        uint256 collateral_out = _calculateSaleReturn(zcb_amount);\\n        console.log(\\\"colalteralout\\\", collateral_out); \\n        _burn(trader, zcb_amount);\\n\\n        collateral.safeTransfer(trader, collateral_out);\\n        reserves -= collateral_out;\\n        return collateral_out;\\n    }\\n\\n    function trustedApproveCollateralTransfer(address trader, uint256 amount) public onlyOwner {\\n        collateral.approve(trader, amount);\\n    }\\n\\n    /**\\n     @notice calculates tokens returns from input collateral\\n     @dev shouldn't be calling this function, should be calculating amount from frontend.\\n     @param amount: input collateral (ds)\\n     */\\n    function calculatePurchaseReturn(uint256 amount) public view  returns (uint256 result) {\\n        result = _calculatePurchaseReturn(amount);\\n    }\\n\\n\\n    /// @notice gets required amount of collateral to purchase X amount of tokens\\n    /// need to get area under the curve from current supply X_  to X_+X \\n    function calcAreaUnderCurve(uint256 amount) public view  returns(uint){\\n    \\t  return _calcAreaUnderCurve(amount); \\n    }\\n\\n    /**\\n     @notice calculates collateral returns from selling tokens\\n     @param amount: amount of tokens selling\\n     */\\n    function calculateSaleReturn(uint256 amount) public view  returns (uint256 result) {\\n        result = _calculateSaleReturn(amount);\\n    }\\n\\n    /// @notice calculates score necessary to update reputation score\\n    function calculateScore(uint256 priceOut, bool atLoss) public view returns(uint){\\n    \\treturn _calculateScore(priceOut, atLoss);\\n    }\\n\\n\\n\\n    /// @notice calculates implied probability of the trader \\n    /// @param quantity is the ratio amount(in colalteral) / total collateral budget for trader, in 18 decimals \\n    function calcImpliedProbability(uint256 collateral_amount, uint256 quantity) public view returns(uint256 prob){\\n    \\tuint256 zcb_amount = calculatePurchaseReturn(collateral_amount); \\n    \\tconsole.log('zcb_amount', zcb_amount); \\n    \\t//uint256 avg_price = collateral_amount/zcb_amount; \\n    \\tuint256 avg_price = calcAveragePrice(zcb_amount); //18 decimals \\n    \\tconsole.log('avg_price', avg_price); \\n    \\tuint256 b = avg_price.mulWadDown(math_precision - avg_price);\\n    \\tconsole.log('b', b);\\n    \\tuint256 prob = quantity.mulWadDown(b)+ avg_price; \\n    \\treturn prob; \\n    }\\n\\n    /// @notice caluclates average price for the user to buy amount tokens \\n    /// @dev which is average under the curve divided by amount \\n    /// amount is the amount of bonds, 18 decimals \\n    function calcAveragePrice(uint256 amount) public view returns(uint256){\\n\\n    \\tuint256 area = calcAreaUnderCurve(amount); //this takes in 18 \\n    \\tconsole.log(\\\"area\\\", area); \\n\\n    \\t//area is in decimal 6, amount is in 18\\n    \\tuint256 area_in_precision = area*(10**12); \\n    \\tuint256 result = area_in_precision.divWadDown(amount); \\n    \\t//returns a 18 decimal avg price \\n    \\treturn result; \\n    }\\n\\n    /**\\n     @notice calculates expected price given user buys X tokens\\n     @param amount: hypothetical amount of tokens bought\\n     */\\t\\n    function calculateExpectedPrice(uint256 amount) public view  returns (uint256 result) {\\n        result = _calculateExpectedPrice(amount);\\n    }\\n    \\n    function getTotalCollateral() public view returns (uint256 result) {\\n        result = collateral.balanceOf(address(this));\\n    }\\n\\n    function getCollateral() public view returns (address) {\\n        return address(collateral);\\n    } \\n\\n    function getTotalZCB() public view returns (uint256 result) {\\n        result = totalSupply();\\n    }\\n\\n    function getMaxQuantity() public view returns (uint256 result) {\\n        result = max_quantity;\\n    }\\n\\n    function getUpperBound() public view returns (uint256 result) {\\n        result = price_upper_bound;\\n    }\\n\\n    function getLowerBound() public view returns (uint256 result) {\\n        result = price_lower_bound;\\n    }\\n    function getReserves() public view returns(uint256){\\n    \\treturn reserves; \\n    }\\n\\n    /**\\n     @notice buy bond tokens with necessary checks and transfers of collateral.\\n     @param amount: amount of collateral/ds paid in exchange for tokens\\n     @dev amount has number of collateral decimals\\n     */\\n    function buy(uint256 amount) public {\\n        uint256 tokens = _calculatePurchaseReturn(amount);\\n        console.log(\\\"buy:tokens\\\", tokens);\\n        reserves += amount; // CAN REPLACE WITH collateral.balanceOf(this)\\n        _mint(msg.sender, tokens);\\n        collateral.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     @notice sell bond tokens with necessary checks and transfers of collateral\\n     @param amount: amount of tokens selling. 60.18.\\n     */\\n    function sell(uint256 amount) public {\\n        uint256 sale = _calculateSaleReturn(amount);\\n        _burn(msg.sender, amount);\\n        collateral.safeTransfer(msg.sender, sale);\\n        reserves -= sale;\\n    }\\n\\n    /**\\n     @dev doesn't perform any checks, checks performed by caller\\n     */\\n    function incrementReserves(uint256 amount) public onlyOwner{\\n        reserves += amount;\\n    }\\n    \\n    /**\\n     @dev doesn't perform any checks, checks performed by caller\\n     */\\n    function decrementReserves(uint256 amount) public onlyOwner {\\n        reserves -= amount;\\n    }\\n\\n    /**\\n     @notice used for calculating reputation score on resolved market.\\n     */\\n    function calculateProbability(uint256 amount) view public returns (uint256 score) {\\n        return _calculateProbability(amount);\\n    }\\n\\n    function redeem(\\n\\t\\taddress receiver, \\n\\t\\tuint256 zcb_redeem_amount, \\n\\t\\tuint256 collateral_redeem_amount\\n\\t) external  onlyOwner {\\n        _burn(receiver, zcb_redeem_amount);\\n\\t\\tcollateral.safeTransfer(receiver, collateral_redeem_amount); \\n        reserves -= collateral_redeem_amount;\\n\\t}\\n\\n    function redeemPostAssessment(\\n\\t\\taddress redeemer,\\n\\t\\tuint256 collateral_amount\\n\\t) external  onlyOwner{\\n        uint256 redeem_amount = balanceOf(redeemer);\\n\\t\\t_burn(redeemer, redeem_amount); \\n\\t\\tcollateral.safeTransfer(redeemer, collateral_amount); \\n        reserves -= collateral_amount;\\n\\t}\\n\\n    function burnFirstLoss(\\n\\t\\tuint256 burn_collateral_amount\\n\\t) external onlyOwner{\\n\\t\\tcollateral.safeTransfer(owner, burn_collateral_amount); \\n        reserves -= burn_collateral_amount;\\n\\t}\\n\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override virtual {\\n        // on _mint\\n        if (from == address(0) && price_upper_bound > 0) {\\n            console.log(\\\"beforeTT: price_upper_bound\\\", price_upper_bound);\\n            require(_calculateExpectedPrice(amount) <= price_upper_bound, \\\"above price upper bound\\\");\\n            // if (balanceOf(to) == 0 && amount > 0) {\\n            //     buyers.push(to);\\n            // }\\n        }\\n        // on _burn\\n        else if (to == address(0) && price_lower_bound > 0) {\\n            require(_calculateDecreasedPrice(amount) >= price_lower_bound, \\\"below price lower bound\\\");\\n        }\\n    }\\n\\n    /**\\n     @dev amount is tokens burned.\\n     */\\n    function calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result) {\\n        result = _calculateDecreasedPrice(amount);\\n    }\\n\\n    function _calcAreaUnderCurve(uint256 amount) internal view  virtual returns(uint256 result); \\n\\n    function _calculateScore(uint256 priceOut, bool atLoss) view internal virtual returns(uint256 score);\\n\\n    function _calculatePurchaseReturn(uint256 amount) view internal virtual returns(uint256 result);\\n\\n    function _calculateSaleReturn(uint256 amount) view internal virtual returns (uint256 result);\\n\\n    function _calculateExpectedPrice(uint256 amount) view internal virtual returns (uint256 result);\\n\\n    function _calculateProbability(uint256 amount) view internal virtual returns (uint256 score);\\n\\n    function _calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result);\\n}\",\"keccak256\":\"0xa60068a7a7d79829a1dcdce14b82f15d0c10174cc1086fee28b34a2fe74c6508\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd4f708218be4eb92ec676cde580e2579a03dafd2ca8436b70a25e8331c3f0218\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace284dc2ca2afd8e6e1b16f2c3abb9af28ae70b627c3557722e4618c65ef8d9\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x26c297226aeb6ad5e522fe97f9d68cc4474b2560bf22c8cd124c93442d339a4c\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract Rewardable {\\n    // Rewards will be paid out over the lifetime of an event.\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\n\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb5296c464967afdf84ea175e46345f8e291c0e621299cb0f6ecfed9e9585add\",\"license\":\"MIT\"},\"contracts/rewards/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\" as OpenZeppelinOwnable;\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\nimport \\\"../turbo/AMMFactory.sol\\\";\\n\\n// MasterChef is the master of Reward. He can make Reward and he is a fair guy.\\ncontract MasterChef is OpenZeppelinOwnable.Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint256 public constant BONE = 10**18;\\n\\n    // The percentage of the rewards period that early deposit bonus will payout.\\n    // e.g. Early deposit bonus hits if LP is done in the first x percent of the period.\\n    uint256 public constant EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE = BONE / 10; // 10% of reward period.\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        uint256 lastActionTimestamp; // Timestamp of the withdrawal or deposit from this user.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of REWARDs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accRewardsPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each user that deposits LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 accRewardsPerShare; // Accumulated REWARDs per share, times BONE. See below.\\n        uint256 totalEarlyDepositBonusRewardShares; // The total number of share currently qualifying bonus REWARDs.\\n        uint256 beginTimestamp; // The timestamp to begin calculating rewards at.\\n        uint256 endTimestamp; // Timestamp of the end of the rewards period.\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs to distribute to early depositors.\\n        uint256 lastRewardTimestamp; // Last timestamp REWARDs distribution occurred.\\n        uint256 rewardsPerSecond; // Number of rewards paid out per second.\\n    }\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n\\n    // This is a snapshot of the current state of a market.\\n    struct PoolStatusInfo {\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        uint256 earlyDepositEndTimestamp;\\n        uint256 totalRewardsAccrued;\\n        bool created;\\n    }\\n\\n    struct PendingRewardInfo {\\n        uint256 beginTimestamp;\\n        uint256 endTimestamp;\\n        uint256 earlyDepositEndTimestamp;\\n        uint256 accruedStandardRewards;\\n        uint256 accruedEarlyDepositBonusRewards;\\n        uint256 pendingEarlyDepositBonusRewards;\\n        bool created;\\n    }\\n\\n    struct MarketFactoryInfo {\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs per day to distribute to early depositors.\\n        uint256 rewardsPeriods; // Number of days the rewards for this pool will payout.\\n        uint256 rewardsPerPeriod; // Amount of rewards to be given out for a given period.\\n    }\\n    mapping(address => MarketFactoryInfo) marketFactoryRewardInfo;\\n\\n    struct RewardPoolLookupInfo {\\n        uint256 pid;\\n        bool created;\\n    }\\n\\n    // AMMFactory => MarketFactory => MarketId\\n    mapping(address => mapping(address => mapping(uint256 => RewardPoolLookupInfo))) public rewardPoolLookup;\\n\\n    // The REWARD TOKEN!\\n    IERC20 private rewardsToken;\\n\\n    mapping(address => bool) private approvedAMMFactories;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address recipient);\\n    event TrustMarketFactory(\\n        address indexed MarketFactory,\\n        uint256 OriginEarlyDepositBonusRewards,\\n        uint256 OriginrewardsPeriods,\\n        uint256 OriginRewardsPerPeriod,\\n        uint256 EarlyDepositBonusRewards,\\n        uint256 rewardsPeriods,\\n        uint256 RewardsPerPeriod\\n    );\\n\\n    event PoolCreated(\\n        address indexed ammFactory,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address creator,\\n        address lpTokenRecipient\\n    );\\n    event LiquidityChanged(\\n        address indexed ammFactory,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address user,\\n        address recipient,\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\n        int256 collateral,\\n        int256 lpTokens,\\n        uint256[] sharesReturned\\n    );\\n\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n\\n    constructor(IERC20 _rewardsToken) {\\n        rewardsToken = _rewardsToken;\\n    }\\n\\n    function trustAMMFactory(address _ammFactory) public onlyOwner {\\n        approvedAMMFactories[_ammFactory] = true;\\n    }\\n\\n    function untrustAMMFactory(address _ammFactory) public onlyOwner {\\n        delete approvedAMMFactories[_ammFactory];\\n    }\\n\\n    // This method can also be used to update rewards\\n    function addRewards(\\n        address _marketFactory,\\n        uint256 _rewardsPerMarket,\\n        uint256 _rewardDaysPerMarket,\\n        uint256 _earlyDepositBonusRewards\\n    ) public onlyOwner {\\n        MarketFactoryInfo memory _oldMarketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\n\\n        marketFactoryRewardInfo[_marketFactory] = MarketFactoryInfo({\\n            rewardsPeriods: _rewardDaysPerMarket,\\n            rewardsPerPeriod: _rewardsPerMarket,\\n            earlyDepositBonusRewards: _earlyDepositBonusRewards\\n        });\\n\\n        emit TrustMarketFactory(\\n            _marketFactory,\\n            _oldMarketFactoryInfo.earlyDepositBonusRewards,\\n            _oldMarketFactoryInfo.rewardsPeriods,\\n            _oldMarketFactoryInfo.rewardsPerPeriod,\\n            _earlyDepositBonusRewards,\\n            _rewardDaysPerMarket,\\n            _rewardsPerMarket\\n        );\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    // An _endTimestamp of zero means the rewards start immediately.\\n    function add(\\n        address _ammFactory,\\n        address _marketFactory,\\n        uint256 _marketId,\\n        IERC20 _lpToken,\\n        uint256 _endTimestamp\\n    ) public onlyOwner returns (uint256 _nextPID) {\\n        return addInternal(_ammFactory, _marketFactory, _marketId, _lpToken, _endTimestamp);\\n    }\\n\\n    function addInternal(\\n        address _ammFactory,\\n        address _marketFactory,\\n        uint256 _marketId,\\n        IERC20 _lpToken,\\n        uint256 _endTimestamp\\n    ) internal returns (uint256 _nextPID) {\\n        require(\\n            !rewardPoolLookup[_ammFactory][_marketFactory][_marketId].created,\\n            \\\"Reward pool has already been created.\\\"\\n        );\\n\\n        require(approvedAMMFactories[address(_ammFactory)], \\\"AMMFactory must be approved to create pool\\\");\\n\\n        _nextPID = poolInfo.length;\\n\\n        rewardPoolLookup[_ammFactory][_marketFactory][_marketId] = RewardPoolLookupInfo({pid: _nextPID, created: true});\\n\\n        MarketFactoryInfo memory _marketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\n\\n        // Need to figure out the beginning/end of the reward period.\\n        uint256 _rewardsPeriodsInSeconds = _marketFactoryInfo.rewardsPeriods * 1 days;\\n        uint256 _beginTimestamp = block.timestamp;\\n\\n        // Add one hour buffer for LPs to withdraw before event start.\\n        if (_endTimestamp != 0) {\\n            _endTimestamp = _endTimestamp - 1 hours;\\n        }\\n\\n        if (_endTimestamp == 0) {\\n            _endTimestamp = _beginTimestamp + _rewardsPeriodsInSeconds;\\n        } else if ((_endTimestamp - _rewardsPeriodsInSeconds) > block.timestamp) {\\n            _beginTimestamp = _endTimestamp - _rewardsPeriodsInSeconds;\\n        } else if (block.timestamp >= _endTimestamp) {\\n            // reward period already over.\\n            _beginTimestamp = _endTimestamp;\\n        }\\n        poolInfo.push(\\n            PoolInfo({\\n                accRewardsPerShare: 0,\\n                beginTimestamp: _beginTimestamp,\\n                endTimestamp: _endTimestamp,\\n                totalEarlyDepositBonusRewardShares: 0,\\n                earlyDepositBonusRewards: (_marketFactoryInfo.earlyDepositBonusRewards / 1 days) *\\n                    (_endTimestamp - _beginTimestamp),\\n                lpToken: _lpToken,\\n                rewardsPerSecond: (_marketFactoryInfo.rewardsPerPeriod / 1 days),\\n                lastRewardTimestamp: _beginTimestamp\\n            })\\n        );\\n    }\\n\\n    // Return number of seconds elapsed in terms of BONEs.\\n    function getTimeElapsed(uint256 _pid) public view returns (uint256) {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        uint256 _fromTimestamp = block.timestamp;\\n\\n        if (\\n            // Rewards have not started yet.\\n            _pool.beginTimestamp > _fromTimestamp ||\\n            // Not sure how this happens but it is accounted for in the original master chef contract.\\n            _pool.lastRewardTimestamp > _fromTimestamp ||\\n            // No rewards to be distributed\\n            _pool.rewardsPerSecond == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        // Rewards are over for this pool. No more rewards have accrued.\\n        if (_pool.lastRewardTimestamp >= _pool.endTimestamp) {\\n            return 0;\\n        }\\n\\n        return min(_fromTimestamp, _pool.endTimestamp).sub(_pool.lastRewardTimestamp).add(1).mul(BONE);\\n        // return (min(_fromTimestamp, _pool.endTimestamp) - _pool.lastRewardTimestamp + 1) * BONE;\\n    }\\n\\n    function getPoolTokenBalance(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _user\\n    ) external view returns (uint256) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        if (_rewardPoolLookupInfo.created) {\\n            return userInfo[_rewardPoolLookupInfo.pid][_user].amount;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getUserAmount(uint256 _pid, address _user) external view returns (uint256) {\\n        return userInfo[_pid][_user].amount;\\n    }\\n\\n    function getPoolRewardEndTimestamp(uint256 _pid) public view returns (uint256) {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        return _pool.endTimestamp;\\n    }\\n\\n    function getEarlyDepositEndTimestamp(uint256 _pid) public view returns (uint256) {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\n\\n        return ((_duration * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\n    }\\n\\n    function getPoolLPTokenTotalSupply(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId\\n    ) public view returns (uint256) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken.totalSupply();\\n    }\\n\\n    function getPoolLPToken(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId\\n    ) public view returns (IERC20) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken;\\n    }\\n\\n    function getPoolInfo(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId\\n    ) public view returns (PoolStatusInfo memory _poolStatusInfo) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        // This cannot revert as it will be used in a multicall.\\n        if (_rewardPoolLookupInfo.created) {\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\n\\n            _poolStatusInfo.beginTimestamp = _pool.beginTimestamp;\\n            _poolStatusInfo.endTimestamp = _pool.endTimestamp;\\n            _poolStatusInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\n\\n            _poolStatusInfo.totalRewardsAccrued =\\n                (min(block.timestamp, _pool.endTimestamp) - _pool.beginTimestamp) *\\n                _pool.rewardsPerSecond;\\n            _poolStatusInfo.created = true;\\n        }\\n    }\\n\\n    // View function to see pending REWARDs on frontend.\\n    function getUserPendingRewardInfo(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _userAddress\\n    ) external view returns (PendingRewardInfo memory _pendingRewardInfo) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        if (_rewardPoolLookupInfo.created) {\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\n            UserInfo storage _user = userInfo[_rewardPoolLookupInfo.pid][_userAddress];\\n            uint256 accRewardsPerShare = _pool.accRewardsPerShare;\\n            uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\\n\\n            uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\n\\n            _pendingRewardInfo.created = true;\\n            _pendingRewardInfo.beginTimestamp = _pool.beginTimestamp;\\n            _pendingRewardInfo.endTimestamp = _pool.endTimestamp;\\n            _pendingRewardInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\n\\n            if (_user.lastActionTimestamp <= _pendingRewardInfo.earlyDepositEndTimestamp) {\\n                if (_pool.totalEarlyDepositBonusRewardShares > 0 && block.timestamp > _pendingRewardInfo.endTimestamp) {\\n                    _pendingRewardInfo.accruedEarlyDepositBonusRewards = _pool\\n                        .earlyDepositBonusRewards\\n                        .mul(_user.amount)\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\n                } else if (_pool.totalEarlyDepositBonusRewardShares > 0) {\\n                    _pendingRewardInfo.pendingEarlyDepositBonusRewards = _pool\\n                        .earlyDepositBonusRewards\\n                        .mul(_user.amount)\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\n                }\\n            }\\n\\n            if (block.timestamp > _pool.lastRewardTimestamp && lpSupply != 0) {\\n                uint256 multiplier = getTimeElapsed(_rewardPoolLookupInfo.pid);\\n                accRewardsPerShare = accRewardsPerShare.add(multiplier.mul(_pool.rewardsPerSecond).div(lpSupply));\\n            }\\n\\n            _pendingRewardInfo.accruedStandardRewards = _user.amount.mul(accRewardsPerShare).div(BONE).sub(\\n                _user.rewardDebt\\n            );\\n        }\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardTimestamp = block.timestamp;\\n            return;\\n        }\\n        uint256 multiplier = getTimeElapsed(_pid);\\n        pool.accRewardsPerShare = pool.accRewardsPerShare.add(multiplier.mul(pool.rewardsPerSecond).div(lpSupply));\\n        pool.lastRewardTimestamp = block.timestamp;\\n    }\\n\\n    // Deposit LP tokens to MasterChef for REWARD allocation.\\n    // Assumes the staked tokens are already on contract.\\n    function depositInternal(\\n        address _userAddress,\\n        uint256 _pid,\\n        uint256 _amount\\n    ) internal {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\n\\n        updatePool(_pid);\\n\\n        if (_user.amount > 0) {\\n            uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\n            safeRewardsTransfer(_userAddress, pending);\\n        }\\n\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\n\\n        // If the user was an early deposit, remove user amount from the pool.\\n        // Even if the pools reward period has elapsed. They must withdraw first.\\n        if (\\n            block.timestamp > _bonusrewardsPeriodsEndTimestamp &&\\n            _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\n        ) {\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\n        }\\n\\n        // Still in the early deposit bonus period.\\n        if (_bonusrewardsPeriodsEndTimestamp > block.timestamp) {\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.add(_amount);\\n        }\\n\\n        _user.amount = _user.amount.add(_amount);\\n\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\n        _user.lastActionTimestamp = block.timestamp;\\n        emit Deposit(_userAddress, _pid, _amount);\\n    }\\n\\n    function depositByMarket(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _amount\\n    ) public {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\n\\n        deposit(_rewardPoolLookupInfo.pid, _amount);\\n    }\\n\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        depositInternal(msg.sender, _pid, _amount);\\n        poolInfo[_pid].lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Withdraw LP tokens from MasterChef.\\n    // Assumes caller is handling distribution of LP tokens.\\n    function withdrawInternal(\\n        address _userAddress,\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _tokenRecipientAddress\\n    ) internal {\\n        PoolInfo storage _pool = poolInfo[_pid];\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\n        require(_user.amount >= _amount, \\\"withdraw: not good\\\");\\n\\n        updatePool(_pid);\\n\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\n        uint256 _rewardPeriodEndTimestamp = _rewardsPeriodsInSeconds + _pool.beginTimestamp + 1;\\n\\n        if (_rewardPeriodEndTimestamp <= block.timestamp) {\\n            if (\\n                _pool.totalEarlyDepositBonusRewardShares > 0 &&\\n                _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\n            ) {\\n                uint256 _rewardsToUser =\\n                    _pool.earlyDepositBonusRewards.mul(_user.amount).div(_pool.totalEarlyDepositBonusRewardShares);\\n                safeRewardsTransfer(_userAddress, _rewardsToUser);\\n            }\\n        } else if (_bonusrewardsPeriodsEndTimestamp >= block.timestamp) {\\n            // Still in the early deposit bonus period.\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_amount);\\n        } else if (\\n            // If the user was an early deposit, remove user amount from the pool.\\n            _bonusrewardsPeriodsEndTimestamp >= _user.lastActionTimestamp\\n        ) {\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\n        }\\n\\n        uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\n\\n        safeRewardsTransfer(_tokenRecipientAddress, pending);\\n        _user.amount = _user.amount.sub(_amount);\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\n        _user.lastActionTimestamp = block.timestamp;\\n\\n        emit Withdraw(msg.sender, _pid, _amount, _tokenRecipientAddress);\\n    }\\n\\n    function withdrawByMarket(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _amount\\n    ) public {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\n\\n        withdraw(_rewardPoolLookupInfo.pid, _amount);\\n    }\\n\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        withdrawInternal(msg.sender, _pid, _amount, msg.sender);\\n        poolInfo[_pid].lpToken.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function createPool(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _initialLiquidity,\\n        address _lpTokenRecipient\\n    ) public returns (uint256) {\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _initialLiquidity);\\n        _marketFactory.collateral().approve(address(_ammFactory), _initialLiquidity);\\n\\n        uint256 _lpTokensIn = _ammFactory.createPool(_marketFactory, _marketId, _initialLiquidity, address(this));\\n        IERC20 _lpToken = IERC20(address(_ammFactory.getPool(_marketFactory, _marketId)));\\n\\n        uint256 _nextPID =\\n            addInternal(\\n                address(_ammFactory),\\n                address(_marketFactory),\\n                _marketId,\\n                _lpToken,\\n                _marketFactory.getRewardEndTime(_marketId)\\n            );\\n\\n        depositInternal(_lpTokenRecipient, _nextPID, _lpTokensIn);\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _balances[i] = 0;\\n        }\\n\\n        emit PoolCreated(address(_ammFactory), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\n        emit LiquidityChanged(\\n            address(_ammFactory),\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_initialLiquidity),\\n            int256(_lpTokensIn),\\n            _balances\\n        );\\n\\n        return _lpTokensIn;\\n    }\\n\\n    function addLiquidity(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _collateralIn,\\n        uint256 _minLPTokensOut,\\n        address _lpTokenRecipient\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        uint256 _pid = _rewardPoolLookupInfo.pid;\\n\\n        // If not created should attempt to create it.\\n        if (!_rewardPoolLookupInfo.created) {\\n            BPool _bPool = _ammFactory.getPool(_marketFactory, _marketId);\\n            require(_bPool != BPool(address(0)), \\\"Pool not created.\\\");\\n\\n            _pid = addInternal(\\n                address(_ammFactory),\\n                address(_marketFactory),\\n                _marketId,\\n                IERC20(address(_bPool)),\\n                _marketFactory.getRewardEndTime(_marketId)\\n            );\\n        }\\n\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _collateralIn);\\n        _marketFactory.collateral().approve(address(_ammFactory), _collateralIn);\\n\\n        (_poolAmountOut, _balances) = _ammFactory.addLiquidity(\\n            _marketFactory,\\n            _marketId,\\n            _collateralIn,\\n            _minLPTokensOut,\\n            address(this)\\n        );\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        for (uint256 i = 0; i < _balances.length; i++) {\\n            if (_balances[i] > 0) {\\n                _market.shareTokens[i].transfer(_lpTokenRecipient, _balances[i]);\\n            }\\n        }\\n\\n        depositInternal(_lpTokenRecipient, _pid, _poolAmountOut);\\n\\n        emit LiquidityChanged(\\n            address(_ammFactory),\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_collateralIn),\\n            int256(_poolAmountOut),\\n            _balances\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        AMMFactory _ammFactory,\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _lpTokensIn,\\n        uint256 _minCollateralOut,\\n        address _collateralRecipient\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\n\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\n\\n        withdrawInternal(msg.sender, _rewardPoolLookupInfo.pid, _lpTokensIn, _collateralRecipient);\\n\\n        PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\n\\n        _pool.lpToken.approve(address(_ammFactory), _lpTokensIn);\\n\\n        (_collateralOut, _balances) = _ammFactory.removeLiquidity(\\n            _marketFactory,\\n            _marketId,\\n            _lpTokensIn,\\n            _minCollateralOut,\\n            _collateralRecipient\\n        );\\n\\n        emit LiquidityChanged(\\n            address(_ammFactory),\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _collateralRecipient,\\n            int256(_collateralOut),\\n            -int256(_lpTokensIn),\\n            _balances\\n        );\\n    }\\n\\n    function withdrawRewards(uint256 _amount) external onlyOwner {\\n        rewardsToken.transfer(msg.sender, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.lastActionTimestamp = 0;\\n    }\\n\\n    function safeRewardsTransfer(address _to, uint256 _amount) internal {\\n        uint256 _rewardsBal = rewardsToken.balanceOf(address(this));\\n        if (_amount > _rewardsBal) {\\n            rewardsToken.transfer(_to, _rewardsBal);\\n        } else {\\n            rewardsToken.transfer(_to, _amount);\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a <= b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2a5a90dbee8b27054d4684d2f9be9fcac24f1d35b0524edf16f98544b6d9d47\",\"license\":\"MIT\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../balancer/BFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"../balancer/BNum.sol\\\";\\nimport \\\"../bonds/Ibondingcurve.sol\\\"; \\n\\ncontract AMMFactory is BNum {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\n\\n    BFactory public bFactory;\\n    // MarketFactory => Market => BPool\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\n    uint256 fee;\\n\\n    event PoolCreated(\\n        address pool,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed creator,\\n        address lpTokenRecipient\\n    );\\n    event LiquidityChanged(\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed user,\\n        address recipient,\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\n        int256 collateral,\\n        int256 lpTokens,\\n        uint256[] sharesReturned\\n    );\\n    event SharesSwapped(\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed user,\\n        uint256 outcome,\\n        // from the perspective of the user. e.g. collateral is negative when buying\\n        int256 collateral,\\n        int256 shares,\\n        uint256 price\\n    );\\n\\n    constructor(BFactory _bFactory, uint256 _fee) {\\n        bFactory = _bFactory;\\n        fee = _fee;\\n    }\\n\\n    function createPool(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _initialLiquidity,\\n        address _lpTokenRecipient\\n    ) public returns (uint256) {\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\n\\n        // Comparing to sets because sets are normalized to 10e18.\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\n\\n        //  Turn collateral into shares\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        require(\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\n        );\\n\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\n\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        // Create pool\\n        BPool _pool = bFactory.newBPool();\\n\\n        // Add each outcome to the pool. Collateral is NOT added.\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            _token.approve(address(_pool), MAX_UINT);\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\n        }\\n\\n        // Set the swap fee.\\n        _pool.setSwapFee(fee);\\n\\n        // Finalize pool setup\\n        _pool.finalize();\\n\\n        pools[address(_marketFactory)][_marketId] = _pool;\\n\\n        // Pass along LP tokens for initial liquidity\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\n\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\n        _pool.transfer(address(0x0), (BONE / 1000));\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\n\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _balances[i] = 0;\\n        }\\n\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_initialLiquidity),\\n            int256(_lpTokenBalance),\\n            _balances\\n        );\\n\\n        return _lpTokenBalance;\\n    }\\n\\n    function addLiquidity(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _collateralIn,\\n        uint256 _minLPTokensOut,\\n        address _lpTokenRecipient\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        //  Turn collateral into shares\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        // Find poolAmountOut\\n        _poolAmountOut = MAX_UINT;\\n\\n        {\\n            uint256 _totalSupply = _pool.totalSupply();\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                _maxAmountsIn[i] = _sets;\\n\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\n\\n                // This is the result the following when solving for poolAmountOut:\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\n                uint256 _tokenPoolAmountOut =\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\n\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\n                    _poolAmountOut = _tokenPoolAmountOut;\\n                }\\n            }\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\n        }\\n\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\n\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\n\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\n        _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            _balances[i] = _token.balanceOf(address(this));\\n            if (_balances[i] > 0) {\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\n            }\\n        }\\n\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_collateralIn),\\n            int256(_poolAmountOut),\\n            _balances\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _lpTokensIn,\\n        uint256 _minCollateralOut,\\n        address _collateralRecipient\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\n\\n        uint256[] memory exitPoolEstimate;\\n        {\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\n        }\\n\\n        // Find the number of sets to sell.\\n        uint256 _setsToSell = MAX_UINT;\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\n        }\\n\\n        // Must be a multiple of share factor.\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\n\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\n        if (_resolved) {\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\n        } else {\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\n        }\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\n\\n        // Transfer the remaining shares back to _collateralRecipient.\\n        _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\n            if (_balances[i] > 0) {\\n                _token.transfer(_collateralRecipient, _balances[i]);\\n            }\\n        }\\n\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _collateralRecipient,\\n            int256(_collateralOut),\\n            -int256(_lpTokensIn),\\n            _balances\\n        );\\n    }\\n\\n\\n    function buyZCB(\\n        AbstractMarketFactoryV3 _marketFactory, \\n        address from, \\n        address bondingcurve, \\n        uint256 _marketId, \\n        uint256 _collateralIn\\n        ) external returns(uint256){\\n\\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(from, address(this), _collateralIn);\\n        _collateral.approve(bondingcurve, _collateralIn); \\n\\n        return IBondingCurve(bondingcurve).buy(address(_marketFactory), from, _collateralIn, _marketId);\\n    }\\n\\n    function sellZCB(\\n        AbstractMarketFactoryV3 _marketFactory, \\n        address from, \\n        address bondingcurve, \\n        uint256 _marketId, \\n        uint256 _zcb_amountIn\\n        ) external returns(uint256){\\n\\n        uint256 fee_deducted_collateral_out = IBondingCurve(bondingcurve).sell(\\n            address(_marketFactory),\\n            from, \\n            _zcb_amountIn, \\n             _marketId); \\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transfer(from, fee_deducted_collateral_out); \\n\\n        return fee_deducted_collateral_out; \\n    }\\n\\n\\n    function buy(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _outcome,\\n        uint256 _collateralIn,\\n        uint256 _minTokensOut\\n    ) external returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        uint256 _totalDesiredOutcome = _sets;\\n        {\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\n\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                if (i == _outcome) continue;\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                (uint256 _acquiredToken, ) =\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\n                _totalDesiredOutcome += _acquiredToken;\\n            }\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\n\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\n        }\\n\\n        emit SharesSwapped(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _outcome,\\n            -int256(_collateralIn),\\n            int256(_totalDesiredOutcome),\\n            bdiv(_sets, _totalDesiredOutcome)\\n        );\\n\\n        return _totalDesiredOutcome;\\n    }\\n\\n    function sellForCollateral(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _outcome,\\n        uint256[] memory _shareTokensIn,\\n        uint256 _minSetsOut\\n    ) external returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        uint256 _setsOut = MAX_UINT;\\n        uint256 _totalUndesiredTokensIn = 0;\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\n        }\\n\\n        {\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\n\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                if (i == _outcome) continue;\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                (uint256 tokenAmountOut, ) =\\n                    _pool.swapExactAmountIn(\\n                        address(_market.shareTokens[_outcome]),\\n                        _shareTokensIn[i],\\n                        address(_token),\\n                        0,\\n                        MAX_UINT\\n                    );\\n\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\n            }\\n\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\n        }\\n\\n        // Transfer undesired token balance back.\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            uint256 _balance = _token.balanceOf(address(this));\\n            if (_balance > 0) {\\n                _token.transfer(msg.sender, _balance);\\n            }\\n        }\\n\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\n        emit SharesSwapped(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _outcome,\\n            int256(_collateralOut),\\n            -int256(_totalUndesiredTokensIn),\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\n        );\\n\\n        return _collateralOut;\\n    }\\n\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\n    // So the first outcome is 10**18 and all others are higher or lower.\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        address _basisToken = address(_market.shareTokens[0]);\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\n        _ratios[0] = 10**18;\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\n            _ratios[i] = _price;\\n        }\\n        return _ratios;\\n    }\\n\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        address[] memory _tokens = _pool.getCurrentTokens();\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\n        }\\n        return _balances;\\n    }\\n\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        address[] memory _tokens = _pool.getCurrentTokens();\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\n        }\\n        return _weights;\\n    }\\n\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        return _pool.getSwapFee();\\n    }\\n\\n    function getPoolTokenBalance(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _user\\n    ) external view returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        return _pool.balanceOf(_user);\\n    }\\n\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\n        return pools[address(_marketFactory)][_marketId];\\n    }\\n}\\n\",\"keccak256\":\"0x1a997b0a568cb0ca711ae3b541f09269cc1b75b066aadce15324d6c423b9c309\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/Rewardable.sol\\\";\\nimport { LinearBondingCurve } from \\\"../bonds/LinearBondingCurve.sol\\\";\\n\\nabstract contract AbstractMarketFactoryV3 is ZCBFactory, TurboShareTokenFactory, Ownable, Rewardable {\\n    using SafeMath for uint256;\\n\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\n    event MarketActivated(uint256 id);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(\\n        uint256 id,\\n        address winningOutcome,\\n        uint256 winningIndex,\\n        string winningName,\\n        uint256 amount,\\n        uint256 settlementFee,\\n        uint256 payout,\\n        address indexed receiver\\n    );\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        OwnedERC20 winner;\\n        uint256 winnerIndex;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n        uint256 creationTimestamp;\\n        uint256 resolutionTimestamp; // when winner is declared\\n        uint256[] initialOdds;\\n        bool active; // false if not ready to use or if resolved\\n    }\\n\\n    Market[] internal markets;\\n    // ZCBMarket[] internal zcbmarkets; \\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\n    mapping(uint256 => bool ) inAssessment; \\n    mapping(uint256=> uint256) buy_thresholds;\\n\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees, // staker, settlement, protocol\\n        address _protocol\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _fees[0];\\n        settlementFee = _fees[1];\\n        protocolFee = _fees[2];\\n        protocol = _protocol;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\n        markets.push(makeEmptyMarket());\\n\\n        //FOR TESTING ONLY\\n        buy_thresholds[0] = MAX_UINT;\\n        buy_thresholds[1] = MAX_UINT; \\n        buy_thresholds[2] = MAX_UINT; \\n    }\\n        \\n\\n   // function quantityAvailable(uint256 marketId)\\n\\n    //Called by lendingpool when market is created i.e , and when loan is approved \\n    function handleAssessment(uint256 _marketId, bool startAssessing) \\n    external\\n    //onlyController\\n     {\\n        bool market_inAssessment = startAssessing? true : false; \\n        inAssessment[_marketId] = market_inAssessment; \\n    }\\n    function handleOnlyReputable(uint256 _marketId)\\n    external \\n    //onlyController\\n    {\\n\\n    }\\n    //Called by controller after assessment phase \\n    function set_buy_threshold(uint256 _marketId, uint256 threshold)\\n    external \\n    //onlyController\\n    {\\n        buy_thresholds[_marketId] = threshold;\\n    }\\n\\n    function get_buy_threshold(uint256 _marketId) external view returns(uint256){\\n        return buy_thresholds[_marketId]; \\n    }\\n    function isInAssessment(uint256 _marketId) external view returns(bool){\\n        return inAssessment[_marketId]; \\n    }\\n\\n    function onlyReputable(uint256 _marketId) external view returns(bool){\\n        return false;\\n    }\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\n\\n    }\\n\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\n        return TradeDetails[_marketId][_outcome]; \\n    }\\n\\n\\n\\n\\n    // Returns an empty struct if the market doesn't exist.\\n    // Can check market existence before calling this by comparing _id against markets.length.\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n            return makeEmptyMarket();\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length; //+ zcbmarkets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\n\\n        accumulatedProtocolFee += _protocolFee;\\n        collateral.transfer(_receiver, _payout);\\n        feePot.depositFees(_stakerFee);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee);\\n\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\n        collateral.transfer(_receiver, _payout);\\n\\n        uint256 _winningIndex = _market.winnerIndex;\\n        string memory _winningName = _market.winner.name();\\n\\n        emit WinningsClaimed(\\n            _id,\\n            address(_market.winner),\\n            _winningIndex,\\n            _winningName,\\n            _winningShares,\\n            _settlementFee,\\n            _payout,\\n            _receiver\\n        );\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        if (_fees > 0) {\\n            accumulatedSettlementFees[msg.sender] = 0;\\n            collateral.transfer(_receiver, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this));\\n        uint256 _fees = accumulatedProtocolFee;\\n        if (_fees > 0) {\\n            accumulatedProtocolFee = 0;\\n            collateral.transfer(protocol, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n    }\\n\\n\\n    function startMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        uint256[] memory _initialOdds,\\n        bool _active\\n    ) internal returns (uint256 _marketId) {\\n        _marketId = markets.length;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                createShareTokens(_names, address(this)),\\n                OwnedERC20(address(0)),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                0,\\n                _initialOdds,\\n                _active\\n            )\\n        );\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n    }\\n       \\n    \\n    function activateMarket(uint256 _marketId) internal {\\n        markets[_marketId].active = true;\\n        emit MarketActivated(_marketId);\\n    }\\n\\n    function makeEmptyMarket() private pure returns (Market memory) {\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\n        uint256[] memory _initialOdds = new uint256[](0);\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\n    }\\n\\n\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\n        Market storage _market = markets[_marketId];\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\n\\n        _market.winner = _winner;\\n        _market.active = false;\\n        _market.winnerIndex = _winningOutcome;\\n        _market.resolutionTimestamp = block.timestamp;\\n        string memory _outcomeName = _winner.name();\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(address(0));\\n    }\\n\\n    // shares => collateral\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n\\n    /**\\n     @notice \\n     */\\n    function startZCBMarket(\\n        address _settlementAddress,\\n        uint256[] memory _initialOdds,\\n        bool _active,\\n        OwnedERC20 _zcb\\n    ) internal returns (uint256 _marketId){\\n\\n        _marketId = markets.length;\\n        OwnedERC20[] memory zcb = new OwnedERC20[](2);\\n        zcb[0] = _zcb;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                zcb,\\n                OwnedERC20(address(0)),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                0,\\n                _initialOdds,\\n                _active\\n                )\\n            );\\n\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n\\n    }\\n\\n    function getZCBMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n           revert(\\\"Market Not Activated\\\");\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x588a32fb6d409f773411fd82d8024adfacc083ad9a9267aaa47a9d5530361346\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(address(0)));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35a2aa230007983b91a3bf432412cb3f3d497464e911e5c640a6d541f612f8a8\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external virtual onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external virtual onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xffd1670bd35f6feb4de1aa683a23c171031666e4356cff6f7c93df6d2aa5b78c\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\n\\n\\nabstract contract ZCBFactory {\\n    function createZCB(string memory _name, address _owner) internal returns(OwnedERC20[] memory){\\n        uint256 _numOutcomes = 1; \\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_name, _name, _owner);\\n        }\\n        return _tokens; \\n    }\\n}\\n\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\\nabstract contract TurboShareTokenFactoryV1 {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0xa089ab77c0ac34afa00ff09eab3aa7da9ec009c2def9f44ad5ffb86150f53069\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fb5760003560e01c80639342c8f41161011a578063c36596a6116100ad578063e2bbb1581161007c578063e2bbb15814610575578063eb97ed9614610588578063f2fde38b1461059b578063fd1b192e146105ae578063fe04b549146105c157600080fd5b8063c36596a614610498578063d20122e0146104a7578063d8c08b87146104f7578063dcc2b3611461050a57600080fd5b8063af9551f7116100e9578063af9551f71461043e578063b0f7932614610451578063b453d9b514610472578063c0e3ee6b1461048557600080fd5b80639342c8f41461037057806393f1a40b146103835780639d5dda8f146103d45780639f7bc32c146103e757600080fd5b806351eb05a611610192578063715018a611610161578063715018a6146103195780638448fd2c1461032157806388b52b4a146103345780638da5cb5b1461035f57600080fd5b806351eb05a6146102e35780635312ea8e146102f65780636142da6414610309578063630b5ba11461031157600080fd5b80632af3420e116101ce5780632af3420e146102975780632f4064db146102aa5780633437586b146102bd578063441a3e70146102d057600080fd5b8063081e3eda146102005780631526fe27146102175780632137eacf1461026f57806326dde4f814610284575b600080fd5b6002545b6040519081526020015b60405180910390f35b61022a6102253660046132d4565b6105d4565b604080516001600160a01b0390991689526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161020e565b61028261027d3660046130aa565b610634565b005b610204610292366004613044565b6106b7565b6102046102a53660046132d4565b6107bc565b6102826102b83660046130aa565b610853565b6102046102cb366004613304565b6108c6565b6102826102de366004613378565b6108f0565b6102826102f13660046132d4565b610947565b6102826103043660046132d4565b610a63565b610204610b1a565b610282610b30565b610282610b57565b61020461032f3660046130ef565b610b6b565b610347610342366004613044565b6110eb565b6040516001600160a01b03909116815260200161020e565b6000546001600160a01b0316610347565b61028261037e3660046132d4565b611182565b6103b9610391366004613304565b6001602081815260009384526040808520909152918352912080549181015460029091015483565b6040805193845260208401929092529082015260600161020e565b6102046103e2366004612f96565b61120e565b6103fa6103f5366004613044565b61122f565b60405161020e9190600060a0820190508251825260208301516020830152604083015160408301526060830151606083015260808301511515608083015292915050565b61028261044c366004612f3a565b611357565b61046461045f36600461314d565b611383565b60405161020e9291906134b6565b6102046104803660046132d4565b611985565b61046461049336600461314d565b6119c4565b610204670de0b6b3a764000081565b6104e26104b5366004612f56565b60046020908152600093845260408085208252928452828420905282529020805460019091015460ff1682565b6040805192835290151560208301520161020e565b610282610505366004612ff0565b611bff565b61051d610518366004613058565b611d3b565b60405161020e9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151151560c083015292915050565b610282610583366004613378565b611ff5565b610282610596366004612f3a565b612049565b6102826105a9366004612f3a565b612072565b6102046105bc3660046132d4565b6120eb565b6102046105cf366004613058565b6121a1565b600281815481106105e457600080fd5b6000918252602090912060089091020180546001820154600283015460038401546004850154600586015460068701546007909701546001600160a01b0390961697509395929491939092909188565b6001600160a01b03808516600090815260046020908152604080832093871683529281528282208583528152908290208251808401909352805483526001015460ff1615159082018190526106a45760405162461bcd60e51b815260040161069b90613475565b60405180910390fd5b80516106b09083611ff5565b5050505050565b6001600160a01b038084166000908152600460209081526040808320938616835292815282822084835281528282208351808501909452805480855260019091015460ff1615159184019190915260028054929392909190811061072b57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060089091020154604080516318160ddd60e01b815290516001600160a01b03909216926318160ddd92600480840193829003018186803b15801561077957600080fd5b505afa15801561078d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b191906132ec565b9150505b9392505050565b600080600283815481106107e057634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201905060008160030154826004015461080691906135a5565b6003830154909150670de0b6b3a7640000610822600a82613566565b61082c9084613586565b6108369190613566565b610840919061354e565b61084b90600161354e565b949350505050565b6001600160a01b03808516600090815260046020908152604080832093871683529281528282208583528152908290208251808401909352805483526001015460ff1615159082018190526108ba5760405162461bcd60e51b815260040161069b90613475565b80516106b090836108f0565b60008281526001602090815260408083206001600160a01b03851684529091529020545b92915050565b6108fc3383833361222b565b61094333826002858154811061092257634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201546001600160a01b031691906124b7565b5050565b60006002828154811061096a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060080201905080600601544211610989575050565b80546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0491906132ec565b905080610a1657504260069091015550565b6000610a21846120eb565b9050610a52610a4783610a4186600701548561251290919063ffffffff16565b9061251e565b60018501549061252a565b600184015550504260069091015550565b600060028281548110610a8657634e487b7160e01b600052603260045260246000fd5b60009182526020808320858452600182526040808520338087529352909320805460089093029093018054909450610acb926001600160a01b039190911691906124b7565b8054604051908152839033907fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959060200160405180910390a36000808255600182018190556002909101555050565b610b2d600a670de0b6b3a7640000613566565b81565b60025460005b8181101561094357610b4781610947565b610b50816135e8565b9050610b36565b610b5f612536565b610b696000612590565b565b6000846001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba657600080fd5b505afa158015610bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bde91906131b3565b6040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b0391909116906323b872dd90606401602060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c66919061302a565b50846001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd891906131b3565b6001600160a01b031663095ea7b387856040518363ffffffff1660e01b8152600401610d05929190613429565b602060405180830381600087803b158015610d1f57600080fd5b505af1158015610d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d57919061302a565b5060405163210a603d60e21b81526001600160a01b03868116600483015260248201869052604482018590523060648301526000919088169063842980f490608401602060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb91906132ec565b90506000876001600160a01b0316635b5b9ea288886040518363ffffffff1660e01b8152600401610e1d929190613429565b60206040518083038186803b158015610e3557600080fd5b505afa158015610e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6d91906131b3565b90506000610efb898989858c6001600160a01b03166342e0ed168d6040518263ffffffff1660e01b8152600401610ea691815260200190565b60206040518083038186803b158015610ebe57600080fd5b505afa158015610ed2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef691906132ec565b6125e0565b9050610f088582856128ec565b60405163eb44fdd360e01b8152600481018890526000906001600160a01b038a169063eb44fdd39060240160006040518083038186803b158015610f4b57600080fd5b505afa158015610f5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f8791908101906131cf565b9050600081602001515167ffffffffffffffff811115610fb757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fe0578160200160208202803683370190505b50905060005b82602001515181101561103257600082828151811061101557634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061102a816135e8565b915050610fe6565b50604080513381526001600160a01b0389811660208301528b92818e1692918f16917ffb27591822deac7913ea973cf845992f243e2ba5634ef8fbe0b6554aca37a428910160405180910390a4888a6001600160a01b03168c6001600160a01b03167f3f11bf8bba7d372ab2f25e364c99d8205f7d41bd6891af0a1e7adc6f9b2b20ca338b8d6110c190613603565b8b886040516110d49594939291906133ef565b60405180910390a450929998505050505050505050565b6001600160a01b038084166000908152600460209081526040808320938616835292815282822084835281528282208351808501909452805480855260019091015460ff1615159184019190915260028054929392909190811061115f57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201546001600160a01b031695945050505050565b61118a612536565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906111bc9033908590600401613429565b602060405180830381600087803b1580156111d657600080fd5b505af11580156111ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610943919061302a565b6000611218612536565b61122586868686866125e0565b9695505050505050565b6112636040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03808516600090815260046020908152604080832093871683529281528282208583528152908290208251808401909352805483526001015460ff161580159183019190915261134f57600060028260000151815481106112db57634e487b7160e01b600052603260045260246000fd5b60009182526020918290206003600890920201908101548552600481015491850191909152825190915061130e906107bc565b604084015260078101546003820154600483015461132d904290612ac2565b61133791906135a5565b6113419190613586565b606084015250600160808301525b509392505050565b61135f612536565b6001600160a01b03166000908152600660205260409020805460ff19166001179055565b6001600160a01b038087166000908152600460209081526040808320938916835292815282822087835281528282208351808501909452805480855260019091015460ff161515918401829052919260609290916114e157604051632dadcf5160e11b81526000906001600160a01b038c1690635b5b9ea29061140c908d908d90600401613429565b60206040518083038186803b15801561142457600080fd5b505afa158015611438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145c91906131b3565b90506001600160a01b0381166114a85760405162461bcd60e51b81526020600482015260116024820152702837b7b6103737ba1031b932b0ba32b21760791b604482015260640161069b565b6114dd8b8b8b848e6001600160a01b03166342e0ed168f6040518263ffffffff1660e01b8152600401610ea691815260200190565b9150505b886001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561151a57600080fd5b505afa15801561152e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155291906131b3565b6040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b0391909116906323b872dd90606401602060405180830381600087803b1580156115a257600080fd5b505af11580156115b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115da919061302a565b50886001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561161457600080fd5b505afa158015611628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164c91906131b3565b6001600160a01b031663095ea7b38b896040518363ffffffff1660e01b8152600401611679929190613429565b602060405180830381600087803b15801561169357600080fd5b505af11580156116a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cb919061302a565b506040516345fa678360e01b81526001600160a01b038a81166004830152602482018a905260448201899052606482018890523060848301528b16906345fa67839060a401600060405180830381600087803b15801561172a57600080fd5b505af115801561173e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117669190810190613333565b60405163eb44fdd360e01b8152600481018b905291955093506000906001600160a01b038b169063eb44fdd39060240160006040518083038186803b1580156117ae57600080fd5b505afa1580156117c2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117ea91908101906131cf565b905060005b845181101561190e57600085828151811061181a57634e487b7160e01b600052603260045260246000fd5b602002602001015111156118fc578160200151818151811061184c57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663a9059cbb8887848151811061188357634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016118a8929190613429565b602060405180830381600087803b1580156118c257600080fd5b505af11580156118d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118fa919061302a565b505b80611906816135e8565b9150506117ef565b5061191a8683876128ec565b888a6001600160a01b03168c6001600160a01b03167f3f11bf8bba7d372ab2f25e364c99d8205f7d41bd6891af0a1e7adc6f9b2b20ca338a8d61195c90613603565b8b8b60405161196f9594939291906133ef565b60405180910390a4505050965096945050505050565b600080600283815481106119a957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600460089092020101549392505050565b6001600160a01b038087166000908152600460209081526040808320938916835292815282822087835281528282208351808501909452805484526001015460ff1615159083018190529091606091611a2f5760405162461bcd60e51b815260040161069b90613475565b611a3f338260000151888761222b565b60006002826000015181548110611a6657634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201805460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b390611aa8908d908b90600401613429565b602060405180830381600087803b158015611ac257600080fd5b505af1158015611ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afa919061302a565b50604051632cfc215960e11b81526001600160a01b038a81166004830152602482018a9052604482018990526064820188905286811660848301528b16906359f842b29060a401600060405180830381600087803b158015611b5b57600080fd5b505af1158015611b6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611b979190810190613333565b9094509250876001600160a01b03808b16908c167f3f11bf8bba7d372ab2f25e364c99d8205f7d41bd6891af0a1e7adc6f9b2b20ca338989611bd88e613603565b8a604051611bea9594939291906133ef565b60405180910390a45050965096945050505050565b611c07612536565b600060036000866001600160a01b03166001600160a01b031681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060405180606001604052808381526020018481526020018581525060036000876001600160a01b03166001600160a01b03168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155905050846001600160a01b03167fe306af96e1d2ee556327ede5cfbae9786f190dd64b7948e676453e607cc73f4982600001518360200151846040015186888a604051611d2c96959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60405180910390a25050505050565b611d7d6040518060e001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6001600160a01b03808616600090815260046020908152604080832093881683529281528282208683528152908290208251808401909352805483526001015460ff1615801591830191909152611fec5760006002826000015181548110611df557634e487b7160e01b600052603260045260246000fd5b6000918252602080832085518452600180835260408086206001600160a01b038b81168852945280862060089590950290920190810154815492516370a0823160e01b815230600482015291965093949291909116906370a082319060240160206040518083038186803b158015611e6c57600080fd5b505afa158015611e80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea491906132ec565b9050600084600301548560040154611ebc91906135a5565b600160c089015260038601548852600486015460208901528651909150611ee2906107bc565b60408801819052600285015411611f5f5760008560020154118015611f0a5750866020015142115b15611f3457600285015484546005870154611f2a9291610a419190612512565b6080880152611f5f565b600285015415611f5f57600285015484546005870154611f599291610a419190612512565b60a08801525b846006015442118015611f7157508115155b15611fb0576000611f8587600001516120eb565b9050611fac611fa584610a4189600701548561251290919063ffffffff16565b859061252a565b9350505b611fe18460010154611fdb670de0b6b3a7640000610a4187896000015461251290919063ffffffff16565b90612ad9565b606088015250505050505b50949350505050565b6120003383836128ec565b6109433330836002868154811061202757634e487b7160e01b600052603260045260246000fd5b60009182526020909120600890910201546001600160a01b0316929190612ae5565b612051612536565b6001600160a01b03166000908152600660205260409020805460ff19169055565b61207a612536565b6001600160a01b0381166120df5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161069b565b6120e881612590565b50565b6000806002838154811061210f57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802019050600042905080826003015411806121395750808260060154115b8061214657506007820154155b15612155575060009392505050565b816004015482600601541061216e575060009392505050565b61084b670de0b6b3a764000061219b60016121958660060154611fdb878960040154612ac2565b9061252a565b90612512565b6001600160a01b038085166000908152600460209081526040808320938716835292815282822085835281528282208351808501909452805484526001015460ff161580159184019190915290919061221f575160009081526001602090815260408083206001600160a01b0386168452909152902054905061084b565b50600095945050505050565b60006002848154811061224e57634e487b7160e01b600052603260045260246000fd5b600091825260208083208784526001825260408085206001600160a01b038b16865290925292208054600890920290920192508411156122c55760405162461bcd60e51b81526020600482015260126024820152711dda5d1a191c985dce881b9bdd0819dbdbd960721b604482015260640161069b565b6122ce85610947565b6000826003015483600401546122e491906135a5565b905060008360030154670de0b6b3a7640000600a670de0b6b3a764000061230b9190613566565b6123159085613586565b61231f9190613566565b612329919061354e565b61233490600161354e565b90506000846003015483612348919061354e565b61235390600161354e565b90504281116123b15760008560020154118015612374575081846002015411155b156123ac57600061239e8660020154610a418760000154896005015461251290919063ffffffff16565b90506123aa8a82612b23565b505b6123f2565b4282106123d15760028501546123c79088612ad9565b60028601556123f2565b836002015482106123f257835460028601546123ec91612ad9565b60028601555b60006124238560010154611fdb670de0b6b3a7640000610a418a600101548a6000015461251290919063ffffffff16565b905061242f8782612b23565b845461243b9089612ad9565b808655600187015461245b91670de0b6b3a764000091610a419190612512565b6001860155426002860155604080518981526001600160a01b03891660208201528a9133917f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec2132910160405180910390a350505050505050505050565b61250d8363a9059cbb60e01b84846040516024016124d6929190613429565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c5f565b505050565b60006107b58284613586565b60006107b58284613566565b60006107b5828461354e565b6000546001600160a01b03163314610b695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038086166000908152600460209081526040808320938816835292815282822086835290529081206001015460ff16156126715760405162461bcd60e51b815260206004820152602560248201527f52657761726420706f6f6c2068617320616c7265616479206265656e2063726560448201526430ba32b21760d91b606482015260840161069b565b6001600160a01b03861660009081526006602052604090205460ff166126ec5760405162461bcd60e51b815260206004820152602a60248201527f414d4d466163746f7279206d75737420626520617070726f76656420746f20636044820152691c99585d19481c1bdbdb60b21b606482015260840161069b565b5060028054604080518082018252828152600160208083018281526001600160a01b038c8116600090815260048452868120918d168082529184528681208c82528452868120955186559151948401805460ff1916951515959095179094559283526003815283832084516060810186528154815292810154918301829052909501549281019290925291929091906127889062015180613586565b90504284156127a05761279d610e10866135a5565b94505b846127b6576127af828261354e565b94506127e2565b426127c183876135a5565b11156127d8576127d182866135a5565b90506127e2565b8442106127e25750835b6002604051806101000160405280886001600160a01b031681526020016000815260200160008152602001838152602001878152602001838861282591906135a5565b8651612835906201518090613566565b61283f9190613586565b815260200183815260200162015180866040015161285d9190613566565b90528154600180820184556000938452602093849020835160089093020180546001600160a01b0319166001600160a01b03909316929092178255928201519281019290925560408101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e001516007909101555091979650505050505050565b60006002838154811061290f57634e487b7160e01b600052603260045260246000fd5b600091825260208083208684526001825260408085206001600160a01b038a16865290925292206008909102909101915061294984610947565b80541561298f5760006129818260010154611fdb670de0b6b3a7640000610a418760010154876000015461251290919063ffffffff16565b905061298d8682612b23565b505b6000826003015483600401546129a591906135a5565b905060008360030154670de0b6b3a7640000600a670de0b6b3a76400006129cc9190613566565b6129d69085613586565b6129e09190613566565b6129ea919061354e565b6129f590600161354e565b90508042118015612a0a575080836002015411155b15612a255782546002850154612a1f91612ad9565b60028501555b42811115612a42576002840154612a3c908661252a565b60028501555b8254612a4e908661252a565b8084556001850154612a6e91670de0b6b3a764000091610a419190612512565b600184015542600284015560405185815286906001600160a01b038916907f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159060200160405180910390a350505050505050565b6000818311612ad25750816108ea565b50806108ea565b60006107b582846135a5565b6040516001600160a01b0380851660248301528316604482015260648101829052612b1d9085906323b872dd60e01b906084016124d6565b50505050565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612b6757600080fd5b505afa158015612b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b9f91906132ec565b905080821115612c2d5760055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612bdb9086908590600401613429565b602060405180830381600087803b158015612bf557600080fd5b505af1158015612c09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1d919061302a565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90612bdb9086908690600401613429565b6000612cb4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d319092919063ffffffff16565b80519091501561250d5780806020019051810190612cd2919061302a565b61250d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161069b565b606061084b8484600085856001600160a01b0385163b612d935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161069b565b600080866001600160a01b03168587604051612daf91906133d3565b60006040518083038185875af1925050503d8060008114612dec576040519150601f19603f3d011682016040523d82523d6000602084013e612df1565b606091505b5091509150612e01828286612e0c565b979650505050505050565b60608315612e1b5750816107b5565b825115612e2b5782518084602001fd5b8160405162461bcd60e51b815260040161069b9190613442565b8051612e5081613649565b919050565b600082601f830112612e65578081fd5b81516020612e7a612e758361352a565b6134f9565b80838252828201915082860187848660051b8901011115612e99578586fd5b855b85811015612ec0578151612eae81613649565b84529284019290840190600101612e9b565b5090979650505050505050565b600082601f830112612edd578081fd5b81516020612eed612e758361352a565b80838252828201915082860187848660051b8901011115612f0c578586fd5b855b85811015612ec057815184529284019290840190600101612f0e565b80518015158114612e5057600080fd5b600060208284031215612f4b578081fd5b81356107b581613649565b600080600060608486031215612f6a578182fd5b8335612f7581613649565b92506020840135612f8581613649565b929592945050506040919091013590565b600080600080600060a08688031215612fad578081fd5b8535612fb881613649565b94506020860135612fc881613649565b9350604086013592506060860135612fdf81613649565b949793965091946080013592915050565b60008060008060808587031215613005578384fd5b843561301081613649565b966020860135965060408601359560600135945092505050565b60006020828403121561303b578081fd5b6107b582612f2a565b600080600060608486031215612f6a578283fd5b6000806000806080858703121561306d578182fd5b843561307881613649565b9350602085013561308881613649565b925060408501359150606085013561309f81613649565b939692955090935050565b600080600080608085870312156130bf578182fd5b84356130ca81613649565b935060208501356130da81613649565b93969395505050506040820135916060013590565b600080600080600060a08688031215613106578283fd5b853561311181613649565b9450602086013561312181613649565b93506040860135925060608601359150608086013561313f81613649565b809150509295509295909350565b60008060008060008060c08789031215613165578384fd5b863561317081613649565b9550602087013561318081613649565b945060408701359350606087013592506080870135915060a08701356131a581613649565b809150509295509295509295565b6000602082840312156131c4578081fd5b81516107b581613649565b6000602082840312156131e0578081fd5b815167ffffffffffffffff808211156131f7578283fd5b90830190610160828603121561320b578283fd5b6132136134cf565b61321c83612e45565b815260208301518281111561322f578485fd5b61323b87828601612e55565b60208301525061324d60408401612e45565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151838111156132a3578586fd5b6132af88828701612ecd565b82840152505061014091506132c5828401612f2a565b91810191909152949350505050565b6000602082840312156132e5578081fd5b5035919050565b6000602082840312156132fd578081fd5b5051919050565b60008060408385031215613316578182fd5b82359150602083013561332881613649565b809150509250929050565b60008060408385031215613345578182fd5b82519150602083015167ffffffffffffffff811115613362578182fd5b61336e85828601612ecd565b9150509250929050565b6000806040838503121561338a578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b838110156133c8578151875295820195908201906001016133ac565b509495945050505050565b600082516133e58184602087016135bc565b9190910192915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612e0190830184613399565b6001600160a01b03929092168252602082015260400190565b60208152600082518060208401526134618160408501602087016135bc565b601f01601f19169190910160400192915050565b60208082526021908201527f52657761726420706f6f6c20686173206e6f74206265656e20637265617465646040820152601760f91b606082015260800190565b82815260406020820152600061084b6040830184613399565b604051610160810167ffffffffffffffff811182821017156134f3576134f3613633565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561352257613522613633565b604052919050565b600067ffffffffffffffff82111561354457613544613633565b5060051b60200190565b600082198211156135615761356161361d565b500190565b60008261358157634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156135a0576135a061361d565b500290565b6000828210156135b7576135b761361d565b500390565b60005b838110156135d75781810151838201526020016135bf565b83811115612b1d5750506000910152565b60006000198214156135fc576135fc61361d565b5060010190565b6000600160ff1b8214156136195761361961361d565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146120e857600080fdfea264697066735822122083a3ce492c9515457bbefc06da6196eebaf96b7ac1613e78403ebd62b53a5c3c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1062,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18887,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)18880_storage))"
      },
      {
        "astId": 18909,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(PoolInfo)18905_storage)dyn_storage"
      },
      {
        "astId": 18947,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "marketFactoryRewardInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(MarketFactoryInfo)18942_storage)"
      },
      {
        "astId": 18961,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "rewardPoolLookup",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(RewardPoolLookupInfo)18952_storage)))"
      },
      {
        "astId": 18964,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "rewardsToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)1871"
      },
      {
        "astId": 18968,
        "contract": "contracts/rewards/MasterChef.sol:MasterChef",
        "label": "approvedAMMFactories",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)18905_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)18905_storage",
        "encoding": "dynamic_array",
        "label": "struct MasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1871": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_struct(RewardPoolLookupInfo)18952_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => struct MasterChef.RewardPoolLookupInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RewardPoolLookupInfo)18952_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(RewardPoolLookupInfo)18952_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct MasterChef.RewardPoolLookupInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(RewardPoolLookupInfo)18952_storage)"
      },
      "t_mapping(t_address,t_struct(MarketFactoryInfo)18942_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.MarketFactoryInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketFactoryInfo)18942_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)18880_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)18880_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)18880_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct MasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)18880_storage)"
      },
      "t_mapping(t_uint256,t_struct(RewardPoolLookupInfo)18952_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MasterChef.RewardPoolLookupInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardPoolLookupInfo)18952_storage"
      },
      "t_struct(MarketFactoryInfo)18942_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.MarketFactoryInfo",
        "members": [
          {
            "astId": 18937,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "earlyDepositBonusRewards",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18939,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "rewardsPeriods",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18941,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "rewardsPerPeriod",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)18905_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.PoolInfo",
        "members": [
          {
            "astId": 18890,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1871"
          },
          {
            "astId": 18892,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "accRewardsPerShare",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18894,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "totalEarlyDepositBonusRewardShares",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18896,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "beginTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18898,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18900,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "earlyDepositBonusRewards",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18902,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 18904,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "rewardsPerSecond",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(RewardPoolLookupInfo)18952_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.RewardPoolLookupInfo",
        "members": [
          {
            "astId": 18949,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "pid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18951,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)18880_storage": {
        "encoding": "inplace",
        "label": "struct MasterChef.UserInfo",
        "members": [
          {
            "astId": 18875,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18877,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18879,
            "contract": "contracts/rewards/MasterChef.sol:MasterChef",
            "label": "lastActionTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}