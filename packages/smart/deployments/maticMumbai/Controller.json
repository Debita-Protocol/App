{
  "address": "0x10F3BcF56c012d46B04C9C7C7FFEeb332C25684D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interep_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "MarketInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ad_to_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "approveMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "beforeResolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "checkInstrument",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_onlyVerified",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_asset_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_total_asset_limit",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "N",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "sigma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "omega",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            }
          ],
          "internalType": "struct MarketManager.MarketParameters",
          "name": "default_params",
          "type": "tuple"
        }
      ],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "denyMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "emergency",
          "type": "bool"
        }
      ],
      "name": "forceCloseInstrument",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getApprovalData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "approved_principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "approved_yield",
              "type": "uint256"
            }
          ],
          "internalType": "struct Controller.ApprovalData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getMarketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getMarketIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getVaultAd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultfromId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "id_parent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "trusted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "faceValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedYield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "Instrument_address",
              "type": "address"
            },
            {
              "internalType": "enum Vault.InstrumentType",
              "name": "instrument_type",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            }
          ],
          "internalType": "struct Vault.InstrumentData",
          "name": "instrumentData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "initiateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketIdToVaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketId_to_vaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "market_data",
      "outputs": [
        {
          "internalType": "address",
          "name": "instrument_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "mintRepNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "redeem_mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "redeem_transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "resolveMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketManager",
          "type": "address"
        }
      ],
      "name": "setMarketManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "NFT_address",
          "type": "address"
        }
      ],
      "name": "setReputationNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "setVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testVerifyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "increment",
          "type": "bool"
        }
      ],
      "name": "updateReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vault_debt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vault_to_marketIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nullifier_hash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "external_nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea7f4d316b1b5e907e3ea58cb4b56db6f590147dcb41f61bdb8c25927f7d264c",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0x10F3BcF56c012d46B04C9C7C7FFEeb332C25684D",
    "transactionIndex": 0,
    "gasUsed": "9609423",
    "logsBloom": "0x
    "blockHash": "0xc806d7eda4921d30273015e349704ad01b1699b3ac31f5767c1aef0a467d26bc",
    "transactionHash": "0xea7f4d316b1b5e907e3ea58cb4b56db6f590147dcb41f61bdb8c25927f7d264c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 28450220,
        "transactionHash": "0xea7f4d316b1b5e907e3ea58cb4b56db6f590147dcb41f61bdb8c25927f7d264c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001556531641890ae0000000000000000000000000000000000000000000000025a468c32cdde1f67000000000000000000000000000000000000000000000995ada2655dc0be628b00000000000000000000000000000000000000000000000258f1270169c58eb9000000000000000000000000000000000000000000000995aef7ca8f24d6f339",
        "logIndex": 0,
        "blockHash": "0xc806d7eda4921d30273015e349704ad01b1699b3ac31f5767c1aef0a467d26bc"
      }
    ],
    "blockNumber": 28450220,
    "cumulativeGasUsed": "9609423",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xb1dA5d9AC4B125F521DeF573532e9DBb6395B925"
  ],
  "numDeployments": 9,
  "solcInputHash": "16dc79075d4ab3f83e464f67cd882f79",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interep_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MarketInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ad_to_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"approveMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"beforeResolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"checkInstrument\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_onlyVerified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_asset_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_asset_limit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"N\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sigma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"omega\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketManager.MarketParameters\",\"name\":\"default_params\",\"type\":\"tuple\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"denyMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"forceCloseInstrument\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getApprovalData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"approved_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approved_yield\",\"type\":\"uint256\"}],\"internalType\":\"struct Controller.ApprovalData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getMarketIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getVaultAd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultfromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"id_parent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Instrument_address\",\"type\":\"address\"},{\"internalType\":\"enum Vault.InstrumentType\",\"name\":\"instrument_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.InstrumentData\",\"name\":\"instrumentData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"initiateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketIdToVaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketId_to_vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"market_data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instrument_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"mintRepNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"redeem_mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"redeem_transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"resolveMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketManager\",\"type\":\"address\"}],\"name\":\"setMarketManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"NFT_address\",\"type\":\"address\"}],\"name\":\"setReputationNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testVerifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"increment\",\"type\":\"bool\"}],\"name\":\"updateReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vault_debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vault_to_marketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nullifier_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"external_nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkInstrument(uint256)\":{\"params\":{\"marketId\":\": called for anyone.\"}},\"createVault(address,bool,uint256,uint256,uint256,(uint32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_asset_limit\":\": max number of shares for a single address\",\"_onlyVerified\":\": only verified users can mint shares\",\"_r\":\": minimum reputation score to mint shares\",\"_total_asset_limit\":\": max number of shares for entire vault\",\"default_params\":\": default params for markets created by vault\",\"underlying\":\": underlying asset for vault\"}},\"forceCloseInstrument(uint256,bool)\":{\"details\":\"withdraws all balance from the instrument.  If assets in instrument is not in underlying, need all balances to be divested to underlying  Ideally this should be called by several validators, maybe implement a voting scheme and have a keeper call it.\",\"params\":{\"emergency\":\"ascribes cases where the instrument should be forcefully liquidated back to the vault\"}},\"initiateMarket(address,(bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256),uint256)\":{\"details\":\"Instrument should already be deployed \",\"params\":{\"instrumentData\":\": instrument arguments\",\"recipient\":\": utilizer for the associated instrument\",\"vaultId\":\": vault identifier\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveMarket(uint256)\":{\"notice\":\"called by the validator when market conditions are met need to move the collateral in the wCollateral to \"},\"beforeResolve(uint256)\":{\"notice\":\"Resolve function 1Prepare market/instrument for closing, called separately before resolveMarket exists to circumvent manipulations   \"},\"checkInstrument(uint256)\":{\"notice\":\"checks for maturity, resolve at maturity\"},\"createVault(address,bool,uint256,uint256,uint256,(uint32,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"creates vault\"},\"forceCloseInstrument(uint256,bool)\":{\"notice\":\"function that closes the instrument/market before maturity, maybe to realize gains/cut losses fast or debt is prematurely fully repaid, or underlying strategy is deemed dangerous, etc.  \"},\"initiateMarket(address,(bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256),uint256)\":{\"notice\":\"initiates market, called by frontend loan proposal or instrument form submit button.\"},\"redeem_mint(uint256,address,uint256)\":{\"notice\":\"deprecatedcalled when market is resolved \"},\"redeem_transfer(uint256,address,uint256)\":{\"notice\":\"called only when redeeming, transfer funds from vault \"},\"resolveMarket(uint256)\":{\"notice\":\"Resolve function 2main function called at maturity OR premature resolve of instrument(from early default) When market finishes at maturity, need to  1. burn all vault tokens in bc  2. mint all incoming redeeming vault tokens  Validators can call this function as they are incentivized to redeem any funds left for the instrument , irrespective of whether it is in profit or inloss. \"},\"updateReputation(uint256,address,bool)\":{\"notice\":\"when market is resolved(maturity/early default), calculates score and update each assessment phase trader's reputation, called by individual traders when redeeming \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@interep/contracts/IInterep.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title Interep interface.\\n/// @dev Interface of a Interep contract.\\ninterface IInterep {\\n    struct Verifier {\\n        address contractAddress;\\n        uint8 merkleTreeDepth;\\n    }\\n\\n    struct Group {\\n        bytes32 provider;\\n        bytes32 name;\\n        uint256 root;\\n        uint8 depth;\\n    }\\n\\n    /// @dev Emitted when a Semaphore proof is verified.\\n    /// @param groupId: Id of the group.\\n    /// @param signal: Semaphore signal.\\n    event ProofVerified(uint256 indexed groupId, bytes32 signal);\\n\\n    /// @dev Emitted when an Interep group is updated.\\n    /// @param groupId: Id of the group.\\n    /// @param provider: Provider of the group.\\n    /// @param name: Name of the group.\\n    /// @param root: Root hash of the tree.\\n    /// @param depth: Depth of the tree.\\n    event GroupUpdated(\\n        uint256 groupId,\\n        bytes32 indexed provider,\\n        bytes32 indexed name,\\n        uint256 root,\\n        uint8 indexed depth\\n    );\\n\\n    /// @dev Updates the Interep groups.\\n    /// @param groups: List of Interep groups.\\n    function updateGroups(Group[] calldata groups) external;\\n\\n    /// @dev Saves the nullifier hash to avoid double signaling and emits an event\\n    /// if the zero-knowledge proof is valid.\\n    /// @param groupId: Id of the group.\\n    /// @param signal: Semaphore signal.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    function verifyProof(\\n        uint256 groupId,\\n        bytes32 signal,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof\\n    ) external;\\n\\n    /// @dev Returns the root hash of an Interep group.\\n    /// @param groupId: Id of the group.\\n    /// @return Root hash of the group.\\n    function getRoot(uint256 groupId) external view returns (uint256);\\n\\n    /// @dev Returns the tree depth of an Interep group.\\n    /// @param groupId: Id of the group.\\n    /// @return Tree depth of the group.\\n    function getDepth(uint256 groupId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd3279ce9fbbb58b7567f66d18735f81df7e8ee61c677e9dd739d3a4823e31c5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/bonds/LinearBondingCurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {config} from \\\"../protocol/helpers.sol\\\"; \\n\\n/// @notice y = a * x + b\\n/// @dev all computations are done in WAD space, any conversion if needed should be made in the parent contract  \\n\\ncontract LinearBondingCurve is BondingCurve {\\n  // ASSUMES 18 TRAILING DECIMALS IN UINT256\\n  using FixedPointMathLib for uint256;\\n  uint256  a;\\n  uint256  b;\\n  uint256  discount_cap; // maximum number of tokens for \\n  uint256  b_initial; // b without discount cap \\n\\n  modifier _WAD_(uint256 amount) {\\n      require(config.isInWad(amount), \\\"Not in wad or below minimum amount\\\"); \\n      _;\\n  }\\n\\n  /// @param sigma is the proportion of P that is going to be bought at a discount\\n  /// param p,i,sigma all should be in WAD   \\n  constructor (\\n      string memory name,\\n      string memory symbol,\\n      address owner,\\n      address collateral, \\n      uint256 P, \\n      uint256 I,\\n      uint256 sigma\\n  ) BondingCurve(name, symbol, owner, collateral)_WAD_(P)  {\\n    _calculateInitCurveParams(P, I, sigma); \\n  }\\n\\n  /// @notice need to calculate initial curve params that takes into account\\n  /// validator rewards(from discounted zcb). Just skew up the initial price. \\n  /// @param sigma is the proportion of P that is going to be bought at a discount  \\n  function _calculateInitCurveParams(uint256 P, uint256 I, uint256 sigma) internal virtual _WAD_(P) returns(uint256) {\\n\\n    b = (2*P).divWadDown(P+I) - math_precision; \\n    a = (math_precision-b).divWadDown(P+I); \\n\\n    // Calculate and store maximum tokens for discounts, \\n    discount_cap = _calculatePurchaseReturn(P.mulWadDown(sigma));\\n\\n    //get new initial price after saving for discounts \\n    b = a.mulWadDown(discount_cap) + b;\\n\\n    b_initial = (2*P).divWadDown(P+I) - math_precision; \\n\\n  }\\n  /**\\n   @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\n   @param amount: amount collateral in => needs to be converted to WAD before \\n   tokens returned in WAD\\n   */\\n  function _calculatePurchaseReturn(uint256 amount)  internal view override virtual _WAD_(amount) returns(uint256) {\\n    uint256 s = totalSupplyAdjusted() ;\\n\\n    uint256 x = ((a.mulWadDown(s) + b) ** 2)/math_precision; \\n    uint256 y = 2*( a.mulWadDown(amount)); \\n    uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\n    uint256 z = (a.mulWadDown(s) + b); \\n    uint256 result = (x_y_sqrt-z).divWadDown(a);\\n\\n    return result;\\n  }\\n\\n\\n  /**\\n   @notice calculates area under curve from s-amount to s, is c(as-ac/2+b) where c is amount \\n   @dev collateral tokens returned\\n   @param amount: amount of tokens burnt => WAD amount needs to be in 18 decimal \\n   @dev returns amount of collateral tokens in WAD\\n   */\\n  function _calculateSaleReturn(uint256 amount) internal view override virtual _WAD_(amount) returns (uint256) {\\n\\n    uint s = totalSupplyAdjusted();\\n    uint256 x = a.mulWadDown(s); \\n    uint256 y = a.mulWadDown(amount)/2; \\n    uint256 z = b + x - y; \\n    uint256 result = amount.mulWadDown(z); \\n\\n    return result;\\n  }\\n\\n\\n\\n  /// @notice calculates area under the curve from current supply to s+amount\\n  /// result = a * amount / 2  * (2* supply + amount) + b * amount\\n  /// @dev amount is in 60.18.\\n  /// returned in collateral decimals\\n  function _calcAreaUnderCurve(uint256 amount) internal view override virtual _WAD_(amount) returns(uint256){\\n\\n    uint256 s = totalSupplyAdjusted(); \\n    uint256 result = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\n    \\n    return result; \\n  }\\n\\n\\n  /**\\n   @param amount: amount added in 60.18\\n   @dev returns price in 60.18\\n   */\\n  function _calculateExpectedPrice(uint256 amount) internal view  override virtual returns (uint256 result) {\\n\\n    uint256 s = totalSupplyAdjusted();\\n\\n    result = (s + amount).mulWadDown(a) + b;\\n  }\\n\\n  function _calculateDecreasedPrice(uint256 amount) view internal override virtual _WAD_(amount) returns (uint256 result) {\\n    result = (totalSupplyAdjusted() - amount).mulWadDown(a) + b;\\n  }\\n\\n\\n  /// @notice computes from arbitrary supply, from initial b\\n  function _calculateArbitraryPurchaseReturn(uint256 amount, uint256 supply)  internal view override virtual _WAD_(amount) returns(uint256) {\\n    uint256 s = supply; \\n\\n    uint256 x = ((a.mulWadDown(s) + b_initial) ** 2)/math_precision; \\n    uint256 y = 2*( a.mulWadDown(amount)); \\n    uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\n    uint256 z = (a.mulWadDown(s) + b_initial); \\n    uint256 result = (x_y_sqrt-z).divWadDown(a);\\n\\n    return result;\\n  }\\n\\n\\n  function _calculateScore(uint256 priceOut, bool atLoss)view internal override virtual returns (uint256 score) {\\n    if (atLoss) {\\n      score = ((priceOut - math_precision) ** 2) / math_precision;\\n    } else {\\n      score = (priceOut ** 2) / math_precision;\\n    }\\n  }\\n\\n  function _get_discount_cap() internal view virtual override returns(uint){\\n    return discount_cap; \\n  }\\n\\n  function _getParams() public view override returns(uint,uint){\\n    return (a,b); \\n  }\\n\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x87533c6a09ba5a3b1195c6df4227219409a97c783b783ac4c042a7a9b75f1324\"},\"contracts/bonds/LinearBondingCurveFactory.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport {LinearBondingCurve} from \\\"./LinearBondingCurve.sol\\\"; \\nimport {LinearShortZCB, ShortBondingCurve} from \\\"./LinearShortZCB.sol\\\"; \\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\n\\n/// @notice need to separate factories because of contract size error \\ncontract LinearBondingCurveFactory{\\n\\n  address controller; \\n  constructor(){\\n    controller = msg.sender; \\n  }\\n\\n  function newLongZCB(\\n    string memory name, \\n    string memory symbol,\\n    address marketmanager_address,\\n    address vault_address, \\n    uint256 P, \\n    uint256 I, \\n    uint256 sigma\\n    ) external returns(BondingCurve){\\n\\n    BondingCurve zcb = new LinearBondingCurve(\\n      name,\\n      symbol,\\n      marketmanager_address, // owner\\n      vault_address,  \\n      P,\\n      I,\\n      sigma\\n    );\\n    return zcb;\\n  }\\n\\n  function newShortZCB(\\n    string memory name,\\n    string memory symbol, \\n    address marketmanager_address, \\n    address vault_address, \\n    address longZCBaddress, \\n    uint256 marketId\\n    ) external returns (ShortBondingCurve){\\n\\n    ShortBondingCurve shortZCB = new LinearShortZCB(\\n      name, symbol, marketmanager_address, vault_address, longZCBaddress, marketId\\n    ); \\n    return shortZCB;\\n  }\\n\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x1052257c924205bb2da3ef8870ce874b3070fe2f7f77a88da103c096472ff1d6\"},\"contracts/bonds/LinearShortZCB.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {LinearBondingCurve} from \\\"./LinearBondingCurve.sol\\\"; \\nimport {MarketManager} from \\\"../protocol/marketmanager.sol\\\"; \\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\"; \\nimport {config} from \\\"../protocol/helpers.sol\\\"; \\n\\n/// @notice this contract allows tokenized short positions at a price 1-zcb\\nabstract contract ShortBondingCurve is OwnedERC20{\\n  using FixedPointMathLib for uint256;\\n  using SafeERC20 for ERC20;\\n\\n  ERC20 private collateral;\\n  BondingCurve private LongZCB;\\n\\n  uint256 math_precision; \\n  uint256 collateral_dec; \\n  uint256 marketId; \\n  uint256 reserves;  \\n\\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    address owner, // market manager.\\n    address _collateral, //vault tokens\\n    address LongZCB_address, \\n    uint256 _marketId\\n)  OwnedERC20(name, symbol, owner) {\\n    collateral = ERC20(_collateral); \\n    \\n    math_precision = config.WAD;  \\n    collateral_dec = collateral.decimals();    \\n    collateral.approve(owner, 10*(10**8)* collateral_dec);     \\n    LongZCB = BondingCurve(LongZCB_address);    \\n    marketId = _marketId; \\n\\n  }\\n\\n  function getPair() public view returns(BondingCurve){\\n    return LongZCB; \\n  }\\n\\n  function getCollateral() public view returns(address){\\n    return address(collateral);\\n  }\\n\\n  /// @notice maximum possible short amount given current reserves, denominated in collateral \\n  /// should be instead maximum possible borrow amount \\n  /// @dev area between the curve and 1 at current supply, c - ( 2/a*(c**2) + b*c) \\n  function getMaxShortAmount() public view returns(uint256){\\n    uint256 c = LongZCB.totalSupplyAdjusted(); \\n    (uint256 a, uint256 b) = LongZCB.getParams(); \\n\\n    return c - (a/2).mulWadDown(c.mulWadDown(c)) - b.mulWadDown(c); \\n  }\\n\\n\\n\\n  /// @notice called from the marketmanager \\n  /// 1 shortZCB token is tokenization of borrowing+ selling 1 longZCB  \\n  /// so when longZCB price is 0.9, shortZCB is 0.1\\n  /// when price is 0.1, trader transfer collateral_amount to buy 0.1 per shortZCB to this contract \\n  /// this contract then borrows longZCB +sell it from marketmanager, collateral from sell sent back here\\n  /// @dev at maturity funds here will be burned and redeemed amount will be minted just like longZCB \\n  /// Function needs to follow the following\\n  /// @param collateral_amount: amount (vt) used to mint shortzc\\n  /// @dev trader is always market manager\\n  function trustedShort(\\n    address trader, \\n    uint256 collateral_amount,\\n    uint256 min_amount_out\\n  ) external onlyOwner returns (uint256 shortTokensToMint, uint256 supply_after_sell) {\\n\\n    uint256 balance_before = collateral.balanceOf(address(this)); \\n\\n    (shortTokensToMint,\\n     supply_after_sell) = calculateAmountGivenSell(collateral_amount);\\n    collateral.safeTransferFrom(trader, address(this), collateral_amount); \\n\\n    // min_amount_out will automatically take care of slippage\\n    uint256 amountOut = LongZCB.trustedSell(address(this), shortTokensToMint, 0);\\n    reserves += (collateral_amount + amountOut); \\n\\n    console.log('amountout', amountOut, collateral_amount);\\n    console.log('supply_after_sell', supply_after_sell, shortTokensToMint);\\n\\n    // Invariant #1: Value in to this contract after this trade \\n    // should equal collateral_amount+amountOut = shortTokensToMint\\n    assert(collateral.balanceOf(address(this)) - balance_before \\n          >= shortTokensToMint-config.roundLimit);  \\n    assert(amountOut + collateral_amount \\n          >= shortTokensToMint-config.roundLimit); \\n    require(min_amount_out <= shortTokensToMint, \\\"Slippage Err\\\"); \\n\\n    _mint(trader, shortTokensToMint); \\n  }\\n\\n\\n  /// @notice called from marketmanager, function for buying back and repaying debt \\n  /// @dev selling one shortZCB is buying back and repaying one longZCB \\n  /// 1. burn shortZCB  \\n  /// 2. buy longZCB \\n  /// 3. repay longZCB \\n  function trustedClose(\\n    address trader, \\n    uint256 shortZCB_amount, \\n    uint256 min_collateral_out\\n  ) public onlyOwner returns(uint256 returned_collateral, uint256 amountOut){\\n\\n    uint256 balance_before = collateral.balanceOf(address(this)); \\n\\n    /// burn first, should revert if not enough balance \\n    _burn(trader, shortZCB_amount); \\n\\n    // Area under the curve is the amount of collateral required to pay back debt\\n    uint256 needed_collateral = LongZCB.calcAreaUnderCurve(shortZCB_amount); \\n\\n    // Returned collateral is the area between the curve and 1\\n    returned_collateral = shortZCB_amount - needed_collateral; \\n    reserves -= (needed_collateral + returned_collateral); \\n\\n    // Buy from the funds in this contract \\n    collateral.approve(address(LongZCB), needed_collateral); \\n    amountOut = LongZCB.trustedBuy(address(this), needed_collateral, 0); \\n\\n    console.log('needed_collateral', needed_collateral, returned_collateral); \\n    console.log('shortZcbamount', shortZCB_amount); \\n    \\n    // Invariant #2: Value out from this contract after this trade \\n    // should equal needed_collateral+returned_collateral = shortZCB_amount\\n    assert(balance_before - collateral.balanceOf(address(this)) \\n          <= shortZCB_amount+config.roundLimit); \\n    assert(shortZCB_amount <= amountOut + config.roundLimit); \\n    require(returned_collateral >= min_collateral_out, \\\"Slippage Err\\\"); \\n\\n    collateral.safeTransfer(trader, returned_collateral);\\n\\n  }\\n\\n\\n\\n\\n\\n  function calculateAmountGivenSell(uint256 amount) public view  returns (uint256,uint256) {\\n    return _calculateAmountGivenSell(amount);\\n   }\\n\\n  /// @notice returns estimated collateral required to repay debt, used for approvals \\n  function getEstimatedCollateralNeeded(uint256 debt) public view returns(uint256){\\n    return  LongZCB.calcAreaUnderCurve(debt); \\n  }\\n\\n  /// @notice reserves should rougly equal the supply of shortZCB\\n  function getReserves() public view returns(uint256){\\n    return reserves; \\n  }\\n\\n\\n  /// @notice amount is in collateral, calculate the average price\\n  /// of shortZCB when buying with amount \\n  function calculateAveragePrice(uint256 amount) public view returns(uint256, uint256){\\n    (uint256 shortTokenAmount, uint256 k) = calculateAmountGivenSell(amount);\\n    return (amount.divWadDown(shortTokenAmount), shortTokenAmount); \\n  }\\n\\n\\n  function _calculateAmountGivenSell(uint256 amount) view public virtual returns(uint256 ,uint256);\\n\\n\\n\\n}\\n\\n\\n\\ncontract LinearShortZCB is ShortBondingCurve{\\n\\n  using FixedPointMathLib for uint256;\\n  using SafeERC20 for ERC20;\\n\\n\\n  constructor (\\n      string memory name,\\n      string memory symbol,\\n      address owner,\\n      address collateral, \\n      address longZCBaddress, \\n      uint256 marketId \\n \\n  ) ShortBondingCurve( name, symbol, owner, collateral, longZCBaddress, marketId) {\\n\\n  }\\n\\n\\n  /// @notice calculates amount of ZCB to sell given collateral for shorts\\n  /// which is finding, given the area between 1 and curve, the change in supply \\n  /// @param amount in collateral dec\\n  /// returns shortZCB amount from collateral and new supply after selling \\n  function _calculateAmountGivenSell(uint256 amount) public override view returns(uint256,uint256){\\n    \\n    // Get current supply and params, shares the same parameters as longZCB because it is just trading opposite dir\\n    uint256 c = getPair().totalSupplyAdjusted(); \\n    (uint256 a, uint256 b) = getPair().getParams(); \\n\\n    // Compute \\n    uint256 x = (math_precision-b).mulWadDown(math_precision-b); \\n    uint256 q = 2*a.mulWadDown(c);\\n    uint256 w = (a.mulWadDown(a)).mulWadDown(c.mulWadDown(c)); \\n    uint256 e = q.mulWadDown(b);    \\n    uint256 t = 2*a.mulWadDown(amount);\\n    uint256 f = x+e+w+t;\\n    uint256 h = f - q; \\n    uint256 rhs = (h*math_precision).sqrt(); \\n    console.log('rhs',rhs); \\n\\n    // If rhs larger then means not enough total supply to sell \\n    uint256 numerator; \\n    require(rhs < (math_precision-b), \\\"Not enough liquidity\\\"); \\n    unchecked{numerator = (math_precision-b) - rhs;}\\n\\n    // New supply after sell, so c - cprime is the amount sold in ZCB  \\n    uint256 cprime = numerator.divWadDown(a);\\n    \\n    console.log('cprime', cprime, c); \\n\\n    return ((c - cprime), cprime); \\n  }\\n\\n\\n\\n\\n}\\n\\n\\n\\n\\n  // /// @notice called from marketmanager, function for buying back and repaying debt \\n  // /// @dev selling one shortZCB is buying back and repaying one longZCB \\n  // /// 1. burn shortZCB  \\n  // /// 2. buy longZCB \\n  // /// 3. repay longZCB \\n  // function trustedClose(\\n  //   address trader, \\n  //   uint256 shortZCB_amount, \\n  //   uint256 min_collateral_out\\n  //   ) public onlyOwner returns(uint256 returned_collateral){\\n\\n  //   /// burn first, should revert if not enough balance \\n  //   _burn(trader, shortZCB_amount); \\n\\n  //   // Area under the curve is the amount of collateral required to pay back debt\\n  //   uint256 needed_collateral = LongZCB.calcAreaUnderCurve(shortZCB_amount); \\n\\n  //   // Returned collateral is the area between the curve and 1\\n  //   returned_collateral = (shortZCB_amount/(10**(18-collateral_dec)) - needed_collateral);\\n  //   require(returned_collateral >= min_collateral_out, \\\"Slippage Err\\\"); \\n  //   console.log('needed_collateral', needed_collateral, returned_collateral); \\n\\n  //   MarketManager marketmanager = MarketManager(owner); \\n  //   collateral.approve(address(LongZCB), needed_collateral); \\n  //   uint256 amountOut = marketmanager.buy(marketId, needed_collateral, 0); \\n  //   console.log('amountout', amountOut, shortZCB_amount); \\n\\n  //   marketmanager.repay_for_shortZCB(marketId, amountOut, trader);\\n\\n  //   collateral.safeTransfer(trader, returned_collateral); \\n\\n\\n\\n  // }\\n  // /// @notice called from the marketmanager \\n  // /// 1 shortZCB token is tokenization of borrowing+ selling 1 longZCB  \\n  // /// so when longZCB price is 0.9, shortZCB is 0.1\\n  // /// when price is 0.1, trader transfer collateral_amount to buy 0.1 per shortZCB to this contract \\n  // /// this contract then borrows longZCB +sell it from marketmanager, collateral from sell sent back here\\n  // /// @dev at maturity funds here will be burned and redeemed amount will be minted just like longZCB \\n  // function trustedShort(\\n  //   address trader, \\n  //   uint256 collateral_amount,\\n  //   uint256 min_amount_out\\n  // ) public onlyOwner returns (uint256 shortTokensToMint, uint256 supply_after_sell) {\\n\\n  //   (shortTokensToMint,\\n  //    supply_after_sell) = calculateAmountGivenSell(collateral_amount); \\n  //   collateral.safeTransferFrom(trader, address(this), collateral_amount); \\n\\n  //   MarketManager marketmanager = MarketManager(owner); \\n\\n  //   // mints shortTokensToMint amount of longZCB.\\n  //   marketmanager.borrow_for_shortZCB(marketId, shortTokensToMint); \\n\\n  //   // min_amount_out will automatically take care of slippage\\n  //   uint256 amountOut = marketmanager.sell(marketId, shortTokensToMint, 0);  \\n\\n  //   //amountOut + collateral_amount should equal shortTokensToMint, TODO write invariant assertion with rounding\\n  //   console.log('amountout', amountOut, collateral_amount);\\n  //   console.log('supply_after_sell', supply_after_sell, shortTokensToMint); \\n  //   require(min_amount_out <= shortTokensToMint, \\\"Slippage Err\\\"); \\n\\n  //   reserves += (collateral_amount + amountOut); \\n\\n  //   _mint(trader, shortTokensToMint); \\n\\n  // }\\n\\n  // /// @notice called from the marketmanager \\n  // function trustedShort(\\n  //  address trader, \\n  //  uint256 collateral_amount\\n  // ) public onlyOwner returns (uint256) {\\n\\n  //  (uint256 shortTokensToMint, uint256 supply_after_sell)  = calculateAmountGivenSell(collateral_amount); \\n  //  collateral.safeTransferFrom(trader, address(this), collateral_amount); \\n\\n  //  MarketManager marketmanager = MarketManager(owner); \\n  //  marketmanager.borrow_for_shortZCB(marketId, shortTokensToMint); // mints shortTokensToMint amount of longZCB.\\n  //  uint256 amountOut = marketmanager.sell(marketId, shortTokensToMint); \\n  //  console.log('amountout', amountOut, collateral_amount);\\n  //  console.log('supply_after_sell', supply_after_sell, shortTokensToMint); \\n\\n  //  //amountOut + collateral_amount should equal shortTokensToMint \\n  //  _mint(trader, shortTokensToMint); \\n\\n  //  reserves += (collateral_amount + amountOut); \\n  //  return shortTokensToMint;\\n  // }\\n\\n\\n  // /// @notice called from marketmanager, function for buying back and repaying debt \\n  // /// @dev one shortZCB is tokenized debt+sell of one longZCB \\n  // /// 1. burn shortZCB  \\n  // /// 2. buy longZCB \\n  // /// 3. repay longZCB \\n  // function trustedClose(\\n  //  address trader, \\n  //  uint256 shortZCB_amount \\n  //  ) public onlyOwner returns(uint256){\\n\\n  //  ///burn first\\n  //  _burn(trader, shortZCB_amount); \\n\\n  //  uint256 needed_collateral = LongZCB._calcAreaUnderCurve(shortZCB_amount); \\n  //  uint256 returned_collateral = (shortZCB_amount/(10**(18-collateral_dec)) - needed_collateral);\\n  //  console.log('needed_collateral', needed_collateral, returned_collateral); \\n  //  // collateral.safeTransferFrom(trader, address(this), needed_collateral); \\n  //  MarketManager marketmanager = MarketManager(owner); \\n  //  collateral.approve(address(LongZCB), needed_collateral); \\n  //  uint256 amountOut = marketmanager.buy( marketId, needed_collateral); \\n //     console.log('amountout', amountOut, shortZCB_amount); \\n\\n  //  marketmanager.repay_for_shortZCB(marketId, amountOut, trader);\\n\\n  //  collateral.safeTransfer(trader, returned_collateral); \\n\\n  //  return returned_collateral; \\n  // }\\n  //  uint256 numerator; \\n\\n    // unchecked {numerator = (math_precision - b) - (((x - q+w+e+t)*math_precision).sqrt()) ;} \\n    \\n    // if (numerator >= 2**255 ) revert('Not enough liquidity'); \\n\",\"keccak256\":\"0x9280ab3d077f5699fae9ddc16ac3d6b58db15ebe2e8db2e1d48621f97ffbb179\"},\"contracts/bonds/bondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {config} from \\\"../protocol/helpers.sol\\\"; \\n\\n\\nabstract contract BondingCurve is OwnedERC20 {\\n  // ASSUMES 18 TRAILING DECIMALS IN UINT256\\n  using SafeERC20 for ERC20;\\n  using FixedPointMathLib for uint256;\\n\\n  uint256 internal price_upper_bound;\\n  uint256 internal price_lower_bound;\\n  uint256 internal reserves; //in collateral_dec \\n  uint256 internal max_quantity;\\n  uint256 internal math_precision; \\n  uint256 public collateral_dec;\\n  uint256 internal discounted_reserves; \\n  ERC20 collateral; // NEED TO CHANGE ONCE VAULT IS DONE\\n  uint256 discounted_supply;\\n\\n  address shortZCB; \\n  constructor (\\n    string memory name,\\n    string memory symbol,\\n    address owner, // market manager.\\n    address _collateral\\n    ) OwnedERC20(name, symbol, owner) {\\n    collateral = ERC20(_collateral);\\n\\n    math_precision = config.WAD;\\n    collateral_dec = collateral.decimals();\\n\\n  }\\n\\n  /// @notice account for discounted/shorted supply \\n  function totalSupplyAdjusted() public view returns(uint256) {\\n    return totalSupply() - discounted_supply; \\n  }\\n\\n  /// @notice priceupperbound/lowerbound are not price, but instead percentage of max reserves(principal) like alpha \\n  function setUpperBound(uint256 upper_bound) public onlyOwner {\\n    price_upper_bound = upper_bound;\\n  }\\n\\n  function setLowerBound(uint256 lower_bound) public onlyOwner {\\n    price_lower_bound = lower_bound;\\n  }\\n\\n  function setMaxQuantity(uint256 _max_quantity) public onlyOwner {\\n    max_quantity = _max_quantity;\\n  }\\n\\n  function setShortZCB(address shortZCB_ad) public onlyOwner{\\n    shortZCB = shortZCB_ad; \\n  }\\n\\n\\n\\n  /**\\n   @notice called by market manager, like trustedMint but returns amount out\\n   @param collateral_amount: amount of collateral in. => w/ collateral decimals\\n   @param min_amount_out: reverts if actual tokens returned less\\n   */\\n  function trustedBuy(\\n    address trader, \\n    uint256 collateral_amount,\\n    uint256 min_amount_out\\n    ) public returns (uint256 tokensOut) {\\n    require(msg.sender == owner || msg.sender == shortZCB); \\n    require(collateral.balanceOf(trader)>= collateral_amount,\\\"not enough balance\\\"); \\n    require(reserves+collateral_amount <=  price_upper_bound, \\\"exceeds trade boundary\\\"); \\n\\n    tokensOut = calculatePurchaseReturn(collateral_amount);\\n    require(tokensOut >= min_amount_out, \\\"Slippage err\\\"); \\n    unchecked{reserves += collateral_amount;}\\n\\n    collateral.safeTransferFrom(trader, address(this), collateral_amount);\\n    _mint(trader, tokensOut);\\n\\n   }\\n\\n   /**\\n   @param zcb_amount: amount of zcb tokens burned, needs to be in WAD \\n   */\\n  function trustedSell(\\n    address trader, \\n    uint256 zcb_amount, \\n    uint256 min_collateral_out\\n    ) public returns (uint256 collateral_out) {\\n    require(msg.sender == owner || msg.sender == shortZCB); \\n\\n    // in collateral_dec rounded down to nearest int\\n    collateral_out = calculateSaleReturn(zcb_amount);\\n    require(reserves-collateral_out >= price_lower_bound, \\\"exceeds trade boundary\\\"); \\n    require(collateral_out>=min_collateral_out, \\\"Slippage Err\\\"); \\n\\n    unchecked{reserves -= collateral_out;}\\n\\n    _burn(trader, zcb_amount);\\n\\n    collateral.safeTransfer(trader, collateral_out);\\n\\n   }\\n\\n   /// @notice only called for selling discounted supplies or short supplies \\n  function trustedDiscountedMint(address receiver, uint256 zcb_amount) external virtual  onlyOwner {\\n    discounted_supply += zcb_amount; \\n    _mint(receiver, zcb_amount); \\n   }\\n\\n  function trustedDiscountedBurn(address receiver, uint256 zcb_amount) external virtual onlyOwner{\\n    discounted_supply -= zcb_amount; \\n    _burn(receiver, zcb_amount); \\n\\n  }\\n\\n  function trustedApproveCollateralTransfer(address trader, uint256 amount) public onlyOwner {\\n    collateral.approve(trader, amount);\\n   }\\n\\n\\n  /**\\n   @notice calculates tokens returns from input collateral\\n   @dev shouldn't be calling this function, should be calculating amount from frontend.\\n   @param amount: input collateral (ds)\\n   */\\n  function calculatePurchaseReturn(uint256 amount) public view  returns (uint256) {\\n    return _calculatePurchaseReturn(amount);\\n   }\\n\\n  /**\\n   @notice calculates collateral returns from selling tokens\\n   @param amount: amount of tokens selling\\n   returns in collateral dec \\n   */\\n  function calculateSaleReturn(uint256 amount) public view  returns (uint256) {\\n    return _calculateSaleReturn(amount);\\n   }\\n\\n\\n  /// @notice gets required amount of collateral to purchase X amount of tokens\\n  /// need to get area under the curve from current supply X_  to X_+X \\n  function calcAreaUnderCurve(uint256 amount) public view  returns(uint){\\n    return _calcAreaUnderCurve(amount); \\n  }\\n\\n  /**\\n   @notice calculates expected price given user buys X tokens\\n   @param amount: hypothetical amount of tokens bought\\n   */ \\n  function calculateExpectedPrice(uint256 amount) public view  returns (uint256 result) {\\n    result = _calculateExpectedPrice(amount);\\n   }\\n\\n  function getTotalCollateral() public view returns (uint256 result) {\\n    result = collateral.balanceOf(address(this));\\n   }\\n\\n  function getCollateral() public view returns (address) {\\n    return address(collateral);\\n   } \\n\\n  function getTotalZCB() public view returns (uint256 result) {\\n    result = totalSupply();\\n   }\\n\\n  function getMaxQuantity() public view returns (uint256 result) {\\n    result = max_quantity;\\n   }\\n\\n  function getUpperBound() public view returns (uint256 result) {\\n    result = price_upper_bound;\\n   }\\n\\n  function getLowerBound() public view returns (uint256 result) {\\n    result = price_lower_bound;\\n   }\\n\\n  function getReserves() public view returns(uint256){\\n    return reserves; \\n   }\\n  function getDiscountedReserves() public view returns(uint256){\\n    return discounted_reserves; \\n  }\\n\\n  function get_discount_cap() public view returns(uint256){\\n    return _get_discount_cap();  \\n  }\\n\\n  function getParams() public view returns(uint,uint){\\n    return _getParams(); \\n  }\\n\\n  /**\\n   @dev amount is tokens burned.\\n   */\\n  function calculateDecreasedPrice(uint256 amount) public view  virtual returns (uint256) {\\n    return _calculateDecreasedPrice(amount);\\n  }\\n\\n  /**\\n   @dev doesn't perform any checks, checks performed by caller\\n   */\\n  function incrementReserves(uint256 amount) public onlyOwner{\\n    reserves += amount;\\n   }\\n\\n  /**\\n   @dev doesn't perform any checks, checks performed by caller\\n   */\\n  function decrementReserves(uint256 amount) public onlyOwner {\\n    reserves -= amount;\\n   }\\n\\n  function incrementDiscountedReserves(uint256 amount) public onlyOwner{\\n    discounted_reserves += amount; \\n  }\\n\\n\\n\\n\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 amount\\n  ) internal override virtual {\\n    // on _mint\\n    if (from == address(0) && price_upper_bound > 0) {\\n      console.log(\\\"beforeTT: price_upper_bound\\\", price_upper_bound);\\n      // require(_calculateExpectedPrice(amount) <= price_upper_bound, \\\"above price upper bound\\\");\\n    }\\n    // on _burn\\n    else if (to == address(0) && price_lower_bound > 0) {\\n      // require(_calculateDecreasedPrice(amount) >= price_lower_bound, \\\"below price lower bound\\\");\\n    }\\n  }\\n\\n\\n  /// @notice calculates implied probability of the trader \\n  /// @param budget of trader in collateral decimals \\n  function calcImpliedProbability(uint256 collateral_amount, uint256 budget) public view returns(uint256 prob){\\n\\n    uint256 zcb_amount = calculatePurchaseReturn(collateral_amount); \\n    uint256 avg_price = calcAveragePrice(zcb_amount); //18 decimals \\n    uint256 b = avg_price.mulWadDown(math_precision - avg_price);\\n    uint256 ratio = zcb_amount.divWadDown(budget); \\n\\n    return ratio.mulWadDown(b)+ avg_price;\\n  }\\n\\n  /// @notice caluclates average price for the user to buy amount tokens \\n  /// @dev which is average under the curve divided by amount \\n  /// amount is the amount of bonds, 18 decimals \\n  function calcAveragePrice(uint256 amount) public view returns(uint256){\\n\\n    uint256 area = calcAreaUnderCurve(amount); //this takes in 18 \\n\\n    //area is in decimal 6, amount is in 18\\n    // uint256 area_in_precision = area*(10**12); \\n    uint256 result = area.divWadDown(amount); \\n    //returns a 18 decimal avg price \\n    return result; \\n  }\\n\\n  function calculateArbitraryPurchaseReturn(uint256 amount, uint256 supply) public view returns(uint256) {\\n    return _calculateArbitraryPurchaseReturn(amount, supply); \\n  }\\n\\n  function _get_discount_cap() internal view virtual returns(uint256); \\n\\n  function _calcAreaUnderCurve(uint256 amount) internal view  virtual returns(uint256 result); \\n\\n  function _calculatePurchaseReturn(uint256 amount)  internal view virtual returns(uint256 result);\\n\\n  function _calculateSaleReturn(uint256 amount) internal view  virtual returns (uint256 result);\\n\\n  function _calculateExpectedPrice(uint256 amount) internal view  virtual returns (uint256 result);\\n\\n  function _calculateDecreasedPrice(uint256 amount) internal view  virtual returns (uint256 result);\\n\\n  function _calculateArbitraryPurchaseReturn(uint256 amount, uint256 supply)  internal view  virtual returns(uint256); \\n\\n  function _getParams() public view virtual returns(uint,uint); \\n\\n\\n\\n\\n\\n\\n\\n///DEPRECATED\\n  /**\\n   @notice used for calculating reputation score on resolved market.\\n   */\\n\\n\\n  function redeem(\\n    address receiver, \\n    uint256 zcb_redeem_amount, \\n    uint256 collateral_redeem_amount\\n    ) external  onlyOwner {\\n    _burn(receiver, zcb_redeem_amount);\\n    collateral.safeTransfer(receiver, collateral_redeem_amount); \\n    reserves -= collateral_redeem_amount;\\n   }\\n\\n  function redeemPostAssessment(\\n    address redeemer,\\n    uint256 collateral_amount\\n    ) external  onlyOwner{\\n    uint256 redeem_amount = balanceOf(redeemer);\\n    _burn(redeemer, redeem_amount); \\n    collateral.safeTransfer(redeemer, collateral_amount); \\n    reserves -= collateral_amount;\\n   }\\n\\n  function burnFirstLoss(\\n    uint256 burn_collateral_amount\\n    ) external onlyOwner{\\n    collateral.safeTransfer(owner, burn_collateral_amount); \\n    reserves -= burn_collateral_amount;\\n   }\\n\\n  /**\\n   @notice buy bond tokens with necessary checks and transfers of collateral.\\n   @param amount: amount of collateral/ds paid in exchange for tokens\\n   @dev amount has number of collateral decimals\\n   */\\n  function buy(uint256 amount) public {\\n    uint256 tokens = _calculatePurchaseReturn(amount);\\n    reserves += amount; // CAN REPLACE WITH collateral.balanceOf(this)\\n    _mint(msg.sender, tokens);\\n    collateral.safeTransferFrom(msg.sender, address(this), amount);\\n  }\\n\\n  /**\\n   @notice sell bond tokens with necessary checks and transfers of collateral\\n   @param amount: amount of tokens selling. 60.18.\\n   */\\n  function sell(uint256 amount) public {\\n    uint256 sale = _calculateSaleReturn(amount);\\n    _burn(msg.sender, amount);\\n    collateral.safeTransfer(msg.sender, sale);\\n    reserves -= sale;\\n   }\\n  /// @notice calculates score necessary to update reputation score\\n  function calculateScore(uint256 priceOut, bool atLoss) public view returns(uint){\\n    return _calculateScore(priceOut, atLoss);\\n  }\\n\\n  function _calculateScore(uint256 priceOut, bool atLoss) view internal virtual returns(uint256 score);\\n\\n  }\",\"keccak256\":\"0xa61c01dd55ac9adadda54a77bf95135e76255b227fa2b1f0458a3906e2ecb12f\"},\"contracts/chainlink/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\",\"keccak256\":\"0xd4697556c95e0f2e5055eea0b07b4d476887052d95dbf838b3cf7c32436c71d1\",\"license\":\"MIT\"},\"contracts/chainlink/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\",\"keccak256\":\"0xadc1f1babaa7202145a22d82c85176cbe7f1fae993f2c11dabdf6058aebea6b2\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace284dc2ca2afd8e6e1b16f2c3abb9af28ae70b627c3557722e4618c65ef8d9\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x26c297226aeb6ad5e522fe97f9d68cc4474b2560bf22c8cd124c93442d339a4c\",\"license\":\"MIT\"},\"contracts/protocol/controller.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {MarketManager, WrappedCollateral} from \\\"./marketmanager.sol\\\";\\nimport {ReputationNFT} from \\\"./reputationtoken.sol\\\";\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport {LinearBondingCurve} from \\\"../bonds/LinearBondingCurve.sol\\\";\\nimport {BondingCurve} from \\\"../bonds/bondingcurve.sol\\\";\\nimport {LinearBondingCurveFactory} from \\\"../bonds/LinearBondingCurveFactory.sol\\\"; \\nimport {Vault} from \\\"../vaults/vault.sol\\\";\\nimport {Instrument} from \\\"../vaults/instrument.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {VaultFactory} from \\\"./factories.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@interep/contracts/IInterep.sol\\\";\\nimport {config} from \\\"./helpers.sol\\\"; \\nimport {ShortBondingCurve} from \\\"../bonds/LinearShortZCB.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n\\n\\ncontract Controller {\\n  using SafeMath for uint256;\\n  using FixedPointMathLib for uint256;\\n\\n  struct MarketData {\\n      address instrument_address;\\n      address recipient;\\n  }\\n\\n  struct ApprovalData{\\n    uint256 approved_principal; \\n    uint256 approved_yield; \\n  }\\n  \\n  event MarketInitiated(uint256 marketId, address recipient);\\n\\n  mapping(uint256=>ApprovalData) approvalDatas; \\n\\n  function getApprovalData(uint256 marketId) public view returns (ApprovalData memory) {\\n    approvalDatas[marketId];\\n  }\\n\\n  mapping(address => bool) public  verified;\\n  mapping(uint256 => MarketData) public market_data; // id => recipient\\n  mapping(address=> uint256) public ad_to_id; //utilizer address to marketId\\n  // mapping(address=>uint256[]) public utilizer_marketIds; //utilizer address to multiple marketIds\\n  mapping(uint256=> Vault) public vaults; // vault id to Vault contract\\n  mapping(uint256=> uint256) public id_parent; //marketId-> vaultId \\n  mapping(uint256=> uint256) public vault_debt; //vault debt for each marketId\\n  mapping(uint256=>uint256[]) public vault_to_marketIds;\\n\\n  address creator_address;\\n\\n  IInterep interep;\\n  // TrustedMarketFactoryV3 marketFactory;\\n  MarketManager marketManager;\\n  ReputationNFT repNFT; \\n  LinearBondingCurveFactory linearBCFactory; \\n  VaultFactory vaultFactory; \\n\\n  uint256 constant TWITTER_UNRATED_GROUP_ID = 16106950158033643226105886729341667676405340206102109927577753383156646348711;\\n  bytes32 constant private signal = bytes32(\\\"twitter-unrated\\\");\\n  uint256 constant private insurance_constant = 5e5; //1 is 1e6, also needs to be able to be changed \\n  uint256 constant PRICE_PRECISION = 1e18; \\n  \\n  // Bond Curve Name\\n  string constant baseName = \\\"Bond\\\";\\n  string constant baseSymbol = \\\"B\\\";\\n  string constant s_baseName = \\\"sBond\\\";\\n  string constant s_baseSymbol = \\\"sB\\\";\\n  uint256 nonce = 0;\\n\\n  /* ========== MODIFIERS ========== */\\n  // modifier onlyValidator(uint256 marketId) {\\n  //     require(marketManager.isValidator(marketId, msg.sender)|| msg.sender == creator_address);\\n  //     _;\\n  // }\\n\\n  modifier onlyOwner() {\\n      require(msg.sender == creator_address, \\\"Only Owner can call this function\\\");\\n      _;\\n  }\\n  modifier onlyManager() {\\n      require(msg.sender == address(marketManager) || msg.sender == creator_address, \\\"Only Manager can call this function\\\");\\n      _;\\n  }\\n\\n  constructor (\\n      address _creator_address,\\n      address _interep_address\\n  ) {\\n      creator_address = _creator_address;\\n      interep = IInterep(_interep_address);\\n\\n      linearBCFactory = new LinearBondingCurveFactory(); \\n  }\\n\\n  /*----Setup Functions----*/\\n\\n  function setMarketManager(address _marketManager) public onlyOwner {\\n      require(_marketManager != address(0));\\n      marketManager = MarketManager(_marketManager);\\n  }\\n\\n  function setReputationNFT(address NFT_address) public onlyOwner{\\n      repNFT = ReputationNFT(NFT_address); \\n  }\\n\\n  function setVaultFactory(address _vaultFactory) public onlyOwner {\\n    vaultFactory = VaultFactory(_vaultFactory); \\n  }\\n\\n  function verifyAddress(\\n      uint256 nullifier_hash, \\n      uint256 external_nullifier,\\n      uint256[8] calldata proof\\n  ) external  {\\n      require(!verified[msg.sender], \\\"address already verified\\\");\\n      interep.verifyProof(TWITTER_UNRATED_GROUP_ID, signal, nullifier_hash, external_nullifier, proof);\\n      verified[msg.sender] = true;\\n  }\\n\\n  function testVerifyAddress() external {\\n    verified[msg.sender] = true;\\n  }\\n\\n\\n  function mintRepNFT(\\n    address NFT_address,\\n    address trader\\n    ) external  {\\n    ReputationNFT(NFT_address).mint(msg.sender);\\n  }\\n\\n  /// @notice called only when redeeming, transfer funds from vault \\n  function redeem_transfer(\\n    uint256 amount, \\n    address to, \\n    uint256 marketId) \\n  external onlyManager{\\n    console.log('vault debt', vault_debt[marketId], amount); \\n    // require(vault_debt[marketId] >= amount, \\\"No funds left for redemption\\\"); \\n    // unchecked{ vault_debt[marketId] -= amount;} \\n\\n    vaults[id_parent[marketId]].trusted_transfer(amount,to); \\n  }\\n\\n  /**\\n   @notice creates vault\\n   @param underlying: underlying asset for vault\\n   @param _onlyVerified: only verified users can mint shares\\n   @param _r: minimum reputation score to mint shares\\n   @param _asset_limit: max number of shares for a single address\\n   @param _total_asset_limit: max number of shares for entire vault\\n   @param default_params: default params for markets created by vault\\n   */\\n  function createVault(\\n    address underlying,\\n    bool _onlyVerified, \\n    uint256 _r, \\n    uint256 _asset_limit, \\n    uint256 _total_asset_limit, \\n    MarketManager.MarketParameters memory default_params \\n  ) public {\\n    (Vault newVault, uint256 vaultId) = vaultFactory.newVault(\\n     underlying, \\n     address(this),\\n     _onlyVerified, \\n     _r, \\n     _asset_limit,\\n     _total_asset_limit,\\n     default_params\\n    );\\n\\n    vaults[vaultId] = newVault;\\n  }\\n\\n\\n\\n  function marketIdToVaultId(uint256 marketId) public view returns(uint256){\\n    return id_parent[marketId]; \\n  }\\n\\n  function getMarketIds(uint256 vaultId) public view returns (uint256[] memory) {\\n    return vault_to_marketIds[vaultId];\\n  }\\n\\n  /////INITIATORS/////\\n\\n  /**\\n   @param P: principal\\n   @param I: expected yield (total interest)\\n   @param sigma is the proportion of P that is going to be bought at a discount \\n   */\\n  function createZCBs(\\n    uint256 P,\\n    uint256 I, \\n    uint256 sigma, \\n    uint256 marketId\\n    ) internal returns (BondingCurve, ShortBondingCurve) {\\n\\n    WrappedCollateral wCollateral = new WrappedCollateral(\\n      \\\"name\\\", \\n      \\\"symbol\\\", \\n      address(this), \\n      address(getVault(marketId).UNDERLYING())\\n      ); \\n\\n    BondingCurve _long = linearBCFactory.newLongZCB(\\n      string(abi.encodePacked(baseName, \\\"-\\\", Strings.toString(nonce))),\\n     string(abi.encodePacked(baseSymbol, Strings.toString(nonce))), \\n     address(marketManager),\\n     address(wCollateral),\\n    // getVaultAd( marketId), \\n     P,\\n     I, \\n     sigma);\\n\\n    ShortBondingCurve _short = linearBCFactory.newShortZCB(\\n      string(abi.encodePacked(s_baseName, \\\"-\\\", Strings.toString(nonce))), \\n      string(abi.encodePacked(s_baseSymbol, Strings.toString(nonce))), \\n      address(marketManager),\\n      address(wCollateral),  \\n\\n      // getVaultAd( marketId), \\n      address(_long), \\n      marketId); \\n\\n    nonce++;\\n\\n    return (_long, _short);\\n  }\\n\\n\\n\\n  /// @notice initiates market, called by frontend loan proposal or instrument form submit button.\\n  /// @dev Instrument should already be deployed \\n  /// @param recipient: utilizer for the associated instrument\\n  /// @param instrumentData: instrument arguments\\n  /// @param vaultId: vault identifier\\n  function initiateMarket(\\n    address recipient,\\n    Vault.InstrumentData memory instrumentData, \\n    uint256 vaultId\\n  ) external  {\\n    require(instrumentData.Instrument_address != address(0), \\\"must not be zero address\\\");\\n    require(instrumentData.principal >= config.WAD, \\\"Precision err\\\"); \\n    require(address(vaults[vaultId]) != address(0), \\\"Vault doesn't' exist\\\");\\n    require(recipient != address(0), \\\"recipient must not be zero address\\\");\\n\\n    Vault vault = Vault(vaults[vaultId]); \\n\\n    uint256 marketId = marketManager.marketCount();\\n    \\n    id_parent[marketId] = vaultId;\\n    vault_to_marketIds[vaultId].push(marketId);\\n\\n    marketManager.setParameters(\\n      vault.get_vault_params(), \\n      vault.utilizationRate(), \\n      marketId\\n    ); \\n\\n    (BondingCurve _long, ShortBondingCurve _short) = createZCBs(\\n      instrumentData.principal,\\n      instrumentData.expectedYield, \\n      marketManager.getParameters(marketId).sigma, \\n      marketId\\n    );\\n\\n    marketManager.newMarket(\\n      marketId, \\n      instrumentData.principal, \\n      instrumentData.expectedYield,      \\n      _long,\\n      _short,\\n      instrumentData.description,\\n      block.timestamp\\n    );\\n\\n    ad_to_id[recipient] = marketId; //only for testing purposes, one utilizer should be able to create multiple markets\\n    instrumentData.marketId = marketId;\\n\\n    vault.addProposal(instrumentData);\\n\\n    market_data[marketId] = MarketData(instrumentData.Instrument_address, recipient);\\n\\n    repNFT.storeTopReputation(marketManager.getParameters(marketId).r,  marketId); \\n\\n    emit MarketInitiated(marketId, recipient);\\n  }\\n\\n\\n\\n\\n  /// @notice Resolve function 1\\n  /// @notice Prepare market/instrument for closing, called separately before resolveMarket\\n  /// exists to circumvent manipulations   \\n  function beforeResolve(uint256 marketId) \\n  external \\n  //onlyKeepers \\n  {\\n    vaults[id_parent[marketId]].beforeResolve(marketId);\\n  }\\n\\n\\n  /**\\n  Resolve function 2\\n  @notice main function called at maturity OR premature resolve of instrument(from early default)\\n  \\n  When market finishes at maturity, need to \\n  1. burn all vault tokens in bc \\n  2. mint all incoming redeeming vault tokens \\n\\n  Validators can call this function as they are incentivized to redeem\\n  any funds left for the instrument , irrespective of whether it is in profit or inloss. \\n  */\\n  function resolveMarket(\\n    uint256 marketId\\n  ) external \\n  //onlyValidators\\n  {\\n    (bool atLoss,\\n    uint256 extra_gain,\\n    uint256 principal_loss, \\n    bool premature) = vaults[id_parent[marketId]].resolveInstrument(marketId); \\n\\n    marketManager.update_redemption_price(marketId, atLoss, extra_gain, principal_loss, premature); \\n\\n    cleanUpDust(marketId); \\n  }\\n\\n  /// @notice When market resolves, should collect \\n  /// remaining liquidity and/or dust from the wCollateral and send them  \\n  /// back to the vault\\n  /// @dev should be called before redeem_transfer is allowed \\n  function cleanUpDust(\\n    uint256 marketId\\n    ) internal {\\n    WrappedCollateral(marketManager.getZCB(marketId).getCollateral()).flush(getVaultAd( marketId));\\n  }\\n\\n  /// @notice checks for maturity, resolve at maturity\\n  /// @param marketId: called for anyone.\\n  function checkInstrument(\\n      uint256 marketId\\n  ) external\\n  ///onlyKeepers \\n   returns (bool) {\\n    Vault.InstrumentData memory data = vaults[id_parent[marketId]].fetchInstrumentData( marketId);\\n      \\n    require(data.marketId > 0 && data.trusted, \\\"instrument must be active\\\");\\n    require(data.maturityDate > 0, \\\"instrument hasn't been approved yet\\\" );\\n\\n    if (block.timestamp >= data.maturityDate) {\\n        // this.resolveMarket(marketId);\\n        this.beforeResolve(marketId); \\n        return true;\\n    }\\n    return false;\\n  }\\n\\n\\n  /// @notice when market is resolved(maturity/early default), calculates score\\n  /// and update each assessment phase trader's reputation, called by individual traders when redeeming \\n  function updateReputation(\\n    uint256 marketId, \\n    address trader, \\n    bool increment) \\n  external onlyManager {\\n    uint256 implied_probs = marketManager.assessment_probs(marketId, trader);\\n\\n    if (increment) {\\n      uint256 scoreToAdd = implied_probs.mulDivDown(implied_probs, config.WAD); //Experiment\\n      repNFT.addScore(trader, scoreToAdd);\\n    } else{\\n      uint256 scoreToDeduct = implied_probs.mulDivDown(implied_probs, config.WAD); //Experiment\\n      repNFT.decrementScore(trader, scoreToDeduct); \\n    }\\n  }\\n\\n  /// @notice function that closes the instrument/market before maturity, maybe to realize gains/cut losses fast\\n  /// or debt is prematurely fully repaid, or underlying strategy is deemed dangerous, etc.  \\n  /// @dev withdraws all balance from the instrument. \\n  /// If assets in instrument is not in underlying, need all balances to be divested to underlying \\n  /// Ideally this should be called by several validators, maybe implement a voting scheme and have a keeper call it.\\n  /// @param emergency ascribes cases where the instrument should be forcefully liquidated back to the vault\\n  function forceCloseInstrument(uint256 marketId, bool emergency) external returns(bool){\\n    Vault vault = vaults[id_parent[marketId]]; \\n\\n    // Prepare for close \\n    vault.closeInstrument(marketId); \\n\\n    // Harvests/records all profit & losses\\n    vault.beforeResolve(marketId); \\n\\n    return true;\\n\\n    //Now the resolveMarket function should be called in the next transaction \\n  }\\n\\n  /// @notice called by the validator when market conditions are met\\n  /// need to move the collateral in the wCollateral to \\n  function approveMarket(\\n      uint256 marketId\\n  ) external onlyManager {\\n    Vault vault = vaults[id_parent[marketId]]; \\n    BondingCurve bc = marketManager.getZCB(marketId); \\n\\n    require(marketManager.getCurrentMarketPhase(marketId) == 3,\\\"Market Condition Not met\\\");\\n    require(vault.instrumentApprovalCondition(marketId), \\\"Instrument approval condition met\\\");\\n\\n    fetchAndStoreMarketDataForApproval(marketId, bc); \\n\\n    // For market to go to a post assessment stage there always needs to be a lower bound set  \\n    marketManager.approveMarketAndSetLowerBound(marketId); \\n\\n    // move liquidity from wCollateral to vault, which will be used to fund the instrument\\n    // this debt will be stored to later pull back to wCollateral  \\n    uint256 reserves_to_push = bc.getReserves() + bc.getDiscountedReserves(); \\n    console.log('bc reserves', bc.getReserves(), bc.getDiscountedReserves()); \\n    console.log('wcollateral balance before',vault.UNDERLYING().balanceOf(bc.getCollateral()));  \\n    WrappedCollateral(bc.getCollateral()).trustedTransfer(address(vault), reserves_to_push); \\n    vault_debt[marketId] = reserves_to_push;\\n    console.log('wcollateral balance',vault.UNDERLYING().balanceOf(bc.getCollateral()));  \\n\\n    // Trust and deposit to the instrument contract\\n    vault.trustInstrument(marketId, approvalDatas[marketId]);\\n  }\\n\\n\\n  /// @notice receives necessary market information. Only applicable for creditlines \\n  /// required for market approval such as max principal, quoted interest rate\\n  function fetchAndStoreMarketDataForApproval(uint256 marketId, BondingCurve bc) internal{\\n\\n    (uint256 proposed_principal, uint256 proposed_yield) = vaults[id_parent[marketId]].viewPrincipalAndYield(marketId); \\n\\n    // get max_principal which is (s+1) * total long bought for creditline, or just be\\n    // proposed principal for other instruments \\n    uint256 max_principal = (marketManager.getParameters(marketId).s + config.WAD).mulWadDown(\\n                            bc.getTotalCollateral()) ; \\n    console.log('maxprincipal', max_principal, bc.getTotalCollateral()); \\n    max_principal = min(max_principal, proposed_principal); \\n\\n    // Notional amount denominated in underlying, which is the area between curve and 1 at the x-axis point \\n    // where area under curve is max_principal \\n    uint256 quoted_interest = bc.calculateArbitraryPurchaseReturn(max_principal, 0) - max_principal; \\n    console.log('quoted', quoted_interest); \\n\\n    approvalDatas[marketId] = ApprovalData(max_principal, quoted_interest); \\n  }\\n\\n\\n  function denyMarket(\\n      uint256 marketId\\n  ) external  \\n  //onlyValidator(marketId) \\n  {\\n    require(marketManager.duringMarketAssessment(marketId), \\\"Not during assessment\\\");\\n    \\n    marketManager.denyMarket(marketId);\\n\\n    vaults[id_parent[marketId]].denyInstrument(marketId);\\n\\n    cleanUpDust(marketId); \\n\\n  }\\n\\n \\n  /* --------GETTER FUNCTIONS---------  */\\n  function getMarketId(address recipient) public view returns(uint256){\\n    return ad_to_id[recipient];\\n  }\\n\\n  function getVault(uint256 marketId) public view returns(Vault){\\n    return vaults[id_parent[marketId]]; \\n  }\\n  function getVaultAd(uint256 marketId) public view returns(address){\\n    return address(vaults[id_parent[marketId]]); \\n  }\\n\\n  function isVerified(address addr)  public view returns (bool) {\\n    return verified[addr];\\n  }\\n\\n  function getVaultfromId(uint256 vaultId) public view returns(address){\\n    return address(vaults[vaultId]); \\n  }\\n\\n  function marketId_to_vaultId(uint256 marketId) public view returns(uint256){\\n    return id_parent[marketId]; \\n  }\\n\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n      return a >= b ? a : b;\\n  }\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n      return a <= b ? a : b;\\n  }\\n\\n\\n\\n///  deprecated\\n/// @notice called when market is resolved \\n  function redeem_mint(\\n    uint256 amount, \\n    address to, \\n    uint256 marketId) \\n  external onlyManager{\\n    vaults[id_parent[marketId]].controller_mint(amount,to); \\n  }\\n\\n}\\n\\n\",\"keccak256\":\"0xf37245c1bb681a56516628e926da7bc9ca01dc7ea0ee3a774737f4f62a128fd7\"},\"contracts/protocol/factories.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {Vault} from \\\"../vaults/vault.sol\\\";\\nimport {MarketManager} from \\\"./marketmanager.sol\\\";\\nimport {Controller} from \\\"./controller.sol\\\";\\n\\n\\n/// @notice Anyone can create a vault. These can be users who  \\n/// a) want exposure to specific instrument types(vault that focuses on uncollateralized RWA loans)\\n/// b) are DAOs that want risk assessment/structuring for their treasuries that need management.(i.e almost all stablecoin issuers)\\n/// c) a vault for any long-tailed assets \\n/// d) managers who wants leverage for yield opportunities on a specific asset \\n/// e) uncollateralized lending platforms that wants to delegate the risk underwriting \\n/// etc\\n/// They need to specify \\n/// 1. Vault mint conditions-> such as verified LPs(managers) only, \\n/// 2. default parameters of the market(like alpha, which determines level of risk&profit separation between vault/managers)\\n/// 3. Vault underlying \\n/// @dev only need a vault factory since marketId can be global, and all marketId will have a vaultId as it's parent\\n\\ncontract VaultFactory{\\n\\n  address owner; \\n  mapping(address=>bool) private _isVault; \\n\\n  uint256 public numVaults; \\n  Controller controller; \\n\\n  constructor(address _controller){\\n    owner = msg.sender; \\n    controller = Controller(_controller);\\n  }\\n\\n  function isVault(address v) external view returns(bool){\\n    return _isVault[v]; \\n  }\\n\\n  modifier onlyController(){\\n      require(address(controller) == msg.sender || msg.sender == owner || msg.sender == address(this), \\\"is not controller\\\"); \\n      _;\\n  }\\n\\n  /**\\n   @notice creates vault\\n   @param underlying: underlying asset for vault\\n   @param _controller: protocol controller\\n   @param _onlyVerified: only verified users can mint shares\\n   @param _r: minimum reputation score to mint shares\\n   @param _asset_limit: max number of shares for a single address\\n   @param _total_asset_limit: max number of shares for entire vault\\n   @param default_params: default params for markets created by vault\\n   */\\n  function newVault(\\n    address underlying, \\n    address _controller,\\n    bool _onlyVerified, \\n    uint256 _r, \\n    uint256 _asset_limit,\\n    uint256 _total_asset_limit,\\n    MarketManager.MarketParameters memory default_params\\n  ) external onlyController returns(Vault, uint256) {\\n    require(default_params.alpha >= 1e16, \\\"Alpha too small\\\"); \\n    \\n    Vault vault = new Vault(\\n      underlying,\\n       _controller, \\n       owner, \\n       //Params \\n       _onlyVerified,  _r, _asset_limit, _total_asset_limit,\\n       default_params \\n\\n       ); \\n    _isVault[address(vault)] = true; \\n    numVaults++; \\n\\n    return (vault, numVaults); \\n    // vaultId is numVaults after new creation of the vault.\\n\\n  }\\n}\",\"keccak256\":\"0xb2a4a70361bc856444096dbc2ff050b9749eb8518db1648bca1f6d8f8e5b6ea6\"},\"contracts/protocol/helpers.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nlibrary config{\\n\\n  uint256 public constant WAD_PRECISION = 18; \\n  uint256 public constant WAD = 1e18; \\n  uint256 public constant USDC_dec = 1e6; \\n  uint256 public constant roundLimit = 1e14; //0.0001 \\n\\n  //Max amount in one transaction \\n  uint256 private constant max_amount = 1e8 * WAD; \\n\\n  //Min amount in one transaction \\n  uint256 private constant min_amount = WAD/1e4; \\n\\n  function convertToWad(uint256 number, uint256 dec) internal pure returns(uint256 new_number){\\n    //number should not be 18 dec, but in collateral_dec\\n    new_number = number * (10 ** (WAD_PRECISION - dec));\\n    assert(new_number <= max_amount); \\n  }\\n\\n  function wadToDec(uint256 number, uint256 dec) internal pure returns(uint256 new_number){\\n    // number should be 18 dec \\n    assert(isInWad(number)); \\n    new_number = number/(10 ** (WAD_PRECISION - dec)); \\n\\n  }\\n\\n  function isInWad(uint256 number) internal pure returns(bool){\\n    return (number >= min_amount); \\n  }\\n\\n\\n\\n\\n}\",\"keccak256\":\"0xd30e0b9fdc4387086c91449032c63c8190e50bd580306e1e2a0b0dccbf735779\"},\"contracts/protocol/marketmanager.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"./owned.sol\\\";\\nimport \\\"./reputationtoken.sol\\\"; \\nimport {BondingCurve} from \\\"../bonds/bondingcurve.sol\\\";\\nimport {Controller} from \\\"./controller.sol\\\";\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {LinearShortZCB, ShortBondingCurve} from \\\"../bonds/LinearShortZCB.sol\\\"; \\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"../chainlink/VRFConsumerBaseV2.sol\\\";\\nimport {VRFCoordinatorV2Interface} from \\\"../chainlink/VRFCoordinatorV2Interface.sol\\\";\\nimport {config} from \\\"./helpers.sol\\\";\\n\\n/// @notice simple wrapped collateral to be used in markets instead of \\n/// collateral. Redeemable for collateral one to one \\ncontract WrappedCollateral is OwnedERC20 {\\n\\n  ERC20 collateral; \\n  uint256 dec_dif; \\n  constructor (\\n      string memory name,\\n      string memory symbol,\\n      address owner, \\n      address _collateral\\n      ) OwnedERC20(name, symbol, owner) {\\n      collateral = ERC20(_collateral);\\n\\n      // collateral_dec = collateral.decimals();\\n      collateral.approve(owner, type(uint256).max); \\n\\n      dec_dif = decimals() - collateral.decimals(); //12 for USDC, 0 for 18\\n    }\\n\\n  /// @notice called when buying \\n  /// @param _amount is always in 18 \\n  function mint(address _from, address _target, uint256 _amount) external {\\n    uint256 amount = _amount/(10**dec_dif); \\n    collateral.transferFrom(_from, address(this), amount); \\n    _mint(_target, _amount); \\n  }\\n\\n  /// @notice called when selling \\n  function redeem(address _from, address _target, uint256 _amount) external {\\n    uint256 amount = _amount/(10**dec_dif); \\n\\n    _burn(_from, _amount); \\n    collateral.transfer(_target, amount); \\n  }\\n\\n  function trustedTransfer(address _target, uint256 _amount) external {\\n    require(msg.sender == owner, \\\"Not owner\\\"); \\n    uint256 amount = _amount/(10**dec_dif); \\n    collateral.transfer(_target, amount); \\n  }\\n\\n  function flush(address flushTo) external onlyOwner{\\n\\n    collateral.transfer(flushTo, collateral.balanceOf(address(this))); \\n  }\\n\\n}\\n\\ncontract MarketManager is Owned\\n // VRFConsumerBaseV2 \\n {\\n  using FixedPointMathLib for uint256;\\n\\n  // Chainlink state variables\\n  VRFCoordinatorV2Interface COORDINATOR;\\n  uint64 private immutable subscriptionId;\\n  bytes32 private keyHash;\\n  uint32 private callbackGasLimit = 100000;\\n  uint16 private requestConfirmations = 3;\\n  uint256 total_validator_bought; // should be a mapping no?\\n  bool private _mutex;\\n\\n  ReputationNFT rep;\\n  Controller controller;\\n  CoreMarketData[] public markets;\\n\\n  mapping(uint256 => uint256) requestToMarketId; // chainlink request id to marketId\\n  mapping(uint256 => ValidatorData) validator_data; //marketId-> total amount of zcb validators can buy \\n  mapping(uint256=> mapping(address=> uint256)) sale_data; //marketId-> total amount of zcb bought\\n  mapping(uint256=>uint256) private redemption_prices; //redemption price for each market, set when market resolves \\n  mapping(uint256=>mapping(address=>uint256)) private assessment_collaterals;  //marketId-> trader->collateralIn\\n  mapping(uint256=>mapping(address=>uint256)) private assessment_prices; \\n  mapping(uint256=>mapping(address=>bool)) private assessment_trader;\\n  mapping(uint256=>mapping(address=>uint256) ) public assessment_probs; \\n  mapping(uint256=> MarketPhaseData) public restriction_data; // market ID => restriction data\\n  mapping(uint256=> uint256) collateral_pot; // marketID => total collateral recieved\\n  mapping(uint256=> CDP) private debt_pools; // marketID => debt info\\n  mapping(uint256=> MarketParameters) private parameters; //marketId-> params\\n  mapping(uint256=> mapping(address=>bool)) private redeemed; \\n  mapping(uint256=>mapping(address=>bool)) isShortZCB; //marketId-> address-> isshortZCB\\n  mapping(uint256=>mapping(address=>uint256) )assessment_shorts; // short collateral during assessment\\n\\n  struct CoreMarketData {\\n    BondingCurve long;\\n    ShortBondingCurve short;\\n    string description; // instrument description\\n    uint256 creationTimestamp;\\n    uint256 resolutionTimestamp;\\n  }\\n\\n  struct CDP{\\n    mapping(address=>uint256) collateral_amount;\\n    mapping(address=>uint256) borrowed_amount; \\n    uint256 total_debt; \\n    uint256 total_collateral;\\n  }\\n\\n  struct MarketPhaseData {\\n    bool duringAssessment;\\n    bool onlyReputable;\\n    bool resolved;\\n    uint256 min_rep_score;\\n    bool alive;\\n    bool atLoss;\\n    uint256 base_budget;\\n  }\\n\\n  struct ValidatorData{\\n    uint256 val_cap;// total zcb validators can buy at a discount\\n    uint256 avg_price; //price the validators can buy zcb at a discount \\n    address[] candidates; // possible validators\\n    address[] validators;\\n    uint8 confirmations;\\n    bool requested; // true if already requested random numbers from array.\\n    mapping(address => uint256) sales; // amount of zcb bought per validator\\n    uint256 totalSales; // total amount of zcb bought;\\n    uint256 numApprovedValidators; \\n  }\\n\\n  /// @param N: upper bound on number of validators chosen.\\n  /// @param sigma: validators' stake\\n  /// @param alpha: minimum managers' stake\\n  /// @param omega: high reputation's stake \\n  /// @param delta: Upper and lower bound for price which is added/subtracted from alpha \\n  /// @param r:  reputation ranking for onlyRep phase\\n  /// @param s: senior coefficient; how much senior capital the managers can attract at approval \\n  /// param beta: how much volatility managers are absorbing \\n  /// param leverage: how much leverage managers can apply \\n  /// param base_budget: higher base_budget means lower decentralization, \\n  /// @dev omega always <= alpha\\n  struct MarketParameters{\\n    uint32 N;\\n    uint256 sigma; \\n    uint256 alpha; \\n    uint256 omega;\\n    uint256 delta; \\n    uint256 r;\\n    uint256 s; \\n  }\\n\\n\\n  modifier onlyController(){\\n    require(address(controller) == msg.sender || msg.sender == owner || msg.sender == address(this), \\\"is not controller\\\"); \\n    _;\\n  }\\n\\n\\n  modifier _lock_() {\\n    require(!_mutex, \\\"ERR_REENTRY\\\");\\n    _mutex = true;\\n    _;\\n    _mutex = false;\\n  }\\n\\n  constructor(\\n    address _creator_address,\\n    address reputationNFTaddress,  \\n    address _controllerAddress,\\n    address _vrfCoordinator, // 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\\n     bytes32 _keyHash, // 0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f\\n    uint64 _subscriptionId // 1713\\n  ) \\n    Owned(_creator_address) \\n    //VRFConsumerBaseV2(0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed) \\n  {\\n    rep = ReputationNFT(reputationNFTaddress);\\n    controller = Controller(_controllerAddress);\\n    keyHash = bytes32(0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f);\\n    subscriptionId = 1713;\\n    COORDINATOR = VRFCoordinatorV2Interface(0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed);\\n    \\n    // push empty market\\n    markets.push(\\n      makeEmptyMarketData()\\n    );\\n  }\\n\\n  function makeEmptyMarketData() public pure returns (CoreMarketData memory) {\\n    return CoreMarketData(\\n        BondingCurve(address(0)),\\n        ShortBondingCurve(address(0)),\\n        \\\"\\\",\\n        0,\\n        0\\n      );\\n  }\\n\\n  function marketCount() public view returns (uint256) {\\n    return markets.length;\\n  }\\n\\n  function getMarket(uint256 _id) public view returns (CoreMarketData memory) {\\n        if (_id >= markets.length) {\\n            return makeEmptyMarketData();\\n        } else {\\n            return markets[_id];\\n        }\\n  }\\n\\n\\n  /// @notice parameters have to be set prior \\n  function newMarket(\\n    uint256 marketId, \\n    uint256 principal, \\n    uint256 expectedYield, \\n    BondingCurve _long, \\n    ShortBondingCurve _short, \\n    string calldata _description, \\n    uint256 _creationTimestamp\\n    ) external onlyController{\\n\\n    markets.push(CoreMarketData(\\n      _long,\\n      _short,\\n      _description,\\n      _creationTimestamp,\\n      0\\n    ));\\n\\n    uint256 base_budget = 1000 * config.WAD; //TODO \\n\\n    setMarketPhase(marketId, true, true, base_budget);  \\n    \\n    setCurves(marketId);\\n    \\n    setValidatorCap(marketId, principal, expectedYield); \\n    \\n    setUpperBound(marketId, principal.mulWadDown(parameters[marketId].alpha+ parameters[marketId].delta));  \\n\\n  }\\n\\n  /*----Phase Functions----*/\\n\\n  /// @notice list of parameters in this system for each market, should vary for each instrument \\n  /// @dev calculates market driven s from utilization rate. If u-r high,  then s should be low, as 1) it disincentivizes \\n  /// managers to approving as more proportion of the profit goes to the LP, and 2) disincentivizes the borrower \\n  /// to borrow as it lowers approved principal and increases interest rate \\n  function setParameters(\\n    MarketParameters memory param,\\n    uint256 utilizationRate,\\n    uint256 marketId \\n    ) external onlyController{\\n\\n    parameters[marketId] = param; \\n    parameters[marketId].s = param.s.mulWadDown(config.WAD - utilizationRate); // experiment\\n    console.log('utilization rate/s', utilizationRate, parameters[marketId].s);  \\n  }\\n\\n  /// @notice gets the top percentile reputation score threshold \\n  function calcMinRepScore(uint256 marketId) internal view returns(uint256){\\n    return rep.getMinRepScore(parameters[marketId].r, marketId); \\n  }\\n\\n  /// @notice sets market phase data\\n  /// @dev called on market initialization by controller\\n  /// @param base_budget: base budget (amount of vault tokens to spend) as a market manager during the assessment stage\\n  function setMarketPhase(\\n    uint256 marketId, \\n    bool duringAssessment,\\n    bool _onlyReputable,\\n    uint256 base_budget\\n  ) internal {\\n    MarketPhaseData storage data = restriction_data[marketId]; \\n    data.onlyReputable = _onlyReputable; \\n    data.duringAssessment = duringAssessment;\\n    data.min_rep_score = calcMinRepScore(marketId);\\n    data.base_budget = base_budget;\\n    data.alive = true;\\n  }\\n\\n  \\n  /// @notice setup for long and short ZCBs.\\n   \\n  function setCurves(\\n    uint256 marketId\\n  ) internal {\\n    isShortZCB[marketId][address(markets[marketId].short)] = true;\\n    markets[marketId].long.setShortZCB(address(markets[marketId].short));\\n  }\\n\\n  /// @notice used to transition from reputationphases \\n  function setReputationPhase(\\n    uint256 marketId,\\n    bool _onlyReputable\\n  ) internal {\\n    require(restriction_data[marketId].alive, \\\"market must be alive\\\");\\n    restriction_data[marketId].onlyReputable = _onlyReputable;\\n  }\\n\\n  function getPhaseData(\\n    uint256 marketId\\n  ) public view returns (MarketPhaseData memory)  {\\n    return restriction_data[marketId];\\n  }\\n  \\n  /// @notice main approval function called by controller\\n  /// @dev if market is alive and market is not during assessment, it is approved. \\n  function approveMarketAndSetLowerBound(\\n    uint256 marketId\\n    ) external onlyController {\\n    require(restriction_data[marketId].alive);\\n\\n    restriction_data[marketId].duringAssessment = false; \\n    uint256 lower_bound = (parameters[marketId].alpha - parameters[marketId].delta)\\n                  .mulWadDown(controller\\n                  .getVault(marketId)\\n                  .fetchInstrumentData(marketId)\\n                  .principal ); \\n\\n    setLowerBound(marketId, lower_bound) ; \\n  }\\n\\n  /// @notice called by controller when market is initialized \\n  function setUpperBound(\\n    uint256 marketId, \\n    uint256 new_upper_bound\\n    ) internal  {\\n    markets[marketId].long.setUpperBound(new_upper_bound);\\n  }\\n    \\n  /// @notice called by controller when market is approved\\n  function setLowerBound(\\n    uint256 marketId, \\n    uint256 new_lower_bound\\n    ) private {\\n    // BondingCurve(controller.getZCB_ad(marketId)).setLowerBound(new_lower_bound);\\n    markets[marketId].long.setLowerBound(new_lower_bound);\\n  }\\n  \\n  /// @notice Called when market should end, a) when denied b) when maturity \\n  /// @param resolve is true when instrument does not resolve prematurely\\n  function deactivateMarket(uint256 marketId, bool atLoss, bool resolve) internal{\\n    restriction_data[marketId].resolved = resolve; \\n    restriction_data[marketId].atLoss = atLoss; \\n    restriction_data[marketId].alive = false; //TODO alive should be true, => alive is false when everyone has redeemed.\\n  }\\n\\n\\n  /* \\n  Returns Minimal reputation score to participate in the onlyReputation phase\\n  TODO\\n  */\\n  function getMinRepScore(uint256 marketId) public view returns(uint256){\\n    return restriction_data[marketId].min_rep_score;\\n  }\\n\\n\\n  /* Conditions */\\n  \\n  /// @dev verification of trader initializes reputation score at 0, to gain reputation need to participate in markets.\\n  function isVerified(address trader) public view returns(bool){\\n    return (controller.isVerified(trader) || trader == owner);\\n  }\\n\\n  function isReputable(address trader, uint256 marketId) public view returns(bool){\\n    return (restriction_data[marketId].min_rep_score <= rep.getReputationScore(trader) || trader == owner); \\n  }\\n\\n  function duringMarketAssessment(\\n    uint256 marketId) public view returns(bool){\\n    return restriction_data[marketId].duringAssessment; \\n  }\\n\\n  function onlyReputable(\\n    uint256 marketId\\n    ) public view returns(bool){\\n    return restriction_data[marketId].onlyReputable; \\n\\n  }\\n\\n  function isMarketApproved(uint256 marketId) public view returns(bool){\\n    return(!restriction_data[marketId].duringAssessment && restriction_data[marketId].alive); \\n    \\n  }\\n\\n  function marketActive(uint256 marketId) public view returns(bool){\\n    return restriction_data[marketId].alive; \\n  }\\n\\n  /// @notice returns true if amount bought is greater than the insurance threshold\\n  function marketCondition(uint256 marketId) public view returns(bool){\\n    //BondingCurve bc = BondingCurve(controller.getZCB_ad(marketId)); \\n    BondingCurve bc = markets[marketId].long;\\n    uint256 principal = controller.getVault(marketId).fetchInstrumentData(marketId).principal;\\n    uint256 total_bought = bc.getTotalCollateral();\\n\\n    return (total_bought>= principal.mulWadDown(parameters[marketId].alpha)); \\n  }\\n\\n  /// @notice returns whether current market is in phase \\n  /// 1: onlyReputable, which also means market is in assessment\\n  /// 2: not onlyReputable but in asseessment \\n  /// 3: in assessment but canbeapproved \\n  /// 4: post assessment(accepted or denied)\\n  function getCurrentMarketPhase(uint256 marketId) public view returns(uint256){\\n    if (onlyReputable(marketId)){\\n      assert(!marketCondition(marketId) && !isMarketApproved(marketId) && duringMarketAssessment(marketId) ); \\n      return 1; \\n    }\\n\\n    else if (duringMarketAssessment(marketId) && !onlyReputable(marketId)){\\n      assert(!isMarketApproved(marketId)); \\n      if (marketCondition(marketId)) return 3; \\n      return 2; \\n    }\\n\\n    else if (isMarketApproved( marketId)){\\n      assert (!duringMarketAssessment(marketId) && marketCondition(marketId)); \\n      return 4; \\n    }\\n\\n  }\\n\\n  function getDebtPosition(address trader, uint256 marketId) public view returns(uint256, uint256){\\n    CDP storage cdp = debt_pools[marketId];\\n    return (cdp.collateral_amount[trader], cdp.borrowed_amount[trader]);\\n  }\\n\\n  /// @notice get trade budget = f(reputation), returns in collateral_dec\\n  /// sqrt for now\\n  function getTraderBudget(uint256 marketId, address trader) public view returns(uint256){\\n    uint256 repscore = rep.getReputationScore(trader); \\n    //uint256 collateral_dec =  BondingCurve(controller.getZCB_ad(marketId)).collateral_dec(); \\n    uint256 collateral_dec = markets[marketId].long.collateral_dec();\\n    if (repscore==0) return 0; \\n\\n    return restriction_data[marketId].base_budget + (repscore*config.WAD).sqrt();\\n  }\\n  \\n  /// @notice computes the price for ZCB one needs to short at to completely\\n  /// hedge for the case of maximal loss, function of principal and interest\\n  function getHedgePrice(uint256 marketId) public view returns(uint256){\\n    uint256 principal = controller.getVault(marketId).fetchInstrumentData(marketId).principal; \\n    uint256 yield = controller.getVault(marketId).fetchInstrumentData(marketId).expectedYield; \\n    uint256 den = principal.mulWadDown(config.WAD - parameters[marketId].alpha); \\n    return config.WAD - yield.divWadDown(den); \\n    // uint256 den = (principal * (PRICE_PRECISION - parameters[marketId].alpha))/PRICE_PRECISION; \\n    // return PRICE_PRECISION -  (yield*PRICE_PRECISION)/den;\\n\\n  }\\n\\n  function getParameters(uint256 marketId) public view returns(MarketParameters memory){\\n    return parameters[marketId]; \\n  }\\n\\n  function getZCB(uint256 marketId) public view returns (BondingCurve) {\\n    return markets[marketId].long;\\n  }\\n\\n  function getShortZCB(uint256 marketId) public view returns (ShortBondingCurve) {\\n    return markets[marketId].short;\\n  }\\n\\n  /// @notice computes maximum amount of quantity that trader can short while being hedged\\n  /// such that when he loses his loss will be offset by his gains  \\n  function getHedgeQuantity(address trader, uint256 marketId) public view returns(uint256){\\n    uint num = controller.getVault(marketId).fetchInstrumentData(marketId)\\n              .principal.mulWadDown(config.WAD - parameters[marketId].alpha); \\n    return num.mulDivDown(controller.getVault(marketId).balanceOf(trader), \\n              controller.getVault(marketId).totalSupply()); \\n  }\\n  \\n  /**\\n   @notice performs checks for buy function\\n   @param amount: collateral in vault tokens to buy ZCB.\\n   */\\n  function _canBuy(\\n    address trader,\\n    uint256 amount,\\n    uint256 marketId\\n  ) internal view {\\n    //If after assessment there is a set buy threshold, people can't buy above this threshold\\n    require(marketActive(marketId), \\\"Market Not Active\\\");\\n\\n    //If called from shortZCB contract should b \\n    if (isShortZCB[marketId][msg.sender]){\\n      return; \\n    }\\n\\n    bool _duringMarketAssessment = duringMarketAssessment(marketId);\\n    bool _onlyReputable =  onlyReputable(marketId);\\n\\n    if (_duringMarketAssessment){\\n      if (!isVerified(trader)) revert(\\\"trader is not verified\\\");\\n      if (!(getTraderBudget(marketId, trader)>= amount + rep.balances(marketId, trader))) revert(\\\"trader budget limit exceeded\\\");\\n    }\\n\\n    //During the early risk assessment phase only reputable can buy \\n    if (_onlyReputable){\\n      require(_duringMarketAssessment, \\\"Market needs to be in assessment phase\\\"); \\n      if (!isReputable(trader, marketId)){ \\n        revert(\\\"trader lacks sufficient reputation\\\");\\n      }\\n    }\\n  }\\n\\n\\n  /// @notice amount is in zcb_amount_in\\n  function _canSell(\\n    address trader,\\n    uint256 amount, \\n    uint256 marketId\\n  ) internal view returns(bool) {\\n    require(marketActive(marketId), \\\"Market Not Active\\\");\\n    //BondingCurve zcb = BondingCurve(address(controller.getZCB(marketId)));\\n    BondingCurve zcb = markets[marketId].long;\\n\\n    // For current onchain conditions, the estimated collateral \\n    // trader would obtain should be less than budget  \\n    if (!(getTraderBudget(marketId, trader) >= zcb.calculateSaleReturn(amount))) return false; \\n    \\n    return true; \\n  }\\n\\n  \\n  /// @notice During assessment phase, need to log the trader's \\n  /// total collateral when he bought zcb. Trader can only redeem collateral in \\n  /// when market is not approved \\n  function _logAssessmentTrade(\\n    uint256 marketId, \\n    address trader, \\n    uint256 collateralIn,\\n    uint256 probability\\n    )\\n    internal \\n  { \\n    assessment_trader[marketId][trader] = true; \\n    assessment_collaterals[marketId][trader] += collateralIn;\\n    assessment_probs[marketId][trader] = probability; \\n\\n    // queuedRepUpdates[msg.sender] += 1; \\n\\n  }\\n\\n  /// @notice denies market from validator \\n  function denyMarket(\\n    uint256 marketId\\n  ) external onlyController {\\n    require(marketActive(marketId), \\\"Market Not Active\\\"); \\n    require(restriction_data[marketId].duringAssessment, \\\"Not in assessment\\\"); \\n    MarketPhaseData storage data = restriction_data[marketId]; \\n    // data.resolved = true; \\n    data.duringAssessment = false;\\n  }\\n\\n\\n  ///VALIDATOR FUNCTIONS \\n\\n  /// @notice called when market initialized, calculates the average price and quantities of zcb\\n  /// validators will buy at a discount when approving\\n  /// valcap => sigma * princpal.\\n  // \\n  function setValidatorCap(\\n    uint256 marketId,\\n    uint256 principal,\\n    uint256 interest\\n  ) internal {\\n    //BondingCurve zcb = BondingCurve(address(controller.getZCB(marketId)));\\n    BondingCurve zcb = markets[marketId].long;\\n    assert(config.isInWad(parameters[marketId].sigma) && config.isInWad(principal));\\n\\n    uint256 valColCap = (parameters[marketId].sigma.mulWadDown(principal)); \\n\\n    // Get how much ZCB validators need to buy in total, which needs to be filled \\n    // for the market to be approved \\n    uint256 disCap = zcb.get_discount_cap();\\n    uint256 avgPrice = valColCap.divWadDown(disCap);\\n\\n    validator_data[marketId].val_cap = disCap;\\n    validator_data[marketId].avg_price = avgPrice; \\n  }\\n\\n  function isValidator(uint256 marketId, address user) view public returns(bool){\\n    address[] storage _validators = validator_data[marketId].validators;\\n    for (uint i = 0; i < _validators.length; i++) {\\n      if (_validators[i] == user) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n\\n  function _removeValidator(uint256 marketId, address user) internal {\\n    address[] storage arr = validator_data[marketId].validators;\\n    uint256 length = arr.length;\\n    \\n    for (uint i = 0; i < length; i++) {\\n      if (user == arr[i]) {\\n        arr[i] = arr[length - 1];\\n        arr.pop();\\n        return;\\n      }\\n    }\\n  }\\n\\n  /**\\n   @notice randomly choose validators for market approval, async operation => fulfillRandomness is the callback function.\\n   @dev called when phase changes onlyRep => false\\n   */\\n  function _getValidators(uint256 marketId) internal {\\n\\n    validator_data[marketId].requested = true;\\n\\n    //TODO N is currently upper bound on number of validators.\\n    if (validator_data[marketId].candidates.length <= parameters[marketId].N) {\\n      validator_data[marketId].validators = validator_data[marketId].candidates;\\n      return;\\n    }\\n\\n    uint256 _requestId = COORDINATOR.requestRandomWords(\\n      keyHash,\\n      subscriptionId,\\n      requestConfirmations,\\n      callbackGasLimit,\\n      parameters[marketId].N\\n    );\\n\\n    requestToMarketId[_requestId] = marketId;\\n  }\\n\\n  /**\\n   @notice chainlink callback function, sets validators.\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) \\n  internal \\n  //override \\n  {\\n    uint256 marketId = requestToMarketId[requestId];\\n    assert(randomWords.length == parameters[marketId].N);\\n\\n    address[] memory temp = validator_data[marketId].candidates;\\n    uint256 _N = parameters[marketId].N;\\n    uint256 length = _N;\\n\\n    for (uint8 i = 0; i < _N; i++) {\\n      uint j = randomWords[i] % length;\\n      address selected = temp[j];\\n      validator_data[marketId].validators.push(selected);\\n      temp[j] = temp[length - 1];\\n      length--;\\n    }\\n  }\\n\\n  function getValidatorRequiredCollateral(uint256 marketId) public view returns(uint256){\\n\\n    uint256 val_cap =  validator_data[marketId].val_cap; \\n    uint256 zcb_for_sale = val_cap/parameters[marketId].N; \\n    return zcb_for_sale.mulWadDown(validator_data[marketId].avg_price); \\n  } \\n\\n  function numValidatorLeftToApproval(uint256 marketId) public view returns(uint256){\\n    return parameters[marketId].N - validator_data[marketId].numApprovedValidators; \\n  }\\n\\n  /// @notice allows validators to buy at a discount \\n  /// They can only buy a fixed amount of ZCB, usually a at lot larger amount \\n  /// @dev get val_cap, the total amount of zcb for sale and each validators should buy \\n  /// val_cap/num validators zcb \\n  /// They also need to hold the corresponding vault, so they are incentivized to assess at a systemic level and avoid highly \\n  /// correlated instruments \\n  /// TODO change this to staking system \\n  function validatorBuy(\\n    uint256 marketId\\n  ) external  {\\n    require(marketCondition(marketId), \\\"Market can't be approved\\\"); \\n    BondingCurve zcb = markets[marketId].long;\\n\\n    uint256 val_cap =  validator_data[marketId].val_cap; \\n    uint256 zcb_for_sale = val_cap/parameters[marketId].N; \\n    uint256 collateral_required = zcb_for_sale.mulWadDown(validator_data[marketId].avg_price); \\n\\n    require(validator_data[marketId].sales[msg.sender] <= zcb_for_sale, \\\"already approved\\\");\\n   // require(controller.getVault().balanceInUnderlying(msg.sender) >= collateral_required, \\\"Not enough vault exposure\\\"); \\n\\n    validator_data[marketId].sales[msg.sender] += zcb_for_sale;\\n    validator_data[marketId].totalSales += (zcb_for_sale +1);  //since division rounds down \\n    validator_data[marketId].numApprovedValidators += 1; \\n\\n    WrappedCollateral wCollateral = WrappedCollateral(zcb.getCollateral()); \\n    wCollateral.mint(msg.sender, address(this), collateral_required); \\n    wCollateral.transfer(address(zcb), collateral_required);\\n\\n    zcb.trustedDiscountedMint(msg.sender, zcb_for_sale);\\n    zcb.incrementDiscountedReserves(collateral_required); \\n\\n    // Last validator pays more gas, is fair because earlier validators are more uncertain \\n    if (validatorApprovalCondition(marketId)) controller.approveMarket(marketId);\\n  }\\n\\n  function validatorApprovalCondition(uint256 marketId ) public view returns(bool){\\n    //return(total_validator_bought >= validator_data[marketId].val_cap);\\n    return (validator_data[marketId].totalSales >= validator_data[marketId].val_cap); \\n  }\\n\\n  mapping(uint256=> mapping(address=>uint256)) longTrades; \\n  mapping(uint256=> mapping(address=>uint256)) shortTrades;\\n\\n  /// @notice log how much collateral trader has at stake, \\n  /// to be used for redeeming later \\n  function _logTrades(\\n    uint256 marketId,\\n    address trader, \\n    uint256 collateral, \\n    bool isBuy, \\n    bool isLong\\n    ) internal {\\n\\n    if (isLong){\\n      if (isBuy) longTrades[marketId][trader] += collateral; \\n      else longTrades[marketId][trader] -= collateral; \\n    }\\n\\n    else{\\n      if (isBuy) shortTrades[marketId][trader] += collateral; \\n      else shortTrades[marketId][trader] -= collateral; \\n    }\\n  }\\n\\n  /// @notice main entry point for longZCB buys\\n  /// @param _collateralIn: amount of collateral tokens in WAD\\n  /// @param _min_amount_out is min quantity of ZCB returned\\n  function buy(\\n      uint256 _marketId,\\n      uint256 _collateralIn,\\n      uint256 _min_amount_out\\n    ) external _lock_ returns (uint256 amountOut) {\\n    require(!restriction_data[_marketId].resolved, \\\"must not be resolved\\\");\\n    _canBuy(msg.sender, _collateralIn, _marketId);\\n\\n    // BondingCurve zcb = BondingCurve(controller.getZCB_ad(_marketId)); // SOMEHOW GET ZCB\\n    BondingCurve zcb = markets[_marketId].long;\\n    WrappedCollateral wCollateral = WrappedCollateral(zcb.getCollateral()); \\n\\n    // Mint wCollateral to this address\\n    wCollateral.mint(msg.sender, address(this), _collateralIn); \\n    wCollateral.approve(address(zcb), _collateralIn); \\n\\n    // reentrant locked and trusted contract with no hooks, so ok \\n    // need to set reuputation phase after the trade \\n    amountOut = zcb.trustedBuy(address(this), _collateralIn, _min_amount_out);\\n\\n    //Need to log assessment trades for updating reputation scores or returning collateral\\n    //when market denied \\n    _logTrades(_marketId, msg.sender, _collateralIn, true, true); \\n\\n    if (duringMarketAssessment(_marketId)){\\n\\n      // rep.incrementBalance(_marketId, msg.sender, _collateralIn);\\n\\n      // keep track of amount bought during reputation phase\\n      // and make transitions from onlyReputation true->false\\n      if(onlyReputable(_marketId)){\\n        uint256 principal = controller.getVault(_marketId).fetchInstrumentData(_marketId).principal;\\n        uint256 total_bought = zcb.getTotalCollateral();\\n\\n        // first time rep user buying.\\n        if (!assessment_trader[_marketId][msg.sender]) {\\n          validator_data[_marketId].candidates.push(msg.sender);\\n        }\\n\\n        if (total_bought >= parameters[_marketId].omega.mulWadDown(principal)) {\\n          setReputationPhase(_marketId, false);\\n          _getValidators(_marketId);\\n        }\\n      }\\n      \\n      assessment_probs[_marketId][msg.sender] =  zcb.calcImpliedProbability(\\n          _collateralIn, \\n          getTraderBudget(_marketId, msg.sender) \\n      ); \\n  \\n      }\\n\\n    zcb.transfer(msg.sender, amountOut); \\n\\n\\n  }\\n\\n\\n  function sell(\\n      uint256 _marketId,\\n      uint256 _zcb_amount_in, \\n      uint256 _min_collateral_out\\n    ) external _lock_ returns (uint256 amountOut){\\n    require(!restriction_data[_marketId].resolved, \\\"must not be resolved\\\");\\n    require(_canSell(msg.sender, \\n      _zcb_amount_in, \\n      _marketId),\\\"Trade Restricted\\\");\\n\\n    //BondingCurve zcb = BondingCurve(controller.getZCB_ad(_marketId)); // SOMEHOW GET ZCB\\n    BondingCurve zcb = markets[_marketId].long;\\n\\n    zcb.transferFrom(msg.sender, address(this), _zcb_amount_in); \\n\\n    // wCollateral to this address\\n    amountOut = zcb.trustedSell(address(this), _zcb_amount_in, _min_collateral_out);\\n\\n    _logTrades(_marketId, msg.sender, amountOut, false, true); \\n\\n    //Send collateral to trader \\n    WrappedCollateral(zcb.getCollateral()).redeem(address(this), msg.sender, amountOut); \\n\\n    if (!duringMarketAssessment(_marketId)) deduct_selling_fee(); \\n\\n    // queuedRepUpdates[msg.sender] -= 1; \\n\\n  }\\n\\n  function deduct_selling_fee() internal {}\\n\\n  // function add_short_zcb(\\n  //   uint256 marketId\\n  // ) external onlyController{\\n  //   isShortZCB[marketId][markets[marketId].short] = true;\\n  //   shortZCBs[marketId] = shortZCB_address;\\n  //   BondingCurve(markets[marketId].long).setShortZCB(shortZCB_address); \\n\\n  // }\\n\\n  /**\\n   @param collateralIn: amount of collateral (vt)\\n   */\\n  function openShort(\\n    uint256 marketId,\\n    uint256 collateralIn, \\n    uint256 min_amount_out\\n  ) external _lock_ {\\n\\n    if (duringMarketAssessment(marketId)){\\n      _logAssessmentShorts(marketId, msg.sender, collateralIn); \\n      // queuedRepUpdates[msg.sender] += 1; \\n\\n    }\\n    //ShortBondingCurve shortZCB = ShortBondingCurve(shortZCBs[marketId]); \\n    ShortBondingCurve shortZCB = markets[marketId].short;\\n    WrappedCollateral wCollateral = WrappedCollateral(shortZCB.getCollateral()); \\n\\n    // Mint wCollateral to this address\\n    wCollateral.mint(msg.sender, address(this), collateralIn); \\n    wCollateral.approve(address(shortZCB), collateralIn); \\n\\n    // lendAmount: amount of zcb to borrow w/ shortZCB pricing\\n    (uint lendAmount, uint c) = shortZCB.calculateAmountGivenSell(collateralIn);\\n    _logTrades(marketId, msg.sender, collateralIn, true, false); \\n\\n    // zcb minted to shortzcb contract\\n    _lendForShort(msg.sender, marketId, lendAmount);\\n\\n    if (duringMarketAssessment(marketId)) deduct_selling_fee(); \\n\\n    shortZCB.trustedShort(address(this), collateralIn, min_amount_out); \\n\\n    shortZCB.transfer(msg.sender, lendAmount); \\n\\n\\n  }\\n\\n  /// @notice called when short is being opened, it allows shortZCB contract to \\n  /// \\\"borrow\\\" by minting new ZCB to the shortZCB contract. \\n  /// @dev although minting new zcb is different from borrowing from existing zcb holders, \\n  /// in the context of our bonding curve prediction \\n  /// market this is alllowed since we just dont allow longZCB holders \\n  /// to sell when liquidity dries up   \\n  function _lendForShort(\\n    address trader, \\n    uint256 marketId, \\n    uint256 requested_zcb\\n    ) internal {\\n    // BondingCurve zcb = BondingCurve(controller.getZCB_ad(marketId));\\n    BondingCurve zcb = markets[marketId].long;\\n\\n    // Log debt data \\n    CDP storage cdp = debt_pools[marketId];\\n    cdp.collateral_amount[trader] += requested_zcb; \\n    cdp.borrowed_amount[trader] += requested_zcb;  \\n    cdp.total_debt += requested_zcb; \\n    cdp.total_collateral += requested_zcb; //only ds \\n    collateral_pot[marketId] += requested_zcb; //Total ds collateral \\n\\n    zcb.trustedDiscountedMint(address(markets[marketId].short), requested_zcb); \\n  }\\n\\n   function _repayForShort(\\n    address trader, \\n    uint256 marketId, \\n    uint256 repaying_zcb\\n    ) internal {\\n    // BondingCurve zcb = BondingCurve(controller.getZCB_ad(marketId));\\n    BondingCurve zcb = markets[marketId].long;\\n\\n    CDP storage cdp = debt_pools[marketId];\\n    cdp.collateral_amount[trader] -= repaying_zcb; \\n    cdp.borrowed_amount[trader] -= repaying_zcb; \\n    cdp.total_debt -= repaying_zcb; \\n    cdp.total_collateral -= repaying_zcb; \\n    collateral_pot[marketId] -= repaying_zcb;\\n  }\\n\\n  /// @notice called by user to repay shorts\\n  /// @param close_amount is in of shortZCB, 18dec \\n  function closeShort(\\n    uint256 marketId, \\n    uint256 close_amount, \\n    uint256 min_collateral_out\\n    ) external _lock_ {\\n\\n\\n    \\n    ShortBondingCurve shortZCB = markets[marketId].short; //ShortBondingCurve(shortZCBs[marketId]);\\n\\n    _repayForShort(msg.sender, marketId, close_amount);\\n\\n    shortZCB.transferFrom(msg.sender, address(this), close_amount);\\n\\n    // This will buy close_amount worth of longZCB to the shortZCB contract \\n    (uint256 returned_collateral, uint256 tokenToBeBurned) = shortZCB.trustedClose(address(this), close_amount, min_collateral_out);  \\n     _logTrades(marketId, msg.sender, returned_collateral, false, false); \\n\\n    if(duringMarketAssessment(marketId)){\\n      assessment_shorts[marketId][msg.sender] -= returned_collateral;  \\n    }\\n\\n    // Now burn the contract's bought longZCB imediately  \\n    markets[marketId].long.trustedDiscountedBurn(address(shortZCB), tokenToBeBurned);\\n\\n    // Return collateral to trader \\n    WrappedCollateral(shortZCB.getCollateral()).redeem(address(this), msg.sender, returned_collateral); \\n\\n\\n  }\\n\\n  function _logAssessmentShorts(uint256 marketId, address trader, uint256 collateralIn) internal {\\n    assessment_shorts[marketId][trader] += collateralIn; \\n  }\\n\\n\\n  /// @notice called by traders when market is resolved  \\n  function redeemShortZCB(\\n    uint256 marketId \\n    ) external _lock_ returns(uint256){\\n    require(!marketActive(marketId), \\\"Market Active\\\"); \\n    // LinearShortZCB shortZCB = LinearShortZCB(shortZCBs[marketId]);\\n    ShortBondingCurve shortZCB = markets[marketId].short;\\n    uint256 shortZCB_redeem_amount = shortZCB.balanceOf(msg.sender); \\n    shortZCB.trustedBurn(msg.sender, shortZCB_redeem_amount); \\n    assert(controller.getVault(marketId).balanceOf(address(shortZCB))==0);\\n\\n    uint256 long_redemption_price = get_redemption_price(marketId);\\n    uint256 redemption_price = long_redemption_price >= config.WAD ? 0 : config.WAD - long_redemption_price; \\n    uint256 collateral_redeem_amount = redemption_price.mulWadDown(shortZCB_redeem_amount); \\n\\n    controller.redeem_transfer(collateral_redeem_amount, msg.sender, marketId); \\n    return collateral_redeem_amount; \\n  }\\n\\n  /// @notice called by traders when market is denied or resolve before maturity \\n  function redeemDeniedMarket(\\n    uint256 marketId, \\n    bool isLong\\n  ) external _lock_ {\\n    require(!restriction_data[marketId].alive, \\\"Market Still During Assessment\\\"); // TODO\\n\\n    uint256 collateral_amount;\\n\\n    // Get collateral at stake in shorts, which will be directly given back to traders\\n    if(!isLong){\\n      ShortBondingCurve shortZCB = markets[marketId].short;\\n      require(shortZCB.balanceOf(msg.sender) >= 0, \\\"Empty Balance\\\");\\n\\n      collateral_amount = shortTrades[marketId][msg.sender]; \\n      delete shortTrades[marketId][msg.sender]; \\n\\n      //Burn all their balance\\n      shortZCB.trustedBurn( msg.sender,  shortZCB.balanceOf(msg.sender));\\n    } \\n\\n    // Get collateral at stake in longs, which will be directly given back to traders\\n    else {\\n      // BondingCurve zcb = BondingCurve(address(controller.getZCB(marketId)));\\n      BondingCurve zcb = markets[marketId].long;\\n\\n      require(zcb.balanceOf(msg.sender) >= 0, \\\"Empty Balance\\\");\\n\\n      if (isValidator(marketId, msg.sender)) {\\n\\n        collateral_amount = validator_data[marketId].sales[msg.sender].mulWadDown(validator_data[marketId].avg_price);\\n        delete validator_data[marketId].sales[msg.sender];\\n      }\\n      else{\\n        collateral_amount = longTrades[marketId][msg.sender]; \\n        delete longTrades[marketId][msg.sender]; \\n      }\\n\\n      // Burn all their balance \\n      zcb.trustedBurn(msg.sender, zcb.balanceOf(msg.sender)); \\n    }\\n\\n    // Before redeem_transfer is called all funds for this instrument should be back in the vault\\n    // including dust from wCollateral \\n    controller.redeem_transfer(collateral_amount, msg.sender, marketId);\\n\\n    // queuedRepUpdates[msg.sender] -= 1; \\n\\n    //TODO need to check if last redeemer, so can kill market.\\n\\n  }\\n\\n\\n\\n  function get_redemption_price(uint256 marketId) public view returns(uint256){\\n    return redemption_prices[marketId]; \\n  }\\n\\n  /**\\n  @dev Redemption price, as calculated (only once) at maturity,\\n  depends on total_repayed/(principal + predetermined yield)\\n  If total_repayed = 0, redemption price is 0\\n  @param atLoss: defines circumstances where expected returns are higher than actual\\n  @param loss: facevalue - returned amount => non-negative always?\\n  @param extra_gain: any extra yield not factored during assessment. Is 0 yield is as expected\\n   */\\n  function update_redemption_price(\\n    uint256 marketId,\\n    bool atLoss, \\n    uint256 extra_gain, \\n    uint256 loss, \\n    bool premature\\n  ) external  onlyController {  \\n    if (atLoss) assert(extra_gain == 0); \\n    assert(debt_pools[marketId].total_debt == markets[marketId].short.totalSupply());\\n\\n    // BondingCurve zcb = BondingCurve(address(controller.getZCB(marketId))); // SOMEHOW GET ZCB\\n    BondingCurve zcb = markets[marketId].long;\\n\\n    uint256 total_supply = zcb.getTotalZCB(); \\n    uint256 total_shorts = (extra_gain >0) ? debt_pools[marketId].total_debt :0; \\n\\n    if(!atLoss){\\n      redemption_prices[marketId] = config.WAD + extra_gain.divWadDown(total_supply + total_shorts); \\n      console.log('redemtionprice', redemption_prices[marketId]); \\n    } \\n    else {\\n      if (config.WAD <= loss.divWadDown(total_supply)){\\n        redemption_prices[marketId] = 0; \\n      }\\n      else {\\n        redemption_prices[marketId] = config.WAD - loss.divWadDown(total_supply);\\n      }\\n    }\\n\\n    deactivateMarket(marketId, atLoss, !premature); \\n  }\\n\\n  mapping(address=> uint8) queuedRepUpdates; \\n\\n  /// @notice trader will redeem entire balance of ZCB\\n  /// Needs to be called at maturity, market needs to be resolved first(from controller)\\n  function redeem(\\n    uint256 marketId\\n  ) public _lock_ returns(uint256){\\n    require(!marketActive(marketId), \\\"Market Active\\\"); \\n    require(restriction_data[marketId].resolved, \\\"Market not resolved\\\"); \\n    require(!redeemed[marketId][msg.sender], \\\"Already Redeemed\\\");\\n    redeemed[marketId][msg.sender] = true; \\n\\n    if (isValidator(marketId, msg.sender)) delete validator_data[marketId].sales[msg.sender]; \\n\\n    //BondingCurve zcb = BondingCurve(address(controller.getZCB(marketId)));\\n    BondingCurve zcb = markets[marketId].long;\\n\\n    assert(controller.getVault(marketId).balanceOf(address(zcb))==0);\\n\\n    uint256 zcb_redeem_amount = zcb.balanceOf(msg.sender); \\n    zcb.trustedBurn(msg.sender, zcb_redeem_amount); \\n\\n    uint256 redemption_price = get_redemption_price(marketId); \\n    uint256 collateral_redeem_amount = redemption_price.mulWadDown(zcb_redeem_amount); \\n\\n    if (!isValidator(marketId, msg.sender)) {\\n      bool increment = redemption_price >= config.WAD? true: false;\\n      controller.updateReputation(marketId, msg.sender, increment);\\n      // queuedRepUpdates[msg.sender] -=1; \\n    }\\n\\n    // Give out rewards only if reputation update debt is 0\\n    if (queuedRepUpdates[msg.sender] == 0) controller.redeem_transfer(collateral_redeem_amount, msg.sender, marketId); \\n\\n    return collateral_redeem_amount; \\n\\n  }\\n}\\n\\n\\n\",\"keccak256\":\"0xe2477d16af3dcd4012c7481fab1df2be213791fd0ac1c4d63424bbafaef07e5e\"},\"contracts/protocol/owned.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.4;\\n\\n// https://docs.synthetix.io/contracts/Owned\\ncontract Owned {\\n    address public owner;\\n    address public nominatedOwner;\\n\\n    constructor (address _owner) public {\\n        require(_owner != address(0), \\\"Owner address cannot be 0\\\");\\n        owner = _owner;\\n        emit OwnerChanged(address(0), _owner);\\n    }\\n\\n    function nominateNewOwner(address _owner) external onlyOwner {\\n        nominatedOwner = _owner;\\n        emit OwnerNominated(_owner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(msg.sender == nominatedOwner, \\\"You must be nominated before you can accept ownership\\\");\\n        emit OwnerChanged(owner, nominatedOwner);\\n        owner = nominatedOwner;\\n        nominatedOwner = address(0);\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n        _;\\n    }\\n\\n    event OwnerNominated(address newOwner);\\n    event OwnerChanged(address oldOwner, address newOwner);\\n}\",\"keccak256\":\"0x36a2933ab9503c1e564c378880a9ef2a02f91f4089d7b842ee38ef9d070d50fe\",\"license\":\"GPL-2.0-or-later\"},\"contracts/protocol/reputationtoken.sol\":{\"content\":\"pragma solidity ^0.8.4; \\n//https://github.com/poap-xyz/poap-contracts/tree/master/contracts\\nimport {ERC721} from \\\"solmate/src/tokens/ERC721.sol\\\";\\nimport {Controller} from \\\"./controller.sol\\\";\\nimport {BondingCurve} from \\\"../bonds/bondingcurve.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n\\ncontract ReputationNFT is ERC721 {\\n  mapping(uint256 => ReputationData) internal _reputation; // id to reputation\\n  mapping(address => uint256) internal _ownerToId;\\n  mapping(uint256 => TraderData[]) internal _marketData; // **MarketId to Market's data needed for calculating brier score.\\n\\n  uint256 private nonce = 1;\\n  Controller controller;\\n  uint256 SCALE = 1e18;\\n\\n\\n  struct ReputationData {\\n    uint256 n; // number of markets participated in => regular uint256\\n    uint256 score; // averaged reputation score => 60.18\\n  }\\n\\n  struct TraderData { // for each market\\n    address trader;\\n    uint256 tokensBought;\\n  }\\n\\n    struct TopReputation{\\n    address trader; \\n    uint256 score; \\n  }\\n\\n  uint256 private constant topRep = 100; \\n  TopReputation[topRep] topReputations; \\n\\n  mapping(uint256=>mapping(address=>bool)) canTrade; //marketID-> address-> cantrade\\n  mapping(uint256=>bool) allowAll; \\n  mapping(address=>bool) isUnique; \\n  address[] unique_traders; \\n  mapping(uint256=>mapping(address=>uint256)) public balances; // marketId => market manager address => how much collateral already bought.\\n\\n  modifier onlyController() {\\n    require(msg.sender == address(controller));\\n    _;\\n  }\\n\\n  constructor (\\n    address _controller\\n  ) ERC721(\\\"Debita Reputation Token\\\", \\\"DRT\\\") {\\n    controller = Controller(_controller);\\n  }\\n\\n  /**\\n   @notice incrementBalance\\n   */\\n  function incrementBalance(uint256 marketId, address trader, uint256 amount) external onlyController {\\n    balances[marketId][trader] += amount;\\n  }\\n\\n  /**\\n   @notice called post reputation update\\n   */\\n  function removeBalance(uint256 marketId, address trader) external onlyController {\\n    delete balances[marketId][trader];\\n  }\\n\\n  function _baseURI() internal pure returns (string memory baseURI) {\\n    baseURI = \\\"\\\";\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    require(_ownerOf[id] != address(0), \\\"Invalid Identifier\\\");\\n\\n    string memory baseURI = _baseURI();\\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, id)) : \\\"\\\";\\n  }\\n\\n  function mint(address to) external {\\n    require(_ownerToId[to] == uint256(0), \\\"can only mint one reputation token\\\");\\n    super._mint(to, nonce);\\n    _ownerToId[to] = nonce;\\n\\n    // Set default score, if this goes to 0 cannot trade\\n    _reputation[_ownerToId[to]].score = 1e18; \\n\\n    nonce++;\\n  }\\n\\n  function getReputationScore(address owner) view external returns (uint256){\\n    require(_ownerToId[owner] != uint256(0), \\\"No Id found\\\");\\n    return _reputation[_ownerToId[owner]].score;\\n  }\\n\\n  /**\\n   @notice add scores and stores topX \\n   @param score: 60.18 format\\n   */\\n  function addScore(address to, uint256 score) external onlyController\\n   {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    data.score = data.score + score; \\n\\n    storeTopX(data.score, to); \\n  }\\n\\n  function decrementScore(address to, uint256 score) external onlyController\\n   {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    if (data.score <= score) data.score = 0; \\n    else data.score = data.score - score; \\n\\n    storeTopX(data.score, to); \\n  }\\n\\n  /**\\n   @notice calculates average of scores added.\\n   @param score: 60.18 format\\n   */\\n  function addAverageScore(address to, uint256 score) external onlyController\\n\\n   {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    \\n    if (data.n == 0) {\\n      data.score = score;\\n    } else {\\n      data.score = (data.score / data.n + score) / (data.n + 1);\\n    }\\n\\n    data.n++;\\n  }\\n\\n  /**\\n   @notice reset scores\\n   */\\n  function resetScore(address to) external {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n    delete _reputation[_ownerToId[to]];\\n  }\\n\\n  /// @notice called by controller when initiating market,\\n  function storeTopReputation(uint256 topX, uint256 marketId) external onlyController{\\n    if (getAvailableTopX() < topX) {\\n      allowAll[marketId] =true; \\n      return; \\n    }\\n\\n    for (uint256 i; i<topX; i++){\\n      canTrade[marketId][topReputations[i].trader] = true;\\n    }\\n\\n  }\\n\\n  /// @notice gets the x's ranked score from all reputation scores \\n  /// @dev returns 0 if topX is greater then avaiable nonzero rep scores-> everyone is allowed\\n  /// during reputation constraint periods \\n  function getMinRepScore(uint256 topX, uint256 marketId) public view returns(uint256){\\n    if (getAvailableTopX() < topX) {\\n      return 0; \\n    }\\n    return topReputations[topX].score; \\n\\n  }\\n\\n  function getAvailableTopX() public view returns(uint256){\\n    return unique_traders.length; \\n  }\\n\\n  function getAvailableTraderNum() public view returns(uint256){\\n    return nonce -1; \\n  }\\n\\n  /// @notice whether trader is above reputation threshold \\n  function traderCanTrade(uint256 marketId, address trader) external returns(bool){\\n    return allowAll[marketId]? true : canTrade[marketId][trader]; \\n  }\\n\\n  /// @notice called whenever a score is incremented   \\n  function storeTopX(uint256 score, address trader) internal {\\n    uint256 i = 0;\\n\\n    for(i; i < topReputations.length; i++) {\\n        if(topReputations[i].score < score) {\\n            break;\\n        }\\n    }\\n    // shifting the array of position (getting rid of the last element) \\n    for(uint j = topReputations.length - 1; j > i; j--) {\\n        topReputations[j].score = topReputations[j - 1].score;\\n        topReputations[j].trader = topReputations[j - 1].trader;\\n    }\\n    // update the new max element \\n    topReputations[i].score = score;\\n    topReputations[i].trader = trader;\\n\\n    if (isUnique[trader]) return; \\n    isUnique[trader] = true; \\n    unique_traders.push(trader);\\n\\n  }\\n\\n\\n \\n\\n  function testStore() public view {\\n    for (uint i=0; i<10; i++){\\n      console.log('score', topReputations[i].score); \\n    }\\n  }\\n\\n  \\n}\",\"keccak256\":\"0x6a2b33584ab882cf22326acafdc5228465b416098204dcf3586e22701f24cf4c\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external virtual onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external virtual onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xffd1670bd35f6feb4de1aa683a23c171031666e4356cff6f7c93df6d2aa5b78c\",\"license\":\"MIT\"},\"contracts/vaults/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n    mapping(address=>bool) Authorized; \\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        //Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return(user == owner || Authorized[user]);\\n        //return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setNewAuthority(address newAuthority) public {\\n        require(msg.sender == owner );\\n        Authorized[newAuthority] = true; \\n\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x46c0e8d518396b50d7dc7f0050d716a5643afad9320b0cd27490fd8e00689dc7\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/instrument.sol\":{\"content\":\"\\n// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport \\\"./vault.sol\\\";\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {FixedPointMathLib} from \\\"./utils/FixedPointMathLib.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\nabstract contract Instrument {\\n\\n    modifier onlyUtilizer() {\\n        require(msg.sender == Utilizer, \\\"!Utilizer\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == vault.owner() || isValidator[msg.sender], \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), \\\"caller must be vault\\\");\\n        _;\\n    }\\n\\n    modifier notLocked() {\\n        require(!locked); \\n        _; \\n    }\\n\\n    constructor (\\n        address _vault,\\n        address _Utilizer\\n    ) {\\n        vault = Vault(_vault);\\n        underlying = ERC20(vault.UNDERLYING());\\n        underlying.approve(_vault, MAX_UINT); // Give Vault unlimited access \\n        Utilizer = _Utilizer;\\n    }\\n\\n\\n    ERC20 public underlying;\\n    Vault public vault; \\n    bool locked; \\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private maturity_balance; \\n\\n    /// @notice address of user who submits the liquidity proposal \\n    address public Utilizer; \\n    address[] public validators; //set when deployed, but can't be ch\\n    mapping(address=>bool) isValidator; \\n\\n    /**\\n     @notice hooks for approval logic that are specific to each instrument type, called by controller for approval/default logic\\n     */\\n    function onMarketApproval(uint256 principal, uint256 yield) virtual external {}\\n\\n    function setUtilizer(address _Utilizer) external onlyAuthorized {\\n        require(_Utilizer != address(0));\\n        Utilizer = _Utilizer;\\n    }\\n\\n    function setValidator(address _validator) external {\\n        require(msg.sender == vault.owner(), \\\"Not owner\\\"); \\n        validators.push(_validator); \\n        isValidator[_validator] = true;     \\n    }\\n\\n\\n    /// @notice Withdraws a specific amount of underlying tokens from the Instrument.\\n    /// @param amount The amount of underlying tokens to withdraw.\\n    /// @return An error code, or 0 if the withdrawal was successful.\\n    function redeemUnderlying(uint256 amount) external onlyVault returns (bool){\\n        return underlying.transfer(address(vault), amount); \\n    }\\n\\n    /// @notice Returns a user's Instrument balance in underlying tokens.\\n    /// @param user The user to get the underlying balance of.\\n    /// @return The user's Instrument balance in underlying tokens.\\n    /// @dev May mutate the state of the Instrument by accruing interest.\\n    function balanceOfUnderlying(address user) public view returns (uint256){\\n        return underlying.balanceOf(user); \\n        }\\n\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Instrument is currently managing,\\n     *  denominated in terms of Underlying tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Instrument if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to governance to use this function to correctly order this\\n     *  Instrument relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Instrument and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     *  Estimated Total assets should be \\n\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function estimatedTotalAssets() public view virtual returns (uint256){}\\n\\n    /**\\n     * Free up returns for vault to pull\\n     * Perform any Instrument divesting + unwinding or other calls necessary to capture the\\n     * \\\"free return\\\" this Instrument has generated since the last time its core\\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\\n     * This call is only used during \\\"normal operation\\\" of a Instrument, and\\n     * should be optimized to minimize losses as much as possible.\\n     *\\n     * This method returns any realized profits and/or realized losses\\n     * incurred, and should return the total amounts of profits/losses/debt\\n     * payments (in `underlying` tokens) for the Vault's accounting (e.g.\\n     * `underlying.balanceOf(this) >= principal + profit`).\\n     *\\n     * param _debtPayment is the total amount expected to be returned to the vault\\n     */\\n\\n    /// @notice checks if the instrument is ready to be withdrawed, i.e all \\n    /// loans have been paid, all non-underlying have been liquidated, etc\\n    function readyForWithdrawal() public view virtual returns(bool){\\n        return true; \\n    }\\n\\n    /// @notice checks whether the vault can withdraw and record profit from this instrument \\n    /// for this instrument to resolve \\n    /// For creditlines, all debts should be repaid\\n    /// for strategies, all assets should be divested + converted to Underlying\\n    /// this function is important in preventing manipulations, \\n    /// @dev prepareWithdraw->vault.beforeResolve->vault.resolveInstrument in separate txs\\n    function prepareWithdraw()\\n        external \\n        onlyVault \\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        ){\\n            require(readyForWithdrawal()); \\n\\n            // Lock additional drawdowns or usage of instrument balance \\n            lockLiquidityFlow();    \\n\\n        }\\n\\n    /**\\n     * Liquidate up to `_amountNeeded` of `underlying` of this strategy's positions,\\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\\n     * This function should return the amount of `underlying` tokens made available by the\\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\\n     * difference is due to a realized loss, or if there is some other sitution at play\\n     * (e.g. locked funds) where the amount made available is less than what is needed.\\n     *\\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n     */\\n    function liquidatePosition(uint256 _amountNeeded) public  virtual returns (uint256 _liquidatedAmount, uint256 _loss){}\\n\\n    /**\\n     * Liquidate everything and returns the amount that got freed.\\n     * This function is used during emergency exit instead of `prepareReturn()` to\\n     * liquidate all of the instrument's positions back to the Vault.\\n     */\\n    function liquidateAllPositions() public  virtual returns (uint256 _amountFreed){}\\n\\n    function lockLiquidityFlow() internal{\\n        locked = true; \\n    }\\n\\n    function isLocked() public view returns(bool){\\n        return locked; \\n    }\\n\\n\\n    function transfer_liq(address to, uint256 amount) internal notLocked {\\n        if (vault.decimal_mismatch()) amount = vault.decSharesToAssets(amount); \\n        underlying.transfer(to, amount);\\n    }\\n\\n    function transfer_liq_from(address from, address to, uint256 amount) internal notLocked {\\n        if (vault.decimal_mismatch()) amount = vault.decSharesToAssets(amount); \\n        underlying.transferFrom(from, to, amount);\\n\\n    }\\n\\n    /// @notice called before resolve, to avoid calculating redemption price based on manipulations \\n    function store_internal_balance() external onlyVault{\\n\\n        maturity_balance = balanceOfUnderlying(address(this)); \\n        if (vault.decimal_mismatch()) maturity_balance = vault.decAssetsToShares(maturity_balance); \\n\\n    }\\n\\n    function getMaturityBalance() public view returns(uint256){\\n        return maturity_balance; \\n    }\\n\\n\\n    /// @notice Before supplying liquidity from the vault to this instrument,\\n    /// which is done automatically when instrument is trusted, \\n    /// need to check if certain conditions that are required to this specific \\n    /// instrument is met. For example, for a creditline with a collateral \\n    /// requirement need to check if this address has the specific amount of collateral\\n    /// @dev called to be checked at the approve phase from controller  \\n    function instrumentApprovalCondition() public virtual view returns(bool); \\n\\n\\n\\n}\\n\\n\\n// contract RevenueToken is ERC20{\\n\\n// }\\n\\n \\n/// @notice Contract for unsecured loans, each instance will be associated to a borrower+marketId\\n/// approved borrowers will interact with this contract to borrow, repay. \\n/// and vault will supply principal and harvest principal/interest \\ncontract CreditLine is Instrument {\\n    using FixedPointMathLib for uint256;\\n    address public immutable borrower; \\n\\n    //  variables initiated at creation\\n    uint256 principal;\\n    uint256 notionalInterest; \\n    uint256 faceValue; //total amount due, i.e principal+interest\\n    uint256 duration; // normalized to a year 1 means 1 year, 0.5 means 6 month \\n    uint256 interestAPR; \\n\\n    // Modify-able Global Variables during repayments, borrow\\n    uint256 totalOwed; \\n    uint256 principalOwed; \\n    uint256 interestOwed;\\n    uint256 accumulated_interest; \\n    uint256 principalRepayed;\\n    uint256 interestRepayed; \\n\\n    // Collateral Info \\n    enum CollateralType{\\n        liquidateAble, \\n        nonLiquid, \\n        ownership \\n    }\\n    address public collateral; \\n    address public oracle; \\n    uint256 public collateral_balance; \\n    CollateralType public collateral_type; \\n\\n    uint256 drawdown_block; \\n    bool didDrawdown; \\n\\n    uint256 gracePeriod; \\n    uint256 resolveBlock; \\n    uint256 constant DUST = 1e18; //1usd\\n\\n    enum LoanStatus{\\n        notApproved,\\n        approvedNotDrawdowned,\\n        drawdowned, \\n        partially_repayed,\\n\\n        prepayment_fulfilled, \\n        matured, \\n        grace_period, \\n        isDefault\\n    }\\n\\n    LoanStatus public loanStatus; \\n\\n    uint256 lastRepaymentTime; \\n    uint256 gracePeriodStart; \\n    Proxy proxy; \\n\\n    /// @notice both _collateral and _oracle could be 0\\n    /// address if fully uncollateralized or does not have a price oracle \\n    /// param _notionalInterest and _principal is initialized as desired variables\\n    constructor(\\n        address vault,\\n        address _borrower, \\n        uint256 _principal,\\n        uint256 _notionalInterest, \\n        uint256 _duration,\\n        uint256 _faceValue,\\n        address _collateral, //collateral for the dao, could be their own native token or some tokenized revenue \\n        address _oracle, // oracle for price of collateral \\n        uint256 _collateral_balance, //promised collateral balance\\n        uint256 _collateral_type\\n    )  Instrument(vault, _borrower) {\\n        borrower = _borrower; \\n        principal = _principal; \\n        notionalInterest = _notionalInterest; \\n        duration = _duration;   \\n        faceValue = _faceValue;\\n\\n        collateral = _collateral; \\n        oracle = _oracle; \\n        collateral_balance = _collateral_balance; \\n        collateral_type = CollateralType(_collateral_type); \\n\\n        loanStatus = LoanStatus.notApproved; \\n\\n        proxy = new Proxy(address(this), _borrower); \\n    }\\n\\n    function getCurrentTime() internal view returns(uint256){\\n        return block.timestamp + 31536000/2; \\n    }\\n    function getProxy() public view returns(address){\\n        return address(proxy); \\n    }\\n\\n    /// @notice checks if the creditline is ready to be withdrawed, i.e all \\n    /// loans have been paid, all non-underlying have been liquidated, etc\\n    function readyForWithdrawal() public view override returns(bool){\\n        if (loanStatus == LoanStatus.matured || loanStatus == LoanStatus.isDefault\\n            || loanStatus == LoanStatus.prepayment_fulfilled) return true; \\n        return true; \\n        //return false  \\n    }\\n\\n    function getApprovedBorrowConditions() public view returns(uint256, uint256){\\n        if (vault.isTrusted(this)) return(principal, notionalInterest) ;\\n\\n        return (0,0); \\n    }\\n\\n    /// @notice if possible, and borrower defaults, liquidates given collateral to underlying\\n    /// and push back to vault. If not possible, push the collateral back to\\n    function liquidateAndPushToVault() internal  {}\\n\\n    function auctionAndPushToVault() internal {} \\n\\n    /// @notice After grace period auction off ownership to some other party and transfer the funds back to vault \\n    /// @dev assumes collateral has already been transferred to vault, needs to be checked by the caller \\n    function liquidateOwnership(address buyer) public virtual onlyAuthorized{\\n        // TODO implement auction \\n        proxy.changeOwnership(buyer);\\n    }\\n\\n    /// @notice transfers collateral back to vault when default \\n    function pushCollateralToVault(uint256 amount, address to) public virtual onlyAuthorized{\\n        require(loanStatus == LoanStatus.isDefault); \\n        ERC20(collateral).transfer(to, amount); \\n    }\\n\\n    function isLiquidatable(address collateral) public view returns(bool){}\\n\\n    /// @notice if collateral is liquidateable and has oracle, fetch value of collateral \\n    /// and return ratio to principal \\n    function getCollateralRatio() public view returns(uint256){\\n\\n    }\\n\\n    /// @notice validators have to check these conditions at a human level too before approving \\n    function instrumentApprovalCondition() public override view returns(bool){\\n        // check if borrower has correct identity \\n\\n        // check if enough collateral has been added as agreed   \\n        if (collateral_type == CollateralType.liquidateAble || collateral_type == CollateralType.nonLiquid){\\n            require(ERC20(collateral).balanceOf(address(this)) >= collateral_balance, \\\"Insufficient collateral\\\"); \\n        }\\n\\n        // check if validator(s) are set \\n        if (validators.length == 0) {revert(\\\"No validators\\\"); }\\n\\n        // Check if proxy has been given ownership\\n        if (collateral_type == CollateralType.ownership && proxy.numContracts() == 0) revert(\\\"Ownership \\\"); \\n\\n        return true; \\n    } \\n\\n    /// @notice borrower deposit promised collateral  \\n    function depositCollateral(uint256 amount) external onlyUtilizer {\\n        require(collateral!= address(0)); \\n        ERC20(collateral).transferFrom(msg.sender, address(this), amount); \\n    }\\n\\n    /// @notice can only redeem collateral when debt is fully paid \\n    function releaseAllCollateral() internal {\\n        require(loanStatus == LoanStatus.matured || loanStatus == LoanStatus.prepayment_fulfilled, \\\"Loan status err\\\"); \\n\\n        ERC20(collateral).transfer(msg.sender,collateral_balance); \\n    }\\n\\n\\n\\n    /// @notice should only be called when (portion of) principal is repayed\\n    function adjustInterestOwed() internal {\\n\\n        uint256 remainingDuration = (drawdown_block + toSeconds(duration)) - getCurrentTime();\\n        console.log('remainingDuration', remainingDuration);\\n        interestOwed = interestAPR.mulWadDown(toYear(remainingDuration).mulWadDown(principalOwed)); \\n        console.log('interestOwed should be same', interestOwed); \\n    }\\n\\n    /// @param quoted_yield is in notional amount denominated in underlying, which is the area between curve and 1 at the x-axis point \\n    /// where area under curve is max_principal \\n    function onMarketApproval(uint256 max_principal, uint256 quoted_yield)  external override onlyVault {\\n        principal = max_principal; \\n        notionalInterest = quoted_yield; //this accounts for duration as well\\n        interestAPR = quoted_yield.divWadDown(duration.mulWadDown(principal)); \\n\\n        loanStatus = LoanStatus.approvedNotDrawdowned;\\n    }\\n\\n    function onMaturity() external onlyUtilizer {\\n        require(loanStatus == LoanStatus.prepayment_fulfilled || loanStatus == LoanStatus.matured,\\\"Not matured\\\"); \\n        require(block.number > resolveBlock, \\\"Block equal\\\"); \\n\\n        if (collateral_type == CollateralType.liquidateAble || collateral_type == CollateralType.nonLiquid ){\\n            releaseAllCollateral(); \\n        }\\n\\n        else proxy.changeOwnership(borrower);\\n        \\n        bool isPrepaid = loanStatus == LoanStatus.prepayment_fulfilled? true:false;\\n        console.log('isprepaid', isPrepaid); \\n        // Write to storage resolve details (principal+interest repaid, is prepaid, etc) \\n        vault.pingMaturity(address(this), isPrepaid); \\n\\n    }\\n\\n    /// @notice borrower can see how much to repay now starting from last repayment time, also used to calculated\\n    /// how much interest to repay for the current principalOwed, which can be changed \\n    function interestToRepay() public view returns(uint256){\\n\\n        // Normalized to year\\n        uint256 elapsedTime = toYear(getCurrentTime() - lastRepaymentTime);\\n        console.log('elapsedTime', elapsedTime); \\n        // Owed interest from last timestamp till now  + any unpaid interest that has accumulated\\n        return elapsedTime.mulWadDown(interestAPR.mulWadDown(principalOwed)) + accumulated_interest ; \\n    }\\n     \\n    /// @notice Allows a borrower to borrow on their creditline.\\n    /// This creditline allows only lump sum drawdowns, all approved principal needs to be borrowed\\n    /// which would start the interest timer \\n    function drawdown() external onlyUtilizer{\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\n        require(loanStatus == LoanStatus.approvedNotDrawdowned, \\\"Already borrowed\\\"); \\n        loanStatus = LoanStatus.drawdowned; \\n\\n        drawdown_block = block.timestamp; \\n        lastRepaymentTime = block.timestamp;//-31536000/2; \\n\\n        totalOwed = principal + notionalInterest; \\n        principalOwed = principal; \\n        interestOwed = notionalInterest;\\n\\n        transfer_liq(msg.sender, principal); \\n    }\\n\\n    /// @notice allows a borrower to repay their loan\\n    /// Standard repayment structure is repaying interest for the owed principal periodically and\\n    /// whenever principal is repayed interest owed is decreased proportionally \\n    function repay( uint256 _repay_amount) external onlyUtilizer{\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\n\\n        uint256 owedInterest = interestToRepay(); \\n        uint256 repay_principal; \\n        uint256 repay_interest = _repay_amount; \\n        console.log('owedinterest', owedInterest, accumulated_interest);\\n        // Push remaineder to repaying principal \\n        if (_repay_amount >= owedInterest){\\n            repay_principal += (_repay_amount - owedInterest);  \\n            repay_interest = owedInterest; \\n            accumulated_interest = 0; \\n        }\\n\\n        //else repay_amount is less than owed interest, accumulate the debt \\n        else accumulated_interest = owedInterest - repay_interest;\\n\\n        if(handleRepay(repay_principal, repay_interest)){\\n\\n            // Save resolve block, so that onMaturity can be called later\\n            resolveBlock = block.number; \\n\\n            // Prepayment //TODO cases where repayed a significant portion at the start but paid rest at maturity date\\n            if (isPaymentPremature()) loanStatus = LoanStatus.prepayment_fulfilled; \\n\\n            // Repayed at full maturity \\n            else loanStatus = LoanStatus.matured; \\n\\n        }\\n\\n        lastRepaymentTime = getCurrentTime();  \\n\\n        transfer_liq_from(msg.sender, address(this), _repay_amount);\\n\\n    }   \\n\\n    /// @notice updates balances after repayment\\n    /// need to remove min.\\n    function handleRepay(uint256 repay_principal, uint256 repay_interest) internal returns(bool){\\n        totalOwed -= Math.min((repay_principal + repay_interest), totalOwed); \\n        principalOwed -= Math.min(repay_principal, principalOwed);\\n        interestOwed -= Math.min(repay_interest, interestOwed);\\n        console.log('repayment', repay_principal, repay_interest); \\n        console.log('interestOwed should be same here', interestOwed, principalOwed); \\n        principalRepayed += repay_principal;\\n        interestRepayed += repay_interest; \\n        if (repay_principal > 0) adjustInterestOwed(); \\n\\n        bool fullyRepayed = (principalOwed == 0 && interestOwed == 0)? true : false; \\n        return fullyRepayed; \\n    }\\n\\n\\n\\n\\n    function setGracePeriod() external {}\\n\\n    /// @notice callable by anyone \\n    function beginGracePeriod() external {\\n       // require(block.timestamp >= drawdown_block + toSeconds(duration), \\\"time err\\\"); \\n        require(principalOwed > 0 && interestOwed > 0, \\\"repaid\\\"); \\n        gracePeriodStart = block.timestamp; \\n        loanStatus = LoanStatus.grace_period; \\n    }\\n\\n    function declareDefault() external onlyAuthorized {\\n       // require(gracePeriodStart + gracePeriod >= block.timestamp);\\n        require(loanStatus == LoanStatus.grace_period); \\n\\n        loanStatus = LoanStatus.isDefault; \\n    }\\n\\n    /// @notice should be called  at default by validators\\n    /// calling this function will go thorugh the necessary process\\n    /// to recoup bad debt, and will push the remaining funds to vault\\n    function onDefault() external onlyAuthorized{\\n        require(loanStatus == LoanStatus.isDefault); \\n\\n        // If collateral is liquidateable, liquidate at dex and push to vault\\n        if (isLiquidatable(collateral)) {\\n            liquidateAndPushToVault(); //TODO get pool \\n        }\\n\\n        // Else for non liquid governance tokens or ownership, should auction off \\n        else {\\n            auctionAndPushToVault(); \\n        }\\n\\n        //Testing purposes only \\n        underlying.transferFrom(msg.sender, address(this), principal/2); \\n\\n    }\\n\\n    /// @notice when principal/interest owed becomes 0, need to find out if this is prepaid\\n    function isPaymentPremature() internal returns(bool){\\n        // bool timeCondition = getCurrentTime() <= drawdown_block + toSeconds(duration); \\n        bool amountCondition = (principal+notionalInterest) > (principalRepayed + interestRepayed) + DUST; \\n\\n        // timeCondition implies amountCondition, but not the other way around \\n        return amountCondition; \\n    }\\n\\n\\n    function toYear(uint256 sec) internal pure returns(uint256){\\n        return (sec*1e18)/uint256(31536000); \\n    }\\n\\n    function toSeconds(uint256 y) internal pure returns(uint256){\\n        return uint256(31536000).mulWadDown(y); \\n    }\\n\\n    function getRemainingOwed() public view returns(uint256, uint256){\\n        return(principalOwed, interestOwed); \\n    }\\n\\n    function getCurrentLoanStatus() public view returns(uint256){}\\n\\n\\n\\n\\n\\n}\\n\\n\\ncontract Proxy{\\n    address owner; \\n    address delegator; \\n\\n    address[] public ownedContracts;\\n    mapping(address=>bytes4) public ownerTransferFunctions; \\n    mapping(address=>bool) public isValidContract; \\n\\n    /// @notice owner is first set to be the instrument contract\\n    /// and is meant to be changed back to the borrower or whoever is\\n    /// buying the ownership \\n    constructor(address _owner, address _delegator){\\n        owner = _owner; \\n        delegator = _delegator; \\n\\n    }\\n\\n    function changeOwnership(address newOwner) external {\\n        require(msg.sender == owner, \\\"Not owner\\\"); \\n        owner = newOwner; \\n    }\\n\\n    function numContracts() public view returns(uint256){\\n        return ownedContracts.length; \\n    }\\n\\n    /// @notice temporarily delegate ownership of relevant contract \\n    /// to this address, and stores the ownership transfering function\\n    /// called when initialized\\n    /// @param ownershipFunction is selector of the functions that transfers\\n    /// ownership \\n    /// @dev called by the borrower during assessment, after they had given ownership \\n    /// of the contract to this address first, \\n    /// but ownerTransferfunction/contract needs to be checked before approval by the validators\\n    /// Validators are responsible for checking if there isn't any other ownership transferring functions \\n    /// and check that the contract is legit, and think ways that the borrower can game the system. \\n    function delegateOwnership(\\n        address _contract, \\n        bytes4 ownershipFunction) external \\n    {\\n        ownedContracts.push(_contract); \\n        isValidContract[_contract] = true; \\n        ownerTransferFunctions[_contract] = ownershipFunction; \\n\\n    }\\n\\n    /// @notice transfers ownership to borrower or any other party if necessary\\n    function grantOwnership(\\n        address _contract, \\n        address newOwner,\\n        bytes calldata data, \\n        bool isSingleArgument) external{   \\n        require(msg.sender == owner);\\n        require(isValidContract[_contract]);\\n        if(newOwner != address(this)) isValidContract[_contract] = false; \\n\\n        if(isSingleArgument){\\n            (bool success, ) = _contract.call(\\n                abi.encodeWithSelector(\\n                    ownerTransferFunctions[_contract], \\n                    newOwner\\n                )\\n            );  \\n            require(success, \\\"!success\\\"); \\n        }\\n\\n        else{\\n            require(convertBytesToBytes4(data) != ownerTransferFunctions[_contract], \\\"func not allowed\\\"); \\n            (bool success, ) = _contract.call(data);\\n            require(success, \\\"!success\\\"); \\n\\n        }\\n    }\\n\\n    /// @notice function that ownership delegators use to call functions \\n    /// in their contract other than the transferFunction contract \\n    function proxyFunc(address _contract, bytes calldata data) external{\\n        require(msg.sender == delegator); \\n        require(convertBytesToBytes4(data) != ownerTransferFunctions[_contract], \\\"func not allowed\\\"); \\n\\n        (bool success, ) = _contract.call(data); \\n        require(success, \\\"!success\\\"); \\n\\n    }\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 4))\\n        }\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return owner; \\n    }\\n}\\n\\n\\ncontract MockBorrowerContract{\\n\\n    address public owner; \\n    constructor(){\\n        owner = msg.sender;  \\n    }\\n\\n    function changeOwner(address newOwner) public {\\n        require(msg.sender == owner, \\\"notowner\\\"); \\n        owner = newOwner; \\n    } \\n\\n    function onlyOwnerFunction(uint256 a) public {\\n        console.log('msgsender', msg.sender, owner); \\n        require(msg.sender == owner, \\\"notowner\\\"); \\n        console.log('hello', a); \\n    }\\n\\n    function autoDelegate(address proxyad) public{\\n        Proxy(proxyad).delegateOwnership(address(this), this.changeOwner.selector); \\n    }\\n    fallback () external {\\n        console.log('hi?'); \\n    }\\n}\\n\",\"keccak256\":\"0xe023f55f66bf787b27f71a2bba3bd8c5362cb7168f5fb6ba1521c912e9e47e72\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n// import {ERC20} from \\\"../../ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    uint immutable underlying_decimals; \\n    uint8 constant default_decimals = 18; \\n    bool public decimal_mismatch; \\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, default_decimals) {\\n        asset = _asset;\\n\\n        underlying_decimals = _asset.decimals(); \\n        decimal_mismatch = (_asset.decimals() != default_decimals);\\n        if(decimal_mismatch) assert(_asset.decimals() < default_decimals);  \\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n   \\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n        // if (decimal_mismatch) assets = decAssetsToShares(assets); \\n        return supply == 0 ? decimal_mismatch? decAssetsToShares(assets) : assets \\n                : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n        // if(decimal_mismatch) shares = decSharesToAssets(shares); \\n        return supply == 0 ? decimal_mismatch? decSharesToAssets(shares) : shares \\n                : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? decimal_mismatch? decSharesToAssets(shares) : shares \\n                : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n        // if (decimal_mismatch) assets = decAssetsToShares(assets); \\n\\n        return supply == 0 ? decimal_mismatch? decAssetsToShares(assets) : assets \\n                : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function decAssetsToShares(uint256 assets) public view virtual returns(uint256) {\\n        return assets * (10 ** (default_decimals - underlying_decimals)); \\n    }\\n\\n    function decSharesToAssets(uint256 shares) public view virtual returns(uint256){\\n        return shares / (10**(default_decimals - underlying_decimals)); \\n    }\\n}\\n\",\"keccak256\":\"0x8722dff56cffef5a1f8c6587777a62d860126f7b2600908afb58fe8d96481e34\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\n        require(x < 1 << 248);\\n\\n        y = uint248(x);\\n    }\\n\\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\\n        require(x < 1 << 224);\\n\\n        y = uint224(x);\\n    }\\n\\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\\n        require(x < 1 << 192);\\n\\n        y = uint192(x);\\n    }\\n\\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\\n        require(x < 1 << 160);\\n\\n        y = uint160(x);\\n    }\\n\\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\n        require(x < 1 << 128);\\n\\n        y = uint128(x);\\n    }\\n\\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\n        require(x < 1 << 96);\\n\\n        y = uint96(x);\\n    }\\n\\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\n        require(x < 1 << 64);\\n\\n        y = uint64(x);\\n    }\\n\\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\n        require(x < 1 << 32);\\n\\n        y = uint32(x);\\n    }\\n\\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\\n        require(x < 1 << 24);\\n\\n        y = uint24(x);\\n    }\\n\\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\\n        require(x < 1 << 8);\\n\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x636e0f18c1b287c9342e14660a914b37a927d9f64d6c29e27016784979ce8d59\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/vault.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {Auth} from \\\"./auth/Auth.sol\\\";\\nimport {ERC4626} from \\\"./mixins/ERC4626.sol\\\";\\n\\nimport {SafeCastLib} from \\\"./utils/SafeCastLib.sol\\\";\\nimport {SafeTransferLib} from \\\"./utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"./utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\nimport {Instrument} from \\\"./instrument.sol\\\";\\nimport {Controller} from \\\"../protocol/controller.sol\\\";\\nimport {MarketManager} from \\\"../protocol/marketmanager.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract Vault is ERC4626, Auth{\\n    using SafeCastLib for uint256; \\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n\\n    event InstrumentDeposit(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\n    event InstrumentWithdrawal(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\n    event InstrumentTrusted(address indexed user, Instrument indexed instrument);\\n    event InstrumentDistrusted(address indexed user, Instrument indexed instrument);\\n    event InstrumentHarvest(address indexed instrument, uint256 instrument_balance, uint256 mag, bool sign); //sign is direction of mag, + or -.\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal BASE_UNIT;\\n    uint256 totalInstrumentHoldings; //total holdings deposited into all Instruments collateral\\n    ERC20 public immutable UNDERLYING;\\n    Controller private controller;\\n    MarketManager.MarketParameters default_params; \\n\\n    ///// For Factory\\n    bool public onlyVerified; \\n    uint256 public r; //reputation ranking  \\n    uint256 public asset_limit; \\n    uint256 public total_asset_limit; \\n\\n    mapping(Instrument => InstrumentData) public instrument_data;\\n    mapping(address => uint256) public  num_proposals;\\n    mapping(uint256=> Instrument) public Instruments; //marketID-> Instrument\\n    mapping(uint256 => bool) resolveBeforeMaturity;\\n    mapping(uint256=>ResolveVar) prepareResolveBlock; \\n\\n    enum InstrumentType {\\n        CreditLine,\\n        Other\\n    }\\n\\n    /// @param trusted Whether the Instrument is trusted.\\n    /// @param balance The amount of underlying tokens held in the Instrument.\\n    struct InstrumentData {\\n        // Used to determine if the Vault will operate on a Instrument.\\n        bool trusted;\\n        // Balance of the contract denominated in Underlying, \\n        // used to determine profit and loss during harvests of the Instrument.  \\n        // represents the amount of debt the Instrument has incurred from this vault   \\n        uint256 balance; // in underlying\\n        uint256 faceValue; // in underlying\\n        uint256 marketId;\\n        uint256 principal; //this is total available allowance in underlying\\n        uint256 expectedYield; // total interest paid over duration in underlying\\n        uint256 duration;\\n        string description;\\n        address Instrument_address;\\n        InstrumentType instrument_type;\\n        uint256 maturityDate;\\n    }\\n\\n    struct ResolveVar{\\n        uint256 endBlock; \\n        bool isPrepared; \\n    }\\n\\n    constructor(\\n        address _UNDERLYING,\\n        address _controller, \\n        address owner, \\n\\n        bool _onlyVerified, //\\n        uint256 _r, //reputation ranking\\n        uint256 _asset_limit, \\n        uint256 _total_asset_limit,\\n\\n        MarketManager.MarketParameters memory _default_params\\n\\n    )\\n        ERC4626(\\n            ERC20(_UNDERLYING),\\n            string(abi.encodePacked(\\\"debita \\\", ERC20(_UNDERLYING).name(), \\\" Vault\\\")),\\n            string(abi.encodePacked(\\\"db\\\", ERC20(_UNDERLYING).symbol()))\\n        )  Auth(owner)\\n\\n    {\\n        UNDERLYING = ERC20(_UNDERLYING);\\n        //BASE_UNIT = 10**ERC20(_UNDERLYING).decimals();\\n        BASE_UNIT = 10**18; \\n        controller = Controller(_controller);\\n        set_minting_conditions( _onlyVerified,  _r, _asset_limit, _total_asset_limit); \\n        default_params = _default_params; \\n        //totalSupply = type(uint256).max;\\n    }\\n\\n    function getInstrumentData(Instrument _instrument) public view returns (InstrumentData memory) {\\n        return instrument_data[_instrument];\\n    }\\n    \\n    modifier onlyController(){\\n        require(address(controller) == msg.sender || msg.sender == owner || address(this) == msg.sender ,  \\\"is not controller\\\"); \\n        _;\\n    }\\n\\n    /// @notice called by controller at maturity \\n    function controller_burn(uint256 amount, address bc_address) external onlyController {\\n        _burn(bc_address,amount); \\n    }\\n    /// @notice called by controller at maturity, since redeem amount > balance in bc\\n    function controller_mint(uint256 amount, address to) external onlyController {\\n        _mint(to , amount); \\n    }\\n    /// @notice amount is always in WAD, so need to convert if decimals mismatch\\n    function trusted_transfer(uint256 amount, address to) external onlyController{\\n        if (decimal_mismatch) amount = decSharesToAssets(amount); \\n        UNDERLYING.transfer(to, amount); \\n    }\\n\\n    function balanceInUnderlying(address ad) external view returns(uint256){\\n        return previewRedeem(balanceOf[ad]); \\n    }\\n\\n    /// @notice burns all balance of address \\n    function burnAll(address to) private{\\n      _burn(to, balanceOf[to]); \\n    }\\n\\n    /// @notice Harvest a trusted Instrument, records profit/loss \\n    function harvest(address instrument) public {\\n        require(instrument_data[Instrument(instrument)].trusted, \\\"UNTRUSTED_Instrument\\\");\\n        InstrumentData storage data = instrument_data[Instrument(instrument)]; \\n\\n        uint256 oldTotalInstrumentHoldings = totalInstrumentHoldings; \\n        \\n        uint256 balanceLastHarvest = data.balance;\\n        \\n        uint256 balanceThisHarvest = Instrument(instrument).balanceOfUnderlying(address(instrument));\\n        \\n        if (balanceLastHarvest == balanceThisHarvest) {\\n            return;\\n        }\\n        \\n        data.balance = balanceThisHarvest;\\n\\n        uint256 delta;\\n       \\n        bool net_positive = balanceThisHarvest >= balanceLastHarvest;\\n        \\n        delta = net_positive ? balanceThisHarvest - balanceLastHarvest : balanceLastHarvest - balanceThisHarvest;\\n\\n        totalInstrumentHoldings = net_positive ? oldTotalInstrumentHoldings + delta : oldTotalInstrumentHoldings - delta;\\n\\n        emit InstrumentHarvest(instrument, balanceThisHarvest, delta, net_positive);\\n    }\\n\\n    /// @notice Deposit a specific amount of float into a trusted Instrument.\\n    /// Called when market is approved. \\n    /// Also has the role of granting a credit line to a credit-based Instrument like uncol.loans \\n    function depositIntoInstrument(uint256 marketId, uint256 underlyingAmount) internal{\\n      Instrument instrument = fetchInstrument(marketId); \\n      require(instrument_data[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\n\\n      if (decimal_mismatch) underlyingAmount = decSharesToAssets(underlyingAmount); \\n      console.log('deposit amount and current balance', underlyingAmount, UNDERLYING.balanceOf(address(this)));\\n\\n      totalInstrumentHoldings += underlyingAmount; \\n\\n      instrument_data[instrument].balance += underlyingAmount;\\n\\n      require(UNDERLYING.transfer(address(instrument), underlyingAmount), \\\"DEPOSIT_FAILED\\\");\\n\\n      emit InstrumentDeposit(msg.sender, instrument, underlyingAmount);\\n    }\\n\\n    /// @notice Withdraw a specific amount of underlying tokens from a Instrument.\\n    function withdrawFromInstrument(Instrument instrument, uint256 underlyingAmount) internal {\\n      require(instrument_data[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\n      \\n      if (decimal_mismatch) underlyingAmount = decSharesToAssets(underlyingAmount); \\n\\n      instrument_data[instrument].balance -= underlyingAmount;\\n      \\n      totalInstrumentHoldings -= underlyingAmount;\\n      \\n      require(instrument.redeemUnderlying(underlyingAmount), \\\"REDEEM_FAILED\\\");\\n      \\n      emit InstrumentWithdrawal(msg.sender, instrument, underlyingAmount);\\n\\n    }\\n\\n    /// @notice Stores a Instrument as trusted when its approved\\n    function trustInstrument(uint256 marketId, Controller.ApprovalData memory data) external onlyController{\\n      instrument_data[fetchInstrument(marketId)].trusted = true;\\n\\n      //Write to storage \\n      instrument_data[Instruments[marketId]].principal = data.approved_principal; \\n      instrument_data[Instruments[marketId]].expectedYield = data.approved_yield;\\n      instrument_data[Instruments[marketId]].faceValue = data.approved_principal + data.approved_yield; \\n\\n      depositIntoInstrument(marketId, data.approved_principal);\\n    \\n      setMaturityDate(marketId);\\n\\n      fetchInstrument(marketId).onMarketApproval(data.approved_principal, data.approved_yield); \\n    }\\n\\n    /// @notice Stores a Instrument as untrusted\\n    function distrustInstrument(Instrument instrument) external onlyController {\\n      instrument_data[instrument].trusted = false; \\n    }\\n\\n\\n    /// @notice returns true if Instrument is approved\\n    function isTrusted(Instrument instrument) public view returns(bool){\\n      return instrument_data[instrument].trusted; \\n    }\\n\\n    /// @notice Calculates the total amount of underlying tokens the Vault holds, excluding profit \\n    function totalAssets() public view override returns(uint256){\\n      return totalInstrumentHoldings + totalFloat();\\n    }\\n\\n    function utilizationRate() public view returns(uint256){\\n\\n        if (totalInstrumentHoldings==0) return 0;  \\n        return totalInstrumentHoldings.divWadDown(totalAssets()); \\n\\n    }\\n    function totalFloat() public view returns (uint256) {\\n        return UNDERLYING.balanceOf(address(this));\\n    }\\n\\n    function fetchInstrument(uint256 marketId) public view returns(Instrument){\\n      return Instruments[marketId]; \\n    }\\n\\n    function fetchInstrumentData(uint256 marketId) public view returns(InstrumentData memory){\\n        return instrument_data[Instruments[marketId]];\\n    }\\n    /**\\n     called on market denial + removal, maybe no chekcs?\\n     */\\n    function removeInstrument(uint256 marketId) internal {\\n        InstrumentData storage data = instrument_data[Instruments[marketId]];\\n        require(data.marketId > 0, \\\"instrument doesn't exist\\\");\\n        delete instrument_data[Instruments[marketId]];\\n        delete Instruments[marketId];\\n        // emit event here;\\n    }\\n\\n\\n\\n    /// @notice add instrument proposal created by the Utilizer \\n    /// @dev Instrument instance should be created before this is called\\n    /// need to add authorization\\n    function addProposal(\\n        InstrumentData memory data\\n    ) external onlyController {\\n        require(data.principal > 0, \\\"principal must be greater than 0\\\");\\n        require(data.duration > 0, \\\"duration must be greater than 0\\\");\\n        require(data.faceValue > 0, \\\"faceValue must be greater than 0\\\");\\n        require(data.principal >= BASE_UNIT, \\\"Needs to be in decimal format\\\"); \\n        require(data.marketId > 0, \\\"must be valid instrument\\\");\\n\\n        num_proposals[msg.sender] ++; \\n        instrument_data[Instrument(data.Instrument_address)] = (\\n          InstrumentData(\\n            false, \\n                0, \\n                data.faceValue, \\n                data.marketId, \\n                data.principal, \\n                data.expectedYield, \\n                data.duration, \\n                data.description, \\n                data.Instrument_address,\\n                data.instrument_type,\\n                0\\n            )\\n        ); \\n\\n        Instruments[data.marketId] = Instrument(data.Instrument_address);\\n        assert(data.marketId !=0); \\n    }\\n\\n    /**\\n     @notice called by controller on approveMarket.\\n     */\\n    function setMaturityDate(uint256 marketId) internal {\\n\\n        instrument_data[fetchInstrument(marketId)].maturityDate = instrument_data[fetchInstrument(marketId)].duration + block.timestamp;\\n    }\\n\\n    /// @notice function called when instrument resolves from within\\n    function pingMaturity(address instrument, bool premature) external {\\n        require(msg.sender == instrument || isTrusted(Instrument(instrument))); \\n        uint256 marketId = instrument_data[Instrument(instrument)].marketId; \\n        beforeResolve(marketId); \\n        resolveBeforeMaturity[marketId] = premature; \\n    }\\n\\n\\n    /// @notice RESOLVE FUNCTION #1\\n    /// Checks if instrument is ready to be resolved and locks capital.\\n    /// records blocknumber such that resolveInstrument is called after this function \\n    /// records balances+PnL of instrument\\n    /// @dev need to store internal balance that is used to calculate the redemption price \\n    function beforeResolve(uint256 marketId) public {\\n\\n        Instrument _instrument = Instruments[marketId]; \\n\\n        require(msg.sender == address(_instrument) || msg.sender == address(controller), \\\"Not allowed\\\"); \\n        require(isTrusted( _instrument), \\\"Not trusted\\\"); \\n\\n        _instrument.prepareWithdraw(); \\n\\n        // Record profit/loss used for calculation of redemption price \\n        harvest(address(_instrument));\\n\\n        _instrument.store_internal_balance(); \\n        console.log('maturitybal', _instrument.getMaturityBalance()); \\n        prepareResolveBlock[marketId] = ResolveVar(block.number,true) ;  \\n      }\\n\\n    /// @notice RESOLVE FUNCTION #2\\n    /// @dev In cases of default, needs to be called AFTER the principal recouperation attempts \\n    /// like liquidations, auctions, etc such that the redemption price takes into account the maturity balance\\n    function resolveInstrument(\\n        uint256 marketId\\n    ) external onlyController\\n    returns(bool, uint256, uint256, bool) {\\n        Instrument _instrument = Instruments[marketId];\\n        require(_instrument.isLocked(), \\\"Not Locked\\\");\\n        // require( prepareResolveBlock[marketId].isPrepared && prepareResolveBlock[marketId].endBlock < block.number,\\n        //  \\\"Wait before resolve\\\"); \\n\\n        uint256 bal = UNDERLYING.balanceOf(address(this)); \\n        uint256 instrument_balance = _instrument.getMaturityBalance(); \\n\\n        InstrumentData storage data = instrument_data[_instrument];\\n\\n        bool prematureResolve = resolveBeforeMaturity[marketId]; \\n        bool atLoss; \\n        uint256 total_loss; \\n        uint256 extra_gain; \\n\\n        // If resolved at predetermined maturity date, loss is defined by\\n        // the event the instrument has paid out all its yield + principal \\n        if (!prematureResolve){\\n            atLoss = instrument_balance < data.faceValue;\\n\\n            total_loss = atLoss ? data.faceValue - instrument_balance : 0;\\n            extra_gain = !atLoss ? instrument_balance - data.faceValue : 0;\\n        }\\n\\n        // If resolved before predetermined maturity date, loss is defined by \\n        // the event the instrument has balance less then principal \\n        else {\\n            atLoss = instrument_balance < data.principal; \\n\\n            total_loss = atLoss? data.principal - instrument_balance :0; \\n            extra_gain = 0; \\n        }\\n\\n        withdrawFromInstrument(_instrument, instrument_balance);\\n\\n        console.log('balance increase', bal, UNDERLYING.balanceOf(address(this))); \\n        console.log('balance increase', data.balance, data.principal); \\n        removeInstrument(data.marketId);\\n\\n        return(atLoss, extra_gain, total_loss, prematureResolve); \\n    }\\n\\n    /// @notice when market resolves, send back pulled collateral from managers \\n    function repayDebt(address to, uint256 amount) external onlyController{\\n        UNDERLYING.transfer(to, amount); \\n    }\\n\\n    /**\\n     called on market denial by controller.\\n     */\\n    function denyInstrument(uint256 marketId) external onlyController {\\n        InstrumentData storage data = instrument_data[Instruments[marketId]];\\n\\n        require(marketId > 0 && data.Instrument_address != address(0), \\\"invalid instrument\\\");\\n\\n        require(!data.trusted, \\\"can't deny approved instrument\\\");\\n        \\n        removeInstrument(marketId);\\n    }\\n\\n\\n    function instrumentApprovalCondition(uint256 marketId) external view returns(bool){\\n      return Instruments[marketId].instrumentApprovalCondition(); \\n    }\\n\\n\\n    /// TODO \\n    function deduct_withdrawal_fees(uint256 amount) internal returns(uint256){\\n      return amount; \\n    }\\n\\n\\n    /// @notice types of restrictions are: \\n    /// a) verified address b) reputation scores \\n    function receiver_conditions(address receiver) public view returns(bool){\\n        return true; \\n    }\\n\\n    /// @notice called when constructed, params set by the creater of the vault \\n    function set_minting_conditions(\\n      bool _onlyVerified, \\n      uint256 _r, \\n      uint256 _asset_limit,\\n      uint256 _total_asset_limit) internal{\\n        onlyVerified = _onlyVerified; \\n        r = _r; \\n        asset_limit = _asset_limit; \\n        total_asset_limit = _total_asset_limit; \\n    } \\n\\n\\n    function get_vault_params() public view returns(MarketManager.MarketParameters memory){\\n      return default_params; \\n    }\\n\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual override {\\n      require(enoughLiqudity(assets), \\\"Not enough liqudity in vault\\\"); \\n\\n    }\\n\\n    /// @notice returns true if the vault has enough balance to withdraw or supply to new instrument\\n    /// (excluding those supplied to existing instruments)\\n    /// @dev for now this implies that the vault allows full utilization ratio, but the utilization ratio\\n    /// should be (soft)maxed and tunable by a parameter \\n    function enoughLiqudity(uint256 amounts) public view returns(bool){\\n        return (UNDERLYING.balanceOf(address(this)) >= amounts); \\n    }\\n\\n\\n    /// @notice function that closes instrument prematurely \\n    function closeInstrument(uint256 marketId) external onlyController{\\n      Instrument instrument = fetchInstrument( marketId); \\n\\n      // If instrument has non-underlying tokens, liquidate them first. \\n      instrument.liquidateAllPositions(); \\n\\n    }\\n\\n    function viewPrincipalAndYield(uint256 marketId) public view returns(uint256,uint256){\\n        InstrumentData memory data = instrument_data[Instruments[marketId]];\\n        return (data.principal, data.expectedYield); \\n    }\\n\\n    /// @notice a minting restrictor is set for different vaults \\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256 assets) {\\n        if (!receiver_conditions(receiver)) revert(\\\"Minting Restricted\\\"); \\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n   \\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n\\n    /// @notice apply fee before withdrawing to prevent just minting before maturities and withdrawing after \\n     function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        assets = deduct_withdrawal_fees(assets); \\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n\\n\\n//deprecated\\n    /// @notice RESOLVE FUNCTION #1\\n    /// checks if instrument is ready to be resolved\\n    /// and locks capital inside the instrument \\n    /// @dev resolving is separated into three tx \\n    /// prepareResolve->beforeResolve->resolveinstrument\\n    function prepareResolve(uint256 marketId) public {\\n        Instrument _instrument = Instruments[marketId]; \\n\\n        require(msg.sender == address(_instrument) || msg.sender == address(controller), \\\"Not allowed\\\"); \\n        require(isTrusted( _instrument), \\\"Not trusted\\\"); \\n\\n        // This will check if instrument is ready to be resolved (i.e all debts payed, investments liquidated, etc)\\n        // and lock further drawdowns or usage of capital \\n        _instrument.prepareWithdraw(); \\n    }\\n\\n}\",\"keccak256\":\"0x0bc5562e8c34d5e470a1fc460f5c9ff51e52c86b9ad48e281ba012b325e3aa9a\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040526000600e553480156200001657600080fd5b506040516200ac1c3803806200ac1c8339810160408190526200003991620000e9565b600880546001600160a01b038085166001600160a01b03199283161790925560098054928416929091169190911790556040516200007790620000be565b604051809103906000f08015801562000094573d6000803e3d6000fd5b50600c80546001600160a01b0319166001600160a01b039290921691909117905550620001209050565b61592880620052f483390190565b80516001600160a01b0381168114620000e457600080fd5b919050565b60008060408385031215620000fc578182fd5b6200010783620000cc565b91506200011760208401620000cc565b90509250929050565b6151c480620001306000396000f3fe60806040523480156200001157600080fd5b5060043610620002255760003560e01c80638928dfc31162000131578063b9209e3311620000bb578063d82aff111162000086578063d82aff1114620005d4578063d8f146dd14620005eb578063f0fd1d381462000602578063f25fcc9f1462000619578063f8bd5acd146200064557600080fd5b8063b9209e33146200058e578063c4abc65014620004d6578063cabe2ae114620005bd578063ce93ec6714620002b857600080fd5b80639403b63411620000fc5780639403b63414620004d65780639fe1458b14620004ed578063ac1b6b011462000519578063b1b7e1f2146200056857600080fd5b80638928dfc314620003ff5780638c64ea4a14620004165780638d4f16d7146200045b5780638fbbc86814620004b357600080fd5b806343437be011620001b35780636399d03d116200017e5780636399d03d1462000397578063756bf09114620003ae5780637789ec5a14620003c55780637f8e6f1d14620003e857600080fd5b806343437be0146200032f578063482c0aa81462000352578063494ef44714620003695780634cb44087146200038057600080fd5b806314f2b14c11620001f457806314f2b14c14620002b85780632b85873414620002ea5780632d858c3f14620003015780633ea7fbdb146200031857600080fd5b806303cccb35146200022a5780630700472d146200024f5780630c33df1814620002665780630db065f41462000292575b600080fd5b6200024d336000908152600160208190526040909120805460ff19169091179055565b005b6200024d6200026036600462002ee7565b6200065c565b6200027d62000277366004620033ed565b620006bb565b60405190151581526020015b60405180910390f35b6200027d620002a336600462002ea9565b60016020526000908152604090205460ff1681565b620002db620002c93660046200333b565b60009081526005602052604090205490565b60405190815260200162000289565b6200024d620002fb3660046200333b565b6200079a565b6200024d6200031236600462002ea9565b62000818565b6200024d6200032936600462002ea9565b62000870565b620002db620003403660046200333b565b60066020526000908152604090205481565b620002db6200036336600462003414565b620008bf565b6200024d6200037a3660046200336d565b620008f1565b6200024d620003913660046200333b565b62000ad7565b6200024d620003a83660046200333b565b62000c85565b6200024d620003bf36600462002ff4565b62000db8565b620002db620003d636600462002ea9565b60036020526000908152604090205481565b6200027d620003f93660046200333b565b6200146e565b6200024d620004103660046200345a565b62001645565b62000442620004273660046200333b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200162000289565b620004926200046c3660046200333b565b600260205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b0393841681529290911660208301520162000289565b620002db620004c43660046200333b565b60056020526000908152604090205481565b62000442620004e73660046200333b565b62001769565b62000442620004fe3660046200333b565b6000908152600460205260409020546001600160a01b031690565b6200054c6200052a3660046200333b565b6040805180820190915260008082526020820152600091825260209190915290565b6040805182518152602092830151928101929092520162000289565b6200057f620005793660046200333b565b62001791565b604051620002899190620035f8565b6200027d6200059f36600462002ea9565b6001600160a01b031660009081526001602052604090205460ff1690565b6200024d620005ce3660046200333b565b620017f5565b6200024d620005e536600462002ea9565b6200208f565b6200024d620005fc366004620033b3565b620020f2565b6200024d62000613366004620033b3565b620021bd565b620002db6200062a36600462002ea9565b6001600160a01b031660009081526003602052604090205490565b6200024d6200065636600462002f24565b62002296565b6040516335313c2160e11b81523360048201526001600160a01b03831690636a62784290602401600060405180830381600087803b1580156200069e57600080fd5b505af1158015620006b3573d6000803e3d6000fd5b505050505050565b60008281526005602090815260408083205483526004918290528083205490516359dc5c6f60e01b81529182018590526001600160a01b03169081906359dc5c6f90602401600060405180830381600087803b1580156200071b57600080fd5b505af115801562000730573d6000803e3d6000fd5b5050604051630ae161cd60e21b8152600481018790526001600160a01b0384169250632b8587349150602401600060405180830381600087803b1580156200077757600080fd5b505af11580156200078c573d6000803e3d6000fd5b506001979650505050505050565b600081815260056020908152604080832054835260049182905291829020549151630ae161cd60e21b81529081018390526001600160a01b0390911690632b858734906024015b600060405180830381600087803b158015620007fc57600080fd5b505af115801562000811573d6000803e3d6000fd5b5050505050565b6008546001600160a01b031633146200084e5760405162461bcd60e51b8152600401620008459062003785565b60405180910390fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b031633146200089d5760405162461bcd60e51b8152600401620008459062003785565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b60076020528160005260406000208181548110620008dc57600080fd5b90600052602060002001600091509150505481565b600a546001600160a01b03163314806200091557506008546001600160a01b031633145b620009345760405162461bcd60e51b8152600401620008459062003742565b600a54604051632841c2b760e21b8152600481018590526001600160a01b038481166024830152600092169063a1070adc9060440160206040518083038186803b1580156200098257600080fd5b505afa15801562000997573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009bd919062003354565b9050811562000a4e576000620009dd8280670de0b6b3a764000062002364565b600b5460405163344676d360e21b81526001600160a01b0387811660048301526024820184905292935091169063d119db4c90604401600060405180830381600087803b15801562000a2e57600080fd5b505af115801562000a43573d6000803e3d6000fd5b505050505062000ad1565b600062000a658280670de0b6b3a764000062002364565b600b5460405163224e1c2d60e01b81526001600160a01b0387811660048301526024820184905292935091169063224e1c2d90604401600060405180830381600087803b15801562000ab657600080fd5b505af115801562000acb573d6000803e3d6000fd5b50505050505b50505050565b600a54604051636ff3062160e11b8152600481018390526001600160a01b039091169063dfe60c429060240160206040518083038186803b15801562000b1c57600080fd5b505afa15801562000b31573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b5791906200310e565b62000b9d5760405162461bcd60e51b8152602060048201526015602482015274139bdd08191d5c9a5b99c8185cdcd95cdcdb595b9d605a1b604482015260640162000845565b600a54604051634cb4408760e01b8152600481018390526001600160a01b0390911690634cb4408790602401600060405180830381600087803b15801562000be457600080fd5b505af115801562000bf9573d6000803e3d6000fd5b50505060008281526005602090815260408083205483526004918290529182902054915163d746d3ef60e01b81529081018490526001600160a01b03909116915063d746d3ef90602401600060405180830381600087803b15801562000c5e57600080fd5b505af115801562000c73573d6000803e3d6000fd5b5050505062000c828162002384565b50565b600081815260056020908152604080832054835260049182905280832054905163709a664160e11b81529182018490528291829182916001600160a01b039091169063e134cc8290602401608060405180830381600087803b15801562000ceb57600080fd5b505af115801562000d00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2691906200312d565b600a546040516335bf348d60e01b8152600481018b905285151560248201526044810185905260648101849052821515608482015294985092965090945092506001600160a01b0316906335bf348d9060a401600060405180830381600087803b15801562000d9457600080fd5b505af115801562000da9573d6000803e3d6000fd5b50505050620008118562002384565b6101008201516001600160a01b031662000e155760405162461bcd60e51b815260206004820152601860248201527f6d757374206e6f74206265207a65726f20616464726573730000000000000000604482015260640162000845565b670de0b6b3a76400008260800151101562000e635760405162461bcd60e51b815260206004820152600d60248201526c283932b1b4b9b4b7b71032b93960991b604482015260640162000845565b6000818152600460205260409020546001600160a01b031662000ec05760405162461bcd60e51b815260206004820152601460248201527315985d5b1d08191bd95cdb89dd09c8195e1a5cdd60621b604482015260640162000845565b6001600160a01b03831662000f235760405162461bcd60e51b815260206004820152602260248201527f726563697069656e74206d757374206e6f74206265207a65726f206164647265604482015261737360f01b606482015260840162000845565b600081815260046020818152604080842054600a54825163764bc84160e11b815292516001600160a01b039283169695919092169363ec9790829380830193919290829003018186803b15801562000f7a57600080fd5b505afa15801562000f8f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fb5919062003354565b60008181526005602090815260408083208790558683526007825280832080546001810182559084529190922001829055600a548151637572cb1f60e01b815291519293506001600160a01b03908116926323cc3df89291861691637572cb1f9160048083019260e0929190829003018186803b1580156200103657600080fd5b505afa1580156200104b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010719190620032a9565b846001600160a01b0316636c321c8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620010ab57600080fd5b505afa158015620010c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010e6919062003354565b846040518463ffffffff1660e01b815260040162001107939291906200387e565b600060405180830381600087803b1580156200112257600080fd5b505af115801562001137573d6000803e3d6000fd5b50505050608084015160a0850151600a5460405163c6ceb96b60e01b8152600481018590526000938493620011dc93919290916001600160a01b03169063c6ceb96b9060240160e06040518083038186803b1580156200119657600080fd5b505afa158015620011ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011d19190620032a9565b6020015186620024be565b600a54608089015160a08a015160e08b0151604051637e1f049560e11b81529597509395506001600160a01b039092169363fc3e092a936200122d93899392909189918991904290600401620038d6565b600060405180830381600087803b1580156200124857600080fd5b505af11580156200125d573d6000803e3d6000fd5b5050506001600160a01b03808916600090815260036020526040908190208690556060890186905251634857ef4160e11b815290861691506390afde8290620012ab908990600401620037c6565b600060405180830381600087803b158015620012c657600080fd5b505af1158015620012db573d6000803e3d6000fd5b50506040805180820182526101008a01516001600160a01b0390811682528b8116602080840191825260008a81526002909152849020925183549083166001600160a01b03199182161784559051600190930180549383169390911692909217909155600b54600a54925163c6ceb96b60e01b81526004810189905290821694506331e062b8935091169063c6ceb96b9060240160e06040518083038186803b1580156200138857600080fd5b505afa1580156200139d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013c39190620032a9565b60a00151856040518363ffffffff1660e01b8152600401620013ef929190918252602082015260400190565b600060405180830381600087803b1580156200140a57600080fd5b505af11580156200141f573d6000803e3d6000fd5b5050604080518681526001600160a01b038b1660208201527f5e2ab39d79551e4c4e66256d806dd566d4d015420519d2ed2621563488a5d2a8935001905060405180910390a150505050505050565b6000818152600560209081526040808320548352600491829052808320549051634f626a0760e11b815291820184905282916001600160a01b0390911690639ec4d40e9060240160006040518083038186803b158015620014ce57600080fd5b505afa158015620014e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200150d9190810190620031ad565b90506000816060015111801562001522575080515b620015705760405162461bcd60e51b815260206004820152601960248201527f696e737472756d656e74206d7573742062652061637469766500000000000000604482015260640162000845565b600081610140015111620015d35760405162461bcd60e51b815260206004820152602360248201527f696e737472756d656e74206861736e2774206265656e20617070726f766564206044820152621e595d60ea1b606482015260840162000845565b80610140015142106200163c57604051630ae161cd60e21b8152600481018490523090632b85873490602401600060405180830381600087803b1580156200161a57600080fd5b505af11580156200162f573d6000803e3d6000fd5b5060019695505050505050565b50600092915050565b3360009081526001602052604090205460ff1615620016a75760405162461bcd60e51b815260206004820152601860248201527f6164647265737320616c72656164792076657269666965640000000000000000604482015260640162000845565b600954604051636673e84960e01b81526001600160a01b0390911690636673e8499062001713907f239c35f1f32f5943610fcc78e22c7d7a412ac0939d50bb892b9987f4326f07a7906e1d1dda5d1d195c8b5d5b9c985d1959608a1b90889088908890600401620038a1565b600060405180830381600087803b1580156200172e57600080fd5b505af115801562001743573d6000803e3d6000fd5b5050336000908152600160208190526040909120805460ff191690911790555050505050565b600090815260056020908152604080832054835260049091529020546001600160a01b031690565b600081815260076020908152604091829020805483518184028101840190945280845260609392830182828015620017e957602002820191906000526020600020905b815481526020019060010190808311620017d4575b50505050509050919050565b600a546001600160a01b03163314806200181957506008546001600160a01b031633145b620018385760405162461bcd60e51b8152600401620008459062003742565b600081815260056020908152604080832054835260049182905280832054600a54915163054d50b360e21b81529283018590526001600160a01b03908116939291169063153542cc9060240160206040518083038186803b1580156200189d57600080fd5b505afa158015620018b2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620018d8919062002ec8565b600a54604051634bee760b60e11b8152600481018690529192506001600160a01b0316906397dcec169060240160206040518083038186803b1580156200191e57600080fd5b505afa15801562001933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001959919062003354565b600314620019aa5760405162461bcd60e51b815260206004820152601860248201527f4d61726b657420436f6e646974696f6e204e6f74206d65740000000000000000604482015260640162000845565b60405163238f0e7560e11b8152600481018490526001600160a01b0383169063471e1cea9060240160206040518083038186803b158015620019eb57600080fd5b505afa15801562001a00573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001a2691906200310e565b62001a7e5760405162461bcd60e51b815260206004820152602160248201527f496e737472756d656e7420617070726f76616c20636f6e646974696f6e206d656044820152601d60fa1b606482015260840162000845565b62001a8a83826200285d565b600a54604051634093659d60e11b8152600481018590526001600160a01b0390911690638126cb3a90602401600060405180830381600087803b15801562001ad157600080fd5b505af115801562001ae6573d6000803e3d6000fd5b505050506000816001600160a01b031663f6bb8ba06040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b2657600080fd5b505afa15801562001b3b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001b61919062003354565b826001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001b9b57600080fd5b505afa15801562001bb0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001bd6919062003354565b62001be29190620039de565b905062001cfc6040518060400160405280600b81526020016a626320726573657276657360a81b815250836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001c4657600080fd5b505afa15801562001c5b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001c81919062003354565b846001600160a01b031663f6bb8ba06040518163ffffffff1660e01b815260040160206040518083038186803b15801562001cbb57600080fd5b505afa15801562001cd0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001cf6919062003354565b62002b7c565b62001eaf6040518060400160405280601a81526020017f77636f6c6c61746572616c2062616c616e6365206265666f7265000000000000815250846001600160a01b031663c5d664c66040518163ffffffff1660e01b815260040160206040518083038186803b15801562001d7057600080fd5b505afa15801562001d85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001dab919062002ec8565b6001600160a01b03166370a08231856001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001df357600080fd5b505afa15801562001e08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001e2e919062002ec8565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801562001e6e57600080fd5b505afa15801562001e83573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001ea9919062003354565b62002bcc565b816001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001ee957600080fd5b505afa15801562001efe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001f24919062002ec8565b604051639c62122560e01b81526001600160a01b038581166004830152602482018490529190911690639c62122590604401600060405180830381600087803b15801562001f7157600080fd5b505af115801562001f86573d6000803e3d6000fd5b505050508060066000868152602001908152602001600020819055506200200c6040518060400160405280601381526020017277636f6c6c61746572616c2062616c616e636560681b815250846001600160a01b031663c5d664c66040518163ffffffff1660e01b815260040160206040518083038186803b15801562001d7057600080fd5b60008481526020819052604090819020905163fec4fa7560e01b8152600481018690528154602482015260019091015460448201526001600160a01b0384169063fec4fa7590606401600060405180830381600087803b1580156200207057600080fd5b505af115801562002085573d6000803e3d6000fd5b5050505050505050565b6008546001600160a01b03163314620020bc5760405162461bcd60e51b8152600401620008459062003785565b6001600160a01b038116620020d057600080fd5b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b03163314806200211657506008546001600160a01b031633145b620021355760405162461bcd60e51b8152600401620008459062003742565b600081815260056020908152604080832054835260049182905291829020549151632fafde8160e21b81529081018590526001600160a01b0384811660248301529091169063bebf7a04906044015b600060405180830381600087803b1580156200219f57600080fd5b505af1158015620021b4573d6000803e3d6000fd5b50505050505050565b600a546001600160a01b0316331480620021e157506008546001600160a01b031633145b620022005760405162461bcd60e51b8152600401620008459062003742565b620022426040518060400160405280600a8152602001691d985d5b1d081919589d60b21b81525060066000848152602001908152602001600020548562002b7c565b600081815260056020908152604080832054835260049182905291829020549151633c16f3ed60e21b81529081018590526001600160a01b0384811660248301529091169063f05bcfb49060440162002184565b600d546040516326d079ad60e01b815260009182916001600160a01b03909116906326d079ad90620022d9908b9030908c908c908c908c908c90600401620035a7565b6040805180830381600087803b158015620022f357600080fd5b505af115801562002308573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200232e91906200317d565b600090815260046020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050505050505050565b8282028115158415858304851417166200237d57600080fd5b0492915050565b600a5460405163054d50b360e21b8152600481018390526001600160a01b039091169063153542cc9060240160206040518083038186803b158015620023c957600080fd5b505afa158015620023de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002404919062002ec8565b6001600160a01b0316635c1548fb6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200243d57600080fd5b505afa15801562002452573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002478919062002ec8565b6001600160a01b03166379c76e1a620024918362001769565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401620007e1565b600080600030620024cf8562001769565b6001600160a01b031663c5d664c66040518163ffffffff1660e01b815260040160206040518083038186803b1580156200250857600080fd5b505afa1580156200251d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002543919062002ec8565b604051620025519062002da7565b6080808252600490820152636e616d6560e01b60a082015260c060208201819052600690820152651cde5b589bdb60d21b60e08201526001600160a01b0392831660408201529116606082015261010001604051809103906000f080158015620025bf573d6000803e3d6000fd5b50600c54604080518082019091526004815263109bdb9960e21b6020820152600e549293506000926001600160a01b0390921691632c77a7739190620026059062002c19565b6040516020016200261892919062003567565b60408051601f1981840301815282820190915260018252602160f91b6020830152600e549091906200264a9062002c19565b6040516020016200265d92919062003534565b60408051601f1981840301815290829052600a546001600160e01b031960e086901b168352620026a593926001600160a01b039091169088908f908f908f9060040162003697565b602060405180830381600087803b158015620026c057600080fd5b505af1158015620026d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620026fb919062002ec8565b600c546040805180820190915260058152641cd09bdb9960da1b6020820152600e549293506000926001600160a01b039092169163220859989190620027419062002c19565b6040516020016200275492919062003567565b60408051601f19818403018152828201909152600282526139a160f11b6020830152600e54909190620027879062002c19565b6040516020016200279a92919062003534565b60408051601f1981840301815290829052600a546001600160e01b031960e086901b168352620027e093926001600160a01b0390911690899089908e906004016200363e565b602060405180830381600087803b158015620027fb57600080fd5b505af115801562002810573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002836919062002ec8565b600e805491925060006200284a8362003a59565b9091555091999098509650505050505050565b60008281526005602090815260408083205483526004918290528083205490516318353be960e21b815291820185905282916001600160a01b03909116906360d4efa490602401604080518083038186803b158015620028bc57600080fd5b505afa158015620028d1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620028f7919062003436565b91509150600062002a15846001600160a01b031663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b1580156200293b57600080fd5b505afa15801562002950573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002976919062003354565b600a5460405163c6ceb96b60e01b815260048101899052670de0b6b3a7640000916001600160a01b03169063c6ceb96b9060240160e06040518083038186803b158015620029c357600080fd5b505afa158015620029d8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620029fe9190620032a9565b60c0015162002a0e9190620039de565b9062002d4f565b905062002a7b6040518060400160405280600c81526020016b1b585e1c1c9a5b98da5c185b60a21b81525082866001600160a01b031663d6eb59106040518163ffffffff1660e01b815260040160206040518083038186803b15801562001cbb57600080fd5b62002a87818462002d6d565b604051634e5d17f760e11b81526004810182905260006024820181905291925082906001600160a01b03871690639cba2fee9060440160206040518083038186803b15801562002ad657600080fd5b505afa15801562002aeb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062002b11919062003354565b62002b1d919062003a10565b905062002b49604051806040016040528060068152602001651c5d5bdd195960d21b8152508262002bcc565b60408051808201825292835260208084019283526000978852879052909520905181559351600190940193909355505050565b62002bc783838360405160240162002b97939291906200371b565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b17905262002d86565b505050565b62002c15828260405160240162002be5929190620036f7565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b17905262002d86565b5050565b60608162002c3e5750506040805180820190915260018152600360fc1b602082015290565b8160005b811562002c6e578062002c558162003a59565b915062002c669050600a83620039f9565b915062002c42565b60008167ffffffffffffffff81111562002c9857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801562002cc3576020820181803683370190505b5090505b841562002d475762002cdb60018362003a10565b915062002cea600a8662003a77565b62002cf7906030620039de565b60f81b81838151811062002d1b57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535062002d3f600a86620039f9565b945062002cc7565b949350505050565b600062002d668383670de0b6b3a764000062002364565b9392505050565b60008183111562002d7f578162002d66565b5090919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6116788062003b1783390190565b803562002dc28162003ad0565b919050565b805162002dc28162003ad0565b803562002dc28162003ae6565b805162002dc28162003ae6565b803562002dc28162003af5565b805162002dc28162003af5565b600082601f83011262002e19578081fd5b813562002e3062002e2a82620039b3565b6200397f565b81815284602083860101111562002e45578283fd5b816020850160208301379081016020019190915292915050565b600082601f83011262002e70578081fd5b815162002e8162002e2a82620039b3565b81815284602083860101111562002e96578283fd5b62002d4782602083016020870162003a2a565b60006020828403121562002ebb578081fd5b813562002d668162003ad0565b60006020828403121562002eda578081fd5b815162002d668162003ad0565b6000806040838503121562002efa578081fd5b823562002f078162003ad0565b9150602083013562002f198162003ad0565b809150509250929050565b60008060008060008086880361018081121562002f3f578283fd5b873562002f4c8162003ad0565b9650602088013562002f5e8162003ae6565b955060408801359450606088013593506080880135925060e0609f198201121562002f87578182fd5b5062002f926200392c565b60a088013562002fa28162003b03565b8082525060c0880135602082015260e088013560408201526101008801356060820152610120880135608082015261014088013560a082015261016088013560c0820152809150509295509295509295565b60008060006060848603121562003009578081fd5b8335620030168162003ad0565b9250602084013567ffffffffffffffff8082111562003033578283fd5b90850190610160828803121562003048578283fd5b6200305262003958565b6200305d8362002dd4565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013582811115620030ad578485fd5b620030bb8982860162002e08565b60e0830152506101009150620030d382840162002db5565b828201526101209150620030e982840162002dee565b8282015261014091508183013582820152809450505050604084013590509250925092565b60006020828403121562003120578081fd5b815162002d668162003ae6565b6000806000806080858703121562003143578182fd5b8451620031508162003ae6565b8094505060208501519250604085015191506060850151620031728162003ae6565b939692955090935050565b6000806040838503121562003190578182fd5b82516200319d8162003ad0565b6020939093015192949293505050565b600060208284031215620031bf578081fd5b815167ffffffffffffffff80821115620031d7578283fd5b908301906101608286031215620031ec578283fd5b620031f662003958565b620032018362002de1565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e08301518281111562003251578485fd5b6200325f8782860162002e5f565b60e08301525061010091506200327782840162002dc7565b8282015261012091506200328d82840162002dfb565b9181019190915261014091820151918101919091529392505050565b600060e08284031215620032bb578081fd5b60405160e0810181811067ffffffffffffffff82111715620032e157620032e162003aba565b6040528251620032f18162003b03565b808252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b6000602082840312156200334d578081fd5b5035919050565b60006020828403121562003366578081fd5b5051919050565b60008060006060848603121562003382578081fd5b833592506020840135620033968162003ad0565b91506040840135620033a88162003ae6565b809150509250925092565b600080600060608486031215620033c8578081fd5b833592506020840135620033dc8162003ad0565b929592945050506040919091013590565b6000806040838503121562003400578182fd5b82359150602083013562002f198162003ae6565b6000806040838503121562003427578182fd5b50508035926020909101359150565b6000806040838503121562003449578182fd5b505080516020909101519092909150565b600080600061014080858703121562003471578182fd5b84359350602085013592508581860111156200348b578182fd5b506040840190509250925092565b60028110620034b857634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452620034d681602086016020860162003a2a565b601f01601f19169290920160200192915050565b63ffffffff81511682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c08301525050565b600083516200354881846020880162003a2a565b8351908301906200355e81836020880162003a2a565b01949350505050565b600083516200357b81846020880162003a2a565b602d60f81b90830190815283516200359b81600184016020880162003a2a565b01600101949350505050565b6001600160a01b038881168252871660208201528515156040820152606081018590526080810184905260a081018390526101a08101620035ec60c0830184620034ea565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015620036325783518352928401929184019160010162003614565b50909695505050505050565b60c0815260006200365360c0830189620034bc565b8281036020840152620036678189620034bc565b6001600160a01b0397881660408501529587166060840152505091909316608082015260a0019190915292915050565b60e081526000620036ac60e083018a620034bc565b8281036020840152620036c0818a620034bc565b6001600160a01b03988916604085015296909716606083015250608081019390935260a083019190915260c0909101529392505050565b6040815260006200370c6040830185620034bc565b90508260208301529392505050565b606081526000620037306060830186620034bc565b60208301949094525060400152919050565b60208082526023908201527f4f6e6c79204d616e616765722063616e2063616c6c20746869732066756e637460408201526234b7b760e91b606082015260800190565b60208082526021908201527f4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b60208152620037da60208201835115159052565b602082015160408201526040820151606082015260608201516080820152608082015160a082015260a082015160c082015260c082015160e0820152600060e0830151610160610100818186015262003838610180860184620034bc565b9086015190925061012062003857868201836001600160a01b03169052565b86015190506101406200386d8682018362003499565b959095015193019290925250919050565b61012081016200388f8286620034ea565b60e08201939093526101000152919050565b600061018082019050868252856020830152846040830152836060830152610100836080840137600081529695505050505050565b87815260208101879052604081018690526001600160a01b0385811660608301528416608082015260e060a082018190526000906200391890830185620034bc565b90508260c083015298975050505050505050565b60405160e0810167ffffffffffffffff8111828210171562003952576200395262003aba565b60405290565b604051610160810167ffffffffffffffff8111828210171562003952576200395262003aba565b604051601f8201601f1916810167ffffffffffffffff81118282101715620039ab57620039ab62003aba565b604052919050565b600067ffffffffffffffff821115620039d057620039d062003aba565b50601f01601f191660200190565b60008219821115620039f457620039f462003a8e565b500190565b60008262003a0b5762003a0b62003aa4565b500490565b60008282101562003a255762003a2562003a8e565b500390565b60005b8381101562003a4757818101518382015260200162003a2d565b8381111562000ad15750506000910152565b600060001982141562003a705762003a7062003a8e565b5060010190565b60008262003a895762003a8962003aa4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000c8257600080fd5b801515811462000c8257600080fd5b6002811062000c8257600080fd5b63ffffffff8116811462000c8257600080fdfe60806040523480156200001157600080fd5b506040516200167838038062001678833981016040819052620000349162000364565b8383838282816003908051906020019062000051929190620001c5565b50805162000067906004906020840190620001c5565b5050600580546001600160a01b0319908116338216176001600160a01b03948516179091556006805490911686841690811790915560405163095ea7b360e01b815292871660048401526000196024840152935063095ea7b3925050604401602060405180830381600087803b158015620000e157600080fd5b505af1158015620000f6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011c91906200033b565b50600660009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200016c57600080fd5b505afa15801562000181573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a79190620003f0565b620001b490601262000413565b60ff16600755506200049692505050565b828054620001d39062000443565b90600052602060002090601f016020900481019282620001f7576000855562000242565b82601f106200021257805160ff191683800117855562000242565b8280016001018555821562000242579182015b828111156200024257825182559160200191906001019062000225565b506200025092915062000254565b5090565b5b8082111562000250576000815560010162000255565b80516001600160a01b03811681146200028357600080fd5b919050565b600082601f83011262000299578081fd5b81516001600160401b0380821115620002b657620002b662000480565b604051601f8301601f19908116603f01168101908282118183101715620002e157620002e162000480565b81604052838152602092508683858801011115620002fd578485fd5b8491505b8382101562000320578582018301518183018401529082019062000301565b838211156200033157848385830101525b9695505050505050565b6000602082840312156200034d578081fd5b815180151581146200035d578182fd5b9392505050565b600080600080608085870312156200037a578283fd5b84516001600160401b038082111562000391578485fd5b6200039f8883890162000288565b95506020870151915080821115620003b5578485fd5b50620003c48782880162000288565b935050620003d5604086016200026b565b9150620003e5606086016200026b565b905092959194509250565b60006020828403121562000402578081fd5b815160ff811681146200035d578182fd5b600060ff821660ff8416808210156200043a57634e487b7160e01b83526011600452602483fd5b90039392505050565b600181811c908216806200045857607f821691505b602082108114156200047a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6111d280620004a66000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806371297784116100b8578063a457c2d71161007c578063a457c2d714610284578063a9059cbb14610297578063c024cd26146102aa578063c6c3bbe6146102bd578063dd62ed3e146102d0578063f2fde38b146102e357600080fd5b8063712977841461022857806379c76e1a1461023b578063893d20e81461024e57806395d89b41146102695780639c6212251461027157600080fd5b806323b872dd116100ff57806323b872dd146101b7578063313ce567146101ca57806339509351146101d957806342986e13146101ec57806370a08231146101ff57600080fd5b806306fdde031461013c578063095ea7b31461015a5780630e6dfcd51461017d5780630fb665571461019257806318160ddd146101a5575b600080fd5b6101446102f6565b6040516101519190610fbe565b60405180910390f35b61016d610168366004610f5d565b610388565b6040519015158152602001610151565b61019061018b366004610f22565b6103a2565b005b6101906101a0366004610f22565b610456565b6002545b604051908152602001610151565b61016d6101c5366004610f22565b61047d565b60405160128152602001610151565b61016d6101e7366004610f5d565b6104a1565b6101906101fa366004610f5d565b6104c3565b6101a961020d366004610ecf565b6001600160a01b031660009081526020819052604090205490565b6101a9610236366004610ecf565b6104e8565b610190610249366004610ecf565b61052d565b6005546040516001600160a01b039091168152602001610151565b610144610647565b61019061027f366004610f5d565b610656565b61016d610292366004610f5d565b61074a565b61016d6102a5366004610f5d565b6107c5565b6101906102b8366004610f5d565b6107d3565b6101906102cb366004610f22565b6107f4565b6101a96102de366004610ef0565b6108a8565b61016d6102f1366004610ecf565b6108d3565b6060600380546103059061114b565b80601f01602080910402602001604051908101604052809291908181526020018280546103319061114b565b801561037e5780601f106103535761010080835404028352916020019161037e565b820191906000526020600020905b81548152906001019060200180831161036157829003601f168201915b5050505050905090565b600033610396818585610925565b60019150505b92915050565b6000600754600a6103b3919061108c565b6103bd9083611029565b90506103c98483610a49565b60065460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b15801561041757600080fd5b505af115801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f9190610f86565b5050505050565b6005546001600160a01b0316331461046d57600080fd5b610478838383610b97565b505050565b60003361048b858285610d65565b610496858585610b97565b506001949350505050565b6000336103968185856104b483836108a8565b6104be9190611011565b610925565b6005546001600160a01b031633146104da57600080fd5b6104e48282610a49565b5050565b6005546000906001600160a01b0316331461050257600080fd5b6001600160a01b0382166000908152602081905260409020546105258382610a49565b90505b919050565b6005546001600160a01b0316331461054457600080fd5b6006546040516370a0823160e01b81523060048201526001600160a01b039091169063a9059cbb90839083906370a082319060240160206040518083038186803b15801561059157600080fd5b505afa1580156105a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c99190610fa6565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190610f86565b6060600480546103059061114b565b6005546001600160a01b031633146106a15760405162461bcd60e51b81526020600482015260096024820152682737ba1037bbb732b960b91b60448201526064015b60405180910390fd5b6000600754600a6106b2919061108c565b6106bc9083611029565b60065460405163a9059cbb60e01b81526001600160a01b0386811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107449190610f86565b50505050565b6000338161075882866108a8565b9050838110156107b85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610698565b6104968286868403610925565b600033610396818585610b97565b6005546001600160a01b031633146107ea57600080fd5b6104e48282610dd9565b6000600754600a610805919061108c565b61080f9083611029565b6006546040516323b872dd60e01b81526001600160a01b038781166004830152306024830152604482018490529293509116906323b872dd90606401602060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190610f86565b506107448383610dd9565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6005546000906001600160a01b031633146108ed57600080fd5b6001600160a01b03821661090057600080fd5b50600580546001600160a01b0383166001600160a01b03199091161790556001919050565b6001600160a01b0383166109875760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610698565b6001600160a01b0382166109e85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610698565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038216610aa95760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610698565b6001600160a01b03821660009081526020819052604090205481811015610b1d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610698565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610b4c908490611134565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038316610bfb5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610698565b6001600160a01b038216610c5d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610698565b6001600160a01b03831660009081526020819052604090205481811015610cd55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610698565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610d0c908490611011565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d5891815260200190565b60405180910390a3610744565b6000610d7184846108a8565b905060001981146107445781811015610dcc5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610698565b6107448484848403610925565b6001600160a01b038216610e2f5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610698565b8060026000828254610e419190611011565b90915550506001600160a01b03821660009081526020819052604081208054839290610e6e908490611011565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b038116811461052857600080fd5b600060208284031215610ee0578081fd5b610ee982610eb8565b9392505050565b60008060408385031215610f02578081fd5b610f0b83610eb8565b9150610f1960208401610eb8565b90509250929050565b600080600060608486031215610f36578081fd5b610f3f84610eb8565b9250610f4d60208501610eb8565b9150604084013590509250925092565b60008060408385031215610f6f578182fd5b610f7883610eb8565b946020939093013593505050565b600060208284031215610f97578081fd5b81518015158114610ee9578182fd5b600060208284031215610fb7578081fd5b5051919050565b6000602080835283518082850152825b81811015610fea57858101830151858201604001528201610fce565b81811115610ffb5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561102457611024611186565b500190565b60008261104457634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561108457816000190482111561106a5761106a611186565b8085161561107757918102915b93841c939080029061104e565b509250929050565b6000610ee983836000826110a25750600161039c565b816110af5750600061039c565b81600181146110c557600281146110cf576110eb565b600191505061039c565b60ff8411156110e0576110e0611186565b50506001821b61039c565b5060208310610133831016604e8410600b841016171561110e575081810a61039c565b6111188383611049565b806000190482111561112c5761112c611186565b029392505050565b60008282101561114657611146611186565b500390565b600181811c9082168061115f57607f821691505b6020821081141561118057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220f11c6aea9faf811254edd5dff799b39354803364fdc946cd830cc909735d6a4e64736f6c63430008040033a26469706673582212207c8a4c61c923a1e46a377afa34351e16743939b76be19dadb59187aa167909b664736f6c63430008040033608060405234801561001057600080fd5b50600080546001600160a01b031916331790556158f6806100326000396000f3fe60806040523480156200001157600080fd5b50600436106200003a5760003560e01c806322085998146200003f5780632c77a7731462000072575b600080fd5b6200005662000050366004620001f8565b62000089565b6040516001600160a01b03909116815260200160405180910390f35b6200005662000083366004620002a0565b620000db565b600080878787878787604051620000a09062000130565b620000b19695949392919062000396565b604051809103906000f080158015620000ce573d6000803e3d6000fd5b5098975050505050505050565b60008088888888888888604051620000f3906200013e565b620001059796959493929190620003ef565b604051809103906000f08015801562000122573d6000803e3d6000fd5b509998505050505050505050565b6124f0806200046683390190565b612f6b806200295683390190565b80356001600160a01b03811681146200016457600080fd5b919050565b600082601f8301126200017a578081fd5b813567ffffffffffffffff808211156200019857620001986200044f565b604051601f8301601f19908116603f01168101908282118183101715620001c357620001c36200044f565b81604052838152866020858801011115620001dc578485fd5b8360208701602083013792830160200193909352509392505050565b60008060008060008060c0878903121562000211578182fd5b863567ffffffffffffffff8082111562000229578384fd5b620002378a838b0162000169565b975060208901359150808211156200024d578384fd5b506200025c89828a0162000169565b9550506200026d604088016200014c565b93506200027d606088016200014c565b92506200028d608088016200014c565b915060a087013590509295509295509295565b600080600080600080600060e0888a031215620002bb578081fd5b873567ffffffffffffffff80821115620002d3578283fd5b620002e18b838c0162000169565b985060208a0135915080821115620002f7578283fd5b50620003068a828b0162000169565b96505062000317604089016200014c565b945062000327606089016200014c565b9699959850939660808101359560a0820135955060c0909101359350915050565b60008151808452815b818110156200036f5760208185018101518683018201520162000351565b81811115620003815782602083870101525b50601f01601f19169290920160200192915050565b60c081526000620003ab60c083018962000348565b8281036020840152620003bf818962000348565b6001600160a01b0397881660408501529587166060840152505091909316608082015260a0019190915292915050565b60e0815260006200040460e083018a62000348565b828103602084015262000418818a62000348565b6001600160a01b03988916604085015296909716606083015250608081019390935260a083019190915260c0909101529392505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b50604051620024f0380380620024f08339810160408190526200003491620003a8565b858585858585858585828281600390805190602001906200005792919062000209565b5080516200006d90600490602084019062000209565b5050600580546001600160a01b0319908116338216176001600160a01b039485161790915560068054909116928816928317905550670de0b6b3a76400006008556040805163313ce56760e01b8152905191935063313ce5679250600480820192602092909190829003018186803b158015620000e957600080fd5b505afa158015620000fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012491906200044f565b60ff1660098190556006546001600160a01b03169063095ea7b39086906200015190633b9aca0062000472565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156200019857600080fd5b505af1158015620001ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d391906200037f565b50600780546001600160a01b0319166001600160a01b039390931692909217909155600a5550620004f198505050505050505050565b82805462000217906200049e565b90600052602060002090601f0160209004810192826200023b576000855562000286565b82601f106200025657805160ff191683800117855562000286565b8280016001018555821562000286579182015b828111156200028657825182559160200191906001019062000269565b506200029492915062000298565b5090565b5b8082111562000294576000815560010162000299565b80516001600160a01b0381168114620002c757600080fd5b919050565b600082601f830112620002dd578081fd5b81516001600160401b0380821115620002fa57620002fa620004db565b604051601f8301601f19908116603f01168101908282118183101715620003255762000325620004db565b8160405283815260209250868385880101111562000341578485fd5b8491505b8382101562000364578582018301518183018401529082019062000345565b838211156200037557848385830101525b9695505050505050565b60006020828403121562000391578081fd5b81518015158114620003a1578182fd5b9392505050565b60008060008060008060c08789031215620003c1578182fd5b86516001600160401b0380821115620003d8578384fd5b620003e68a838b01620002cc565b97506020890151915080821115620003fc578384fd5b506200040b89828a01620002cc565b9550506200041c60408801620002af565b93506200042c60608801620002af565b92506200043c60808801620002af565b915060a087015190509295509295509295565b60006020828403121562000461578081fd5b815160ff81168114620003a1578182fd5b60008160001904831182151516156200049957634e487b7160e01b81526011600452602481fd5b500290565b600181811c90821680620004b357607f821691505b60208210811415620004d557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611fef80620005016000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806370a08231116100f9578063a8ec1e9611610097578063c1f1b1b511610071578063c1f1b1b514610395578063dd62ed3e146103a6578063e02f18f6146103b9578063f2fde38b146103cc57600080fd5b8063a8ec1e961461035c578063a9059cbb1461036f578063c024cd261461038257600080fd5b80638b3bcb43116100d35780638b3bcb43146103265780638fbc41ba1461032e57806395d89b4114610341578063a457c2d71461034957600080fd5b806370a08231146102d95780637129778414610302578063893d20e81461031557600080fd5b806323b872dd116101665780633bd849e8116101405780633bd849e81461027b57806342986e131461028e5780635c1548fb146102a1578063682a5a47146102c657600080fd5b806323b872dd14610246578063313ce56714610259578063395093511461026857600080fd5b806306fdde03146101ae5780630902f1ac146101cc578063095ea7b3146101de5780630c3dc919146102015780630fb665571461022957806318160ddd1461023e575b600080fd5b6101b66103df565b6040516101c39190611e7a565b60405180910390f35b600b545b6040519081526020016101c3565b6101f16101ec366004611d64565b610471565b60405190151581526020016101c3565b61021461020f366004611ddf565b610489565b604080519283526020830191909152016101c3565b61023c610237366004611d29565b61074b565b005b6002546101d0565b6101f1610254366004611d29565b610772565b604051601281526020016101c3565b6101f1610276366004611d64565b610798565b610214610289366004611d8d565b6107ba565b61023c61029c366004611d64565b610bc1565b6006546001600160a01b03165b6040516001600160a01b0390911681526020016101c3565b6102146102d4366004611ddf565b610be6565b6101d06102e7366004611cdd565b6001600160a01b031660009081526020819052604090205490565b6101d0610310366004611cdd565b610bfb565b6005546001600160a01b03166102ae565b6101d0610c40565b6101d061033c366004611ddf565b610d8a565b6101b6610e0d565b6101f1610357366004611d64565b610e1c565b61021461036a366004611ddf565b610ea2565b6101f161037d366004611d64565b610ecb565b61023c610390366004611d64565b610ed9565b6007546001600160a01b03166102ae565b6101d06103b4366004611cf7565b610efa565b6102146103c7366004611d8d565b610f25565b6101f16103da366004611cdd565b611222565b6060600380546103ee90611f6e565b80601f016020809104026020016040519081016040528092919081815260200182805461041a90611f6e565b80156104675780601f1061043c57610100808354040283529160200191610467565b820191906000526020600020905b81548152906001019060200180831161044a57829003601f168201915b5050505050905090565b60003361047f818585611274565b5060019392505050565b60008060006104a06007546001600160a01b031690565b6001600160a01b031663072b85286040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d857600080fd5b505afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105109190611df7565b90506000806105276007546001600160a01b031690565b6001600160a01b0316635e615a6b6040518163ffffffff1660e01b8152600401604080518083038186803b15801561055e57600080fd5b505afa158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190611e0f565b9150915060006105c1826008546105ad9190611f2b565b836008546105bb9190611f2b565b90611398565b905060006105cf8486611398565b6105da906002611f0c565b905060006105f56105eb8780611398565b6105bb8780611398565b905060006106038386611398565b90506000610611878c611398565b61061c906002611f0c565b90506000818461062c8589611ed4565b6106369190611ed4565b6106409190611ed4565b9050600061064e8683611f2b565b90506000610668600854836106639190611f0c565b6113ad565b905061068f6040518060400160405280600381526020016272687360e81b81525082611486565b60008960085461069f9190611f2b565b82106106e95760405162461bcd60e51b81526020600482015260146024820152734e6f7420656e6f756768206c697175696469747960601b60448201526064015b60405180910390fd5b5060085489900381900360006106ff828d6114cb565b905061072a60405180604001604052806006815260200165637072696d6560d01b815250828f6114e0565b610734818e611f2b565b819e509e5050505050505050505050505050915091565b6005546001600160a01b0316331461076257600080fd5b61076d838383611527565b505050565b6000336107808582856116f7565b61078b858585611527565b60019150505b9392505050565b60003361047f8185856107ab8383610efa565b6107b59190611ed4565b611274565b60055460009081906001600160a01b031633146107d657600080fd5b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561081a57600080fd5b505afa15801561082e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108529190611df7565b905061085e868661176b565b60075460405163011a060760e11b8152600481018790526000916001600160a01b0316906302340c0e9060240160206040518083038186803b1580156108a357600080fd5b505afa1580156108b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108db9190611df7565b90506108e78187611f2b565b93506108f38482611ed4565b600b60008282546109049190611f2b565b909155505060065460075460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b15801561095957600080fd5b505af115801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190611dbf565b50600754604051631f690c5d60e31b815230600482015260248101839052600060448201526001600160a01b039091169063fb4862e890606401602060405180830381600087803b1580156109e557600080fd5b505af11580156109f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1d9190611df7565b9250610a53604051806040016040528060118152602001701b995959195917d8dbdb1b185d195c985b607a1b81525082866114e0565b610a836040518060400160405280600e81526020016d1cda1bdc9d1698d8985b5bdd5b9d60921b81525087611486565b610a93655af3107a400087611ed4565b6006546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610ad657600080fd5b505afa158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e9190611df7565b610b189084611f2b565b1115610b3457634e487b7160e01b600052600160045260246000fd5b610b44655af3107a400084611ed4565b861115610b6157634e487b7160e01b600052600160045260246000fd5b84841015610ba05760405162461bcd60e51b815260206004820152600c60248201526b29b634b83830b3b29022b93960a11b60448201526064016106e0565b600654610bb7906001600160a01b031688866118b9565b5050935093915050565b6005546001600160a01b03163314610bd857600080fd5b610be2828261176b565b5050565b600080610bf283610489565b91509150915091565b6005546000906001600160a01b03163314610c1557600080fd5b6001600160a01b038216600090815260208190526040902054610c38838261176b565b90505b919050565b600080600760009054906101000a90046001600160a01b03166001600160a01b031663072b85286040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9157600080fd5b505afa158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc99190611df7565b60075460408051635e615a6b60e01b8152815193945060009384936001600160a01b031692635e615a6b9260048082019391829003018186803b158015610d0f57600080fd5b505afa158015610d23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d479190611e0f565b9092509050610d568184611398565b610d6e610d638580611398565b6105bb600286611eec565b610d789085611f2b565b610d829190611f2b565b935050505090565b60075460405163011a060760e11b8152600481018390526000916001600160a01b0316906302340c0e9060240160206040518083038186803b158015610dcf57600080fd5b505afa158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190611df7565b92915050565b6060600480546103ee90611f6e565b60003381610e2a8286610efa565b905083811015610e8a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106e0565b610e978286868403611274565b506001949350505050565b600080600080610eb185610be6565b9092509050610ec085836114cb565b959194509092505050565b60003361047f818585611527565b6005546001600160a01b03163314610ef057600080fd5b610be2828261191c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60055460009081906001600160a01b03163314610f4157600080fd5b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610f8557600080fd5b505afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd9190611df7565b9050610fc885610be6565b6006549194509250610fe5906001600160a01b03168730886119fb565b600754604051634d71b5a560e01b815230600482015260248101859052600060448201819052916001600160a01b031690634d71b5a590606401602060405180830381600087803b15801561103957600080fd5b505af115801561104d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110719190611df7565b905061107d8187611ed4565b600b600082825461108e9190611ed4565b9091555050604080518082019091526009815268185b5bdd5b9d1bdd5d60ba1b60208201526110be9082886114e0565b6110f2604051806040016040528060118152602001701cdd5c1c1b1e57d8599d195c97dcd95b1b607a1b81525084866114e0565b611102655af3107a400085611f2b565b6006546040516370a0823160e01b815230600482015284916001600160a01b0316906370a082319060240160206040518083038186803b15801561114557600080fd5b505afa158015611159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117d9190611df7565b6111879190611f2b565b10156111a357634e487b7160e01b600052600160045260246000fd5b6111b3655af3107a400085611f2b565b6111bd8783611ed4565b10156111d957634e487b7160e01b600052600160045260246000fd5b838511156112185760405162461bcd60e51b815260206004820152600c60248201526b29b634b83830b3b29022b93960a11b60448201526064016106e0565b610bb7878561191c565b6005546000906001600160a01b0316331461123c57600080fd5b6001600160a01b03821661124f57600080fd5b50600580546001600160a01b0383166001600160a01b03199091161790556001919050565b6001600160a01b0383166112d65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106e0565b6001600160a01b0382166113375760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106e0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006107918383670de0b6b3a7640000611a33565b600181600160801b81106113c65760409190911b9060801c5b6801000000000000000081106113e15760209190911b9060401c5b64010000000081106113f85760109190911b9060201c5b62010000811061140d5760089190911b9060101c5b61010081106114215760049190911b9060081c5b601081106114345760029190911b9060041c5b60088110611443578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c80820481811015611480578091505b50919050565b610be2828260405160240161149c929190611e8d565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611a52565b600061079183670de0b6b3a764000084611a33565b61076d8383836040516024016114f893929190611eaf565b60408051601f198184030181529190526020810180516001600160e01b031663969cdd0360e01b179052611a52565b6001600160a01b03831661158b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016106e0565b6001600160a01b0382166115ed5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016106e0565b6001600160a01b038316600090815260208190526040902054818110156116655760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106e0565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061169c908490611ed4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516116e891815260200190565b60405180910390a35b50505050565b60006117038484610efa565b905060001981146116f1578181101561175e5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016106e0565b6116f18484848403611274565b6001600160a01b0382166117cb5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016106e0565b6001600160a01b0382166000908152602081905260409020548181101561183f5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016106e0565b6001600160a01b038316600090815260208190526040812083830390556002805484929061186e908490611f2b565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261076d90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611a73565b6001600160a01b0382166119725760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016106e0565b80600260008282546119849190611ed4565b90915550506001600160a01b038216600090815260208190526040812080548392906119b1908490611ed4565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526116f19085906323b872dd60e01b906084016118e5565b828202811515841585830485141716611a4b57600080fd5b0492915050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000611ac8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b459092919063ffffffff16565b80519091501561076d5780806020019051810190611ae69190611dbf565b61076d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106e0565b6060611b548484600085611b5c565b949350505050565b606082471015611bbd5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016106e0565b6001600160a01b0385163b611c145760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106e0565b600080866001600160a01b03168587604051611c309190611e5e565b60006040518083038185875af1925050503d8060008114611c6d576040519150601f19603f3d011682016040523d82523d6000602084013e611c72565b606091505b5091509150611c82828286611c8d565b979650505050505050565b60608315611c9c575081610791565b825115611cac5782518084602001fd5b8160405162461bcd60e51b81526004016106e09190611e7a565b80356001600160a01b0381168114610c3b57600080fd5b600060208284031215611cee578081fd5b61079182611cc6565b60008060408385031215611d09578081fd5b611d1283611cc6565b9150611d2060208401611cc6565b90509250929050565b600080600060608486031215611d3d578081fd5b611d4684611cc6565b9250611d5460208501611cc6565b9150604084013590509250925092565b60008060408385031215611d76578182fd5b611d7f83611cc6565b946020939093013593505050565b600080600060608486031215611da1578283fd5b611daa84611cc6565b95602085013595506040909401359392505050565b600060208284031215611dd0578081fd5b81518015158114610791578182fd5b600060208284031215611df0578081fd5b5035919050565b600060208284031215611e08578081fd5b5051919050565b60008060408385031215611e21578182fd5b505080516020909101519092909150565b60008151808452611e4a816020860160208601611f42565b601f01601f19169290920160200192915050565b60008251611e70818460208701611f42565b9190910192915050565b6020815260006107916020830184611e32565b604081526000611ea06040830185611e32565b90508260208301529392505050565b606081526000611ec26060830186611e32565b60208301949094525060400152919050565b60008219821115611ee757611ee7611fa3565b500190565b600082611f0757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611f2657611f26611fa3565b500290565b600082821015611f3d57611f3d611fa3565b500390565b60005b83811015611f5d578181015183820152602001611f45565b838111156116f15750506000910152565b600181811c90821680611f8257607f821691505b6020821081141561148057634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fdfea26469706673582212204bd21e1018f2c7d8ba171747b907ddcbc5d7ef65f6e9406deabd977dc145747a64736f6c6343000804003360806040523480156200001157600080fd5b5060405162002f6b38038062002f6b833981016040819052620000349162000758565b868686868383838282816003908051906020019062000055929190620005e2565b5080516200006b906004906020840190620005e2565b5050600580546001600160a01b0319908116338216176001600160a01b0394851617909155600d8054909116928616928317905550670de0b6b3a7640000600a556040805163313ce56760e01b8152905191935063313ce5679250600480820192602092909190829003018186803b158015620000e757600080fd5b505afa158015620000fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000122919062000801565b60ff16600b8190555050505050826200014681620001ae60201b620012251760201c565b620001925760405162461bcd60e51b8152602060048201526022602482015260008051602062002f4b8339815191526044820152611b9d60f21b60648201526084015b60405180910390fd5b6200019f848484620001cf565b50505050505050505062000a0e565b6000620001c6612710670de0b6b3a764000062000846565b90911015919050565b600083620001e881620001ae60201b620012251760201c565b620002305760405162461bcd60e51b8152602060048201526022602482015260008051602062002f4b8339815191526044820152611b9d60f21b606482015260840162000189565b600a54620002646200024386886200082b565b620002508860026200096f565b6200031a60201b620012441790919060201c565b62000270919062000991565b601155620002956200028385876200082b565b601154600a5462000250919062000991565b601055620002ba620002b486856200033a602090811b6200125917901c565b62000351565b601281905550601154620002e16012546010546200033a60201b620012591790919060201c565b620002ed91906200082b565b601155600a54620003036200024386886200082b565b6200030f919062000991565b601355509392505050565b60006200033183670de0b6b3a764000084620004c4565b90505b92915050565b6000620003318383670de0b6b3a7640000620004c4565b6000816200036a81620001ae60201b620012251760201c565b620003b25760405162461bcd60e51b8152602060048201526022602482015260008051602062002f4b8339815191526044820152611b9d60f21b606482015260840162000189565b6000620003be620004e4565b90506000600a546002601154620003e6856010546200033a60201b620012591790919060201c565b620003f291906200082b565b620003fe9190620008b0565b6200040a919062000846565b905060006200042a866010546200033a60201b620012591790919060201c565b620004379060026200096f565b905060006200046d600a5483856200045091906200082b565b6200045c91906200096f565b6200050560201b6200126e1760201c565b9050600060115462000490866010546200033a60201b620012591790919060201c565b6200049c91906200082b565b90506000620004b5601054838562000250919062000991565b97505050505050505b50919050565b828202811515841585830485141716620004dd57600080fd5b0492915050565b600e54600090620004f460025490565b62000500919062000991565b905090565b600181600160801b81106200051f5760409190911b9060801c5b6801000000000000000081106200053b5760209190911b9060401c5b6401000000008110620005535760109190911b9060201c5b620100008110620005695760089190911b9060101c5b61010081106200057e5760049190911b9060081c5b60108110620005925760029190911b9060041c5b60088110620005a2578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c80820481811015620004be5792915050565b828054620005f090620009ab565b90600052602060002090601f0160209004810192826200061457600085556200065f565b82601f106200062f57805160ff19168380011785556200065f565b828001600101855582156200065f579182015b828111156200065f57825182559160200191906001019062000642565b506200066d92915062000671565b5090565b5b808211156200066d576000815560010162000672565b80516001600160a01b0381168114620006a057600080fd5b919050565b600082601f830112620006b6578081fd5b81516001600160401b0380821115620006d357620006d3620009f8565b604051601f8301601f19908116603f01168101908282118183101715620006fe57620006fe620009f8565b816040528381526020925086838588010111156200071a578485fd5b8491505b838210156200073d57858201830151818301840152908201906200071e565b838211156200074e57848385830101525b9695505050505050565b600080600080600080600060e0888a03121562000773578283fd5b87516001600160401b03808211156200078a578485fd5b620007988b838c01620006a5565b985060208a0151915080821115620007ae578485fd5b50620007bd8a828b01620006a5565b965050620007ce6040890162000688565b9450620007de6060890162000688565b93506080880151925060a0880151915060c0880151905092959891949750929550565b60006020828403121562000813578081fd5b815160ff8116811462000824578182fd5b9392505050565b60008219821115620008415762000841620009e2565b500190565b6000826200086257634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115620008a85781600019048211156200088c576200088c620009e2565b808516156200089a57918102915b93841c93908002906200086c565b509250929050565b60006200033160ff841683600082620008cc5750600162000334565b81620008db5750600062000334565b8160018114620008f45760028114620008ff576200091f565b600191505062000334565b60ff841115620009135762000913620009e2565b50506001821b62000334565b5060208310610133831016604e8410600b841016171562000944575081810a62000334565b62000950838362000867565b8060001904821115620009675762000967620009e2565b029392505050565b60008160001904831182151516156200098c576200098c620009e2565b500290565b600082821015620009a657620009a6620009e2565b500390565b600181811c90821680620009c057607f821691505b60208210811415620004be57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61252d8062000a1e6000396000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80635e615a6b116101d3578063a9059cbb11610104578063e3fa569f116100a2578063f2fde38b1161007c578063f2fde38b14610728578063f4eec7c91461073b578063f6bb8ba01461074e578063fb4862e81461075657600080fd5b8063e3fa569f146106fa578063e4849b3214610702578063eebfe1cb1461071557600080fd5b8063d69d239e116100de578063d69d239e146106b9578063d6eb5910146106cc578063d96a094a146106d4578063dd62ed3e146106e757600080fd5b8063a9059cbb14610680578063c024cd2614610693578063c20fa6a5146106a657600080fd5b8063893d20e81161017157806396b4ebe31161014b57806396b4ebe31461063f5780639a850274146106525780639cba2fee1461065a578063a457c2d71461066d57600080fd5b8063893d20e8146106135780638e2091df1461062457806395d89b411461063757600080fd5b80636c438fe3116101ad5780636c438fe3146105bc57806370a08231146105c457806371297784146105ed578063874bc6a11461060057600080fd5b80635e615a6b1461058e578063681504cd1461059657806369fcd4ac146105a957600080fd5b806327457e90116102ad57806342986e131161024b5780634737c418116102255780634737c418146105305780634a65a575146105435780634d71b5a5146105565780635c1548fb1461056957600080fd5b806342986e1314610501578063431a8b471461051457806344ba791e1461052757600080fd5b8063313ce56711610287578063313ce567146104b9578063322d2100146104c857806339509351146104db57806340154740146104ee57600080fd5b806327457e90146104805780632b83cccd146104935780632e740446146104a657600080fd5b806309635da41161031a57806318160ddd116102f457806318160ddd146104555780631de0f0951461045d57806322c180b51461046557806323b872dd1461046d57600080fd5b806309635da4146104135780630fb665571461042f5780631642a2991461044257600080fd5b8063072b852811610356578063072b8528146103cd5780630902f1ac146103d55780630910fbe6146103dd578063095ea7b3146103f057600080fd5b806301ddc7ba1461037d57806302340c0e1461039257806306fdde03146103b8575b600080fd5b61039061038b3660046120d6565b610769565b005b6103a56103a03660046121d4565b6107a2565b6040519081526020015b60405180910390f35b6103c06107b3565b6040516103af919061229c565b6103a5610845565b6008546103a5565b6103906103eb36600461215d565b610862565b6104036103fe36600461215d565b6108cf565b60405190151581526020016103af565b6010546011545b604080519283526020830191909152016103af565b61039061043d366004612122565b6108e7565b6103906104503660046121d4565b61090e565b6002546103a5565b6007546103a5565b6006546103a5565b61040361047b366004612122565b61095c565b61039061048e3660046121d4565b610982565b6103906104a1366004612186565b61099e565b6103906104b43660046121d4565b6109e8565b604051601281526020016103af565b6103a56104d63660046121d4565b6109ff565b6104036104e936600461215d565b610a0a565b6103a56104fc366004612233565b610a2c565b61039061050f36600461215d565b610a91565b6103a5610522366004612204565b610ab6565b6103a5600b5481565b61039061053e3660046121d4565b610ac2565b6103906105513660046121d4565b610aeb565b6103a5610564366004612186565b610b07565b600d546001600160a01b03165b6040516001600160a01b0390911681526020016103af565b61041a610c07565b6103906105a436600461215d565b610c1f565b6103a56105b73660046121d4565b610c58565b6103a5610c63565b6103a56105d23660046120d6565b6001600160a01b031660009081526020819052604090205490565b6103a56105fb3660046120d6565b610c6e565b6103a561060e3660046121d4565b610cb3565b6005546001600160a01b0316610576565b61039061063236600461215d565b610cbe565b6103c0610cf7565b6103a561064d3660046121d4565b610d06565b6103a5610d28565b6103a5610668366004612233565b610d33565b61040361067b36600461215d565b610d3f565b61040361068e36600461215d565b610dc5565b6103906106a136600461215d565b610dd3565b6103906106b436600461215d565b610df4565b6103a56106c73660046121d4565b610e91565b6103a5610e9c565b6103906106e23660046121d4565b610f18565b6103a56106f53660046120f0565b610f5f565b6009546103a5565b6103906107103660046121d4565b610f8a565b6103906107233660046121d4565b610fd3565b6104036107363660046120d6565b610ffc565b6103906107493660046121d4565b61104e565b600c546103a5565b6103a5610764366004612186565b61106a565b6005546001600160a01b0316331461078057600080fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006107ad82611347565b92915050565b6060600380546107c29061249b565b80601f01602080910402602001604051908101604052809291908181526020018280546107ee9061249b565b801561083b5780601f106108105761010080835404028352916020019161083b565b820191906000526020600020905b81548152906001019060200180831161081e57829003601f168201915b5050505050905090565b6000600e5461085360025490565b61085d9190612458565b905090565b6005546001600160a01b0316331461087957600080fd5b6001600160a01b03821660009081526020819052604090205461089c83826113de565b600d546108b3906001600160a01b03168484611538565b81600860008282546108c59190612458565b9091555050505050565b6000336108dd81858561159b565b5060019392505050565b6005546001600160a01b031633146108fe57600080fd5b6109098383836116bf565b505050565b6005546001600160a01b0316331461092557600080fd5b600554600d54610942916001600160a01b03918216911683611538565b80600860008282546109549190612458565b909155505050565b60003361096a85828561189a565b6109758585856116bf565b60019150505b9392505050565b6005546001600160a01b0316331461099957600080fd5b600755565b6005546001600160a01b031633146109b557600080fd5b6109bf83836113de565b600d546109d6906001600160a01b03168483611538565b80600860008282546108c59190612458565b6005546001600160a01b0316331461094257600080fd5b60006107ad8261190e565b6000336108dd818585610a1d8383610f5f565b610a279190612313565b61159b565b600080610a38846109ff565b90506000610a4582610d06565b90506000610a6182600a54610a5a9190612458565b8390611259565b90506000610a6f8487611244565b905082610a7c8284611259565b610a869190612313565b979650505050505050565b6005546001600160a01b03163314610aa857600080fd5b610ab282826113de565b5050565b600061097b8383611a17565b6005546001600160a01b03163314610ad957600080fd5b80600c60008282546109549190612313565b6005546001600160a01b03163314610b0257600080fd5b600955565b6005546000906001600160a01b0316331480610b2d5750600f546001600160a01b031633145b610b3657600080fd5b610b3f83610c58565b905060075481600854610b529190612458565b1015610b9e5760405162461bcd60e51b81526020600482015260166024820152756578636565647320747261646520626f756e6461727960501b60448201526064015b60405180910390fd5b81811015610bdd5760405162461bcd60e51b815260206004820152600c60248201526b29b634b83830b3b29022b93960a11b6044820152606401610b95565b600880548290039055610bf084846113de565b600d5461097b906001600160a01b03168583611538565b600080610c176010546011549091565b915091509091565b6005546001600160a01b03163314610c3657600080fd5b80600e6000828254610c489190612313565b90915550610ab290508282611a61565b60006107ad82611b4c565b600061085d60125490565b6005546000906001600160a01b03163314610c8857600080fd5b6001600160a01b038216600090815260208190526040902054610cab83826113de565b90505b919050565b60006107ad82611bf3565b6005546001600160a01b03163314610cd557600080fd5b80600e6000828254610ce79190612458565b90915550610ab2905082826113de565b6060600480546107c29061249b565b600080610d12836107a2565b90506000610d208285611244565b949350505050565b600061085d60025490565b600061097b8383611c1f565b60003381610d4d8286610f5f565b905083811015610dad5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610b95565b610dba828686840361159b565b506001949350505050565b6000336108dd8185856116bf565b6005546001600160a01b03163314610dea57600080fd5b610ab28282611a61565b6005546001600160a01b03163314610e0b57600080fd5b600d5460405163095ea7b360e01b81526001600160a01b038481166004830152602482018490529091169063095ea7b390604401602060405180830381600087803b158015610e5957600080fd5b505af1158015610e6d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906121b8565b60006107ad82611d0d565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610ee057600080fd5b505afa158015610ef4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d91906121ec565b6000610f238261190e565b90508160086000828254610f379190612313565b90915550610f4790503382611a61565b600d54610ab2906001600160a01b0316333085611d51565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6000610f9582611b4c565b9050610fa133836113de565b600d54610fb8906001600160a01b03163383611538565b8060086000828254610fca9190612458565b90915550505050565b6005546001600160a01b03163314610fea57600080fd5b80600860008282546109549190612313565b6005546000906001600160a01b0316331461101657600080fd5b6001600160a01b03821661102957600080fd5b50600580546001600160a01b0383166001600160a01b03199091161790556001919050565b6005546001600160a01b0316331461106557600080fd5b600655565b6005546000906001600160a01b03163314806110905750600f546001600160a01b031633145b61109957600080fd5b600d546040516370a0823160e01b81526001600160a01b038681166004830152859216906370a082319060240160206040518083038186803b1580156110de57600080fd5b505afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111691906121ec565b10156111595760405162461bcd60e51b81526020600482015260126024820152716e6f7420656e6f7567682062616c616e636560701b6044820152606401610b95565b6006548360085461116a9190612313565b11156111b15760405162461bcd60e51b81526020600482015260166024820152756578636565647320747261646520626f756e6461727960501b6044820152606401610b95565b6111ba836109ff565b9050818110156111fb5760405162461bcd60e51b815260206004820152600c60248201526b29b634b83830b3b29032b93960a11b6044820152606401610b95565b6008805484019055600d5461121b906001600160a01b0316853086611d51565b61097b8482611a61565b600061123b612710670de0b6b3a764000061232b565b90911015919050565b600061097b83670de0b6b3a764000084611d89565b600061097b8383670de0b6b3a7640000611d89565b600181600160801b81106112875760409190911b9060801c5b6801000000000000000081106112a25760209190911b9060401c5b64010000000081106112b95760109190911b9060201c5b6201000081106112ce5760089190911b9060101c5b61010081106112e25760049190911b9060081c5b601081106112f55760029190911b9060041c5b60088110611304578160011b91505b5080820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c80820481811015611341578091505b50919050565b60008161135381611225565b61136f5760405162461bcd60e51b8152600401610b95906122d1565b6000611379610845565b905060006113928560115461125990919063ffffffff16565b6113cb866113a1856002612439565b6113ab9190612313565b6010546002906113bb908a611259565b6113c5919061232b565b90611259565b6113d59190612313565b95945050505050565b6001600160a01b03821661143e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610b95565b61144a82600083611da8565b6001600160a01b038216600090815260208190526040902054818110156114be5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610b95565b6001600160a01b03831660009081526020819052604081208383039055600280548492906114ed908490612458565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261090990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611e1e565b6001600160a01b0383166115fd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610b95565b6001600160a01b03821661165e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610b95565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166117235760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610b95565b6001600160a01b0382166117855760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610b95565b611790838383611da8565b6001600160a01b038316600090815260208190526040902054818110156118085760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610b95565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061183f908490612313565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161188b91815260200190565b60405180910390a35b50505050565b60006118a68484610f5f565b9050600019811461189457818110156119015760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610b95565b611894848484840361159b565b60008161191a81611225565b6119365760405162461bcd60e51b8152600401610b95906122d1565b6000611940610845565b90506000600a5460026011546119618560105461125990919063ffffffff16565b61196b9190612313565b611975919061238e565b61197f919061232b565b905060006119988660105461125990919063ffffffff16565b6119a3906002612439565b905060006119c8600a5483856119b99190612313565b6119c39190612439565b61126e565b905060006011546119e48660105461125990919063ffffffff16565b6119ee9190612313565b90506000611a0a6010548385611a049190612458565b90611244565b9998505050505050505050565b60008115611a4957600a546002611a2e8286612458565b611a38919061238e565b611a42919061232b565b90506107ad565b600a54611a5760028561238e565b61097b919061232b565b6001600160a01b038216611ab75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610b95565b611ac360008383611da8565b8060026000828254611ad59190612313565b90915550506001600160a01b03821660009081526020819052604081208054839290611b02908490612313565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600081611b5881611225565b611b745760405162461bcd60e51b8152600401610b95906122d1565b6000611b7e610845565b90506000611b978260105461125990919063ffffffff16565b905060006002611bb28760105461125990919063ffffffff16565b611bbc919061232b565b905060008183601154611bcf9190612313565b611bd99190612458565b90506000611be78883611259565b98975050505050505050565b600080611bfe610845565b9050601154611c1560105485846113c59190612313565b61097b9190612313565b600082611c2b81611225565b611c475760405162461bcd60e51b8152600401610b95906122d1565b60008390506000600a546002601354611c6b8560105461125990919063ffffffff16565b611c759190612313565b611c7f919061238e565b611c89919061232b565b90506000611ca28760105461125990919063ffffffff16565b611cad906002612439565b90506000611cc3600a5483856119b99190612313565b90506000601354611cdf8660105461125990919063ffffffff16565b611ce99190612313565b90506000611cff6010548385611a049190612458565b9a9950505050505050505050565b600081611d1981611225565b611d355760405162461bcd60e51b8152600401610b95906122d1565b601154611c1560105485611d47610845565b6113c59190612458565b6040516001600160a01b03808516602483015283166044820152606481018290526118949085906323b872dd60e01b90608401611564565b828202811515841585830485141716611da157600080fd5b0492915050565b6001600160a01b038316158015611dc157506000600654115b15611e07576109096040518060400160405280601b81526020017f6265666f726554543a2070726963655f75707065725f626f756e640000000000815250600654611ef0565b6001600160a01b0382161580156118945750505050565b6000611e73826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f359092919063ffffffff16565b8051909150156109095780806020019051810190611e9191906121b8565b6109095760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610b95565b610ab28282604051602401611f069291906122af565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b179052611f44565b6060610d208484600085611f65565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b606082471015611fc65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610b95565b6001600160a01b0385163b61201d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b95565b600080866001600160a01b031685876040516120399190612280565b60006040518083038185875af1925050503d8060008114612076576040519150601f19603f3d011682016040523d82523d6000602084013e61207b565b606091505b5091509150610a868282866060831561209557508161097b565b8251156120a55782518084602001fd5b8160405162461bcd60e51b8152600401610b95919061229c565b80356001600160a01b0381168114610cae57600080fd5b6000602082840312156120e7578081fd5b61097b826120bf565b60008060408385031215612102578081fd5b61210b836120bf565b9150612119602084016120bf565b90509250929050565b600080600060608486031215612136578081fd5b61213f846120bf565b925061214d602085016120bf565b9150604084013590509250925092565b6000806040838503121561216f578182fd5b612178836120bf565b946020939093013593505050565b60008060006060848603121561219a578283fd5b6121a3846120bf565b95602085013595506040909401359392505050565b6000602082840312156121c9578081fd5b815161097b816124e6565b6000602082840312156121e5578081fd5b5035919050565b6000602082840312156121fd578081fd5b5051919050565b60008060408385031215612216578182fd5b823591506020830135612228816124e6565b809150509250929050565b60008060408385031215612245578182fd5b50508035926020909101359150565b6000815180845261226c81602086016020860161246f565b601f01601f19169290920160200192915050565b6000825161229281846020870161246f565b9190910192915050565b60208152600061097b6020830184612254565b6040815260006122c26040830185612254565b90508260208301529392505050565b60208082526022908201527f4e6f7420696e20776164206f722062656c6f77206d696e696d756d20616d6f756040820152611b9d60f21b606082015260800190565b60008219821115612326576123266124d0565b500190565b60008261234657634e487b7160e01b81526012600452602481fd5b500490565b600181815b8085111561238657816000190482111561236c5761236c6124d0565b8085161561237957918102915b93841c9390800290612350565b509250929050565b600061097b60ff8416836000826123a7575060016107ad565b816123b4575060006107ad565b81600181146123ca57600281146123d4576123f0565b60019150506107ad565b60ff8411156123e5576123e56124d0565b50506001821b6107ad565b5060208310610133831016604e8410600b8410161715612413575081810a6107ad565b61241d838361234b565b8060001904821115612431576124316124d0565b029392505050565b6000816000190483118215151615612453576124536124d0565b500290565b60008282101561246a5761246a6124d0565b500390565b60005b8381101561248a578181015183820152602001612472565b838111156118945750506000910152565b600181811c908216806124af57607f821691505b6020821081141561134157634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80151581146124f457600080fd5b5056fea2646970667358221220a52a281cf2ae524c7012d587c6a7d2eec06208c95916220f325e0fb0684b446864736f6c634300080400334e6f7420696e20776164206f722062656c6f77206d696e696d756d20616d6f75a26469706673582212200004bac6e2199a22e40543e4d6fdee18e7b0e12c6582b231a5b6c6ba69829b2b64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkInstrument(uint256)": {
        "params": {
          "marketId": ": called for anyone."
        }
      },
      "createVault(address,bool,uint256,uint256,uint256,(uint32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_asset_limit": ": max number of shares for a single address",
          "_onlyVerified": ": only verified users can mint shares",
          "_r": ": minimum reputation score to mint shares",
          "_total_asset_limit": ": max number of shares for entire vault",
          "default_params": ": default params for markets created by vault",
          "underlying": ": underlying asset for vault"
        }
      },
      "forceCloseInstrument(uint256,bool)": {
        "details": "withdraws all balance from the instrument.  If assets in instrument is not in underlying, need all balances to be divested to underlying  Ideally this should be called by several validators, maybe implement a voting scheme and have a keeper call it.",
        "params": {
          "emergency": "ascribes cases where the instrument should be forcefully liquidated back to the vault"
        }
      },
      "initiateMarket(address,(bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256),uint256)": {
        "details": "Instrument should already be deployed ",
        "params": {
          "instrumentData": ": instrument arguments",
          "recipient": ": utilizer for the associated instrument",
          "vaultId": ": vault identifier"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveMarket(uint256)": {
        "notice": "called by the validator when market conditions are met need to move the collateral in the wCollateral to "
      },
      "beforeResolve(uint256)": {
        "notice": "Resolve function 1Prepare market/instrument for closing, called separately before resolveMarket exists to circumvent manipulations   "
      },
      "checkInstrument(uint256)": {
        "notice": "checks for maturity, resolve at maturity"
      },
      "createVault(address,bool,uint256,uint256,uint256,(uint32,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "creates vault"
      },
      "forceCloseInstrument(uint256,bool)": {
        "notice": "function that closes the instrument/market before maturity, maybe to realize gains/cut losses fast or debt is prematurely fully repaid, or underlying strategy is deemed dangerous, etc.  "
      },
      "initiateMarket(address,(bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256),uint256)": {
        "notice": "initiates market, called by frontend loan proposal or instrument form submit button."
      },
      "redeem_mint(uint256,address,uint256)": {
        "notice": "deprecatedcalled when market is resolved "
      },
      "redeem_transfer(uint256,address,uint256)": {
        "notice": "called only when redeeming, transfer funds from vault "
      },
      "resolveMarket(uint256)": {
        "notice": "Resolve function 2main function called at maturity OR premature resolve of instrument(from early default) When market finishes at maturity, need to  1. burn all vault tokens in bc  2. mint all incoming redeeming vault tokens  Validators can call this function as they are incentivized to redeem any funds left for the instrument , irrespective of whether it is in profit or inloss. "
      },
      "updateReputation(uint256,address,bool)": {
        "notice": "when market is resolved(maturity/early default), calculates score and update each assessment phase trader's reputation, called by individual traders when redeeming "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6499,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "approvalDatas",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ApprovalData)6488_storage)"
      },
      {
        "astId": 6516,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "verified",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6521,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "market_data",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(MarketData)6483_storage)"
      },
      {
        "astId": 6525,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "ad_to_id",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6530,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vaults",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_contract(Vault)18797)"
      },
      {
        "astId": 6534,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "id_parent",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6538,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vault_debt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6543,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vault_to_marketIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6545,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "creator_address",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6548,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "interep",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IInterep)1054"
      },
      {
        "astId": 6551,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "marketManager",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(MarketManager)11432"
      },
      {
        "astId": 6554,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "repNFT",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ReputationNFT)12247"
      },
      {
        "astId": 6557,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "linearBCFactory",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(LinearBondingCurveFactory)4133"
      },
      {
        "astId": 6560,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vaultFactory",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(VaultFactory)7932"
      },
      {
        "astId": 6590,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "nonce",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInterep)1054": {
        "encoding": "inplace",
        "label": "contract IInterep",
        "numberOfBytes": "20"
      },
      "t_contract(LinearBondingCurveFactory)4133": {
        "encoding": "inplace",
        "label": "contract LinearBondingCurveFactory",
        "numberOfBytes": "20"
      },
      "t_contract(MarketManager)11432": {
        "encoding": "inplace",
        "label": "contract MarketManager",
        "numberOfBytes": "20"
      },
      "t_contract(ReputationNFT)12247": {
        "encoding": "inplace",
        "label": "contract ReputationNFT",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)18797": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_contract(VaultFactory)7932": {
        "encoding": "inplace",
        "label": "contract VaultFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_contract(Vault)18797)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Vault)",
        "numberOfBytes": "32",
        "value": "t_contract(Vault)18797"
      },
      "t_mapping(t_uint256,t_struct(ApprovalData)6488_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.ApprovalData)",
        "numberOfBytes": "32",
        "value": "t_struct(ApprovalData)6488_storage"
      },
      "t_mapping(t_uint256,t_struct(MarketData)6483_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.MarketData)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketData)6483_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ApprovalData)6488_storage": {
        "encoding": "inplace",
        "label": "struct Controller.ApprovalData",
        "members": [
          {
            "astId": 6485,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "approved_principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6487,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "approved_yield",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketData)6483_storage": {
        "encoding": "inplace",
        "label": "struct Controller.MarketData",
        "members": [
          {
            "astId": 6480,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "instrument_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6482,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "recipient",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}