{
  "address": "0x2677e0b4f55ad47e369dd17d7ae1b9ebc00ade25",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interep_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "MarketInitiated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "update",
          "type": "uint256"
        }
      ],
      "name": "_decrementScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentile",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "utilizer",
          "type": "address"
        }
      ],
      "name": "_filterTraders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "_getValidators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "update",
          "type": "uint256"
        }
      ],
      "name": "_incrementScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ad_to_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "approvalCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "beforeResolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "percentile",
          "type": "uint256"
        }
      ],
      "name": "calculateMinScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_onlyVerified",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_r",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_asset_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_total_asset_limit",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "N",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sigma",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "alpha",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "omega",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delta",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "r",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "s",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "steak",
              "type": "uint256"
            }
          ],
          "internalType": "struct MarketManager.MarketParameters",
          "name": "default_params",
          "type": "tuple"
        }
      ],
      "name": "createVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "deniedValidator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateral_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "denyMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "emergency",
          "type": "bool"
        }
      ],
      "name": "forceCloseInstrument",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getApprovalData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "approved_principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "approved_yield",
              "type": "uint256"
            }
          ],
          "internalType": "struct Controller.ApprovalData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getFinalStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getInitialStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getMarketId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getMarketIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getNumApproved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getNumResolved",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTraders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getValidatorRequiredCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "getVaultAd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultfromId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "hasApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "id_parent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPool",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "trusted",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "faceValue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expectedYield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "Instrument_address",
              "type": "address"
            },
            {
              "internalType": "enum Vault.InstrumentType",
              "name": "instrument_type",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "saleAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "promisedReturn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "inceptionTime",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "inceptionPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "leverageFactor",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Vault.PoolData",
              "name": "poolData",
              "type": "tuple"
            }
          ],
          "internalType": "struct Vault.InstrumentData",
          "name": "instrumentData",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "initiateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentile",
          "type": "uint256"
        }
      ],
      "name": "isReputable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isValidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketIdToVaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "marketId_to_vaultId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "market_data",
      "outputs": [
        {
          "internalType": "address",
          "name": "instrument_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "utilizer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "pullLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "redeemValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "redeem_transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "resolveCondition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "resolveMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketManager",
          "type": "address"
        }
      ],
      "name": "setMarketManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolFactory",
          "type": "address"
        }
      ],
      "name": "setPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "score",
          "type": "uint256"
        }
      ],
      "name": "setTraderScore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultFactory",
          "type": "address"
        }
      ],
      "name": "setVaultFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testVerifyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "trader_scores",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "traders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "unlockValidatorStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "increment",
          "type": "bool"
        }
      ],
      "name": "updateReputation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "validatorApprove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "validatorResolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vault_debt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vault_to_marketIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        }
      ],
      "name": "viewValidators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1106510667b989e376434c6b9ac988c626916264cf011617a6d06743007b9c40",
  "receipt": {
    "to": null,
    "from": "0xfd84b7ac1e646580db8c77f1f05f47977fada692",
    "contractAddress": "0x2677e0b4f55ad47e369dd17d7ae1b9ebc00ade25",
    "transactionIndex": "0x6",
    "gasUsed": "0x4dc160",
    "logsBloom": "0x
    "blockHash": "0x985e675c025f152cb6e506b4342f7a2b661a5454a96c8c71e12723f40fa9397f",
    "transactionHash": "0xdaf9dc422e9c991bd332cb2db1b627d66382c1b373d770a868c2aeccbf42feab",
    "logs": [
      {
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b509d00946648000000000000000000000000000000000000000000000000009b6e64a8ec60000000000000000000000000000000000000000000000000962b3c90d113c6d986a0000000000000000000000000000000000000000000000000901dc7a857f9b80000000000000000000000000000000000000000000000962b47e16e145b3fcea",
        "blockNumber": "0x1c562ab",
        "transactionHash": "0xdaf9dc422e9c991bd332cb2db1b627d66382c1b373d770a868c2aeccbf42feab",
        "transactionIndex": "0x6",
        "blockHash": "0x985e675c025f152cb6e506b4342f7a2b661a5454a96c8c71e12723f40fa9397f",
        "logIndex": "0x12",
        "removed": false
      }
    ],
    "blockNumber": "0x1c562ab",
    "cumulativeGasUsed": "0x74b62a",
    "status": "0x1"
  },
  "args": [
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xb1dA5d9AC4B125F521DeF573532e9DBb6395B925"
  ],
  "numDeployments": 13,
  "solcInputHash": "1e758903b3e98c74b81d5b6f8a2e1649",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interep_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MarketInitiated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"}],\"name\":\"_decrementScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentile\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"}],\"name\":\"_filterTraders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"_getValidators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"update\",\"type\":\"uint256\"}],\"name\":\"_incrementScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ad_to_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"approvalCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"beforeResolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percentile\",\"type\":\"uint256\"}],\"name\":\"calculateMinScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_onlyVerified\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_asset_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total_asset_limit\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"N\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sigma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alpha\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"omega\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"steak\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketManager.MarketParameters\",\"name\":\"default_params\",\"type\":\"tuple\"}],\"name\":\"createVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"deniedValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"denyMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"emergency\",\"type\":\"bool\"}],\"name\":\"forceCloseInstrument\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getApprovalData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"approved_principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approved_yield\",\"type\":\"uint256\"}],\"internalType\":\"struct Controller.ApprovalData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getFinalStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getInitialStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getMarketIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getNumApproved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getNumResolved\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTraders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getValidatorRequiredCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"getVaultAd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultfromId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"hasApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"id_parent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPool\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"trusted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"faceValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedYield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"Instrument_address\",\"type\":\"address\"},{\"internalType\":\"enum Vault.InstrumentType\",\"name\":\"instrument_type\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"saleAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"promisedReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inceptionTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inceptionPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageFactor\",\"type\":\"uint256\"}],\"internalType\":\"struct Vault.PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"internalType\":\"struct Vault.InstrumentData\",\"name\":\"instrumentData\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"initiateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentile\",\"type\":\"uint256\"}],\"name\":\"isReputable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketIdToVaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"marketId_to_vaultId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"market_data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instrument_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"utilizer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"pullLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"redeemValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"redeem_transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"resolveCondition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"resolveMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketManager\",\"type\":\"address\"}],\"name\":\"setMarketManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"setPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"score\",\"type\":\"uint256\"}],\"name\":\"setTraderScore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactory\",\"type\":\"address\"}],\"name\":\"setVaultFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testVerifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trader_scores\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"traders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"unlockValidatorStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"increment\",\"type\":\"bool\"}],\"name\":\"updateReputation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"validatorApprove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"validatorResolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vault_debt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vault_to_marketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"}],\"name\":\"viewValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_decrementScore(address,uint256)\":{\"details\":\"score >= 0, update > 0\"},\"_filterTraders(uint256,address)\":{\"details\":\"percentile is is wad 0-100\"},\"_getValidators(uint256)\":{\"details\":\"for now called on market initialization\"},\"_incrementScore(address,uint256)\":{\"details\":\"score >= 0, update > 0\"},\"beforeResolve(uint256)\":{\"details\":\"Prepare market/instrument for closing, called separately before resolveMarket this is either called automatically from the instrument when conditions are met i.e fully repaid principal + interest or, in the event of a default, by validators who deem the principal recouperation is finished and need to collect remaining funds by redeeming ZCB\"},\"calculateMinScore(uint256)\":{\"details\":\"returns 0 on no minimum threshold\",\"params\":{\"percentile\":\": 0-100 WAD\"}},\"createVault(address,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"params\":{\"_asset_limit\":\": max number of shares for a single address\",\"_onlyVerified\":\": only verified users can mint shares\",\"_r\":\": minimum reputation score to mint shares\",\"_total_asset_limit\":\": max number of shares for entire vault\",\"default_params\":\": default params for markets created by vault\",\"underlying\":\": underlying asset for vault\"}},\"denyMarket(uint256)\":{\"details\":\"called by validator denial of market.\"},\"forceCloseInstrument(uint256,bool)\":{\"details\":\"withdraws all balance from the instrument.  If assets in instrument is not in underlying, need all balances to be divested to underlying  Ideally this should be called by several validators, maybe implement a voting scheme and have a keeper call it.\",\"params\":{\"emergency\":\"ascribes cases where the instrument should be forcefully liquidated back to the vault\"}},\"fulfillRandomWords(uint256,uint256[])\":{\"details\":\"TODO => can be called by anyone?\"},\"initiateMarket(address,(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256,(uint256,uint256,uint256,uint256,uint256,uint256)),uint256)\":{\"details\":\"Instrument should already be deployed \",\"params\":{\"instrumentData\":\": instrument arguments\",\"recipient\":\": utilizer for the associated instrument\",\"vaultId\":\": vault identifier\"}},\"isReputable(address,uint256)\":{\"params\":{\"percentile\":\": 0-100 w/ WAD.\"}},\"resolveMarket(uint256)\":{\"details\":\"validators call this function from market manager any funds left for the instrument, irrespective of whether it is in profit or inloss. \"},\"validatorApprove(uint256)\":{\"details\":\"get val_cap, the total amount of zcb for sale and each validators should buy  val_cap/num validators zcb  They also need to hold the corresponding vault, so they are incentivized to assess at a systemic level and avoid highly  correlated instruments triggers controller.approveMarket\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_decrementScore(address,uint256)\":{\"notice\":\"decrements trader's score\"},\"_filterTraders(uint256,address)\":{\"notice\":\"returns a list of top X percentile traders excluding the utilizer. \"},\"_getValidators(uint256)\":{\"notice\":\"randomly choose validators for market approval, async operation => fulfillRandomness is the callback function.\"},\"_incrementScore(address,uint256)\":{\"notice\":\"increments trader's score\"},\"approvalCondition(uint256)\":{\"notice\":\"conditions for approval => validator zcb stake fulfilled + validators have all approved\"},\"beforeResolve(uint256)\":{\"notice\":\"Resolve function 1\"},\"calculateMinScore(uint256)\":{\"notice\":\"finds the first trader within the percentile\"},\"createVault(address,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))\":{\"notice\":\"creates vault\"},\"deniedValidator(uint256,address)\":{\"notice\":\"called by marketManager.redeemDeniedMarket, redeems the discounted ZCB\"},\"forceCloseInstrument(uint256,bool)\":{\"notice\":\"function that closes the instrument/market before maturity, maybe to realize gains/cut losses fast or debt is prematurely fully repaid, or underlying strategy is deemed dangerous, etc.  After, the resolveMarket function should be called in a new block  \"},\"fulfillRandomWords(uint256,uint256[])\":{\"notice\":\"chainlink callback function, sets validators.\"},\"getTraders()\":{\"notice\":\"retrieves all rated traders\"},\"initiateMarket(address,(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256,(uint256,uint256,uint256,uint256,uint256,uint256)),uint256)\":{\"notice\":\"initiates market, called by frontend loan proposal or instrument form submit button.\"},\"isReputable(address,uint256)\":{\"notice\":\"calculates whether a trader meets the requirements to trade during the reputation assessment phase.\"},\"isValidator(uint256,address)\":{\"notice\":\"returns true if user is validator for corresponding market\"},\"redeem_transfer(uint256,address,uint256)\":{\"notice\":\"called only when redeeming, transfer funds from vault \"},\"resolveCondition(uint256)\":{\"notice\":\"condition for resolving market, met when all the validators chosen for the market have voted to resolve.\"},\"resolveMarket(uint256)\":{\"notice\":\"Resolve function 2main function called at maturity OR premature resolve of instrument(from early default)  \"},\"unlockValidatorStake(uint256)\":{\"notice\":\"called by validators when the market is resolved or denied to retrieve their stake.\"},\"updateReputation(uint256,address,bool)\":{\"notice\":\"when market is resolved(maturity/early default), calculates score and update each assessment phase trader's reputation, called by individual traders when redeeming \"},\"validatorApprove(uint256)\":{\"notice\":\"allows validators to buy at a discount + automatically stake a percentage of the principal They can only buy a fixed amount of ZCB, usually a at lot larger amount \"},\"validatorResolve(uint256)\":{\"notice\":\"called by validators to approve resolving the market, after approval.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/bonds/GBC.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n// import {ERC20} from \\\"./aave/Libraries.sol\\\"; \\nimport {SafeCast, FixedPointMath, ERC20} from \\\"./libraries.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @notice AMM for a token pair (trade, base), only tracks price denominated in trade/base  \\n/// and point-bound(limit order) and range-bound(multiple points, also known as concentrated) liquidity \\n/// @dev all funds will be handled in the child contract \\ncontract GranularBondingCurve{\\n    using FixedPointMath for uint256;\\n    using Tick for mapping(uint16 => Tick.Info);\\n    using Position for mapping(bytes32 => Position.Info);\\n    using Position for Position.Info;\\n    using SafeCast for uint256; \\n\\n    modifier onlyOwner(){\\n        require(owner == msg.sender , \\\"Not owner\\\"); \\n        _;\\n    }\\n\\n    modifier onlyEntry(){\\n        require(entry == msg.sender  || msg.sender == address(this),\\\"Not Entry\\\"); \\n        _;\\n    }\\n    \\n    bool private _mutex;\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    constructor(\\n        address _baseToken,\\n        address _tradeToken\\n        //uint256 _priceDelta\\n        ) {\\n        tradeToken = _tradeToken; \\n        baseToken = _baseToken; \\n        //priceDelta = _priceDelta; \\n        fee =0; \\n        factory = address(0); \\n        tickSpacing = 0; \\n        //Start liquidity \\n        liquidity = 100 * uint128(PRECISION); \\n\\n        owner = msg.sender; \\n    }\\n\\n    address public immutable owner; \\n    uint24 public immutable  fee;\\n    Slot0 public slot0; // global state?\\n    address public immutable  factory;\\n    address public immutable  tradeToken;\\n    address public immutable  baseToken;\\n    int24 public immutable  tickSpacing; // only ticks/price points divisible by tickSpacing can be initialized.\\n\\n    uint128 public liquidity;\\n\\n    mapping(uint16 => Tick.Info) public  ticks;\\n\\n    mapping(bytes32 => Position.Info) public  positions;\\n\\n    // mapping(uint16=> PricePoint) Points; \\n\\n    uint256 public  constant priceDelta = 1e16; //difference in price for two adjacent ticks => 0.01 base token.\\n    uint256 public constant ROUNDLIMIT = 1e4; \\n    uint256 public constant PRECISION = 1e18; \\n    address public entry; \\n\\n    /// @notice previliged function called by the market maker \\n    /// if he is the one providing all the liquidity \\n    function setLiquidity(uint128 liq) external \\n    //onlyEntry\\n    {\\n        liquidity = liq; \\n    }\\n\\n    function setEntry(address _entry) external onlyOwner{\\n        entry = _entry; \\n    }\\n    function lock() external onlyOwner{\\n        slot0.unlocked = !slot0.unlocked; \\n    }\\n\\n    function positionIsFilled(\\n        address recipient, \\n        uint16 point, \\n        bool isAsk\\n    ) \\n        public view returns(bool){\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n\\n        uint128 numCross = ticks.getNumCross(point, isAsk); \\n        uint128 crossId = isAsk? position.askCrossId : position.bidCrossId; \\n        uint128 liq = isAsk? position.askLiq : position.bidLiq;\\n\\n        return (liq>0 && numCross > crossId); \\n    }\\n\\n    function setPriceAndPoint(uint256 price) external \\n    //onlyOwner\\n    {\\n        slot0.point = priceToPoint(price);         \\n        slot0.curPrice = price.toUint160(); \\n    }\\n\\n    function getCurPrice() external view returns(uint256){\\n        return slot0.curPrice; \\n    }\\n\\n    function getOneTimeLiquidity(uint16 point, bool moveUp) external view returns(uint256){\\n        return uint256(ticks.oneTimeLiquidity(point)); \\n    }    \\n\\n    function getNumCross(uint16 point, bool moveUp) external view returns(uint256){\\n        return ticks.getNumCross(point, moveUp); \\n    }\\n\\n    function bidsLeft(uint16 point) public view returns(uint256){\\n    }\\n\\n    struct Slot0 {\\n        // the current price\\n        uint160 curPrice;\\n        // the current tick\\n        uint16 point;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n        // whether the pool is locked\\n        bool unlocked;\\n\\n        // Whether liquidity provision is amortized \\n        bool amortized; \\n\\n        // Where to modify liquidity \\n        uint16 modifyLiqPoint; \\n    }\\n\\n    // the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        // the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        // the amount already swapped out/in of the output/input asset\\n        uint256 amountCalculated;\\n        // current sqrt(price)\\n        uint256 curPrice;\\n        // the tick associated with the current price\\n        uint16 point;\\n        // the global fee growth of the input token\\n        uint256 feeGrowthGlobal;\\n        // amount of input token paid as protocol fee\\n        uint128 protocolFee;\\n        // the current liquidity in range\\n        uint128 liquidity;\\n        uint128 liquidityStart; \\n\\n\\n    }\\n\\n    struct StepComputations {\\n        // the price at the beginning of the step\\n        uint256 priceStart;\\n        // the next tick to swap to from the current tick in the swap direction\\n        uint16 pointNext;\\n        // whether tickNext is initialized or not\\n        bool initialized;\\n        // price for the next tick (1/0)\\n        uint256 priceNextLimit;\\n        // how much is being swapped in in this step\\n        uint256 amountIn;\\n        // how much is being swapped out\\n        uint256 amountOut;\\n        // how much fee is being paid in\\n        uint256 feeAmount;\\n\\n        uint128 liqDir; \\n    }\\n\\n    struct swapVars{\\n        uint256 a;\\n        uint256 s; \\n        uint256 b; \\n    }\\n\\n    /// param +amountSpecified is in base if moveUp, else is in trade (+ if input asset, - if output asset)\\n    /// -amountSpecified is in trade if moveUp, else is in base \\n    /// returns amountIn if moveUp, cash, else token\\n    /// returns amountOut if moveUp, token, else cash \\n    function trade(\\n        address recipient, \\n        bool moveUp, \\n        int256 amountSpecified, \\n        uint256 priceLimit, \\n        bytes calldata data\\n        ) public onlyEntry _lock_ returns(uint256 amountIn, uint256 amountOut){\\n        console.logString('---New Trade---'); \\n\\n        Slot0 memory slot0Start = slot0; \\n        uint256 pDelta = priceDelta; \\n\\n        SwapState memory state = SwapState({\\n            amountSpecifiedRemaining: amountSpecified, \\n            amountCalculated: 0, \\n            curPrice: uint256(slot0Start.curPrice),\\n            feeGrowthGlobal: moveUp? feeGrowthGlobalBase: feeGrowthGlobalTrade,//moveup is base in for trade out\\n            protocolFee: 0, \\n            liquidity: liquidity, \\n            liquidityStart: liquidity,\\n            point: slot0.point\\n            }); \\n        swapVars memory vars = swapVars({\\n            a:0,\\n            b:0,\\n            s:0\\n            });\\n\\n        bool exactInput = amountSpecified > 0;\\n\\n        // increment price by 1/1e18 if at boundary, and go back up a point,\\n        // should be negligible compared to fees TODO \\n        if (mod0(state.curPrice, pDelta) && !moveUp) {\\n            state.curPrice += 1; \\n            state.point = priceToPoint(state.curPrice);\\n            slot0.point = state.point; \\n            slot0Start.point = state.point; \\n        }\\n\\n        while (state.amountSpecifiedRemaining !=0 && state.curPrice != priceLimit){\\n            StepComputations memory step; \\n\\n            step.priceStart = state.curPrice; \\n            step.priceNextLimit = getNextPriceLimit(state.point, pDelta, moveUp); \\n            step.pointNext = moveUp? state.point + 1 : state.point-1; \\n\\n            // Need liquidity for both move up and move down for path independence within a \\n            // given point range. Either one of them should be 0 \\n            step.liqDir = ticks.oneTimeLiquidity(state.point);\\n            vars.a = exactInput \\n                ? inv(state.liquidity + step.liqDir)\\n                : invRoundUp(state.liquidity + step.liqDir); \\n            vars.b = yInt(state.curPrice, moveUp); \\n            vars.s = xMax(state.curPrice, vars.b, vars.a); \\n\\n            //If moveup, amountIn is in cash, amountOut is token and vice versa \\n            (state.curPrice, step.amountIn, step.amountOut, step.feeAmount) = swapStep(\\n                state.curPrice, \\n                step.priceNextLimit,    \\n                state.amountSpecifiedRemaining, \\n                fee, \\n                vars               \\n                ); \\n\\n            {console.log('________'); \\n            console.log('CURPRICE', state.curPrice); \\n            console.log('trading; liquidity, amountleft', state.liquidity); \\n            console.log(uint256(-state.amountSpecifiedRemaining));\\n            console.log('nextpricelimit/pointnext', step.priceNextLimit, step.pointNext);           \\n            console.log('a', vars.a); }\\n            console.log('amountinandout', step.amountIn, step.amountOut); \\n            console.log('s,b', vars.s, vars.b); \\n\\n            if (exactInput){\\n                state.amountSpecifiedRemaining -= int256(step.amountIn); \\n            }\\n            else{\\n                state.amountSpecifiedRemaining += int256(step.amountIn); \\n            }\\n            state.amountCalculated += step.amountOut; \\n\\n            if (state.liquidity>0)\\n                state.feeGrowthGlobal += step.feeAmount.divWadDown(uint256(state.liquidity)); \\n\\n            // If next limit reached, cross price range and change slope(liquidity)\\n            if (state.curPrice == step.priceNextLimit){\\n\\n                // If crossing UP, asks are all filled so need to set askLiquidity to 0 and increment numCross\\n                // Else if crossing DOWN, bids are all filled \\n                if (step.liqDir!=0) ticks.deleteOneTimeLiquidity(state.point, moveUp); \\n\\n                int128 liquidityNet = ticks.cross(\\n                    step.pointNext, \\n                    feeGrowthGlobalBase,\\n                    feeGrowthGlobalTrade\\n                    ); \\n\\n                if (!slot0Start.amortized && step.pointNext == slot0Start.modifyLiqPoint)\\n                    liquidityNet = liquidityNet += dynamicLiq[step.pointNext]; \\n\\n                if (!moveUp) liquidityNet = -liquidityNet; \\n\\n\\n                state.liquidity = addDelta(state.liquidity,liquidityNet);\\n\\n                state.point = step.pointNext;  \\n            }\\n        }\\n\\n        slot0.curPrice = state.curPrice.toUint160(); \\n        if(state.point != slot0Start.point) slot0.point = state.point; \\n            \\n        if (state.liquidityStart != state.liquidity) liquidity = state.liquidity;\\n\\n        if (moveUp) feeGrowthGlobalBase = state.feeGrowthGlobal; \\n            \\n        // (amountIn, amountOut) = exactInput\\n        //                         ? moveUp ? (uint256(amountSpecified-state.amountSpecifiedRemaining ) + ROUNDLIMIT, state.amountCalculated)//TODO roundfixes\\n        //                                  : (uint256(amountSpecified-state.amountSpecifiedRemaining ), state.amountCalculated)\\n        //                         : (state.amountCalculated + ROUNDLIMIT, uint256(-amountSpecified+state.amountSpecifiedRemaining )); \\n\\n        (amountIn, amountOut) = exactInput\\n                                ? moveUp ? (uint256(amountSpecified-state.amountSpecifiedRemaining ) , state.amountCalculated)//TODO roundfixes\\n                                         : (uint256(amountSpecified-state.amountSpecifiedRemaining ), state.amountCalculated)\\n                                : (state.amountCalculated + ROUNDLIMIT, uint256(-amountSpecified+state.amountSpecifiedRemaining )); \\n    }\\n\\n    function placeLimitOrder(\\n        address recipient, \\n        uint16 point, \\n        uint128 amount,\\n        bool isAsk  \\n        ) public onlyEntry _lock_ returns(uint256 amountToEscrow, uint128 numCross ){   \\n\\n        // Should only accept asks for price above the current point range\\n        if(isAsk && pointToPrice(point) <= slot0.curPrice) revert(\\\"ask below prie\\\"); \\n        else if(!isAsk && pointToPrice(point) >= slot0.curPrice) revert(\\\"bids above prie\\\"); \\n\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n\\n        numCross = ticks.getNumCross(point, isAsk); \\n        position.updateLimit(int128(amount), isAsk, numCross); \\n\\n        ticks.updateOneTimeLiquidity( point, int128(amount), isAsk); \\n\\n        // If placing bids, need to escrow baseAsset, vice versa \\n        address tokenToEscrow = isAsk? tradeToken : baseToken;\\n\\n        amountToEscrow = isAsk\\n                ? tradeGivenLiquidity(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point), \\n                    uint256(amount) \\n                    )\\n            \\n                : baseGivenLiquidity(\\n                    pointToPrice(point+1), \\n                    pointToPrice(point), \\n                    uint256(amount) \\n                    ); \\n\\n        console.log('amountbid', amountToEscrow); \\n\\n    }\\n\\n    function reduceLimitOrder(\\n        address recipient, \\n        uint16 point, \\n        uint128 amount,\\n        bool isAsk \\n        ) public onlyEntry _lock_  returns(uint256 amountToReturn) {\\n        require(priceToPoint(uint256(slot0.curPrice)) != point, \\\"Can't reduce order for current tick\\\"); \\n\\n        Position.Info storage position = positions.get(msg.sender, point, point+1);\\n\\n        position.updateLimit(-int128(amount), isAsk, 0); \\n\\n        ticks.updateOneTimeLiquidity(point, -int128(amount), isAsk); \\n\\n        address tokenToReturn = isAsk? tradeToken : baseToken;\\n        \\n        amountToReturn = isAsk\\n            ? tradeGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(amount) \\n                )\\n         \\n            : baseGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(amount) \\n                );\\n    }\\n\\n    /// @notice called when maker wants to claim when the the price is at the \\n    /// point he submitted the order\\n    function claimPartiallyFilledOrder(\\n        address recipient, \\n        uint16 point,\\n        bool isAsk\\n        ) public onlyEntry _lock_ returns(uint256 baseAmount, uint256 tradeAmount){\\n        Slot0 memory _slot0 = slot0; \\n\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n        require(priceToPoint(uint256(slot0.curPrice)) == point, \\\"Not current price\\\"); \\n\\n        // Assume trying to withdraw all liquidity provided \\n        uint128 liqToWithdraw = isAsk ? position.askLiq : position.bidLiq; \\n       \\n        position.updateLimit(-int128(liqToWithdraw), isAsk, 0); \\n\\n        ticks.updateOneTimeLiquidity(point, -int128(liqToWithdraw), isAsk); \\n\\n        // Get total trade filled OR remaining\\n        tradeAmount = tradeGivenLiquidity(\\n            pointToPrice(point+1),\\n            _slot0.curPrice, \\n            liqToWithdraw\\n        ); \\n           \\n        // Get total base filled OR remaining \\n        baseAmount = baseGivenLiquidity(\\n            _slot0.curPrice, \\n            pointToPrice(point), \\n            liqToWithdraw\\n            ); \\n\\n    }\\n\\n    /// @notice Need to check if the ask/bids were actually filled, which is equivalent to\\n    /// the condition that numCross > crossId, because numCross only increases when crossUp \\n    /// or crossDown \\n    function claimFilledOrder(\\n        address recipient, \\n        uint16 point, \\n        bool isAsk \\n        ) public onlyEntry _lock_  returns(uint256 claimedAmount){\\n        Position.Info storage position = positions.get(recipient, point, point+1);\\n\\n        uint128 numCross = ticks.getNumCross(point, isAsk); \\n        uint128 crossId = isAsk? position.askCrossId : position.bidCrossId; \\n        require(numCross > crossId, \\\"Position not filled\\\");\\n\\n        uint128 liq = isAsk? position.askLiq : position.bidLiq;\\n\\n        // Sold to base when asks are filled\\n        if(isAsk) claimedAmount = baseGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(liq) \\n                ); \\n\\n        // Bought when bids are filled so want tradeTokens\\n        else claimedAmount = tradeGivenLiquidity(\\n                pointToPrice(point+1), \\n                pointToPrice(point), \\n                uint256(liq) \\n                ); \\n\\n        position.updateLimit(-int128(liq), isAsk, 0); \\n        \\n        // Need to burn AND \\n\\n    }\\n\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        uint16 pointLower;\\n        uint16 pointUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n\\n    /// @notice provides liquidity in range or adds limit order if pointUpper = pointLower + 1\\n    function provide(\\n        address recipient, \\n        uint16 pointLower, \\n        uint16 pointUpper, \\n        uint128 amount, \\n        bytes calldata data \\n        ) public onlyEntry _lock_ returns(uint256 amount0, uint256 amount1 ){\\n        require(amount > 0, \\\"0 amount\\\"); \\n\\n        (,  amount0,  amount1) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: recipient, \\n                pointLower : pointLower, \\n                pointUpper: pointUpper, \\n                liquidityDelta: int128(amount)//.toInt128()\\n                })\\n            ); \\n\\n        //mintCallback\\n\\n    }\\n\\n    function remove(\\n        address recipient, \\n        uint16 pointLower, \\n        uint16 pointUpper, \\n        uint128 amount\\n        ) public onlyEntry _lock_ returns(uint256 , uint256 ){\\n\\n        (Position.Info storage position,  uint256 amount0, uint256 amount1) = _modifyPosition(\\n            ModifyPositionParams({\\n                owner: recipient, \\n                pointLower : pointLower, \\n                pointUpper: pointUpper, \\n                liquidityDelta: -int128(amount)//.toInt128()\\n                })\\n            ); \\n\\n        if(amount0>0 || amount1> 0){\\n            (position.tokensOwed0, position.tokensOwed1) = (\\n                position.tokensOwed0 + amount0,\\n                position.tokensOwed1 + amount1\\n            );\\n        }\\n        return (amount0, amount1); \\n    }\\n\\n    function collect(\\n        address recipient,\\n        uint16 tickLower,\\n        uint16 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) public onlyEntry _lock_  returns (uint256 amount0, uint256 amount1) {\\n        // we don't need to checkTicks here, because invalid positions will never have non-zero tokensOwed{0,1}\\n        Position.Info storage position = positions.get(msg.sender, tickLower, tickUpper);\\n\\n        amount0 = amount0Requested > position.tokensOwed0 ? position.tokensOwed0 : amount0Requested;\\n        amount1 = amount1Requested > position.tokensOwed1 ? position.tokensOwed1 : amount1Requested;\\n\\n        if (amount0 > 0) {\\n            position.tokensOwed0 -= amount0;\\n        }\\n        if (amount1 > 0) {\\n            position.tokensOwed1 -= amount1;\\n        }\\n    }\\n\\n\\n    function _modifyPosition(ModifyPositionParams memory params)\\n    private \\n    returns(\\n        Position.Info storage position, \\n        uint256 baseAmount, \\n        uint256 tradeAmount\\n        )\\n    {\\n        Slot0 memory _slot0 = slot0; // SLOAD for gas optimization\\n\\n        position = _updatePosition(\\n            params.owner,\\n            params.pointLower,\\n            params.pointUpper,\\n            params.liquidityDelta,\\n            _slot0.point\\n        );\\n\\n        if (params.liquidityDelta != 0){\\n            if (_slot0.point < params.pointLower){\\n                // in case where liquidity is just asks waiting to be sold into, \\n                // so need to only provide tradeAsset \\n                tradeAmount = tradeGivenLiquidity(\\n                    pointToPrice(params.pointUpper), \\n                    pointToPrice(params.pointLower), \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                    ); \\n            } else if( _slot0.point < params.pointUpper){\\n                uint128 liquidityBefore = liquidity; \\n\\n                // Get total asks to be submitted above current price\\n                tradeAmount = tradeGivenLiquidity(\\n                    pointToPrice(params.pointUpper),\\n                    _slot0.curPrice, \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                    ); \\n\\n                // Get total bids to be submitted below current price \\n                baseAmount = baseGivenLiquidity(\\n                    _slot0.curPrice, \\n                    pointToPrice(params.pointLower), \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                    ); \\n\\n                // Slope changes since current price is in this range \\n                liquidity = addDelta(liquidityBefore, params.liquidityDelta);\\n\\n            } else{\\n                // liquidity is just bids waiting to be bought into \\n                baseAmount = baseGivenLiquidity(\\n                    pointToPrice(params.pointUpper), \\n                    pointToPrice(params.pointLower), \\n                    params.liquidityDelta >= 0\\n                        ? uint256(int256(params.liquidityDelta))\\n                        : uint256(int256(-params.liquidityDelta))\\n                ); \\n            }\\n        }\\n    }\\n\\n    uint256 public feeGrowthGlobalBase;\\n    uint256 public feeGrowthGlobalTrade;\\n\\n    function _updatePosition(\\n        address owner, \\n        uint16 pointLower, \\n        uint16 pointUpper, \\n        int128 liquidityDelta, \\n        uint16 point \\n        ) private returns(Position.Info storage position){\\n\\n        position = positions.get(owner, pointLower, pointUpper); \\n\\n        uint256 _feeGrowthGlobalBase = feeGrowthGlobalBase; \\n        uint256 _feeGrowthGlobalTrade = feeGrowthGlobalTrade; \\n\\n        if(liquidityDelta != 0){\\n\\n            ticks.update(\\n                pointLower, \\n                point, \\n                liquidityDelta, \\n                feeGrowthGlobalBase,\\n                feeGrowthGlobalTrade,\\n                false\\n                ); \\n\\n            ticks.update(\\n                pointUpper, \\n                point, \\n                liquidityDelta, \\n                feeGrowthGlobalBase,\\n                feeGrowthGlobalTrade,\\n                true\\n                ); \\n        } \\n        (uint256 feeGrowthInsideBase, uint256 feeGrowthInsideTrade) =\\n            ticks.getFeeGrowthInside(pointLower, pointUpper, point, _feeGrowthGlobalBase, _feeGrowthGlobalTrade);\\n        position.update(liquidityDelta, feeGrowthInsideBase,feeGrowthInsideTrade); \\n    }\\n\\n\\n    /// @notice Compute results of swap given amount in and params\\n    /// @param feePips The fee taken from the input amount, expressed in hundredths of a bip\\n    /// b is 0 and s is curPrice/a during variable liquidity phase\\n    function swapStep(\\n        uint256 curPrice, \\n        uint256 targetPrice, \\n        int256 amountRemaining, \\n        uint24 feePips,    \\n        swapVars memory vars       \\n        ) \\n        internal \\n        pure \\n        returns(uint256 nextPrice, uint256 amountIn, uint256 amountOut, uint256 feeAmount ){\\n\\n        bool moveUp = targetPrice >= curPrice; \\n        bool exactInput = amountRemaining >= 0; \\n\\n        // If move up and exactInput, amountIn is base, amountOut is trade \\n        if (exactInput){\\n            // uint256 amountRemainingLessFee = uint256(amountRemaining).mulDivDown(1e6-feePips, 1e6);\\n\\n            if (moveUp){\\n                (amountOut, nextPrice) = LinearCurve.amountOutGivenIn(uint256(amountRemaining),vars.s,vars.a,vars.b, true); \\n\\n                // If overshoot go to next point\\n                if (nextPrice >= targetPrice){\\n                    nextPrice = targetPrice; \\n\\n                    // max amount out for a given price range is Pdelta / a \\n                    amountOut = (targetPrice - curPrice).divWadDown(vars.a); \\n                    amountIn = LinearCurve.areaUnderCurve(amountOut, vars.s,vars.a,vars.b).mulDivDown(1e6+feePips, 1e6); \\n                }            \\n                else {\\n                    amountIn = uint256(amountRemaining).mulDivDown(1e6+feePips, 1e6); \\n                }   \\n            }\\n\\n            // amountIn is trade, amountOut is base \\n            else {\\n                // If amount is greater than s, then need to cap it \\n                (amountOut, nextPrice) = LinearCurve.amountOutGivenIn(min(uint256(amountRemaining),vars.s), vars.s,vars.a,vars.b,false); \\n                // If undershoot go to previous point \\n                if(nextPrice <= targetPrice){\\n                    nextPrice = targetPrice; \\n\\n                    // max amount out is area under curve \\n                    amountIn = (curPrice - targetPrice).divWadDown(vars.a);\\n                    amountOut = LinearCurve.areaUnderCurve(amountIn, 0,vars.a,vars.b); \\n                    amountIn = amountIn.mulDivDown(1e6+feePips, 1e6); \\n\\n                }\\n                else{\\n                    amountIn = uint256(amountRemaining).mulDivDown(1e6+feePips, 1e6); \\n                }\\n            }\\n            feeAmount = amountIn.mulDivDown(uint256(feePips).mulDivDown(1e6,1e6+feePips), 1e6); \\n        }\\n\\n        else {\\n            if(moveUp){\\n                uint256 remaining = uint256(-amountRemaining); \\n                nextPrice = vars.a.mulWadUp(remaining) + curPrice; \\n\\n                // if overshoot\\n                if(nextPrice>=targetPrice){\\n                    amountIn = xMax(targetPrice, curPrice,  vars.a); \\n                    nextPrice = targetPrice; \\n\\n                    // Prevent stuck cases where point is almost filled but not quite \\n                    if(remaining - amountIn<=ROUNDLIMIT){\\n                        amountIn = remaining; \\n                    } \\n                }\\n                else amountIn = remaining; \\n\\n                amountOut = LinearCurve.areaUnderCurveRoundUp(amountIn, 0, vars.a, curPrice); //you want this to be more, so round up\\n\\n            }\\n            else{\\n                //TODO \\n            }\\n            feeAmount = amountOut.mulDivDown(feePips, 1e6);\\n            amountOut = amountOut + feeAmount;\\n        }\\n    }\\n\\n    mapping(uint16=> int128) dynamicLiq; \\n    function setDynamicLiquidity(uint16 point, int128 liq) external {\\n        dynamicLiq[point] = liq; \\n    }\\n    function setModifyLiqPoint(uint16 point) external{\\n        slot0.modifyLiqPoint = point;  \\n    }\\n    function amortizeLiq() external _lock_{\\n        slot0.amortized = true; \\n    }\\n\\n    function getMaxLiquidity() public view returns(uint256){\\n        // ticks.corrs\\n    }\\n\\n    function tradeGivenLiquidity(uint256 p2, uint256 p1, uint256 L) public pure returns(uint256){\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return (p2-p1).mulWadDown(L); \\n    }\\n\\n    function baseGivenLiquidity(uint256 p2, uint256 p1, uint256 L) public pure returns(uint256) {\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return LinearCurve.areaUnderCurve(tradeGivenLiquidity(p2, p1, L), 0, inv(L), p1); \\n    }\\n\\n    function liquidityGivenTrade(uint256 p2, uint256 p1, uint256 T) public pure returns(uint256){\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return T.divWadDown(p2-p1); \\n    }\\n    function liquidityGivenBase(uint256 p2, uint256 p1, uint256 B) public pure returns(uint256){\\n        require(p2>=p1, \\\"price ERR\\\"); \\n        return B.divWadDown((p2-p1).mulWadDown((p2+p1)/2)); \\n    }\\n\\n    function pointToPrice(uint16 point) public pure returns(uint160){\\n        return(uint256(point) * priceDelta).toUint160(); \\n    }\\n\\n    /// @notice will round down to nearest integer \\n    function priceToPoint(uint256 price) public pure returns(uint16){\\n        return uint16((price.divWadDown(priceDelta))/PRECISION); \\n    }\\n\\n    function xMax(uint256 curPrice, uint256 b, uint256 a) public pure returns(uint256){\\n        return (curPrice-b).divWadDown(a); \\n    }\\n    function xMaxRoundUp(uint256 curPrice, uint256 b, uint256 a) public pure returns(uint256){\\n        return (curPrice-b).divWadUp(a); \\n    }\\n\\n    /// @notice get the lower bound of the given price range, or the y intercept of the curve of\\n    /// the current point\\n    function yInt(uint256 curPrice, bool moveUp) public pure returns(uint256){\\n        uint16 point = priceToPoint(curPrice); \\n\\n        // If at boundary when moving down, decrement point by one\\n        return (!moveUp && (curPrice%point == 0))? pointToPrice(point-1) : pointToPrice(point); \\n    }\\n\\n    function getNextPriceLimit(uint16 point, uint256 pDelta, bool moveUp) public pure returns(uint256){\\n        if (moveUp) return uint256(point+1) * pDelta; \\n        else return uint256(point) * pDelta; \\n    }\\n\\n    function inv(uint256 l) internal pure returns(uint256){\\n        return l==0? PRECISION.divWadDown(l+1) : PRECISION.divWadDown(l) ; \\n    }\\n    function invRoundUp(uint256 l) internal pure returns(uint256){\\n        return l==0? PRECISION.divWadUp(l+1) : PRECISION.divWadUp(l) ; \\n    }\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a <= b ? a : b;\\n    }\\n    function mod0(uint256 a, uint256 b) internal pure returns(bool){\\n        return (a%b ==0); \\n    }\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) public pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n    function getLiq(address to, uint16 point, bool isAsk) public view returns(uint128){\\n        return  isAsk\\n                ? positions.get(to, point, point+1).askLiq\\n                : positions.get(to, point, point+1).bidLiq; \\n    }\\n\\n}\\n\\nlibrary LinearCurve{\\n    uint256 public constant PRECISION = 1e18; \\n    using FixedPointMath for uint256; \\n    /// @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\n    /// @param amount: amount cash in\\n    /// returns amountDelta wanted token returned \\n    function amountOutGivenIn( \\n        uint256 amount,\\n        uint256 s, \\n        uint256 a, \\n        uint256 b, \\n        bool up) \\n        internal \\n        pure \\n        returns(uint256 amountDelta, uint256 resultPrice) {\\n        \\n        if (up){\\n            uint256 x = ((a.mulWadDown(s) + b) ** 2)/PRECISION; \\n            uint256 y = 2*( a.mulWadDown(amount)); \\n            uint256 x_y_sqrt = ((x+y)*PRECISION).sqrt();\\n            uint256 z = (a.mulWadDown(s) + b); \\n            amountDelta = (x_y_sqrt-z).divWadDown(a);\\n            resultPrice = a.mulWadDown(amountDelta + s) + b; \\n        }\\n\\n        else{\\n            uint256 z = b + a.mulWadDown(s) - a.mulWadDown(amount)/2;  \\n            amountDelta = amount.mulWadDown(z); \\n            resultPrice = a.mulWadDown(s-amount) + b; \\n        }\\n    }\\n\\n    /// @notice calculates area under the curve from s to s+amount\\n     /// result = a * amount / 2  * (2* supply + amount) + b * amount\\n     /// returned in collateral decimals\\n    function areaUnderCurve(\\n        uint256 amount, \\n        uint256 s, \\n        uint256 a, \\n        uint256 b) \\n        internal\\n        pure \\n        returns(uint256 area){\\n        area = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\n    }\\n    function areaUnderCurveRoundUp(\\n        uint256 amount, \\n        uint256 s, \\n        uint256 a, \\n        uint256 b) \\n        internal\\n        pure \\n        returns(uint256 area){\\n        // you want area to be big for a given amount \\n        area = ( a.mulWadUp(amount) / 2 ).mulWadUp(2 * s + amount) + b.mulWadUp(amount); \\n    }\\n}\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position\\nlibrary Position {\\n    using FixedPointMath for uint256;\\n\\n    // info stored for each user's position\\n    struct Info {\\n        uint128 bidCrossId; \\n        uint128 askCrossId; \\n        uint128 askLiq; \\n        uint128 bidLiq; \\n\\n        // the amount of liquidity owned by this position\\n        uint128 liquidity;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed\\n        uint256 feeGrowthInside0LastX128;\\n        uint256 feeGrowthInside1LastX128;\\n        // the fees owed to the position owner in token0/token1\\n        uint256 tokensOwed0;\\n        uint256 tokensOwed1;\\n\\n        \\n    }\\n\\n    function updateLimit(\\n        Info storage self,\\n        int128 limitLiqudityDelta, \\n        bool isAsk, \\n        uint128 crossId\\n        ) internal {\\n\\n        if (isAsk) {\\n            self.askLiq = addDelta(self.askLiq, limitLiqudityDelta);\\n            if( limitLiqudityDelta > 0) self.askCrossId = crossId; \\n        } \\n\\n        else {\\n            self.bidLiq = addDelta(self.bidLiq, limitLiqudityDelta); \\n            if( limitLiqudityDelta > 0) self.bidCrossId = crossId; \\n        }\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        uint16 tickLower,\\n        uint16 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        position = self[keccak256(abi.encodePacked(owner, tickLower, tickUpper))];\\n    }\\n\\n    /// @notice Credits accumulated fees to a user's position\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    /// @param feeGrowthInside0X128 The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\n    /// @param feeGrowthInside1X128 The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\n    function update(\\n        Info storage self,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthInside0X128,\\n        uint256 feeGrowthInside1X128\\n    ) internal {\\n        Info memory _self = self;\\n\\n        uint128 liquidityNext;\\n        if (liquidityDelta == 0) {\\n            require(_self.liquidity > 0, 'NP'); // disallow pokes for 0 liquidity positions\\n            liquidityNext = _self.liquidity;\\n        } else {\\n            liquidityNext = addDelta(_self.liquidity, liquidityDelta);\\n        }\\n\\n        // calculate accumulated fees\\n        uint128 tokensOwed0 = uint128(\\n                (feeGrowthInside0X128-_self.feeGrowthInside0LastX128)\\n                .mulDivDown(uint256(_self.liquidity), 1e18)\\n            );\\n        uint128 tokensOwed1 =uint128(\\n                (feeGrowthInside1X128-_self.feeGrowthInside1LastX128)\\n                .mulDivDown(uint256(_self.liquidity), 1e18)\\n            );\\n            \\n        // update the position\\n        if (liquidityDelta != 0) self.liquidity = liquidityNext;\\n        self.feeGrowthInside0LastX128 = feeGrowthInside0X128;\\n        self.feeGrowthInside1LastX128 = feeGrowthInside1X128;\\n        if (tokensOwed0 > 0 || tokensOwed1 > 0) {\\n            // overflow is acceptable, have to withdraw before you hit type(uint128).max fees\\n            self.tokensOwed0 += tokensOwed0;\\n            self.tokensOwed1 += tokensOwed1;\\n        }\\n    }\\n\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n}\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using FixedPointMath for uint256;\\n\\n    using SafeCast for int256;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        // the total position liquidity that references this tick\\n        uint128 liquidityGross;\\n        // amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint256 feeGrowthOutsideBase;\\n        uint256 feeGrowthOutsideTrade;\\n        // the cumulative tick value on the other side of the tick\\n        int56 tickCumulativeOutside;\\n        // the seconds per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint160 secondsPerLiquidityOutsideX128;\\n        // the seconds spent on the other side of the tick (relative to the current tick)\\n        // only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        uint32 secondsOutside;\\n        // true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        // these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n\\n        uint128 askLiquidityGross; \\n        uint128 bidLiquidityGross;\\n        uint128 askNumCross; \\n        uint128 bidNumCross; \\n    }\\n\\n    function getNumCross(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick, \\n        bool isAsk\\n        ) internal view returns(uint128){\\n        return isAsk? self[tick].askNumCross : self[tick].bidNumCross; \\n    }\\n\\n    function oneTimeLiquidity(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick \\n        ) internal view returns(uint128){\\n        Tick.Info memory info = self[tick]; \\n        assert(info.askLiquidityGross==0 || info.bidLiquidityGross==0); \\n        return info.askLiquidityGross + info.bidLiquidityGross; \\n    }\\n\\n    function deleteOneTimeLiquidity(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick, \\n        bool isAsk\\n        ) internal {\\n        Tick.Info storage info = self[tick]; \\n        if(isAsk) {\\n            info.askLiquidityGross = 0;\\n            info.askNumCross++; \\n            console.log('tick??', tick); \\n        }\\n        else {\\n            info.bidLiquidityGross = 0; \\n            info.bidNumCross++; \\n        }\\n    }\\n\\n    function updateOneTimeLiquidity(\\n        mapping(uint16=> Tick.Info) storage self, \\n        uint16 tick, \\n        int128 oneTimeLiquidityDelta,\\n        bool isAsk\\n        ) internal {\\n        if (isAsk) self[tick].askLiquidityGross = addDelta(self[tick].askLiquidityGross, oneTimeLiquidityDelta); \\n        else self[tick].bidLiquidityGross = addDelta(self[tick].bidLiquidityGross, oneTimeLiquidityDelta);\\n    }\\n\\n    function update(\\n        mapping(uint16 => Tick.Info) storage self,\\n        uint16 tick,\\n        uint16 tickCurrent,\\n        int128 liquidityDelta,\\n        uint256 feeGrowthGlobalBase, \\n        uint256 feeGrowthGlobalTrade, \\n        bool upper\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross; \\n        uint128 liquidityGrossAfter = addDelta(liquidityGrossBefore, liquidityDelta); \\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if(liquidityGrossBefore == 0) {\\n            if(tick<=tickCurrent){\\n            info.feeGrowthOutsideBase = feeGrowthGlobalBase; \\n            info.feeGrowthOutsideTrade = feeGrowthGlobalTrade; \\n            }\\n            info.initialized = true; \\n        }\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        info.liquidityNet = upper \\n            ? (int256(info.liquidityNet)-liquidityDelta).toInt128()\\n            : (int256(info.liquidityNet)+liquidityDelta).toInt128(); \\n    }\\n\\n    function clear(mapping(uint16 => Tick.Info) storage self, uint16 tick) internal {\\n        delete self[tick];\\n    }\\n\\n    function cross(\\n        mapping(uint16 => Tick.Info) storage self,\\n        uint16 tick, \\n        uint256 feeGrowthGlobalBase,\\n        uint256 feeGrowthGlobalTrade\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick]; \\n\\n        liquidityNet = info.liquidityNet; \\n        info.feeGrowthOutsideBase = feeGrowthGlobalBase - info.feeGrowthOutsideBase; \\n        info.feeGrowthOutsideTrade = feeGrowthGlobalTrade - info.feeGrowthOutsideTrade;\\n    }\\n\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            require((z = x - uint128(-y)) < x, 'LS');\\n        } else {\\n            require((z = x + uint128(y)) >= x, 'LA');\\n        }\\n    }\\n\\n    function getFeeGrowthInside(\\n        mapping(uint16 => Tick.Info) storage self,\\n        uint16 tickLower,\\n        uint16 tickUpper,\\n        uint16 tickCurrent,\\n        uint256 feeGrowthGlobalBase,\\n        uint256 feeGrowthGlobalTrade\\n    ) internal view returns (uint256 feeGrowthInsideBase, uint256 feeGrowthInsideTrade) {\\n        Info storage lower = self[tickLower];\\n        Info storage upper = self[tickUpper];\\n\\n        // calculate fee growth below\\n        uint256 feeGrowthBelowBase;\\n        uint256 feeGrowthBelowTrade;\\n        if (tickCurrent >= tickLower) {\\n            feeGrowthBelowBase = lower.feeGrowthOutsideBase;\\n            feeGrowthBelowTrade = lower.feeGrowthOutsideTrade;\\n        } else {\\n            feeGrowthBelowBase = feeGrowthGlobalBase - lower.feeGrowthOutsideBase;\\n            feeGrowthBelowTrade = feeGrowthGlobalTrade - lower.feeGrowthOutsideTrade;\\n        }\\n\\n        // calculate fee growth above\\n        uint256 feeGrowthAboveBase;\\n        uint256 feeGrowthAboveTrade;\\n        if (tickCurrent < tickUpper) {\\n            feeGrowthAboveBase = upper.feeGrowthOutsideBase;\\n            feeGrowthAboveTrade = upper.feeGrowthOutsideTrade;\\n        } else {\\n            feeGrowthAboveBase = feeGrowthGlobalBase - upper.feeGrowthOutsideBase;\\n            feeGrowthAboveTrade = feeGrowthGlobalTrade - upper.feeGrowthOutsideTrade;\\n        }\\n\\n        feeGrowthInsideBase = feeGrowthGlobalBase - feeGrowthBelowBase - feeGrowthAboveBase;\\n        feeGrowthInsideTrade = feeGrowthGlobalTrade - feeGrowthBelowTrade - feeGrowthAboveTrade;\\n    }\\n}\\n\\n\\ncontract SpotPool is GranularBondingCurve{\\n\\n    ERC20 BaseToken; //junior\\n    ERC20 TradeToken; //senior \\n    // GranularBondingCurve public pool; \\n\\n    constructor(\\n        address _baseToken, \\n        address _tradeToken\\n        )GranularBondingCurve(_baseToken,_tradeToken){\\n        BaseToken = ERC20(_baseToken); \\n        TradeToken = ERC20(_tradeToken); \\n        // pool = new GranularBondingCurve(_baseToken,_tradeToken); \\n    }\\n\\n    function handleBuys(address recipient, uint256 amountOut, uint256 amountIn, bool up) internal {\\n\\n        if(up){\\n            console.log('balances', TradeToken.balanceOf(address(this)), BaseToken.balanceOf(address(this)));\\n            console.log('togive', amountOut, amountIn); \\n            TradeToken.transfer(recipient, amountOut); \\n            console.log('balofre', BaseToken.balanceOf(recipient));\\n            BaseToken.transferFrom(recipient, address(this), amountIn);\\n        }\\n\\n        else{\\n            BaseToken.transfer(recipient, amountOut); \\n            TradeToken.transferFrom(recipient, address(this), amountIn);\\n        }\\n    }\\n\\n    // function getCurPrice() external view returns(uint256){\\n    //     return uint256(pool.getCurPrice());\\n    // }\\n\\n    /// @notice if buyTradeForBase, move up, and vice versa \\n    function takerTrade(\\n        address recipient, \\n        bool buyTradeForBase, \\n        int256 amountIn,\\n        uint256 priceLimit, \\n        bytes calldata data        \\n        ) external returns(uint256 poolamountIn, uint256 poolamountOut){\\n\\n        (poolamountIn, poolamountOut) = this.trade(\\n            recipient, \\n            buyTradeForBase, \\n            amountIn,  \\n            priceLimit, \\n            data\\n        ); \\n        handleBuys(recipient, poolamountOut, poolamountIn, buyTradeForBase); \\n    }\\n\\n    /// @notice specify how much trade trader intends to sell/buy \\n    function makerTrade(\\n        bool buyTradeForBase,\\n        uint256 amountIn,\\n        uint16 point\\n        ) external {\\n        (uint256 toEscrowAmount, uint128 crossId) \\n                = this.placeLimitOrder(msg.sender, \\n                    point, \\n                    uint128(liquidityGivenTrade(pointToPrice(point+1), pointToPrice(point), amountIn)), \\n                    !buyTradeForBase); \\n\\n        // Collateral for bids\\n        if (buyTradeForBase) BaseToken.transferFrom(msg.sender, address(this), toEscrowAmount); \\n\\n        // or asks\\n        else TradeToken.transferFrom(msg.sender, address(this), toEscrowAmount); \\n    }\\n\\n    function makerClaim(\\n        uint16 point, \\n        bool buyTradeForBase\\n        ) external {\\n        uint256 claimedAmount = this.claimFilledOrder(\\n            msg.sender, \\n            point, \\n            !buyTradeForBase\\n        ); \\n\\n        if (buyTradeForBase) TradeToken.transfer(msg.sender, claimedAmount);\\n        else BaseToken.transfer(msg.sender, claimedAmount); \\n\\n    }\\n}\\n\\n\\n\\n/// @notice Uses AMM as a derivatives market,where the price is bounded between two price\\n/// and mints/burns tradeTokens. \\n/// stores all baseTokens for trading, and also stores tradetokens when providing liquidity, \\n/// @dev Short loss is bounded as the price is bounded, no need to program liquidations logic \\ncontract BoundedDerivativesPool {\\n    using FixedPointMath for uint256;\\n    using SafeCast for uint256; \\n    // using Position for Position.Info;\\n    // uint256 constant PRECISION = 1e18; \\n    ERC20 public  BaseToken; \\n    ERC20 public  TradeToken; \\n    ERC20 public  s_tradeToken; \\n    GranularBondingCurve public pool; \\n    uint256 public constant maxPrice = 1e18; \\n\\n    bool immutable noCallBack; \\n    constructor(\\n        address base, \\n        address trade, \\n        address s_trade, \\n        bool _noCallBack\\n        // address _pool \\n        ) \\n    {\\n        BaseToken =  ERC20(base);\\n        TradeToken = ERC20(trade);\\n        s_tradeToken = ERC20(s_trade); \\n        pool = new GranularBondingCurve(base,trade); \\n        pool.setEntry(address(this)); \\n        noCallBack = _noCallBack; \\n    }\\n\\n    /// @notice recipient recieves amountOut in exchange for giving this contract amountIn (base)\\n    function mintAndPull(address recipient, uint256 amountOut, uint256 amountIn, bool isLong) internal  {\\n        \\n        console.log('mint/pull amount,', amountOut, amountIn); \\n\\n        // Mint and Pull \\n        if(isLong) TradeToken.mint(recipient, amountOut); \\n        else s_tradeToken.mint(recipient, amountOut); \\n        BaseToken.transferFrom(recipient,address(this), amountIn); \\n    }\\n\\n    function burnAndPush(address recipient, uint256 amountOut, uint256 amountIn, bool isLong) internal  {\\n        console.log('amountout', amountIn, amountOut); \\n        console.log(TradeToken.balanceOf(address(this)), \\n            BaseToken.balanceOf(address(this))); \\n        // Burn and Push \\n        if(isLong) TradeToken.burn(recipient, amountIn); \\n        else s_tradeToken.burn(recipient, amountIn); \\n   \\n        BaseToken.transfer(recipient, amountOut); \\n    }\\n\\n    function baseBal() public view returns(uint256){\\n        return BaseToken.balanceOf(address(this)); \\n    }\\n    /// @notice Long up the curve, or short down the curve \\n    /// @param amountIn is base if long, trade if short\\n    /// @param priceLimit is slippage tolerance\\n    function takerOpen(\\n        bool isLong, \\n        int256 amountIn,\\n        uint256 priceLimit, \\n        bytes calldata data\\n        ) external  returns(uint256 poolamountIn, uint256 poolamountOut ){\\n        if(isLong){\\n            // Buy up \\n            (poolamountIn, poolamountOut) = pool.trade(\\n                msg.sender, \\n                true, \\n                amountIn, \\n                priceLimit, \\n                data\\n            ); \\n            if (noCallBack) mintAndPull(msg.sender, poolamountOut, poolamountIn, true);\\n\\n            else {\\n                uint256 bal = baseBal(); \\n                iTradeCallBack(msg.sender).tradeCallBack(poolamountIn, data); \\n                require(baseBal() >= poolamountIn + bal, \\\"balERR\\\"); \\n                TradeToken.mint(abi.decode(data, (address)), poolamountOut); \\n            }\\n        }\\n\\n        else{\\n            // just shift pool state\\n            (poolamountIn, poolamountOut) = pool.trade(\\n                address(this), \\n                false, \\n                amountIn, \\n                priceLimit, \\n                data\\n            ); \\n            console.log('shorting,', poolamountIn, poolamountOut, poolamountIn.mulWadDown(maxPrice) - poolamountOut);\\n            uint256 cached_poolamountOut = poolamountOut; \\n            // poolamountIn is the number of short tokens minted, poolamountIn * maxprice - poolamountOut is the collateral escrowed\\n            poolamountOut = poolamountIn.mulWadDown(maxPrice) - poolamountOut;\\n\\n            // One s_tradeToken is a representation of debt+sell of one tradetoken\\n            // Escrow collateral required for shorting, where price for long + short = maxPrice, \\n            // so (maxPrice-price of trade) * quantity\\n            if (noCallBack) mintAndPull(msg.sender, poolamountIn, poolamountOut, false);\\n\\n            else{\\n                uint256 bal = baseBal(); \\n                iTradeCallBack(msg.sender).tradeCallBack(poolamountOut, data); \\n                require(baseBal() >= poolamountOut + bal, \\\"balERR\\\"); \\n                s_tradeToken.mint(abi.decode(data,(address)), poolamountIn); \\n\\n                // need to send cached poolamountOut(the area under the curve) data for accounting purposes\\n                poolamountIn = cached_poolamountOut; \\n            }\\n\\n            // BaseToken.transferFrom(msg.sender, address(this), poolamountIn.mulWadDown(maxPrice) - poolamountOut); \\n            // s_tradeToken.mint(msg.sender, uint256(amountIn)); \\n        }\\n\\n    }\\n\\n    /// @param amountIn is trade if long, ALSO trade if short, since getting rid of s_trade \\n    function takerClose(\\n        bool isLong, \\n        int256 amountIn,\\n        uint256 priceLimit, \\n        bytes calldata data\\n        ) external returns(uint256 poolamountIn, uint256 poolamountOut){\\n\\n        // Sell down\\n        if(isLong){\\n            (poolamountIn, poolamountOut) = pool.trade(\\n                msg.sender,\\n                false, \\n                amountIn, //this should be trade tokens\\n                priceLimit, \\n                data\\n            ); \\n            console.log('to burn and balance', poolamountIn, TradeToken.balanceOf(msg.sender)); \\n            console.log(poolamountOut, BaseToken.balanceOf(address(this))); \\n\\n            if (noCallBack) burnAndPush(msg.sender, poolamountOut, poolamountIn, true);\\n\\n            else burnAndPush(abi.decode(data, (address)), poolamountOut, poolamountIn, true );                             \\n        }\\n\\n        else{            \\n            // buy up with the baseToken that was transferred to this contract when opened, in is base out is trade\\n            (poolamountIn, poolamountOut) = pool.trade(\\n                msg.sender, \\n                true, \\n                amountIn, \\n                priceLimit, \\n                data\\n            ); \\n            console.log('to burn and balance', poolamountIn,poolamountOut,  s_tradeToken.balanceOf(msg.sender)); \\n            console.log(poolamountOut.mulWadDown(maxPrice) - poolamountIn, BaseToken.balanceOf(address(this))); \\n            uint256 cached_poolamountIn = poolamountIn; \\n\\n            // collateral used to buy short \\n            poolamountIn = poolamountOut.mulWadDown(maxPrice) - poolamountIn; \\n\\n            if (noCallBack) burnAndPush(msg.sender, poolamountIn,poolamountOut, false);\\n            else {\\n                burnAndPush(abi.decode(data, (address)), poolamountIn, poolamountOut,false ); \\n                poolamountOut = cached_poolamountIn; \\n            }\\n\\n            // s_tradeToken.burn(msg.sender, poolamountOut); \\n            // BaseToken.transfer(msg.sender, poolamountOut.mulWadDown(maxPrice) - poolamountIn);\\n        }\\n    }\\n\\n    /// @notice provides oneTimeliquidity in the range (point,point+1)\\n    /// @param amount is in base if long, trade if in short  \\n    function makerOpen(\\n        uint16 point, \\n        uint256 amount,\\n        bool isLong,\\n        address recipient\\n        )external  returns(uint256 toEscrowAmount, uint128 crossId){\\n\\n        if(isLong){\\n            // escrowAmount is base \\n            (toEscrowAmount, crossId) = pool.placeLimitOrder(\\n                recipient,\\n                point, \\n                uint128(pool.liquidityGivenBase(pool.pointToPrice(point+1), pool.pointToPrice(point), amount)), \\n                false\\n                ); \\n            console.log('here>'); \\n            BaseToken.transferFrom(recipient, address(this), toEscrowAmount); \\n        }\\n\\n        // need to set limit for sells, but claiming process is different then regular sells \\n        else{\\n            // escrowAmount is trade \\n            (toEscrowAmount, crossId) = pool.placeLimitOrder(\\n                recipient, \\n                point,\\n                uint128(pool.liquidityGivenTrade(pool.pointToPrice(point+1), pool.pointToPrice(point),amount)) , \\n                true\\n                ); \\n\\n            // escrow amount is (maxPrice - avgPrice) * quantity \\n            uint256 escrowCollateral = toEscrowAmount - pool.baseGivenLiquidity(\\n                    pool.pointToPrice(point+1), \\n                    pool.pointToPrice(point), \\n                    uint256(amount) //positive since adding asks, not subtracting \\n                    ); \\n            BaseToken.transferFrom(recipient, address(this), escrowCollateral); \\n            console.log('point', point, pool.getOneTimeLiquidity(point, true)); \\n            toEscrowAmount = escrowCollateral; \\n        }\\n\\n    }\\n\\n    function makerClaimOpen(\\n        uint16 point, \\n        bool isLong, \\n        address recipient\\n        )external returns(uint256 claimedAmount){\\n\\n        if(isLong){\\n            uint256 claimedAmount = pool.claimFilledOrder(recipient, point, false ); \\n\\n            // user already escrowed funds, so need to send him tradeTokens \\n            TradeToken.mint(recipient, claimedAmount);          \\n        }\\n\\n        else{           \\n            s_tradeToken.mint(recipient, \\n                pool.tradeGivenLiquidity(\\n                    pool.pointToPrice(point+1), \\n                    pool.pointToPrice(point), \\n                    pool.getLiq(msg.sender, point, true)\\n                    )\\n                ); \\n\\n            // open short is filled sells, check if sells are filled. If it is,\\n            // claimedAmount of basetokens should already be in this contract \\n            claimedAmount = pool.claimFilledOrder(recipient, point, true ); \\n        }\\n\\n    }\\n    /// @notice amount is trade if long, but ALSO trade if short(since trade quantity also coincides\\n    /// with shortTrade quantity )\\n    function makerClose(\\n        uint16 point, \\n        uint256 amount,\\n        bool isLong, \\n        address recipient\\n        )external returns(uint256 toEscrowAmount, uint128 crossId){\\n\\n        if(isLong){\\n            // close long is putting up trades for sells, \\n            (toEscrowAmount, crossId) = pool.placeLimitOrder(\\n                recipient, \\n                point, \\n                uint128(pool.liquidityGivenTrade(pool.pointToPrice(point+1), pool.pointToPrice(point),amount)), \\n                true\\n                ); \\n            //maybe burn it when claiming, and just escrow? \\n            TradeToken.burn(recipient, toEscrowAmount); \\n        }\\n\\n        else{\\n            // Place limit orders for buys \\n            (toEscrowAmount, crossId) = pool.placeLimitOrder(\\n                recipient, \\n                point,\\n                uint128(pool.liquidityGivenTrade(pool.pointToPrice(point+1), pool.pointToPrice(point),amount)), \\n                false\\n                ); \\n\\n            // burn s_tradeTokens, \\n            s_tradeToken.burn(recipient, amount); \\n\\n        }\\n    }\\n\\n    function makerClaimClose(\\n        uint16 point, \\n        bool isLong, \\n        address recipient\\n        ) external returns(uint256 claimedAmount){\\n\\n        if(isLong){\\n            // Sell is filled, so need to transfer back base \\n            claimedAmount = pool.claimFilledOrder(recipient, point, true ); \\n            BaseToken.transfer(recipient, claimedAmount); \\n        }\\n        else{\\n            uint128 liq = pool.getLiq(recipient, point, false); \\n\\n            // Buy is filled, which means somebody burnt trade, so claimedAmount is in trade\\n            claimedAmount = pool.claimFilledOrder(recipient, point, false);\\n            claimedAmount = claimedAmount.mulWadDown(maxPrice) \\n                            - pool.baseGivenLiquidity(\\n                            pool.pointToPrice(point+1), \\n                            pool.pointToPrice(point), \\n                            liq); \\n            BaseToken.transfer(recipient, claimedAmount);\\n        }\\n    }    \\n\\n    function makerPartiallyClaim(\\n        uint16 point, \\n        bool isLong,\\n        bool open, \\n        address recipient\\n        ) external returns(uint256 baseAmount, uint256 tradeAmount){\\n   \\n        if(open){\\n            if(isLong)(baseAmount, tradeAmount) = pool.claimPartiallyFilledOrder(recipient, point, false); \\n            else (baseAmount, tradeAmount) = pool.claimPartiallyFilledOrder(recipient, point, true);\\n        }\\n        else{\\n            if(isLong)(baseAmount, tradeAmount) = pool.claimPartiallyFilledOrder(recipient, point, true); \\n            else (baseAmount, tradeAmount) = pool.claimPartiallyFilledOrder(recipient, point, false);\\n        }\\n        \\n        BaseToken.transfer(recipient, baseAmount);\\n        TradeToken.mint(recipient, tradeAmount); \\n    }\\n\\n    /// @notice amount is in base if long, trade if short \\n    function makerReduceOpen(\\n        uint16 point, \\n        uint256 amount, \\n        bool isLong, \\n        address recipient\\n        ) external{\\n    \\n        if(isLong){\\n            uint256 returned_amount = pool.reduceLimitOrder(\\n                recipient, \\n                point, \\n                pool.liquidityGivenBase(\\n                    pool.pointToPrice(point+1), \\n                    pool.pointToPrice(point),\\n                    amount\\n                    ).toUint128(), \\n                false\\n                ); \\n            // need to send base back \\n            BaseToken.transfer(recipient, returned_amount); \\n        }\\n        else {\\n            uint128 liq = pool.liquidityGivenTrade(pool.pointToPrice(point+1), pool.pointToPrice(point), amount).toUint128(); \\n            // Reduce asks \\n            pool.reduceLimitOrder(\\n                recipient, \\n                point, \\n                liq, \\n                true\\n                ); \\n\\n            // Need to send escrowed basetoken back, which is shortTrade quantity - baseGivenLiquidity \\n            BaseToken.transfer(recipient, \\n                amount - pool.baseGivenLiquidity(pool.pointToPrice(point+1), pool.pointToPrice(point), liq));\\n        }\\n    }\\n\\n    /// @notice amount is in trade if long, ALSO trade if short \\n    function makerReduceClose(      \\n        uint16 point, \\n        uint256 amount, \\n        bool isLong,\\n        address recipient\\n        ) external{\\n\\n        if(isLong){\\n            uint256 returned_amount = pool.reduceLimitOrder(\\n                recipient, \\n                point, \\n                pool.liquidityGivenTrade(\\n                    uint256(pool.pointToPrice(point+1)), \\n                    uint256(pool.pointToPrice(point)), amount).toUint128(), \\n                true\\n                ); \\n            // need to send trade back \\n            TradeToken.mint(recipient, returned_amount); \\n        }\\n\\n        else{\\n            // reduce limit bids \\n            pool.reduceLimitOrder(\\n                recipient, \\n                point, \\n                pool.liquidityGivenTrade(\\n                    uint256(pool.pointToPrice(point+1)), \\n                    uint256(pool.pointToPrice(point)), amount).toUint128(), \\n                false\\n            ); \\n             \\n            s_tradeToken.mint(recipient, amount); \\n        }\\n    }\\n\\n    function provideLiquidity(\\n        uint16 pointLower,\\n        uint16 pointUpper,\\n        uint128 amount, \\n        bytes calldata data \\n        ) external {\\n\\n        (uint256 amount0, uint256 amount1) = pool.provide(\\n            msg.sender, \\n            pointLower, \\n            pointUpper, \\n            amount, \\n            data \\n        ); \\n        BaseToken.transferFrom(msg.sender, address(this), amount0); \\n        // TradeToken.transferFrom(msg.sender, address(this), amount1);\\n        TradeToken.burn(msg.sender, amount1);\\n    }\\n\\n    function withdrawLiquidity(\\n        uint16 pointLower,\\n        uint16 pointUpper,\\n        uint128 amount, \\n        bytes calldata data \\n        )external{\\n\\n        (uint256 amountBase, uint256 amountTrade) = pool.remove(\\n            msg.sender, \\n            pointLower, \\n            pointUpper, \\n            amount\\n        ); \\n      \\n        pool.collect(\\n            msg.sender, \\n            pointLower,\\n            pointUpper,\\n            type(uint128).max,\\n            type(uint128).max\\n        ); \\n\\n        BaseToken.transfer(msg.sender,  amountBase); \\n        TradeToken.mint(msg.sender, amountTrade); \\n    }\\n    function getTraderPosition()external view{}\\n\\n    //TODO fees, skipping uninit for gas, below functions\\n    // possible attacks: manipulation of price with no liquidityregions, add a bid/ask and a naive \\n    // trader fills, and immediately submit a ask much higher/lower\\n    // gas scales with number of loops, so need to set ticks apart large, or provide minimal liquidity in each tick\\n\\n}\\n\\ninterface iTradeCallBack{\\n    function tradeCallBack(\\n        uint256 amount0,\\n bytes calldata data    ) external;\\n} \\n\\n\\n\",\"keccak256\":\"0x6d1fafd9d17cedf2b0673dd60ef61176ce453b7bbc8d6af5e6289330b6343aa9\",\"license\":\"UNLICENSED\"},\"contracts/bonds/libraries.sol\":{\"content\":\"pragma solidity ^0.8.9;\\n\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMath {\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    // function toUint256(uint256 y)internal pure returns (uint160 z) {\\n    //     require((z = uint256(y)) == y);\\n    // }\\n    // function toUint210(uint256 y)internal pure returns (uint160 z) {\\n    //     require((z = uint160(y)) == y);\\n    // }\\n    function toUint128(uint256 y)internal pure returns (uint128 z) {\\n        require((z = uint128(y)) == y);\\n    }\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y);\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255);\\n        z = int256(y);\\n    }\\n}\\n\\n\\ncontract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n    function mint(address to, uint256 amount) public {\\n      _mint(to, amount); \\n    }\\n    function burn(address to, uint256 amount) public {\\n      _burn(to, amount); \\n    }\\n}\",\"keccak256\":\"0x6f4b41b0a3a677144ec92ae040f756a7af61ffe54f497f92d7f20a729b3cb091\"},\"contracts/bonds/synthetic.sol\":{\"content\":\"pragma solidity ^0.8.9;\\nimport {BoundedDerivativesPool, LinearCurve} from \\\"./GBC.sol\\\"; \\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {ERC20} from \\\"./libraries.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract SyntheticZCBPoolFactory{\\n    address public immutable controller;\\n    constructor(address _controller){\\n        controller = _controller; \\n    }\\n\\n    function newBond(\\n        string memory name, \\n        string memory description \\n        ) internal returns(address) {\\n        ERC20 bondToken = new ERC20(name,description, 18);\\n        return address(bondToken); \\n    }\\n\\n    /// @notice param base is the collateral used in pool \\n    function newPool(\\n        address base, \\n        address entry\\n        ) external returns(address longZCB, address shortZCB, SyntheticZCBPool pool){\\n        longZCB = newBond(\\\"longZCB\\\", \\\"long\\\");\\n        shortZCB = newBond(\\\"shortZCB\\\", \\\"short\\\");\\n\\n        pool = new SyntheticZCBPool(\\n            base, longZCB, shortZCB, entry, controller\\n        ); \\n    }\\n}\\n\\ncontract SyntheticZCBPool is BoundedDerivativesPool{\\n    using FixedPointMathLib for uint256;\\n\\n    uint256  public a_initial;\\n    uint256  public b_initial; // b without discount cap \\n    uint256  public b;\\n    uint256  public discount_cap; \\n    uint256 discountedReserves; \\n\\n\\n    address public immutable entry; \\n    address public immutable controller; \\n    uint256 public constant precision = 1e18; \\n    constructor(address base, \\n        address trade, \\n        address s_trade, \\n        address _entry, \\n        address _controller\\n        )BoundedDerivativesPool(base,trade,s_trade, false){\\n\\n        entry = _entry; \\n        controller = _controller; \\n        }\\n\\n    /// @notice calculate and store initial curve params that takes into account\\n    /// validator rewards(from discounted zcb). For validator rewards, just skew up the initial price\\n    /// These params are used for utilizer bond issuance, but a is set to 0 after issuance phase \\n    /// @param sigma is the proportion of P that is going to be bought at a discount  \\n    function calculateInitCurveParams(\\n        uint256 P, \\n        uint256 I, \\n        uint256 sigma) external {\\n        require(msg.sender == controller, \\\"unauthorized\\\"); \\n        b_initial = (2*P).divWadDown(P+I) - precision; \\n        a_initial = (precision-b_initial).divWadDown(P+I); \\n\\n        // Calculate and store maximum tokens for discounts, and get new initial price after saving for discounts\\n        (discount_cap, b) = LinearCurve.amountOutGivenIn(P.mulWadDown(sigma), 0, a_initial, b_initial, true);\\n\\n        // Set initial liquidity and price \\n        pool.setLiquidity(uint128(precision.divWadDown(a_initial))); \\n        pool.setPriceAndPoint(b); \\n    }\\n\\n    /// @notice calculates initparams for pool based instruments \\n    /// param endPrice is the inception Price of longZCB, or its price when there is no discount\\n    function calculateInitCurveParamsPool(\\n        uint256 saleAmount, \\n        uint256 initPrice, \\n        uint256 endPrice, \\n        uint256 sigma\\n        ) external{\\n        require(msg.sender == controller, \\\"unauthorized\\\"); \\n\\n        uint256 saleAmountQty = (2*saleAmount).divWadDown(initPrice +endPrice); \\n        uint256 a = (endPrice - initPrice).divWadDown(saleAmountQty); \\n        \\n        //Set discount cap as saleAmount * sigma \\n        (discount_cap, ) = LinearCurve.amountOutGivenIn(saleAmount.mulWadDown(sigma),0, a, initPrice,true ); \\n        b = initPrice; \\n\\n        // set initial liquidity and price \\n        pool.setLiquidity(uint128(precision.divWadDown(a))); \\n        pool.setPriceAndPoint(b); \\n        pool.setDynamicLiquidity(pool.priceToPoint(endPrice), type(int128).max); \\n        pool.setModifyLiqPoint(pool.priceToPoint(endPrice)); \\n    }\\n\\n    /// @notice computes area between the curve and max price for given storage parameters\\n    function areaBetweenCurveAndMax(uint256 amount) public view returns(uint256){\\n        (uint256 amountDelta, ) = LinearCurve.amountOutGivenIn(amount, 0, a_initial, b_initial, true); \\n        return amountDelta.mulWadDown(maxPrice) - amount; \\n    }\\n\\n    /// @notice mints new zcbs \\n    function trustedDiscountedMint(\\n        address receiver, \\n        uint256 amount \\n        ) external{\\n        require(msg.sender == entry, \\\"entryERR\\\"); \\n\\n        TradeToken.mint(receiver, amount);\\n        discountedReserves += amount;  \\n    }\\n\\n\\n    function trustedBurn(\\n        address trader, \\n        uint256 amount, \\n        bool long\\n        ) external {\\n        require(msg.sender == entry, \\\"entryERR\\\"); \\n\\n        if (long) TradeToken.burn(trader, amount); \\n        else s_tradeToken.burn(trader, amount);\\n    }\\n\\n    function flush(address flushTo, uint256 amount) external {\\n        require(msg.sender == controller, \\\"entryERR\\\"); \\n        if (amount == type(uint256).max) BaseToken.transfer(flushTo, baseBal()); \\n        else BaseToken.transfer(flushTo, amount); \\n    }\\n\\n    /// @notice resets AMM liquidity to 0 and make it ready to be liq provisioned \\n    /// by anyone \\n    function resetLiq() external{\\n        require(msg.sender == controller, \\\"entryERR\\\"); \\n        pool.setLiquidity(0); \\n        pool.amortizeLiq(); \\n    }\\n\\n    function cBal() external view returns(uint256){\\n        return BaseToken.balanceOf(address(this)); \\n    }\\n}\\n\",\"keccak256\":\"0xada7d0da84b7b4b82bb4e0285fb9aefb7e6924152506ba12cc0e716092fe6415\"},\"contracts/chainlink/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\",\"keccak256\":\"0xd4697556c95e0f2e5055eea0b07b4d476887052d95dbf838b3cf7c32436c71d1\",\"license\":\"MIT\"},\"contracts/chainlink/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\",\"keccak256\":\"0xadc1f1babaa7202145a22d82c85176cbe7f1fae993f2c11dabdf6058aebea6b2\",\"license\":\"MIT\"},\"contracts/protocol/controller.sol\":{\"content\":\"pragma solidity ^0.8.4;\\nimport {MarketManager} from \\\"./marketmanager.sol\\\";\\nimport {ReputationNFT} from \\\"./reputationtoken.sol\\\";\\nimport {Vault} from \\\"../vaults/vault.sol\\\";\\nimport {Instrument} from \\\"../vaults/instrument.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {VaultFactory} from \\\"./factories.sol\\\"; \\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@interep/contracts/IInterep.sol\\\";\\nimport {config} from \\\"../utils/helpers.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport {ERC4626} from \\\"../vaults/mixins/ERC4626.sol\\\";\\nimport {Vault} from \\\"../vaults/vault.sol\\\";\\n// import \\\"@interep/contracts/IInterep.sol\\\";\\nimport {SyntheticZCBPoolFactory, SyntheticZCBPool} from \\\"../bonds/synthetic.sol\\\"; \\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\n\\n\\ncontract Controller {\\n  using SafeMath for uint256;\\n  using FixedPointMathLib for uint256;\\n  using SafeTransferLib for ERC20;\\n\\n  struct MarketData {\\n      address instrument_address;\\n      address utilizer;\\n  }\\n\\n  struct ApprovalData{\\n    uint256 approved_principal; \\n    uint256 approved_yield; \\n  }\\n\\n\\n  \\n  event MarketInitiated(uint256 marketId, address recipient);\\n\\n  mapping(uint256=>ApprovalData) approvalDatas;\\n\\n  function getApprovalData(uint256 marketId) public view returns (ApprovalData memory) {\\n    approvalDatas[marketId];\\n  }\\n\\n  mapping(address => bool) public  verified;\\n  mapping(uint256 => MarketData) public market_data; // id => recipient\\n  mapping(address=> uint256) public ad_to_id; //utilizer address to marketId\\n  mapping(uint256=> Vault) public vaults; // vault id to Vault contract\\n  mapping(uint256=> uint256) public id_parent; //marketId-> vaultId \\n  mapping(uint256=> uint256) public vault_debt; //vault debt for each marketId ??\\n  mapping(uint256=>uint256[]) public vault_to_marketIds;\\n\\n  address creator_address;\\n\\n  // IInterep interep;\\n  // TrustedMarketFactoryV3 marketFactory;\\n  MarketManager marketManager;\\n  // ReputationNFT repNFT; \\n  VaultFactory vaultFactory; \\n  SyntheticZCBPoolFactory poolFactory; \\n\\n  uint256 constant TWITTER_UNRATED_GROUP_ID = 16106950158033643226105886729341667676405340206102109927577753383156646348711;\\n  bytes32 constant private signal = bytes32(\\\"twitter-unrated\\\");\\n  uint256 constant MIN_DURATION = 1 days;\\n\\n  /* ========== MODIFIERS ========== */\\n  modifier onlyValidator(uint256 marketId) {\\n      require(isValidator(marketId, msg.sender)|| msg.sender == creator_address, \\\"not validator for market\\\");\\n      _;\\n  }\\n\\n  modifier onlyOwner() {\\n      require(msg.sender == creator_address, \\\"Only Owner can call this function\\\");\\n      _;\\n  }\\n  modifier onlyManager() {\\n      require(msg.sender == address(marketManager) || msg.sender == creator_address, \\\"Only Manager can call this function\\\");\\n      _;\\n  }\\n\\n  constructor (\\n      address _creator_address,\\n      address _interep_address //TODO\\n  ) {\\n      creator_address = _creator_address;\\n  }\\n\\n  /*----Setup Functions----*/\\n\\n  function setMarketManager(address _marketManager) public onlyOwner {\\n    require(_marketManager != address(0));\\n    marketManager = MarketManager(_marketManager);\\n  }\\n\\n  // function setReputationNFT(address NFT_address) public onlyOwner{\\n  //   repNFT = ReputationNFT(NFT_address); \\n  // }\\n\\n  function setVaultFactory(address _vaultFactory) public onlyOwner {\\n    vaultFactory = VaultFactory(_vaultFactory); \\n  }\\n\\n  function setPoolFactory(address _poolFactory) public onlyOwner{\\n    poolFactory = SyntheticZCBPoolFactory(_poolFactory); \\n  }\\n\\n  // function verifyAddress(\\n  //     uint256 nullifier_hash, \\n  //     uint256 external_nullifier,\\n  //     uint256[8] calldata proof\\n  // ) external  {\\n  //     require(!verified[msg.sender], \\\"address already verified\\\");\\n  //     interep.verifyProof(TWITTER_UNRATED_GROUP_ID, signal, nullifier_hash, external_nullifier, proof);\\n  //     verified[msg.sender] = true;\\n  // }\\n\\n  function testVerifyAddress() external {\\n    verified[msg.sender] = true;\\n  }\\n\\n\\n  /// @notice called only when redeeming, transfer funds from vault \\n  function redeem_transfer(\\n    uint256 amount, \\n    address to, \\n    uint256 marketId) \\n  external onlyManager{\\n    vaults[id_parent[marketId]].trusted_transfer(amount,to); \\n  }\\n  \\n  /// @notice creates vault\\n  /// @param underlying: underlying asset for vault\\n  /// @param _onlyVerified: only verified users can mint shares\\n  /// @param _r: minimum reputation score to mint shares\\n  /// @param _asset_limit: max number of shares for a single address\\n  /// @param _total_asset_limit: max number of shares for entire vault\\n  /// @param default_params: default params for markets created by vault\\n  function createVault(\\n    address underlying,\\n    bool _onlyVerified, \\n    uint256 _r, \\n    uint256 _asset_limit, \\n    uint256 _total_asset_limit, \\n    MarketManager.MarketParameters memory default_params \\n  ) public {\\n    (Vault newVault, uint256 vaultId) = vaultFactory.newVault(\\n     underlying, \\n     address(this),\\n     _onlyVerified, \\n     _r, \\n     _asset_limit,\\n     _total_asset_limit,\\n     default_params\\n    );\\n\\n    vaults[vaultId] = newVault;\\n  }\\n\\n  /// @notice initiates market, called by frontend loan proposal or instrument form submit button.\\n  /// @dev Instrument should already be deployed \\n  /// @param recipient: utilizer for the associated instrument\\n  /// @param instrumentData: instrument arguments\\n  /// @param vaultId: vault identifier\\n  function initiateMarket(\\n    address recipient,\\n    Vault.InstrumentData memory instrumentData, \\n    uint256 vaultId\\n  ) external  {\\n    require(recipient != address(0), \\\"address0\\\"); \\n    require(instrumentData.Instrument_address != address(0), \\\"address0\\\");\\n    require(address(vaults[vaultId]) != address(0), \\\"address0\\\");\\n\\n    Vault vault = vaults[vaultId]; \\n    uint256 marketId = marketManager.marketCount();\\n    id_parent[marketId] = vaultId;\\n    vault_to_marketIds[vaultId].push(marketId);\\n    market_data[marketId] = MarketData(instrumentData.Instrument_address, recipient);\\n    marketManager.setParameters(vault.get_vault_params(), vault.utilizationRate(), marketId); //TODO non-default \\n\\n    // Create new pool and bonds and store initial price and liquidity for the pool\\n    (address longZCB, address shortZCB, SyntheticZCBPool pool) \\n              = poolFactory.newPool(address(vaults[vaultId].UNDERLYING()), address(marketManager)); \\n\\n    if (instrumentData.isPool){\\n      pool.calculateInitCurveParamsPool(instrumentData.poolData.saleAmount, \\n        instrumentData.poolData.initPrice, instrumentData.poolData.inceptionPrice, marketManager.getParameters(marketId).sigma); \\n      console.log(\\\"?\\\");\\n\\n      marketManager.newMarket(marketId, pool, longZCB, shortZCB, instrumentData.description, true); \\n      console.log(\\\"??\\\");\\n\\n      // set validators\\n      _validatorSetup(marketId, instrumentData.poolData.saleAmount, instrumentData.isPool);\\n    }\\n    else{\\n      pool.calculateInitCurveParams(instrumentData.principal,\\n          instrumentData.expectedYield, marketManager.getParameters(marketId).sigma); \\n\\n      marketManager.newMarket(marketId, pool, longZCB, shortZCB, instrumentData.description, false);\\n      // set validators\\n      _validatorSetup(marketId, instrumentData.principal, instrumentData.isPool);\\n    }\\n\\n    // add vault proposal \\n    instrumentData.marketId = marketId;\\n    vault.addProposal(instrumentData);\\n\\n    emit MarketInitiated(marketId, recipient);\\n    ad_to_id[recipient] = marketId; //only for testing purposes, one utilizer should be able to create multiple markets\\n  }\\n\\n  /// @notice Resolve function 1\\n  /// @dev Prepare market/instrument for closing, called separately before resolveMarket\\n  /// this is either called automatically from the instrument when conditions are met i.e fully repaid principal + interest\\n  /// or, in the event of a default, by validators who deem the principal recouperation is finished\\n  /// and need to collect remaining funds by redeeming ZCB\\n  function beforeResolve(uint256 marketId) external \\n  //onlyValidator(marketId) \\n  {\\n    require(!marketManager.duringMarketAssessment(marketId) && marketManager.marketActive(marketId), \\\"market conditions not met\\\");\\n    require(resolveCondition(marketId), \\\"not enough validators have voted to resolve\\\");\\n    vaults[id_parent[marketId]].beforeResolve(marketId);\\n  }\\n \\n  /// Resolve function 2\\n  /// @notice main function called at maturity OR premature resolve of instrument(from early default)  \\n  /// @dev validators call this function from market manager\\n  /// any funds left for the instrument, irrespective of whether it is in profit or inloss. \\n  function resolveMarket(\\n    uint256 marketId\\n    ) external onlyValidator(marketId) {\\n    (bool atLoss, uint256 extra_gain, uint256 principal_loss, bool premature) \\n          = vaults[id_parent[marketId]].resolveInstrument(marketId);\\n\\n    marketManager.updateRedemptionPrice(marketId, atLoss, extra_gain, principal_loss, premature);\\n    _updateValidatorStake(marketId, approvalDatas[marketId].approved_principal, principal_loss);\\n    cleanUpDust(marketId);\\n  }\\n\\n  /// @notice When market resolves, should collect remaining liquidity and/or dust from  \\n  /// the pool and send them back to the vault\\n  /// @dev should be called before redeem_transfer is allowed \\n  function cleanUpDust(uint256 marketId) internal {\\n    marketManager.getPool(marketId).flush(getVaultAd(marketId), type(uint256).max); \\n  }\\n\\n  // /// @notice checks for maturity, resolve at maturity\\n  // /// @param marketId: called for anyone.\\n  // function checkInstrument(uint256 marketId) external\\n  // ///onlyKeepers \\n  //  returns (bool) {\\n  //   Vault.InstrumentData memory data = vaults[id_parent[marketId]].fetchInstrumentData( marketId);\\n      \\n  //   require(data.marketId > 0 && data.trusted, \\\"instrument must be active\\\");\\n  //   require(data.maturityDate > 0, \\\"instrument hasn't been approved yet\\\" );\\n\\n  //   if (block.timestamp >= data.maturityDate) {\\n  //       // this.resolveMarket(marketId);\\n  //       this.beforeResolve(marketId);\\n  //       return true;\\n  //   }\\n  //   return false;\\n  // }\\n\\n  /// @notice when market is resolved(maturity/early default), calculates score\\n  /// and update each assessment phase trader's reputation, called by individual traders when redeeming \\n  function updateReputation (\\n    uint256 marketId, \\n    address trader, \\n    bool increment) \\n  external onlyManager {\\n    uint256 implied_probs = marketManager.assessment_probs(marketId, trader);\\n    // int256 scoreToUpdate = increment ? int256(implied_probs.mulDivDown(implied_probs, config.WAD)) //experiment \\n    //                                  : -int256(implied_probs.mulDivDown(implied_probs, config.WAD));\\n    uint256 change = implied_probs.mulDivDown(implied_probs, config.WAD);\\n    \\n    if (increment) {\\n      _incrementScore(trader, change);\\n    } else {\\n      _decrementScore(trader, change);\\n    }\\n  }\\n\\n  /// @notice function that closes the instrument/market before maturity, maybe to realize gains/cut losses fast\\n  /// or debt is prematurely fully repaid, or underlying strategy is deemed dangerous, etc. \\n  /// After, the resolveMarket function should be called in a new block  \\n  /// @dev withdraws all balance from the instrument. \\n  /// If assets in instrument is not in underlying, need all balances to be divested to underlying \\n  /// Ideally this should be called by several validators, maybe implement a voting scheme and have a keeper call it.\\n  /// @param emergency ascribes cases where the instrument should be forcefully liquidated back to the vault\\n  function forceCloseInstrument(uint256 marketId, bool emergency) external returns(bool){\\n    Vault vault = vaults[id_parent[marketId]]; \\n\\n    // Prepare for close \\n    vault.closeInstrument(marketId); \\n\\n    // Harvests/records all profit & losses\\n    vault.beforeResolve(marketId); \\n    return true;\\n  }\\n\\n  /// @notice called by the validator from validatorApprove when market conditions are met\\n  /// need to move the collateral in the wCollateral to \\n  function approveMarket(\\n    uint256 marketId\\n  ) internal {\\n    Vault vault = vaults[id_parent[marketId]]; \\n    SyntheticZCBPool pool = marketManager.getPool(marketId); \\n    \\n    require(marketManager.getCurrentMarketPhase(marketId) == 3,\\\"!marketCondition\\\");\\n    require(vault.instrumentApprovalCondition(marketId), \\\"!instrumentCondition\\\");\\n\\n    bool isPool = marketManager.isInstrumentPool(marketId); \\n    uint256 managerCollateral = marketManager.loggedCollaterals(marketId); \\n\\n    if (isPool) poolApproval(marketId, managerCollateral, vault.fetchInstrumentData( marketId).poolData.leverageFactor); \\n\\n    else {\\n      if (vault.getInstrumentType(marketId) == 0) creditApproval(marketId, pool); \\n\\n      else generalApproval(marketId); \\n    }\\n    // pull from pool to vault, which will be used to fund the instrument\\n    pool.flush(address(vault), managerCollateral); \\n\\n    // Trust and deposit to the instrument contract\\n    vault.trustInstrument(marketId, approvalDatas[marketId], isPool);\\n\\n    // Since funds are transfered from pool to vault, set default liquidity in pool to 0 \\n    pool.resetLiq(); \\n  }\\n\\n  function poolApproval(uint256 marketId, uint256 managerCollateral, uint256 leverageFactor) internal{\\n    require(leverageFactor > 0, \\\"0 LEV_FACTOR\\\"); \\n\\n    approvalDatas[marketId] = ApprovalData(managerCollateral.mulWadDown(leverageFactor), 0 ); \\n  }\\n\\n  /// @notice receives necessary market information. Only applicable for creditlines \\n  /// required for market approval such as max principal, quoted interest rate\\n  function creditApproval(uint256 marketId, SyntheticZCBPool pool) internal{\\n    (uint256 proposed_principal, uint256 proposed_yield) \\n          = vaults[id_parent[marketId]].viewPrincipalAndYield(marketId); \\n\\n    // get max_principal which is (s+1) * total long bought for creditline, or just be\\n    // proposed principal for other instruments \\n    uint256 max_principal = min((marketManager.getParameters(marketId).s + config.WAD)\\n                            .mulWadDown(marketManager.loggedCollaterals(marketId)),\\n                            proposed_principal ); \\n\\n    // Required notional yield amount denominated in underlying  given credit determined by managers\\n    uint256 quoted_interest = min(pool.areaBetweenCurveAndMax(max_principal), proposed_yield ); \\n\\n    approvalDatas[marketId] = ApprovalData(max_principal, quoted_interest); \\n  }\\n\\n  function generalApproval(uint256 marketId) internal {\\n    (uint256 proposed_principal, uint256 proposed_yield) = vaults[id_parent[marketId]].viewPrincipalAndYield(marketId); \\n    approvalDatas[marketId] = ApprovalData(proposed_principal, proposed_yield); \\n  }\\n\\n  /**\\n   @dev called by validator denial of market.\\n   */\\n  function denyMarket(\\n      uint256 marketId\\n  ) external  onlyValidator(marketId) {\\n    vaults[id_parent[marketId]].denyInstrument(marketId);\\n    cleanUpDust(marketId);\\n    marketManager.denyMarket(marketId);\\n  }\\n\\n  /*----Validator Logic----*/\\n  struct ValidatorData {\\n    mapping(address => uint256) sales; // amount of zcb bought per validator\\n    mapping(address => bool) staked; // true if address has staked vt (approved)\\n    mapping(address => bool) resolved; // true if address has voted to resolve the market\\n    address[] validators;\\n    uint256 val_cap;// total zcb validators can buy at a discount\\n    uint256 avg_price; //price the validators can buy zcb at a discount \\n    bool requested; // true if already requested random numbers from array.\\n    uint256 totalSales; // total amount of zcb bought;\\n    uint256 totalStaked; // total amount of vault token staked.\\n    uint256 numApproved;\\n    uint256 initialStake; // amount staked\\n    uint256 finalStake; // amount of stake recoverable post resolve\\n    uint256 numResolved; // number of validators calling resolve on early resolution.\\n  }\\n\\n  mapping(uint256 => uint256) requestToMarketId;\\n  mapping(uint256 => ValidatorData) validator_data;\\n\\n    /// @notice sets the validator cap + valdiator amount \\n  /// param prinicipal is saleAmount for pool based instruments \\n  /// @dev called by controller to setup the validator scheme\\n  function _validatorSetup(\\n    uint256 marketId,\\n    uint256 principal,\\n    bool isPool\\n  ) internal {\\n    require(principal != 0, \\\"0 principal\\\");\\n    _getValidators(marketId);\\n    _setValidatorCap(marketId, principal, isPool);\\n    _setValidatorStake(marketId, principal);\\n  }\\n\\n  function viewValidators(uint256 marketId) view public returns (address[] memory) {\\n    return validator_data[marketId].validators;\\n  }\\n\\n  function getNumApproved(uint256 marketId) view public returns (uint256) {\\n    return validator_data[marketId].numApproved;\\n  }\\n\\n  function getNumResolved(uint256 marketId) view public returns (uint256) {\\n    return validator_data[marketId].numResolved;\\n  }\\n\\n  function getTotalStaked(uint256 marketId) view public returns (uint256) {\\n    return validator_data[marketId].totalStaked;\\n  }\\n\\n  function getInitialStake(uint256 marketId) view public returns (uint256) {\\n    return validator_data[marketId].initialStake;\\n  }\\n\\n  function getFinalStake(uint256 marketId) view public returns (uint256) {\\n    return validator_data[marketId].finalStake;\\n  }\\n\\n  /**\\n   @notice randomly choose validators for market approval, async operation => fulfillRandomness is the callback function.\\n   @dev for now called on market initialization\\n   */\\n  function _getValidators(uint256 marketId) public {\\n    // retrieve traders that meet requirement.\\n    // address instrument = market_data[marketId].instrument_address;\\n    address utilizer = market_data[marketId].utilizer;\\n    (uint256 N,,,,,uint256 r,,) = marketManager.parameters(marketId);\\n    address[] memory selected = _filterTraders(r, utilizer);\\n\\n    // if there are not enough traders, set validators to all selected traders.\\n    if (selected.length <= N) {\\n      validator_data[marketId].validators = selected;\\n      if (selected.length < N) marketManager.setN(marketId, selected.length);\\n      return;\\n    }\\n\\n    validator_data[marketId].requested = true;\\n\\n    uint256 _requestId = 1;\\n    // uint256 _requestId = COORDINATOR.requestRandomWords(\\n    //   keyHash,\\n    //   subscriptionId,\\n    //   requestConfirmations,\\n    //   callbackGasLimit,\\n    //   uint32(parameters[marketId].N)\\n    // );\\n\\n    requestToMarketId[_requestId] = marketId;\\n  }\\n\\n    /**\\n   @notice chainlink callback function, sets validators.\\n   @dev TODO => can be called by anyone?\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) \\n  public //internal  \\n  //override \\n  {\\n    uint256 marketId = requestToMarketId[requestId];\\n    (uint256 N,,,,,uint256 r,,) = marketManager.parameters(marketId);\\n    assert(randomWords.length == N);\\n\\n    // address instrument = market_data[marketId].instrument_address;\\n    address utilizer = market_data[marketId].utilizer;\\n\\n    address[] memory temp = _filterTraders(r, utilizer);\\n    uint256 length = temp.length;\\n    \\n    // get validators\\n    for (uint8 i=0; i<N; i++) {\\n      uint256 j = _weightedRetrieve(temp, length, randomWords[i]);\\n      validator_data[marketId].validators.push(temp[j]);\\n      temp[j] = temp[length - 1];\\n      length--;\\n    }\\n  }\\n\\n  function _weightedRetrieve(address[] memory group, uint256 length, uint256 randomWord) view internal returns (uint256) {\\n    uint256 sum_weights;\\n\\n    for (uint8 i=0; i<length; i++) {\\n      sum_weights += trader_scores[group[i]];//repToken.getReputationScore(group[i]);\\n    }\\n\\n    uint256 tmp = randomWord % sum_weights;\\n\\n    for (uint8 i=0; i<length; i++) {\\n      uint256 wt = trader_scores[group[i]];\\n      if (tmp < wt) {\\n        return i;\\n      }\\n      unchecked {\\n        tmp -= wt;\\n      }\\n      \\n    }\\n    console.log(\\\"should never be here\\\");\\n  }\\n\\n    /// @notice allows validators to buy at a discount + automatically stake a percentage of the principal\\n  /// They can only buy a fixed amount of ZCB, usually a at lot larger amount \\n  /// @dev get val_cap, the total amount of zcb for sale and each validators should buy \\n  /// val_cap/num validators zcb \\n  /// They also need to hold the corresponding vault, so they are incentivized to assess at a systemic level and avoid highly \\n  /// correlated instruments triggers controller.approveMarket\\n  function validatorApprove(\\n    uint256 marketId\\n  ) external returns(uint256) {\\n    require(isValidator(marketId, msg.sender), \\\"not a validator for the market\\\");\\n    require(marketManager.duringMarketAssessment(marketId), \\\"already approved\\\");\\n    require(marketManager.marketCondition(marketId), \\\"market condition not met\\\");\\n\\n    ValidatorData storage valdata = validator_data[marketId]; \\n    require(!valdata.staked[msg.sender], \\\"caller already staked for this market\\\");\\n\\n    // staking logic, TODO optional since will throw error on transfer.\\n   // require(ERC20(getVaultAd(marketId)).balanceOf(msg.sender) >= valdata.initialStake, \\\"not enough tokens to stake\\\");\\n    \\n    // staked vault tokens go to controller\\n    ERC20(getVaultAd(marketId)).safeTransferFrom(msg.sender, address(this), valdata.initialStake);\\n\\n    valdata.totalStaked += valdata.initialStake;\\n    valdata.staked[msg.sender] = true;\\n\\n    (uint256 N,,,,,,,) = marketManager.parameters(marketId);\\n    uint256 zcb_for_sale = valdata.val_cap/N; \\n    uint256 collateral_required = zcb_for_sale.mulWadDown(valdata.avg_price); \\n\\n    require(valdata.sales[msg.sender] <= zcb_for_sale, \\\"already approved\\\");\\n\\n    valdata.sales[msg.sender] += zcb_for_sale;\\n    valdata.totalSales += (zcb_for_sale +1);  //since division rounds down ??\\n    valdata.numApproved += 1;\\n\\n    // marketManager actions on validatorApprove, transfers collateral to marketManager.\\n    marketManager.validatorApprove(marketId, collateral_required, zcb_for_sale, msg.sender);\\n\\n    // Last validator pays more gas, is fair because earlier validators are more uncertain \\n    if (approvalCondition(marketId)) {\\n      approveMarket(marketId);\\n      marketManager.approveMarket(marketId); // For market to go to a post assessment stage there always needs to be a lower bound set\\n    }\\n\\n    return collateral_required;\\n  }\\n\\n  /**\\n   @notice conditions for approval => validator zcb stake fulfilled + validators have all approved\\n   */\\n  function approvalCondition(uint256 marketId ) public view returns(bool){\\n    return (validator_data[marketId].totalSales >= validator_data[marketId].val_cap \\n    && validator_data[marketId].validators.length == validator_data[marketId].numApproved);\\n  }\\n\\n  /**\\n   @notice returns true if user is validator for corresponding market\\n   */\\n  function isValidator(uint256 marketId, address user) view public returns(bool){\\n    address[] storage _validators = validator_data[marketId].validators;\\n    for (uint i = 0; i < _validators.length; i++) {\\n      if (_validators[i] == user) {\\n        return true;\\n      }\\n    }\\n    return false;\\n  }\\n\\n  /**\\n   @notice condition for resolving market, met when all the validators chosen for the market\\n   have voted to resolve.\\n   */\\n  function resolveCondition(\\n    uint256 marketId\\n  ) public view returns (bool) {\\n    return (validator_data[marketId].numResolved == validator_data[marketId].validators.length);\\n  }\\n\\n  /**\\n   @notice updates the validator stake, burned in proportion to loss.\\n   principal and principal loss are in the underlying asset of the vault => must be converted to vault shares.\\n   @dev called by resolveMarket\\n   */\\n  function _updateValidatorStake (\\n    uint256 marketId, \\n    uint256 principal, \\n    uint256 principal_loss\\n  ) \\n    internal\\n  {\\n    if (principal_loss == 0) {\\n      validator_data[marketId].finalStake = validator_data[marketId].initialStake;\\n      return;\\n    }\\n\\n    ERC4626 vault = ERC4626(vaults[id_parent[marketId]]);\\n    uint256 p_shares = vault.convertToShares(principal);\\n    uint256 p_loss_shares = vault.convertToShares(principal_loss);\\n\\n    uint256 totalStaked = validator_data[marketId].totalStaked;\\n    uint256 newTotal = totalStaked/2 + (p_shares - p_loss_shares).divWadDown(p_shares).mulWadDown(totalStaked/2);\\n\\n    ERC4626(getVaultAd(marketId)).burn(totalStaked - newTotal);\\n    validator_data[marketId].totalStaked = newTotal;\\n\\n    validator_data[marketId].finalStake = newTotal/validator_data[marketId].validators.length;\\n  }\\n\\n    /**\\n   @notice called by validators to approve resolving the market, after approval.\\n   */\\n  function validatorResolve(\\n    uint256 marketId\\n  ) external {\\n    require(isValidator(marketId, msg.sender), \\\"must be validator to resolve the function\\\");\\n    require(marketManager.marketActive(marketId), \\\"market not active\\\");\\n    require(!marketManager.duringMarketAssessment(marketId), \\\"market during assessment\\\");\\n    require(!validator_data[marketId].resolved[msg.sender], \\\"validator already voted to resolve\\\");\\n\\n    validator_data[marketId].resolved[msg.sender] = true;\\n    validator_data[marketId].numResolved ++;\\n  }\\n\\n  /**\\n   @notice called by validators when the market is resolved or denied to retrieve their stake.\\n   */\\n  function unlockValidatorStake(uint256 marketId) external {\\n    require(isValidator(marketId, msg.sender), \\\"not a validator\\\");\\n    require(validator_data[marketId].staked[msg.sender], \\\"no stake\\\");\\n    require(!marketManager.marketActive(marketId), \\\"market not alive\\\");\\n    require(marketManager.marketResolved(marketId), \\\"market not resolved\\\");\\n\\n    // market early denial, no loss.\\n    ERC4626 vault = ERC4626(vaults[id_parent[marketId]]);\\n    if (marketManager.duringMarketAssessment(marketId)) {\\n      ERC20(getVaultAd(marketId)).safeTransfer(msg.sender, validator_data[marketId].initialStake);\\n      validator_data[marketId].totalStaked -= validator_data[marketId].initialStake;\\n    } else { // market resolved.\\n      ERC20(getVaultAd(marketId)).safeTransfer(msg.sender, validator_data[marketId].finalStake);\\n      validator_data[marketId].totalStaked -= validator_data[marketId].finalStake;\\n    }\\n\\n    validator_data[marketId].staked[msg.sender] = false;\\n  }\\n\\n  /// @notice called when market initialized, calculates the average price and quantities of zcb\\n  /// validators will buy at a discount when approving\\n  /// valcap = sigma * princpal.\\n  function _setValidatorCap(\\n    uint256 marketId,\\n    uint256 principal,\\n    bool isPool //??\\n  ) internal {\\n    SyntheticZCBPool bondingPool = marketManager.getBondPool(marketId);\\n    (,uint256 sigma,,,,,,) = marketManager.parameters(marketId);\\n    require(config.isInWad(sigma) && config.isInWad(principal), \\\"paramERR\\\");\\n    ValidatorData storage valdata = validator_data[marketId]; \\n\\n    uint256 valColCap = (sigma.mulWadDown(principal)); \\n\\n    // Get how much ZCB validators need to buy in total, which needs to be filled for the market to be approved \\n    uint256 discount_cap = bondingPool.discount_cap();\\n    uint256 avgPrice = valColCap.divWadDown(discount_cap);\\n\\n    valdata.val_cap = discount_cap;\\n    valdata.avg_price = avgPrice; \\n  }\\n\\n  /**\\n   @notice sets the amount of vt staked by a single validator for a specific market\\n   @dev steak should be between 1-0 wad.\\n   */\\n  function _setValidatorStake(uint256 marketId, uint256 principal) internal {\\n    //get vault\\n    ERC4626 vault = ERC4626(vaults[id_parent[marketId]]);\\n    uint256 shares = vault.convertToShares(principal);\\n    (,,,,,,,uint256 steak) = marketManager.parameters(marketId);\\n    validator_data[marketId].initialStake = steak.mulWadDown(shares);\\n  }\\n\\n  function hasApproved(uint256 marketId, address validator) view public returns (bool) {\\n    return validator_data[marketId].staked[validator];\\n  }\\n\\n  /**\\n   @notice called by marketManager.redeemDeniedMarket, redeems the discounted ZCB\\n   */\\n  function deniedValidator(uint256 marketId, address validator) onlyManager external returns (uint256 collateral_amount) {\\n    //??? is this correct\\n    collateral_amount = validator_data[marketId].sales[validator].mulWadDown(validator_data[marketId].avg_price);\\n    delete validator_data[marketId].sales[validator];\\n  }\\n\\n  function redeemValidator(uint256 marketId, address validator) onlyManager external {\\n    delete validator_data[marketId].sales[validator]; \\n  }\\n\\n  function getValidatorRequiredCollateral(uint256 marketId) public view returns(uint256){\\n    uint256 val_cap =  validator_data[marketId].val_cap;\\n    (uint256 N,,,,,,,) = marketManager.parameters(marketId);\\n    uint256 zcb_for_sale = val_cap/N; \\n    return zcb_for_sale.mulWadDown(validator_data[marketId].avg_price); \\n  }\\n  /*----Reputation Logic----*/\\n  mapping(address=>uint256) public trader_scores; // trader address => score\\n  mapping(address=>bool) public isRated;\\n  address[] public traders;\\n\\n  /**\\n   @notice calculates whether a trader meets the requirements to trade during the reputation assessment phase.\\n   @param percentile: 0-100 w/ WAD.\\n   */\\n  function isReputable(address trader, uint256 percentile) view external returns (bool) {\\n    uint256 k = _findTrader(trader);\\n    uint256 n = (traders.length - (k+1))*config.WAD;\\n    uint256 N = traders.length*config.WAD;\\n    uint256 p = uint256(n).divWadDown(N)*10**2;\\n\\n    if (p >= percentile) {\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   @notice finds the first trader within the percentile\\n   @param percentile: 0-100 WAD\\n   @dev returns 0 on no minimum threshold\\n   */\\n  function calculateMinScore(uint256 percentile) view external returns (uint256) {\\n    uint256 l = traders.length * config.WAD;\\n    if (percentile / 1e2 == 0) {\\n      return 0;\\n    }\\n    uint256 x = l.mulWadDown(percentile / 1e2);\\n    x /= config.WAD;\\n    return trader_scores[traders[x - 1]];\\n  }\\n\\n  function setTraderScore(address trader, uint256 score) external {\\n    uint256 prev_score = trader_scores[trader];\\n    if (score > prev_score) {\\n      _incrementScore(trader, score - prev_score);\\n    } else if (score < prev_score) {\\n      _decrementScore(trader, prev_score - score);\\n    }\\n  }\\n\\n  /**\\n   @dev percentile is is wad 0-100\\n   @notice returns a list of top X percentile traders excluding the utilizer. \\n   */\\n  function _filterTraders(uint256 percentile, address utilizer) view public returns (address[] memory) {\\n    uint256 l = traders.length * config.WAD;\\n    \\n    // if below minimum percentile, return all traders excluding the utilizer\\n    if (percentile / 1e2 == 0) {\\n      console.log(\\\"here\\\");\\n      if (isRated[utilizer]) {\\n        address[] memory result = new address[](traders.length - 1);\\n\\n        uint256 j = 0;\\n        for (uint256 i=0; i<traders.length; i++) {\\n          if (utilizer == traders[i]) {\\n            j = 1;\\n            continue;\\n          }\\n          result[i - j] = traders[i];\\n        }\\n        return result;\\n      } else {\\n        return traders;\\n      }\\n    }\\n\\n    uint256 x = l.mulWadDown((config.WAD*100 - percentile) / 1e2);\\n    x /= config.WAD;\\n\\n    address[] memory selected; \\n    if (utilizer == address(0) || !isRated[utilizer]) {\\n      selected = new address[](x);\\n      for (uint256 i=0; i<x; i++) {\\n        selected[i] = traders[i];\\n      }\\n    } else {\\n      selected = new address[](x - 1);\\n      uint256 j=0;\\n      for (uint256 i = 0; i<x; i++) {\\n        if (traders[i] == utilizer) {\\n          j = 1;\\n          continue;\\n        }\\n        selected[i - j] = traders[i];\\n      }\\n    }\\n\\n    return selected;\\n  }\\n\\n  /**\\n   @notice retrieves all rated traders\\n   */\\n  function getTraders() public returns (address[] memory) {\\n    return traders;\\n  }\\n\\n  /**\\n   @notice increments trader's score\\n   @dev score >= 0, update > 0\\n   */\\n  function _incrementScore(address trader, uint256 update) public {\\n    trader_scores[trader] += update;\\n    _updateRanking(trader, true);\\n  }\\n\\n  /**\\n   @notice decrements trader's score\\n   @dev score >= 0, update > 0\\n   */\\n  function _decrementScore(address trader, uint256 update) public {\\n    if (update >= trader_scores[trader]) {\\n      trader_scores[trader] = 0;\\n    } else {\\n      trader_scores[trader] -= update;\\n    }\\n    _updateRanking(trader, false);\\n  }\\n\\n  /**\\n   @notice updates top trader array\\n   */\\n  function _updateRanking(address trader, bool increase) internal {\\n    uint256 score = trader_scores[trader];\\n\\n    if (!isRated[trader]) {\\n      isRated[trader] = true;\\n      if (traders.length == 0) {\\n        traders.push(trader);\\n        return;\\n      }\\n      for (uint256 i=0; i<traders.length; i++) {\\n        if (score > trader_scores[traders[i]]) {\\n          traders.push(address(0));\\n          _shiftRight(i, traders.length-1);\\n          traders[i] = trader;\\n          return;\\n        }\\n        if (i == traders.length - 1) {\\n          traders.push(trader);\\n          return;\\n        }\\n      }\\n    } else {\\n      uint256 k = _findTrader(trader);\\n      //swap places with someone.\\n      if ((k == 0 && increase)\\n      || (k == traders.length - 1 && !increase)) {\\n        return;\\n      }\\n\\n      if (increase) {\\n        for (uint256 i=0; i<k; i++) {\\n          if (score > trader_scores[traders[i]]) {\\n            _shiftRight(i,k);\\n            traders[i] = trader;\\n            return;\\n          }\\n        }\\n      } else {\\n        for (uint256 i=traders.length - 1; i>k; i--) {\\n          if (score < trader_scores[traders[i]]) {\\n            _shiftLeft(k, i);\\n            traders[i] = trader;\\n            return;\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  function _findTrader(address trader) internal view returns (uint256) {\\n    for (uint256 i=0; i<traders.length; i++) {\\n      if (trader == traders[i]) {\\n        return i;\\n      }\\n    }\\n  }\\n\\n  /**\\n   @notice \\n   */\\n  function _shiftRight(uint256 pos, uint256 end) internal {\\n    for (uint256 i=end; i>pos; i--) {\\n      traders[i] = traders[i-1];\\n    }\\n  }\\n\\n  function _shiftLeft(uint256 pos, uint256 end) internal {\\n    for (uint256 i=pos; i<end; i++) {\\n      traders[i] = traders[i+1];\\n    }\\n  }\\n\\n  function pullLeverage(uint256 marketId, uint256 amount) external onlyManager{\\n    getVault(marketId).trusted_transfer(amount, address(marketManager)); \\n  }\\n\\n  function getMarketId(address recipient) public view returns(uint256){\\n    return ad_to_id[recipient];\\n  }\\n\\n  function getVault(uint256 marketId) public view returns(Vault){\\n    return vaults[id_parent[marketId]]; \\n  }\\n\\n  function getVaultAd(uint256 marketId) public view returns(address){\\n    return address(vaults[id_parent[marketId]]); \\n  }\\n\\n  function isVerified(address addr)  public view returns (bool) {\\n    return verified[addr];\\n  }\\n\\n  function getVaultfromId(uint256 vaultId) public view returns(address){\\n    return address(vaults[vaultId]); \\n  }\\n\\n  function marketId_to_vaultId(uint256 marketId) public view returns(uint256){\\n    return id_parent[marketId]; \\n  }\\n\\n  function marketIdToVaultId(uint256 marketId) public view returns(uint256){\\n    return id_parent[marketId]; \\n  }\\n  function getMarketIds(uint256 vaultId) public view returns (uint256[] memory) {\\n    return vault_to_marketIds[vaultId];\\n  }\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n      return a >= b ? a : b;\\n  }\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n      return a <= b ? a : b;\\n  }\\n}\\n\\n\",\"keccak256\":\"0x3b6e0b09bb8367637799343bd438c41f1ff9ae657d8c5355ca35d7673b0274b9\"},\"contracts/protocol/factories.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {Vault} from \\\"../vaults/vault.sol\\\";\\nimport {MarketManager} from \\\"./marketmanager.sol\\\";\\nimport {Controller} from \\\"./controller.sol\\\";\\n\\n\\n/// @notice Anyone can create a vault. These can be users who  \\n/// a) want exposure to specific instrument types(vault that focuses on uncollateralized RWA loans)\\n/// b) are DAOs that want risk assessment/structuring for their treasuries that need management.(i.e almost all stablecoin issuers)\\n/// c) a vault for any long-tailed assets \\n/// d) managers who wants leverage for yield opportunities on a specific asset \\n/// e) uncollateralized lending platforms that wants to delegate the risk underwriting \\n/// etc\\n/// They need to specify \\n/// 1. Vault mint conditions-> such as verified LPs(managers) only, \\n/// 2. default parameters of the market(like alpha, which determines level of risk&profit separation between vault/managers)\\n/// 3. Vault underlying \\n/// @dev only need a vault factory since marketId can be global, and all marketId will have a vaultId as it's parent\\n\\ncontract VaultFactory{\\n\\n  address owner; \\n  mapping(address=>bool) private _isVault; \\n\\n  uint256 public numVaults; \\n  Controller controller; \\n\\n  constructor(address _controller){\\n    owner = msg.sender; \\n    controller = Controller(_controller);\\n  }\\n\\n  function isVault(address v) external view returns(bool){\\n    return _isVault[v]; \\n  }\\n\\n  modifier onlyController(){\\n      require(address(controller) == msg.sender || msg.sender == owner || msg.sender == address(this), \\\"is not controller\\\"); \\n      _;\\n  }\\n\\n  /**\\n   @notice creates vault\\n   @param underlying: underlying asset for vault\\n   @param _controller: protocol controller\\n   @param _onlyVerified: only verified users can mint shares\\n   @param _r: minimum reputation score to mint shares\\n   @param _asset_limit: max number of shares for a single address\\n   @param _total_asset_limit: max number of shares for entire vault\\n   @param default_params: default params for markets created by vault\\n   */\\n  function newVault(\\n    address underlying, \\n    address _controller,\\n    bool _onlyVerified, \\n    uint256 _r, \\n    uint256 _asset_limit,\\n    uint256 _total_asset_limit,\\n    MarketManager.MarketParameters memory default_params\\n  ) external onlyController returns(Vault, uint256) {\\n    require(default_params.alpha >= 1e16, \\\"Alpha too small\\\"); \\n    \\n    Vault vault = new Vault(\\n      underlying,\\n       _controller, \\n       owner, \\n       //Params \\n       _onlyVerified,  _r, _asset_limit, _total_asset_limit,\\n       default_params \\n\\n       ); \\n    _isVault[address(vault)] = true; \\n    numVaults++; \\n\\n    return (vault, numVaults); \\n    // vaultId is numVaults after new creation of the vault.\\n\\n  }\\n}\",\"keccak256\":\"0xb2a4a70361bc856444096dbc2ff050b9749eb8518db1648bca1f6d8f8e5b6ea6\"},\"contracts/protocol/marketmanager.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"./reputationtoken.sol\\\"; \\nimport {Controller} from \\\"./controller.sol\\\";\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {SafeTransferLib} from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"../chainlink/VRFConsumerBaseV2.sol\\\";\\nimport {VRFCoordinatorV2Interface} from \\\"../chainlink/VRFCoordinatorV2Interface.sol\\\";\\nimport {config} from \\\"../utils/helpers.sol\\\";\\nimport {SyntheticZCBPool} from \\\"../bonds/synthetic.sol\\\"; \\nimport {ERC4626} from \\\"../vaults/mixins/ERC4626.sol\\\";\\nimport {Vault} from \\\"../vaults/vault.sol\\\"; \\n\\ncontract MarketManager \\n // VRFConsumerBaseV2 \\n {\\n  using FixedPointMathLib for uint256;\\n  using SafeTransferLib for ERC20;\\n\\n  // Chainlink state variables\\n  VRFCoordinatorV2Interface COORDINATOR;\\n  uint64 private immutable subscriptionId;\\n  bytes32 private keyHash;\\n  uint32 private callbackGasLimit = 100000;\\n  uint16 private requestConfirmations = 3;\\n  uint256 total_validator_bought; // should be a mapping no?\\n  bool private _mutex;\\n\\n  // ReputationNFT repToken;\\n  Controller controller;\\n  CoreMarketData[] public markets;\\n  address public owner; \\n\\n  // mapping(uint256 => uint256) requestToMarketId; // chainlink request id to marketId\\n  // mapping(uint256 => ValidatorData) validator_data;\\n  mapping(uint256=>uint256) private redemption_prices; //redemption price for each market, set when market resolves \\n  mapping(uint256=>mapping(address=>uint256)) private assessment_prices; \\n  mapping(uint256=>mapping(address=>bool)) private assessment_trader;\\n  mapping(uint256=>mapping(address=>uint256) ) public assessment_probs; \\n  mapping(uint256=> MarketPhaseData) public restriction_data; // market ID => restriction data\\n  mapping(uint256=> MarketParameters) public parameters; //marketId-> params\\n  mapping(uint256=> mapping(address=>bool)) private redeemed; \\n  mapping(uint256=> mapping(address=>uint256)) public longTrades; \\n  mapping(uint256=> mapping(address=>uint256)) public shortTrades;\\n  mapping(uint256=> uint256) public loggedCollaterals;\\n\\n  struct CoreMarketData {\\n    SyntheticZCBPool bondPool; \\n    ERC20 longZCB;\\n    ERC20 shortZCB; \\n    string description; // instrument description\\n    uint256 creationTimestamp;\\n    uint256 resolutionTimestamp;\\n    bool isPool; \\n  }\\n\\n  struct MarketPhaseData {\\n    bool duringAssessment;\\n    bool onlyReputable;\\n    bool resolved;\\n    bool alive;\\n    bool atLoss;\\n    // uint256 min_rep_score;\\n    uint256 base_budget;\\n  }\\n\\n  // struct ValidatorData{\\n  //   mapping(address => uint256) sales; // amount of zcb bought per validator\\n  //   mapping(address => bool) staked; // true if address has staked vt (approved)\\n  //   mapping(address => bool) resolved; // true if address has voted to resolve the market\\n  //   address[] validators;\\n  //   uint256 val_cap;// total zcb validators can buy at a discount\\n  //   uint256 avg_price; //price the validators can buy zcb at a discount \\n  //   bool requested; // true if already requested random numbers from array.\\n  //   uint256 totalSales; // total amount of zcb bought;\\n  //   uint256 totalStaked; // total amount of vault token staked.\\n  //   uint256 numApproved;\\n  //   uint256 initialStake; // amount staked\\n  //   uint256 finalStake; // amount of stake recoverable post resolve\\n  //   uint256 unlockTimestamp; // creation timestamp + duration.\\n  //   uint256 numResolved; // number of validators calling resolve on early resolution.\\n  // }\\n\\n  /// @param N: upper bound on number of validators chosen.\\n  /// @param sigma: validators' stake\\n  /// @param alpha: minimum managers' stake\\n  /// @param omega: high reputation's stake \\n  /// @param delta: Upper and lower bound for price which is added/subtracted from alpha \\n  /// @param r: reputation percentile for reputation constraint phase\\n  /// @param s: senior coefficient; how much senior capital the managers can attract at approval \\n  /// @param steak: steak*approved_principal is the staking amount.\\n  /// param beta: how much volatility managers are absorbing \\n  /// param leverage: how much leverage managers can apply \\n  /// param base_budget: higher base_budget means lower decentralization, \\n  /// @dev omega always <= alpha\\n  struct MarketParameters{\\n    uint256 N;\\n    uint256 sigma; \\n    uint256 alpha; \\n    uint256 omega;\\n    uint256 delta; \\n    uint256 r;\\n    uint256 s;\\n    uint256 steak;\\n  }\\n\\n  modifier onlyController(){\\n    require(address(controller) == msg.sender || msg.sender == owner || msg.sender == address(this), \\\"is not controller\\\"); \\n    _;\\n  }\\n\\n  modifier onlyControllerOwnerInternal(){\\n    require(address(controller) == msg.sender || msg.sender == owner || msg.sender == address(this), \\\"is not controller\\\"); \\n    _;\\n  }\\n\\n  modifier _lock_() {\\n    require(!_mutex, \\\"ERR_REENTRY\\\");\\n    _mutex = true;\\n    _;\\n    _mutex = false;\\n  }\\n\\n  constructor(\\n    address _creator_address,\\n    address _controllerAddress,\\n    address _vrfCoordinator, // 0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed\\n    bytes32 _keyHash, // 0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f\\n    uint64 _subscriptionId // 1713, \\n  ) \\n    //VRFConsumerBaseV2(0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed) \\n  {\\n    controller = Controller(_controllerAddress);\\n    keyHash = bytes32(0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f);\\n    subscriptionId = 1713;\\n    COORDINATOR = VRFCoordinatorV2Interface(0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed);\\n    \\n    // push empty market\\n    markets.push(\\n      makeEmptyMarketData()\\n    );\\n\\n    owner = msg.sender; \\n  }\\n\\n  function makeEmptyMarketData() public pure returns (CoreMarketData memory) {\\n    return CoreMarketData(\\n        SyntheticZCBPool(address(0)),\\n        ERC20(address(0)),\\n        ERC20(address(0)),\\n        \\\"\\\",\\n        0,\\n        0, \\n        false\\n      );\\n  }    \\n\\n  function marketCount() public view returns (uint256) {\\n    return markets.length;\\n  }\\n\\n  function getMarket(uint256 _id) public view returns (CoreMarketData memory) {\\n    if (_id >= markets.length) {\\n        return makeEmptyMarketData();\\n    } else {\\n        return markets[_id];\\n    }\\n  }\\n\\n  /// @notice parameters have to be set prior \\n  function newMarket(\\n    uint256 marketId,\\n    SyntheticZCBPool bondPool,  \\n    address _longZCB, \\n    address _shortZCB, \\n    string calldata _description, \\n    // uint256 _duration, \\n    bool isPool\\n    ) external onlyController {\\n    uint256 creationTimestamp = block.timestamp;\\n\\n    markets.push(CoreMarketData(\\n      bondPool, \\n      ERC20(_longZCB),\\n      ERC20(_shortZCB),  \\n      _description,\\n      creationTimestamp,\\n      0, //TODO resolution timestamp, \\n      isPool \\n    ));\\n\\n    uint256 base_budget = 1000 * config.WAD; //TODO \\n    setMarketPhase(marketId, true, true, base_budget);\\n\\n   // _validatorSetup(marketId, principal, creationTimestamp, _duration, isPool);\\n  }\\n\\n\\n  /*----Phase Functions----*/\\n\\n  /// @notice list of parameters in this system for each market, should vary for each instrument \\n  /// @dev calculates market driven s from utilization rate. If u-r high,  then s should be low, as 1) it disincentivizes \\n  /// managers to approving as more proportion of the profit goes to the LP, and 2) disincentivizes the borrower \\n  /// to borrow as it lowers approved principal and increases interest rate \\n  function setParameters(\\n    MarketParameters memory param,\\n    uint256 utilizationRate,\\n    uint256 marketId \\n    ) public onlyControllerOwnerInternal{\\n    parameters[marketId] = param; \\n    parameters[marketId].s = param.s.mulWadDown(config.WAD - utilizationRate); // experiment\\n  }\\n\\n  /**\\n   @dev in the event that the number of traders in X percentile is less than the specified number of validators\\n   parameter N is changed to reflect this\\n   */\\n  function setN(uint256 marketId, uint256 _N) public onlyController {\\n    parameters[marketId].N = _N;\\n  }\\n\\n  /// @notice sets market phase data\\n  /// @dev called on market initialization by controller\\n  /// @param base_budget: base budget (amount of vault tokens to spend) as a market manager during the assessment stage\\n  function setMarketPhase(\\n    uint256 marketId, \\n    bool duringAssessment,\\n    bool _onlyReputable,\\n    uint256 base_budget\\n    ) public onlyControllerOwnerInternal{\\n    MarketPhaseData storage data = restriction_data[marketId]; \\n    data.onlyReputable = _onlyReputable; \\n    data.duringAssessment = duringAssessment;\\n    // data.min_rep_score = calcMinRepScore(marketId);\\n    data.base_budget = base_budget;\\n    data.alive = true;\\n  }\\n\\n  /// @notice used to transition from reputationphases \\n  function setReputationPhase(\\n    uint256 marketId,\\n    bool _onlyReputable\\n  ) public onlyControllerOwnerInternal {\\n    require(restriction_data[marketId].alive, \\\"market must be alive\\\");\\n    restriction_data[marketId].onlyReputable = _onlyReputable;\\n  }\\n\\n  /// @notice Called when market should end, a) when denied b) when maturity \\n  /// @param resolve is true when instrument does not resolve prematurely\\n  function deactivateMarket(\\n    uint256 marketId, \\n    bool atLoss, \\n    bool resolve) public onlyControllerOwnerInternal{\\n    restriction_data[marketId].resolved = resolve; \\n    restriction_data[marketId].atLoss = atLoss; \\n    restriction_data[marketId].alive = false;\\n  } \\n\\n  /// @notice called by validator only\\n  function denyMarket(\\n    uint256 marketId\\n  ) external onlyController {\\n    //TODO should validators be able to deny even though they've approved.\\n    require(marketActive(marketId), \\\"Market Not Active\\\"); \\n    require(restriction_data[marketId].duringAssessment, \\\"Not in assessment\\\");\\n    MarketPhaseData storage data = restriction_data[marketId]; \\n    data.alive = false;\\n    data.resolved = true;\\n  }\\n\\n  /// @notice main approval function called by controller\\n  /// @dev if market is alive and market is not during assessment, it is approved. \\n  function approveMarket(uint256 marketId) onlyController external {\\n    require(restriction_data[marketId].alive, \\\"phaseERR\\\");\\n    restriction_data[marketId].duringAssessment = false;    \\n  }\\n\\n  function getPhaseData(\\n    uint256 marketId\\n  ) public view returns (MarketPhaseData memory)  {\\n    return restriction_data[marketId];\\n  }\\n  \\n  function isInstrumentPool(uint256 marketId) external view returns(bool){\\n    return markets[marketId].isPool; \\n  }\\n  \\n  /// @dev verification of trader initializes reputation score at 0, to gain reputation need to participate in markets.\\n  function isVerified(address trader) public view returns(bool){\\n    return (controller.isVerified(trader) || trader == owner);\\n  }\\n\\n  function isReputable(address trader, uint256 marketId) public view returns(bool){\\n    // return (restriction_data[marketId].min_rep_score <= controller.trader_scores(trader) || trader == owner); \\n    return (controller.isReputable(trader, parameters[marketId].r)) || trader == owner;\\n  }\\n\\n  function duringMarketAssessment(uint256 marketId) public view returns(bool){\\n    return restriction_data[marketId].duringAssessment; \\n  }\\n\\n  function onlyReputable(uint256 marketId) public view returns(bool){\\n    return restriction_data[marketId].onlyReputable; \\n  }\\n\\n  function isMarketApproved(uint256 marketId) public view returns(bool){\\n    return(!restriction_data[marketId].duringAssessment && restriction_data[marketId].alive);  \\n  }\\n\\n  function marketActive(uint256 marketId) public view returns(bool){\\n    return restriction_data[marketId].alive; \\n  }\\n\\n  function marketResolved(uint256 marketId) public view returns (bool) {\\n    return restriction_data[marketId].resolved;\\n  }\\n\\n  /// @notice returns true if amount bought is greater than the insurance threshold\\n  function marketCondition(uint256 marketId) public view returns(bool){\\n    if (markets[marketId].isPool){\\n      return (loggedCollaterals[marketId] >=\\n         controller.getVault(marketId).fetchInstrumentData(marketId).poolData.saleAmount); \\n    }\\n    else{\\n      uint256 principal = controller.getVault(marketId).fetchInstrumentData(marketId).principal;\\n      return (loggedCollaterals[marketId] >= principal.mulWadDown(parameters[marketId].alpha));\\n    }\\n  }\\n\\n  /// @notice returns whether current market is in phase \\n  /// 1: onlyReputable, which also means market is in assessment\\n  /// 2: not onlyReputable but in asseessment \\n  /// 3: in assessment but canbeapproved \\n  /// 4: post assessment(accepted or denied), amortized liquidity \\n  function getCurrentMarketPhase(uint256 marketId) public view returns(uint256){\\n    if (onlyReputable(marketId)){\\n      assert(!marketCondition(marketId) && !isMarketApproved(marketId) && duringMarketAssessment(marketId) ); \\n      return 1; \\n    }\\n\\n    else if (duringMarketAssessment(marketId) && !onlyReputable(marketId)){\\n      assert(!isMarketApproved(marketId)); \\n      if (marketCondition(marketId)) return 3; \\n      return 2; \\n    }\\n\\n    else if (isMarketApproved( marketId)){\\n      assert (!duringMarketAssessment(marketId) && marketCondition(marketId)); \\n      return 4; \\n    }\\n  }\\n\\n  /// @notice get trade budget = f(reputation), returns in collateral_dec\\n  /// sqrt for now\\n  function getTraderBudget(uint256 marketId, address trader) public view returns(uint256){\\n    //uint256 repscore = repToken.getReputationScore(trader); \\n    uint256 repscore = controller.trader_scores(trader);\\n    \\n    if (repscore==0) return 0; \\n\\n    return restriction_data[marketId].base_budget + (repscore*config.WAD).sqrt();\\n  }\\n  \\n  /// @notice computes the price for ZCB one needs to short at to completely\\n  /// hedge for the case of maximal loss, function of principal and interest\\n  function getHedgePrice(uint256 marketId) public view returns(uint256){\\n    uint256 principal = controller.getVault(marketId).fetchInstrumentData(marketId).principal; \\n    uint256 yield = controller.getVault(marketId).fetchInstrumentData(marketId).expectedYield; \\n    uint256 den = principal.mulWadDown(config.WAD - parameters[marketId].alpha); \\n    return config.WAD - yield.divWadDown(den); \\n  }\\n\\n  /// @notice computes maximum amount of quantity that trader can short while being hedged\\n  /// such that when he loses his loss will be offset by his gains  \\n  function getHedgeQuantity(address trader, uint256 marketId) public view returns(uint256){\\n    uint num = controller.getVault(marketId).fetchInstrumentData(marketId)\\n              .principal.mulWadDown(config.WAD - parameters[marketId].alpha); \\n    return num.mulDivDown(controller.getVault(marketId).balanceOf(trader), \\n              controller.getVault(marketId).totalSupply()); \\n  }\\n\\n  function getParameters(uint256 marketId) public view returns(MarketParameters memory){\\n    return parameters[marketId]; \\n  }\\n\\n  function getPool(uint256 marketId) public view returns(SyntheticZCBPool){\\n    return markets[marketId].bondPool; \\n  }\\n\\n  function getZCB(uint256 marketId) public view returns (ERC20) {\\n    return markets[marketId].longZCB;\\n  }\\n\\n  function getShortZCB(uint256 marketId) public view returns (ERC20) {\\n    return markets[marketId].shortZCB;\\n  }\\n  \\n  function get_redemption_price(uint256 marketId) public view returns(uint256){\\n    return redemption_prices[marketId]; \\n  }\\n\\n  function getBondPool(uint256 marketId) public view returns(SyntheticZCBPool){\\n    return markets[marketId].bondPool; \\n  }\\n\\n  /// @notice whether new longZCB can be issued \\n  function _canIssue(\\n    address trader,\\n    int256 amount,\\n    uint256 marketId\\n    ) internal view {\\n    if(queuedRepUpdates[trader] > queuedRepThreshold)\\n      revert(\\\"repToken queue threshold\\\"); \\n\\n    if (!isVerified(trader)) \\n      revert(\\\"not verified\\\");\\n\\n    if (getTraderBudget(marketId, trader) <= uint256(amount))\\n      revert(\\\"budget limit\\\");\\n\\n    if (controller.trader_scores(trader) == 0)\\n      revert(\\\"Reputation 0\\\"); \\n  }\\n\\n  /// @notice performs checks for buy function\\n  /// @param amount: collateral used to buy ZCB.\\n  function _canBuy(\\n    address trader,\\n    int256 amount,\\n    uint256 marketId\\n  ) internal view {\\n    //If after assessment there is a set buy threshold, people can't buy above this threshold\\n    require(marketActive(marketId), \\\"Market Not Active\\\");\\n\\n    // TODO: check if this is correct\\n    // require(controller.getVault(marketId).fetchInstrumentData(marketId).maturityDate > block.timestamp, \\\"market maturity reached\\\");\\n\\n    bool _duringMarketAssessment = duringMarketAssessment(marketId);\\n    bool _onlyReputable =  onlyReputable(marketId);\\n\\n    if(amount>0){\\n      if (_duringMarketAssessment){\\n        _canIssue(trader, amount, marketId); \\n      }\\n    }\\n\\n    //During the early risk assessment phase only reputable can buy \\n    if (_onlyReputable){\\n      if (!isReputable(trader, marketId)){\\n        revert(\\\"insufficient reputation\\\");\\n      }\\n    }\\n  }\\n\\n  /// @notice amount is in zcb_amount_in TODO \\n  function _canSell(\\n    address trader,\\n    uint256 amount, \\n    uint256 marketId\\n  ) internal view returns(bool) {\\n    require(marketActive(marketId), \\\"Market Not Active\\\");\\n\\n    //TODO: check if this is correct\\n    // require(controller.getVault(marketId).fetchInstrumentData(marketId).maturityDate > block.timestamp, \\\"market maturity reached\\\");\\n\\n    if(duringMarketAssessment(marketId)) {\\n      // restrict attacking via disapproving the utilizer by just shorting a bunch\\n     // if(amount>= hedgeAmount) return false; \\n\\n      //else return true;\\n    }\\n    else{\\n      // restrict naked CDS amount\\n      \\n      // \\n    } \\n\\n    return true; \\n  }\\n\\n  // VALIDATOR FUNCTIONS\\n\\n  /**\\n   @notice called when the validator votes to approve the market => stakes vt + recieves discounted ZCB\\n   the staked amount goes to the controller while the discounted ZCB goes to the market manager.\\n   */\\n  function validatorApprove(\\n    uint256 marketId, \\n    uint256 collateral_required,\\n    uint256 zcb_for_sale,\\n    address validator\\n  ) external onlyController {\\n    loggedCollaterals[marketId] += collateral_required;\\n    SyntheticZCBPool bondPool = getBondPool(marketId); \\n    bondPool.BaseToken().transferFrom(validator, address(bondPool), collateral_required); \\n    bondPool.trustedDiscountedMint(validator, zcb_for_sale);\\n  }\\n\\n  // function viewValidators(uint256 marketId) view public returns (address[] memory) {\\n  //   return validator_data[marketId].validators;\\n  // }\\n\\n  // function getNumApproved(uint256 marketId) view public returns (uint256) {\\n  //   return validator_data[marketId].numApproved;\\n  // }\\n\\n  // function getNumResolved(uint256 marketId) view public returns (uint256) {\\n  //   return validator_data[marketId].numResolved;\\n  // }\\n\\n  // function getTotalStaked(uint256 marketId) view public returns (uint256) {\\n  //   return validator_data[marketId].totalStaked;\\n  // }\\n\\n  // function getInitialStake(uint256 marketId) view public returns (uint256) {\\n  //   return validator_data[marketId].initialStake;\\n  // }\\n\\n  // function getFinalStake(uint256 marketId) view public returns (uint256) {\\n  //   return validator_data[marketId].finalStake;\\n  // }\\n\\n  // /**\\n  //  @notice randomly choose validators for market approval, async operation => fulfillRandomness is the callback function.\\n  //  @dev for now called on market initialization\\n  //  */\\n  // function _getValidators(uint256 marketId) public {\\n  //   // retrieve traders that meet requirement.\\n  //   (address instrument, address utilizer) = controller.market_data(marketId);\\n  //   address[] memory selected = controller.filterTraders(parameters[marketId].r, utilizer);\\n\\n  //   if (selected.length <= parameters[marketId].N) {\\n  //     validator_data[marketId].validators = selected;\\n  //     return;\\n  //   }\\n\\n  //   validator_data[marketId].requested = true;\\n\\n  //   uint256 _requestId = 1;\\n  //   // uint256 _requestId = COORDINATOR.requestRandomWords(\\n  //   //   keyHash,\\n  //   //   subscriptionId,\\n  //   //   requestConfirmations,\\n  //   //   callbackGasLimit,\\n  //   //   uint32(parameters[marketId].N)\\n  //   // );\\n\\n  //   requestToMarketId[_requestId] = marketId;\\n  // }\\n\\n  // /**\\n  //  @notice chainlink callback function, sets validators.\\n  //  @dev \\n  //  */\\n  // function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) \\n  // public \\n  // //override \\n  // {\\n  //   uint256 marketId = requestToMarketId[requestId];\\n  //   assert(randomWords.length == parameters[marketId].N);\\n\\n  //   (address instrument, address utilizer) = controller.market_data(marketId);\\n\\n  //   address[] memory temp = controller.filterTraders(parameters[marketId].r, utilizer);\\n  //   uint256 _N = parameters[marketId].N;\\n  //   uint256 length = temp.length;\\n    \\n  //   // get validators\\n  //   for (uint8 i=0; i<_N; i++) {\\n  //     uint256 j = _weightedRetrieve(temp, length, randomWords[i]);\\n  //     validator_data[marketId].validators.push(temp[j]);\\n  //     temp[j] = temp[length - 1];\\n  //     length--;\\n  //   }\\n  // }\\n\\n  // function _weightedRetrieve(address[] memory group, uint256 length, uint256 randomWord) view internal returns (uint256) {\\n  //   uint256 sum_weights;\\n\\n  //   for (uint8 i=0; i<length; i++) {\\n  //     sum_weights += controller.trader_scores(group[i]);//repToken.getReputationScore(group[i]);\\n  //   }\\n\\n  //   uint256 tmp = randomWord % sum_weights;\\n\\n  //   for (uint8 i=0; i<length; i++) {\\n  //     uint256 wt = controller.trader_scores(group[i]);\\n  //     if (tmp < wt) {\\n  //       return i;\\n  //     }\\n  //     unchecked {\\n  //       tmp -= wt;\\n  //     }\\n      \\n  //   }\\n  //   console.log(\\\"should never be here\\\");\\n  // }\\n\\n\\n  // /// @notice allows validators to buy at a discount + automatically stake a percentage of the principal\\n  // /// They can only buy a fixed amount of ZCB, usually a at lot larger amount \\n  // /// @dev get val_cap, the total amount of zcb for sale and each validators should buy \\n  // /// val_cap/num validators zcb \\n  // /// They also need to hold the corresponding vault, so they are incentivized to assess at a systemic level and avoid highly \\n  // /// correlated instruments triggers controller.approveMarket\\n  // function validatorApprove(\\n  //   uint256 marketId\\n  // ) external returns(uint256) {\\n  //   require(isValidator(marketId, msg.sender), \\\"not a validator for the market\\\");\\n  //   require(restriction_data[marketId].duringAssessment, \\\"already approved\\\");\\n  //   require(marketCondition(marketId), \\\"market condition not met\\\");\\n\\n  //   ValidatorData storage valdata = validator_data[marketId]; \\n  //   require(!valdata.staked[msg.sender], \\\"caller already staked for this market\\\");\\n\\n  //   // staking logic\\n  //   require(ERC20(controller.getVaultAd(marketId)).balanceOf(msg.sender) >= valdata.initialStake, \\\"not enough tokens to stake\\\");\\n    \\n  //   ERC20(controller.getVaultAd(marketId)).safeTransferFrom(msg.sender, address(this), valdata.initialStake);\\n\\n  //   valdata.totalStaked += valdata.initialStake;\\n  //   valdata.staked[msg.sender] = true;\\n    \\n  //   // discount longZCB logic\\n  //   SyntheticZCBPool bondPool = markets[marketId].bondPool; \\n\\n  //   uint256 val_cap =  valdata.val_cap; \\n  //   uint256 zcb_for_sale = val_cap/parameters[marketId].N; \\n  //   uint256 collateral_required = zcb_for_sale.mulWadDown(valdata.avg_price); \\n\\n  //   require(valdata.sales[msg.sender] <= zcb_for_sale, \\\"already approved\\\");\\n\\n  //   valdata.sales[msg.sender] += zcb_for_sale;\\n  //   valdata.totalSales += (zcb_for_sale +1);  //since division rounds down \\n  //   valdata.numApproved += 1; \\n  //   loggedCollaterals[marketId] += collateral_required; \\n\\n  //   bondPool.BaseToken().transferFrom(msg.sender, address(bondPool), collateral_required); \\n  //   bondPool.trustedDiscountedMint(msg.sender, zcb_for_sale); \\n\\n  //   // Last validator pays more gas, is fair because earlier validators are more uncertain \\n  //   if (approvalCondition(marketId)) {\\n  //     controller.approveMarket(marketId);\\n  //     approveMarket(marketId); // For market to go to a post assessment stage there always needs to be a lower bound set  \\n  //   }\\n\\n  //   return collateral_required;\\n  // }\\n\\n  // /**\\n  //  @notice conditions for approval => validator zcb stake fulfilled + validators have all approved\\n  //  */\\n  // function approvalCondition(uint256 marketId ) public view returns(bool){\\n  //   return (validator_data[marketId].totalSales >= validator_data[marketId].val_cap \\n  //   && validator_data[marketId].validators.length == validator_data[marketId].numApproved);\\n  // }\\n\\n  // /**\\n  //  @notice condition for resolving market, met when all the validators chosen for the market\\n  //  have voted to resolve.\\n  //  */\\n  // function resolveCondition(\\n  //   uint256 marketId\\n  // ) public view returns (bool) {\\n  //   return (validator_data[marketId].numResolved == validator_data[marketId].validators.length);\\n  // }\\n\\n  // /**\\n  //  @notice updates the validator stake, burned in proportion to loss.\\n  //  @dev called by controller, resolveMarket\\n  //  */\\n  // function updateValidatorStake(uint256 marketId, uint256 principal, uint256 principal_loss) \\n  //   external\\n  //   onlyController\\n  // {\\n  //   if (principal_loss == 0) {\\n  //     validator_data[marketId].finalStake = validator_data[marketId].initialStake;\\n  //     return;\\n  //   }\\n\\n  //   uint256 totalStaked = validator_data[marketId].totalStaked;\\n  //   uint256 newTotal = totalStaked/2 + (principal - principal_loss).divWadDown(principal).mulWadDown(totalStaked/2);\\n\\n  //   ERC4626(controller.getVaultAd(marketId)).burn(totalStaked - newTotal);\\n  //   validator_data[marketId].totalStaked = newTotal;\\n\\n  //   validator_data[marketId].finalStake = newTotal/validator_data[marketId].validators.length;\\n  // }\\n\\n  // /**\\n  //  @notice called by validators to approve resolving the market, after approval.\\n  //  */\\n  // function validatorResolve(\\n  //   uint256 marketId\\n  // ) external {\\n  //   require(isValidator(marketId, msg.sender), \\\"must be validator to resolve the function\\\");\\n  //   require(marketActive(marketId), \\\"market not active\\\");\\n  //   require(!duringMarketAssessment(marketId), \\\"market during assessment\\\");\\n  //   require(!validator_data[marketId].resolved[msg.sender], \\\"validator already voted to resolve\\\");\\n\\n  //   validator_data[marketId].resolved[msg.sender] = true;\\n  //   validator_data[marketId].numResolved ++;\\n  // }\\n\\n  // /**\\n  //  @notice called by validators when the market is denied or resolved\\n  //  stake is burned in proportion to loss\\n  //  */\\n  // function unlockValidatorStake(uint256 marketId) external {\\n  //   require(isValidator(marketId, msg.sender), \\\"not a validator\\\");\\n  //   require(validator_data[marketId].staked[msg.sender], \\\"no stake\\\");\\n  //   require(!restriction_data[marketId].alive, \\\"market not alive\\\");\\n\\n\\n  //   if (!restriction_data[marketId].resolved) {\\n  //     ERC20(controller.getVaultAd(marketId)).safeTransfer(msg.sender, validator_data[marketId].initialStake);\\n  //     validator_data[marketId].totalStaked -= validator_data[marketId].initialStake;\\n  //   } else {\\n  //     ERC20(controller.getVaultAd(marketId)).safeTransfer(msg.sender, validator_data[marketId].finalStake);\\n  //     validator_data[marketId].totalStaked -= validator_data[marketId].finalStake;\\n  //   }\\n    \\n  //   validator_data[marketId].staked[msg.sender] = false;\\n  // }\\n\\n  // /// @notice sets the validator cap + valdiator amount \\n  // /// param prinicipal is saleAmount for pool based instruments \\n  // /// @dev called by controller to setup the validator scheme\\n  // function _validatorSetup(\\n  //   uint256 marketId,\\n  //   uint256 principal,\\n  //   uint256 creationTimestamp,\\n  //   uint256 duration, \\n  //   bool isPool\\n  // ) internal {\\n  //   require(principal != 0, \\\"0 principal\\\"); \\n  //   _setValidatorCap(marketId, principal, isPool);\\n  //   _setValidatorStake(marketId, principal); \\n  //   validator_data[marketId].unlockTimestamp = creationTimestamp + duration;\\n  //   _getValidators(marketId); \\n  // }\\n\\n  // /// @notice called when market initialized, calculates the average price and quantities of zcb\\n  // /// validators will buy at a discount when approving\\n  // /// valcap = sigma * princpal.\\n  // function _setValidatorCap(\\n  //   uint256 marketId,\\n  //   uint256 principal, \\n  //   bool isPool\\n  // ) internal {\\n  //   SyntheticZCBPool bondingPool = markets[marketId].bondPool; \\n  //   require(config.isInWad(parameters[marketId].sigma) && config.isInWad(principal), \\\"paramERR\\\");\\n  //   ValidatorData storage valdata = validator_data[marketId]; \\n\\n  //   uint256 valColCap = (parameters[marketId].sigma.mulWadDown(principal)); \\n\\n  //   // Get how much ZCB validators need to buy in total, which needs to be filled for the market to be approved \\n  //   uint256 discount_cap = bondingPool.discount_cap();\\n  //   uint256 avgPrice = valColCap.divWadDown(discount_cap);\\n\\n  //   valdata.val_cap = discount_cap;\\n  //   valdata.avg_price = avgPrice; \\n  // }\\n\\n  // /**\\n  //  @notice sets the amount of vt staked by a single validator for a specific market\\n  //  @dev steak should be between 1-0 wad.\\n  //  */\\n  // function _setValidatorStake(uint256 marketId, uint256 principal) internal {\\n  //   //get vault\\n  //   ERC4626 vault = ERC4626(controller.vaults(controller.id_parent(marketId)));\\n  //   uint256 shares = vault.convertToShares(principal);\\n\\n  //   validator_data[marketId].initialStake = parameters[marketId].steak.mulWadDown(shares);\\n  // }\\n\\n  // /**\\n  //  @notice returns true if user is validator for corresponding market\\n  //  */\\n  // function isValidator(uint256 marketId, address user) view public returns(bool){\\n  //   address[] storage _validators = validator_data[marketId].validators;\\n  //   for (uint i = 0; i < _validators.length; i++) {\\n  //     if (_validators[i] == user) {\\n  //       return true;\\n  //     }\\n  //   }\\n  //   return false;\\n  // }\\n\\n  // function getValidatorRequiredCollateral(uint256 marketId) public view returns(uint256){\\n  //   uint256 val_cap =  validator_data[marketId].val_cap; \\n  //   uint256 zcb_for_sale = val_cap/parameters[marketId].N; \\n  //   return zcb_for_sale.mulWadDown(validator_data[marketId].avg_price); \\n  // }\\n\\n  /// @notice calculates implied probability of the trader, used to\\n  /// update the reputation score by brier scoring mechanism \\n  /// @param budget of trader in collateral decimals \\n  function calcImpliedProbability(\\n    uint256 bondAmount, \\n    uint256 collateral_amount,\\n    uint256 budget\\n    ) public view returns(uint256){\\n    console.log('bond', bondAmount, collateral_amount, budget); \\n    uint256 avg_price = collateral_amount.divWadDown(bondAmount); \\n    uint256 b = avg_price.mulWadDown(config.WAD - avg_price);\\n    uint256 ratio = bondAmount.divWadDown(budget); \\n\\n    return ratio.mulWadDown(b)+ avg_price;\\n  }\\n\\n  /// @notice log how much collateral trader has at stake, \\n  /// to be used for redeeming, restricting trades\\n  function _logTrades(\\n    uint256 marketId,\\n    address trader, \\n    uint256 collateral,\\n    uint256 shortCollateral,  \\n    bool isBuy, \\n    bool isLong\\n    ) internal {\\n\\n    if (isLong){\\n\\n      // If buying bond during assessment, trader is manager, so should update \\n      if (isBuy) {\\n        longTrades[marketId][trader] += collateral; \\n        loggedCollaterals[marketId] += collateral; \\n        queuedRepUpdates[trader] += 1; \\n        } else {\\n        longTrades[marketId][trader] -= collateral;\\n        loggedCollaterals[marketId] -= collateral; \\n        } \\n      } else{\\n      if (isBuy) {\\n        // shortCollateral is amount trader pays to buy shortZCB\\n        shortTrades[marketId][trader] += shortCollateral;\\n\\n        // collateral is the area under the curve that is subtracted due to the (short)selling\\n        loggedCollaterals[marketId] -= collateral; \\n        } else {\\n        // revert if underflow, which means trader sold short at a profit, which is not allowed during assessment \\n        shortTrades[marketId][trader] -= shortCollateral; \\n        loggedCollaterals[marketId] += collateral; \\n      } \\n    }\\n  }\\n\\n  /// @notice general limitorder claim + liquidity provision funnels used post-assessment, \\n  /// which will be recorded if necessary \\n  /// param type: 1 if open long, 2 if close long, 3 if open short, 4 if close short\\n  /// type 5: partially claim , TODO do all possible trading functions \\n  function claimFunnel(\\n    uint256 marketId, \\n    uint16 point, \\n    uint256 funnel\\n    ) external returns(uint256 claimedAmount){\\n    SyntheticZCBPool bondPool = markets[marketId].bondPool; \\n\\n    if (funnel == 1) claimedAmount = bondPool.makerClaimOpen(point,true, msg.sender); \\n    else if (funnel == 2) claimedAmount = bondPool.makerClaimClose(point,true, msg.sender);\\n    else if (funnel == 3) claimedAmount = bondPool.makerClaimOpen(point,false, msg.sender); \\n    else if (funnel == 4) claimedAmount = bondPool.makerClaimClose(point,false, msg.sender); \\n  }\\n\\n  /// @notice called by pool when buying, transfers funds from trader to pool \\n  function tradeCallBack(uint256 amount, bytes calldata data) external{\\n    SyntheticZCBPool(msg.sender).BaseToken().transferFrom(abi.decode(data, (address)), msg.sender, amount); \\n  }\\n\\n  /// @notice deduce fees for non vault stakers, should go down as maturity time approach 0 \\n  function deduct_selling_fee(uint256 marketId ) internal view returns(uint256){\\n    // Linearly decreasing fee \\n    uint256 normalizedTime = (\\n      controller.getVault(marketId).fetchInstrumentData(marketId).maturityDate\\n      - block.timestamp)  * config.WAD \\n    / controller.getVault(marketId).fetchInstrumentData(marketId).duration; \\n    return normalizedTime.mulWadDown( riskTransferPenalty); \\n  }\\n\\n  struct localVars{\\n    uint256 promised_return; \\n    uint256 inceptionTime; \\n    uint256 inceptionPrice; \\n    uint256 leverageFactor; \\n\\n    uint256 srpPlusOne; \\n    uint256 totalAssetsHeld; \\n    uint256 juniorSupply; \\n    uint256 seniorSupply; \\n\\n    bool belowThreshold; \\n  }\\n  /// @notice get programmatic pricing of a pool based longZCB \\n  /// returns psu: price of senior(VT's share of investment) vs underlying \\n  /// returns pju: price of junior(longZCB) vs underlying\\n  function poolZCBValue(\\n    uint256 marketId\\n    ) public \\n    view \\n    returns(uint256 psu, uint256 pju, uint256 levFactor, Vault vault){\\n    localVars memory vars; \\n    vault = controller.getVault(marketId); \\n\\n    (vars.promised_return, vars.inceptionTime, vars.inceptionPrice, vars.leverageFactor) \\n        = vault.fetchPoolTrancheData(marketId); \\n    levFactor = vars.leverageFactor; \\n\\n    require(vars.inceptionPrice > 0, \\\"0 INCEPTION_PRICE\\\"); \\n\\n    // Get senior redemption price that increments per unit time \\n    vars.srpPlusOne = vars.inceptionPrice.mulWadDown((vars.promised_return)\\n      .rpow(block.timestamp - vars.inceptionTime, config.WAD));\\n\\n    // Get total assets held by the instrument \\n    vars.totalAssetsHeld = vault.instrumentAssetOracle( marketId); \\n    vars.juniorSupply = markets[marketId].longZCB.totalSupply(); \\n    vars.seniorSupply = vars.juniorSupply.mulWadDown(vars.leverageFactor); \\n\\n    if (vars.seniorSupply == 0) return(vars.srpPlusOne,vars.srpPlusOne,levFactor, vault); \\n    \\n    // Check if all seniors can redeem\\n    if (vars.totalAssetsHeld >= vars.srpPlusOne.mulWadDown(vars.seniorSupply))\\n      psu = vars.srpPlusOne; \\n    else{\\n      psu = vars.totalAssetsHeld.divWadDown(vars.seniorSupply);\\n      vars.belowThreshold = true;  \\n    }\\n\\n    // should be 0 otherwise \\n    if(!vars.belowThreshold) pju = (vars.totalAssetsHeld \\n      - vars.srpPlusOne.mulWadDown(vars.seniorSupply)).divWadDown(vars.juniorSupply); \\n  }\\n\\n  /// @notice after assessment, let managers buy newly issued longZCB if the instrument is pool based \\n  /// funds + funds * levFactor will be directed to the instrument \\n  function issuePoolBond(\\n    uint256 _marketId, \\n    uint256 _amountIn\\n    ) external _lock_ {\\n    require(!duringMarketAssessment(_marketId), \\\"Pre Approval\\\"); \\n    _canIssue(msg.sender, int256(_amountIn), _marketId); \\n\\n    // Get price and sell longZCB with this price\\n    (uint256 psu, uint256 pju, uint256 levFactor, Vault vault ) = poolZCBValue(_marketId);\\n    markets[_marketId].bondPool.BaseToken().transferFrom(msg.sender, address(vault), _amountIn);\\n    uint256 issueQTY = _amountIn.divWadDown(pju); \\n    markets[_marketId].bondPool.trustedDiscountedMint(msg.sender, issueQTY); \\n\\n    // Need to transfer funds automatically to the instrument, seniorAmount is longZCB * levFactor * psu  \\n    vault.depositIntoInstrument(_marketId, _amountIn + issueQTY.mulWadDown(levFactor).mulWadDown(psu)); \\n  }\\n\\n  /// @notice when a manager redeems a poollongzcb, redeemAmount*levFactor are automatically \\n  /// withdrawn from the instrument\\n  function redeemPoolLongZCB(\\n    uint256 marketId, \\n    uint256 redeemAmount\\n    ) external _lock_ returns(uint256 collateral_redeem_amount, uint256 seniorAmount){\\n    require(!marketActive(marketId), \\\"Market Active\\\"); \\n    require(restriction_data[marketId].resolved, \\\"Market not resolved\\\"); \\n    require(markets[marketId].isPool, \\\"not Pool\\\"); \\n    require(markets[marketId].longZCB.balanceOf(msg.sender) > redeemAmount, \\\"insufficient bal\\\"); \\n\\n    (uint256 psu, uint256 pju, uint256 levFactor , Vault vault ) = poolZCBValue(marketId);\\n    collateral_redeem_amount = pju.mulWadDown(redeemAmount); \\n    seniorAmount = redeemAmount.mulWadDown(levFactor).mulWadDown(psu); \\n\\n    // Need to check if redeemAmount*levFactor can be withdrawn from the pool and do so\\n    require(vault.fetchInstrument( marketId).isLiquid(seniorAmount), \\\"Not enough liquidity\\\"); \\n    vault.withdrawFromInstrumentExternal(marketId, seniorAmount); \\n\\n    // TODO update reputation \\n\\n    // This means that the sender is a manager\\n    if (queuedRepUpdates[msg.sender] > 0){\\n     unchecked{queuedRepUpdates[msg.sender] -= 1;} \\n    }\\n\\n    markets[marketId].bondPool.trustedBurn(msg.sender, redeemAmount, true); \\n    controller.redeem_transfer(collateral_redeem_amount, msg.sender, marketId); \\n  }\\n\\n  uint256 public constant riskTransferPenalty = 1e17; \\n  mapping(address => uint8) public queuedRepUpdates; \\n  uint8 public constant queuedRepThreshold = 3; // at most 3 simultaneous assessment per manager\\n\\n  /// @notice main entry point for longZCB buys \\n  /// @param _amountIn is negative if specified in zcb quantity\\n  function buyBond(\\n    uint256 _marketId, \\n    int256 _amountIn, \\n    uint256 _priceLimit, \\n    bytes calldata _tradeRequestData \\n    ) external _lock_ returns(uint256 amountIn, uint256 amountOut){\\n    require(!restriction_data[_marketId].resolved, \\\"must not be resolved\\\");\\n    _canBuy(msg.sender, _amountIn, _marketId);\\n\\n    CoreMarketData memory marketData = markets[_marketId]; \\n    SyntheticZCBPool bondPool = marketData.bondPool; \\n    \\n    // During assessment, real bonds are issued from utilizer, they are the sole LP \\n    if (duringMarketAssessment(_marketId)){\\n\\n      (amountIn, amountOut) = bondPool.takerOpen(true, _amountIn, _priceLimit, abi.encode(msg.sender)); \\n      console.log('amountin', amountIn, amountOut); \\n      //Need to log assessment trades for updating reputation scores or returning collateral when market denied \\n      _logTrades(_marketId, msg.sender, amountIn, 0, true, true);\\n\\n      // Get implied probability estimates by summing up all this manager bought for this market \\n      assessment_probs[_marketId][msg.sender] = calcImpliedProbability(\\n          getZCB(_marketId).balanceOf(msg.sender) + leveragePosition[_marketId][msg.sender].amount, \\n          longTrades[_marketId][msg.sender], \\n          getTraderBudget(_marketId, msg.sender) \\n      ); \\n\\n      // Phase Transitions when conditions met\\n      if(onlyReputable(_marketId)){\\n        uint256 total_bought = loggedCollaterals[_marketId];\\n\\n        if (total_bought >= parameters[_marketId].omega.mulWadDown(\\n              controller\\n              .getVault(_marketId)\\n              .fetchInstrumentData(_marketId)\\n              .principal)\\n        ) {\\n          restriction_data[_marketId].onlyReputable = false;\\n        }\\n      }\\n    }\\n\\n    // Synthetic bonds are issued (liquidity provision are amortized as counterparties)\\n    else{\\n      (uint16 point, bool isTaker) = abi.decode(_tradeRequestData, (uint16,bool ));\\n      if(isTaker)\\n        (amountIn, amountOut) = bondPool.takerOpen(true, _amountIn, _priceLimit, abi.encode(msg.sender));\\n      else{\\n        (uint256 escrowAmount, uint128 crossId) = bondPool.makerOpen(point, uint256(_amountIn), true, msg.sender); \\n      }\\n    }\\n  }\\n\\n  /// @notice longZCB sells  \\n  /// @param _amountIn quantity in longZCB \\n  function sellBond(\\n      uint256 _marketId,\\n      uint256 _amountIn, \\n      uint256 _priceLimit, \\n      bytes calldata _tradeRequestData \\n    ) external _lock_ returns (uint256 amountIn, uint256 amountOut){\\n    // if (duringMarketAssessment(_marketId)) revert(\\\"can't close during assessment\\\"); \\n    require(!restriction_data[_marketId].resolved, \\\"must not be resolved\\\");\\n    require(_canSell(msg.sender, _amountIn, _marketId),\\\"Trade Restricted\\\");\\n    SyntheticZCBPool bondPool = markets[_marketId].bondPool; \\n\\n    if (duringMarketAssessment(_marketId)){\\n\\n      (amountIn, amountOut) = bondPool.takerClose(\\n                                    true, int256(_amountIn), _priceLimit, abi.encode(msg.sender));\\n\\n      _logTrades(_marketId, msg.sender, amountIn, 0, false, true );                                          \\n\\n    }\\n    else{\\n      deduct_selling_fee( _marketId ); //TODO, if validator or manager, deduct reputation \\n\\n      (uint16 point, bool isTaker) = abi.decode(_tradeRequestData, (uint16,bool ));\\n      if(isTaker) (amountIn, amountOut) = bondPool.takerClose(\\n              true, int256(_amountIn), _priceLimit, abi.encode(msg.sender));\\n      else {\\n        (uint256 escrowAmount, uint128 crossId) = bondPool.makerClose(point, uint256(_amountIn), true, msg.sender);        \\n      }\\n    }\\n  } \\n\\n  /// @param _amountIn: amount of short trader is willing to buy\\n  /// @param _priceLimit: slippage tolerance on trade\\n  function shortBond(\\n    uint256 _marketId,\\n    uint256 _amountIn, \\n    uint256 _priceLimit,\\n    bytes calldata _tradeRequestData \\n    ) external _lock_ returns (uint256 amountIn, uint256 amountOut){\\n    require(_canSell(msg.sender, _amountIn, _marketId),\\\"Trade Restricted\\\");\\n    SyntheticZCBPool bondPool = markets[_marketId].bondPool; \\n\\n    if (duringMarketAssessment(_marketId)){\\n\\n      // amountOut is base collateral down the curve, amountIn is collateral used to buy shortZCB \\n      (amountOut, amountIn) = bondPool.takerOpen(false, int256(_amountIn), _priceLimit, abi.encode(msg.sender));\\n\\n      _logTrades(_marketId, msg.sender, amountOut, amountIn, true, false);\\n\\n    }\\n    else{\\n      //deduct_selling_fee(); //if naked CDS( staked vault)\\n\\n      (uint16 point, bool isTaker) = abi.decode(_tradeRequestData, (uint16,bool ));\\n      if (isTaker)\\n        (amountOut, amountIn) = bondPool.takerOpen(false, int256(_amountIn), _priceLimit, abi.encode(msg.sender));\\n      \\n      else{\\n        (uint256 escrowAmount, uint128 crossId) = bondPool.makerOpen(point, uint256(_amountIn), false, msg.sender);\\n      }\\n    }\\n  }\\n\\n  /// @param _amountIn is amount of short trader is willing to cover \\n  function coverBondShort(\\n    uint256 _marketId, \\n    uint256 _amountIn, \\n    uint256 _priceLimit,\\n    bytes calldata _tradeRequestData \\n    ) external _lock_ returns (uint256 amountIn, uint256 amountOut){\\n    SyntheticZCBPool bondPool = markets[_marketId].bondPool; \\n\\n    if (duringMarketAssessment(_marketId)){\\n\\n      // amountOut is collateral up the curve, amountIn is collateral returned from closing  \\n      (amountOut, amountIn) = bondPool.takerClose(false, -int256(_amountIn), _priceLimit, abi.encode(msg.sender));\\n\\n      _logTrades(_marketId, msg.sender, amountOut, amountIn, true, false); \\n     // deduct_selling_fee(); \\n    }\\n    else{\\n      (uint16 point, bool isTaker) = abi.decode(_tradeRequestData, (uint16,bool ));\\n      if (isTaker)\\n        (amountOut, amountIn) = bondPool.takerClose(false, -int256(_amountIn), _priceLimit, abi.encode(msg.sender));\\n      \\n      else{\\n        (uint256 escrowAmount, uint128 crossId) = bondPool.makerClose(point, _amountIn, false, msg.sender);\\n      }\\n    }\\n  }\\n\\n\\n  /// @notice called by traders when market is denied before approval TODO\\n  /// ??? if the market is denied, this function is called and everything is redeemed \\n  /// validator will need to call this on denial + isLong = true to redeem their collateral.\\n  function redeemDeniedMarket(\\n    uint256 marketId, \\n    bool isLong\\n  ) external _lock_ {\\n    require(!restriction_data[marketId].alive, \\\"Market Still During Assessment\\\"); // TODO\\n    require(restriction_data[marketId].duringAssessment, \\\"Market has been approved\\\");\\n    SyntheticZCBPool bondPool = markets[marketId].bondPool; \\n\\n    uint256 collateral_amount;\\n    uint256 balance; \\n    // Get collateral at stake in shorts, which will be directly given back to traders\\n    if(!isLong){\\n      balance = markets[marketId].shortZCB.balanceOf(msg.sender); \\n      require(balance >= 0, \\\"Empty Balance\\\");\\n\\n      // TODO this means if trader's loss will be refunded if loss was realized before denied market\\n      collateral_amount = shortTrades[marketId][msg.sender]; \\n      delete shortTrades[marketId][msg.sender]; \\n\\n      //Burn all their balance\\n      bondPool.trustedBurn(msg.sender, balance, false);\\n    } \\n\\n    // Get collateral at stake in longs, which will be directly given back to traders\\n    else {\\n      balance = markets[marketId].longZCB.balanceOf(msg.sender); \\n      require(balance >= 0, \\\"Empty Balance\\\");\\n\\n      // TODO this means if trader's loss will be refunded if loss was realized before denied market\\n      if (controller.isValidator(marketId, msg.sender) && controller.hasApproved(marketId, msg.sender)) {\\n        collateral_amount = controller.deniedValidator(marketId, msg.sender);\\n      }\\n      else{\\n        collateral_amount = longTrades[marketId][msg.sender]; \\n        delete longTrades[marketId][msg.sender]; \\n      }\\n\\n      // Burn all their balance \\n      bondPool.trustedBurn(msg.sender, balance, true); \\n      \\n      // This means that the sender is a manager\\n      if (queuedRepUpdates[msg.sender] > 0){\\n        unchecked{queuedRepUpdates[msg.sender] -= 1;} \\n      }    \\n    }\\n\\n    // Before redeem_transfer is called all funds for this instrument should be back in the vault\\n    controller.redeem_transfer(collateral_amount, msg.sender, marketId);\\n    //TODO need to check if last redeemer, so can kill market.\\n  }\\n\\n  \\n  /// @dev Redemption price, as calculated (only once) at maturity,\\n  /// depends on total_repayed/(principal + predetermined yield)\\n  /// If total_repayed = 0, redemption price is 0\\n  /// @param atLoss: defines circumstances where expected returns are higher than actual\\n  /// @param loss: facevalue - returned amount => non-negative always?\\n  /// @param extra_gain: any extra yield not factored during assessment. Is 0 yield is as expected\\n  function updateRedemptionPrice(\\n    uint256 marketId,\\n    bool atLoss, \\n    uint256 extra_gain, \\n    uint256 loss, \\n    bool premature\\n  ) external  onlyController {  \\n    if (atLoss) assert(extra_gain == 0); \\n\\n    uint256 total_supply = markets[marketId].longZCB.totalSupply(); \\n    uint256 total_shorts = (extra_gain >0) ?  markets[marketId].shortZCB.totalSupply() :0; \\n\\n    if(!atLoss)\\n      redemption_prices[marketId] = config.WAD + extra_gain.divWadDown(total_supply + total_shorts); \\n    \\n    else {\\n      if (config.WAD <= loss.divWadDown(total_supply)){\\n        redemption_prices[marketId] = 0; \\n      }\\n      else {\\n        redemption_prices[marketId] = config.WAD - loss.divWadDown(total_supply);\\n      }\\n    }\\n\\n    deactivateMarket(marketId, atLoss, !premature); \\n\\n    // TODO edgecase redemption price calculations  \\n  }\\n\\n  /// @notice trader will redeem entire balance of ZCB\\n  /// Needs to be called at maturity, market needs to be resolved first(from controller)\\n  function redeem(\\n    uint256 marketId\\n    ) external _lock_ returns(uint256 collateral_redeem_amount){\\n    require(!marketActive(marketId), \\\"Market Active\\\"); \\n    require(restriction_data[marketId].resolved, \\\"Market not resolved\\\"); \\n    require(!redeemed[marketId][msg.sender], \\\"Already Redeemed\\\");\\n    redeemed[marketId][msg.sender] = true; \\n\\n    SyntheticZCBPool bondPool = markets[marketId].bondPool; \\n\\n    if (controller.isValidator(marketId, msg.sender)) controller.redeemValidator(marketId, msg.sender);\\n\\n    uint256 zcb_redeem_amount = markets[marketId].longZCB.balanceOf(msg.sender); \\n    uint256 redemption_price = get_redemption_price(marketId); \\n    collateral_redeem_amount = redemption_price.mulWadDown(zcb_redeem_amount); \\n\\n    if (!controller.isValidator(marketId, msg.sender)) { // TODO should validators get reputation if they do ok.\\n      bool increment = redemption_price >= config.WAD? true: false;\\n      controller.updateReputation(marketId, msg.sender, increment);\\n    }\\n\\n    // This means that the sender is a manager\\n    if (queuedRepUpdates[msg.sender] > 0){\\n     unchecked{queuedRepUpdates[msg.sender] -= 1;} \\n   }\\n\\n    bondPool.trustedBurn(msg.sender, zcb_redeem_amount, true); \\n    controller.redeem_transfer(collateral_redeem_amount, msg.sender, marketId); \\n\\n  }\\n\\n  /// @notice called by short buyers when market is resolved  \\n  function redeemShortZCB(\\n    uint256 marketId \\n    ) external _lock_ returns(uint256 collateral_redeem_amount){\\n    require(!marketActive(marketId), \\\"Market Active\\\"); \\n    require(restriction_data[marketId].resolved, \\\"Market not resolved\\\"); \\n    require(!redeemed[marketId][msg.sender], \\\"Already Redeemed\\\");\\n    redeemed[marketId][msg.sender] = true; \\n\\n    SyntheticZCBPool bondPool = markets[marketId].bondPool; \\n\\n    uint256 shortZCB_redeem_amount = markets[marketId].shortZCB.balanceOf(msg.sender); \\n    uint256 long_redemption_price = get_redemption_price(marketId);\\n    uint256 redemption_price = long_redemption_price >= config.WAD \\n                               ? 0 \\n                               : config.WAD - long_redemption_price; \\n    collateral_redeem_amount = redemption_price.mulWadDown(shortZCB_redeem_amount);\\n\\n    bondPool.trustedBurn(msg.sender, shortZCB_redeem_amount, false); \\n    controller.redeem_transfer(collateral_redeem_amount, msg.sender, marketId); \\n  }\\n\\n  /// @notice returns the manager's maximum leverage \\n  function getMaxLeverage(address manager) public view returns(uint256){\\n    //return (repToken.getReputationScore(manager) * config.WAD).sqrt(); //TODO experiment \\n    return (controller.trader_scores(manager) * config.WAD).sqrt();\\n  }\\n\\n  mapping(uint256=>mapping(address=> LeveredBond)) public leveragePosition; \\n  struct LeveredBond{\\n    uint128 debt; //how much collateral borrowed from vault \\n    uint128 amount; // how much bonds were bought with the given leverage\\n  }\\n\\n  function getLeveragePosition(uint256 marketId, address manager) public view returns(uint256, uint256){\\n    return (uint256(leveragePosition[marketId][manager].debt), \\n      uint256(leveragePosition[marketId][manager].amount));\\n  }\\n\\n  /// @notice for managers that are a) meet certain reputation threshold and b) choose to be more\\n  /// capital efficient with their zcb purchase. \\n  /// @param _amountIn (in collateral) already accounts for the leverage, so the actual amount manager is transferring\\n  /// is _amountIn/_leverage \\n  /// @dev the marketmanager should take custody of the quantity bought with leverage\\n  /// and instead return notes of the levered position \\n  /// TODO do + instead of creating new positions and implied prob cumulative \\n  function buyBondLevered(\\n    uint256 _marketId, \\n    uint256 _amountIn, \\n    uint256 _priceLimit, \\n    uint256 _leverage //in 18 dec \\n    ) external _lock_ returns(uint256 amountIn, uint256 amountOut){\\n    require(duringMarketAssessment(_marketId), \\\"PhaseERR\\\"); \\n    require(!restriction_data[_marketId].resolved, \\\"must not be resolved\\\");\\n    require(_leverage <= getMaxLeverage(msg.sender) && _leverage >= config.WAD, \\\"exceeds allowed leverage\\\");\\n    _canBuy(msg.sender, int256(_amountIn), _marketId);\\n    SyntheticZCBPool bondPool = markets[_marketId].bondPool; \\n\\n    // stack collateral from trader and borrowing from vault \\n    uint256 amountPulled = _amountIn.divWadDown(_leverage); \\n    bondPool.BaseToken().transferFrom(msg.sender, address(this), amountPulled); \\n    controller.pullLeverage(_marketId, _amountIn - amountPulled); \\n\\n    // Buy with leverage, zcb transferred here\\n    bondPool.BaseToken().approve(address(this), _amountIn); \\n    (amountIn, amountOut) = bondPool.takerOpen(true, int256(_amountIn), _priceLimit, abi.encode(address(this))); \\n\\n    //Need to log assessment trades for updating reputation scores or returning collateral when market denied \\n    _logTrades(_marketId, msg.sender, _amountIn, 0, true, true);\\n\\n    // Get implied probability estimates by summing up all this managers bought for this market \\n    assessment_probs[_marketId][msg.sender] = calcImpliedProbability(\\n        amountOut, \\n        amountIn, \\n        getTraderBudget(_marketId, msg.sender) \\n    ); \\n\\n    // Phase Transitions when conditions met\\n    if(onlyReputable(_marketId)){\\n      uint256 total_bought = loggedCollaterals[_marketId];\\n\\n      if (total_bought >= parameters[_marketId].omega.mulWadDown(\\n            controller\\n            .getVault(_marketId)\\n            .fetchInstrumentData(_marketId)\\n            .principal)\\n      ) {\\n        restriction_data[_marketId].onlyReputable = false;\\n      }\\n    }\\n    // create note to trader \\n    leveragePosition[_marketId][msg.sender] = LeveredBond(uint128(_amountIn - amountPulled ),uint128(amountOut)) ; \\n  }\\n\\n  function redeemLeveredBond(uint256 marketId) public{\\n    require(!marketActive(marketId), \\\"Market Active\\\"); \\n    require(restriction_data[marketId].resolved, \\\"Market not resolved\\\"); \\n    require(!redeemed[marketId][msg.sender], \\\"Already Redeemed\\\");\\n    redeemed[marketId][msg.sender] = true; \\n\\n    if (controller.isValidator(marketId, msg.sender)) controller.redeemValidator(marketId, msg.sender); \\n\\n    LeveredBond memory position = leveragePosition[marketId][msg.sender]; \\n    require(position.amount>0, \\\"ERR\\\"); \\n\\n    uint256 redemption_price = get_redemption_price(marketId); \\n    uint256 collateral_back = redemption_price.mulWadDown(position.amount) ; \\n    uint256 collateral_redeem_amount = collateral_back >= uint256(position.debt)  \\n        ? collateral_back - uint256(position.debt) : 0; \\n\\n    if (!controller.isValidator(marketId, msg.sender)) {\\n      bool increment = redemption_price >= config.WAD? true: false;\\n      controller.updateReputation(marketId, msg.sender, increment);\\n    }\\n\\n    // This means that the sender is a manager\\n    if (queuedRepUpdates[msg.sender] > 0){\\n     unchecked{queuedRepUpdates[msg.sender] -= 1;} \\n    }\\n\\n    leveragePosition[marketId][msg.sender].amount = 0; \\n    markets[marketId].bondPool.trustedBurn(address(this), position.amount, true); \\n    controller.redeem_transfer(collateral_redeem_amount, msg.sender, marketId); \\n  }\\n\\n  function redeemDeniedLeveredBond(uint256 marketId) public returns(uint collateral_amount){\\n    LeveredBond memory position = leveragePosition[marketId][msg.sender]; \\n    require(position.amount>0, \\\"ERR\\\"); \\n    leveragePosition[marketId][msg.sender].amount = 0; \\n\\n    // TODO this means if trader's loss will be refunded if loss was realized before denied market\\n    if (controller.isValidator(marketId, msg.sender)) {\\n      collateral_amount = controller.deniedValidator(marketId, msg.sender);\\n    }\\n    else{\\n      collateral_amount = longTrades[marketId][msg.sender]; \\n      delete longTrades[marketId][msg.sender]; \\n    }\\n\\n    // Burn all their position, \\n    markets[marketId].bondPool.trustedBurn(address(this), position.amount, true); \\n\\n    // This means that the sender is a manager\\n    if (queuedRepUpdates[msg.sender] > 0){\\n      unchecked{queuedRepUpdates[msg.sender] -= 1;} \\n    }    \\n\\n    // Before redeem_transfer is called all funds for this instrument should be back in the vault\\n    controller.redeem_transfer(collateral_amount - uint256(position.debt), msg.sender, marketId);\\n  }\\n}\\n\\n\",\"keccak256\":\"0xd9a23b00b1b7b09cecba3efe65d2cad9d51bbf96e013f2c614e5db4825518301\"},\"contracts/protocol/reputationtoken.sol\":{\"content\":\"pragma solidity ^0.8.4; \\n//https://github.com/poap-xyz/poap-contracts/tree/master/contracts\\nimport {ERC721} from \\\"solmate/src/tokens/ERC721.sol\\\";\\nimport {Controller} from \\\"./controller.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n\\ncontract ReputationNFT is ERC721 {\\n  mapping(uint256 => ReputationData) internal _reputation; // id to reputation\\n  mapping(address => uint256) internal _ownerToId;\\n  mapping(uint256 => TraderData[]) internal _marketData; // **MarketId to Market's data needed for calculating brier score.\\n\\n  uint256 private nonce = 1;\\n  Controller controller;\\n  uint256 SCALE = 1e18;\\n\\n\\n  struct ReputationData {\\n    uint256 n; // number of markets participated in => regular uint256\\n    uint256 score; \\n  }\\n\\n  struct TraderData { // for each market\\n    address trader;\\n    uint256 tokensBought;\\n  }\\n\\n  struct TopReputation{\\n    address trader; \\n    uint256 score; \\n  }\\n\\n  uint256 private constant topRep = 100; \\n  TopReputation[topRep] topReputations; \\n\\n  mapping(uint256=>mapping(address=>bool)) canTrade; //marketID-> address-> cantrade\\n  mapping(uint256=>bool) allowAll; \\n  mapping(address=>bool) isUnique; \\n  address[] unique_traders; \\n  mapping(uint256=>mapping(address=>uint256)) public balances; // marketId => market manager address => how much collateral already bought.\\n\\n  modifier onlyController() {\\n    require(msg.sender == address(controller));\\n    _;\\n  }\\n\\n  constructor (\\n    address _controller\\n  ) ERC721(\\\"Debita Reputation Token\\\", \\\"DRT\\\") {\\n    controller = Controller(_controller);\\n  }\\n\\n  /**\\n   @notice incrementBalance\\n   */\\n  function incrementBalance(uint256 marketId, address trader, uint256 amount) external onlyController {\\n    balances[marketId][trader] += amount;\\n  }\\n\\n  /**\\n   @notice called post reputation update\\n   */\\n  function removeBalance(uint256 marketId, address trader) external onlyController {\\n    delete balances[marketId][trader];\\n  }\\n\\n  function _baseURI() internal pure returns (string memory baseURI) {\\n    baseURI = \\\"\\\";\\n  }\\n\\n  function tokenURI(uint256 id) public view override returns (string memory) {\\n    require(_ownerOf[id] != address(0), \\\"Invalid Identifier\\\");\\n\\n    string memory baseURI = _baseURI();\\n    return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, id)) : \\\"\\\";\\n  }\\n\\n  function mint(address to) external {\\n    require(_ownerToId[to] == uint256(0), \\\"can only mint one reputation token\\\");\\n    super._mint(to, nonce);\\n    _ownerToId[to] = nonce;\\n\\n    // Set default score, if this goes to 0 cannot trade\\n    _reputation[_ownerToId[to]].score = 1e18; \\n\\n    nonce++;\\n  }\\n\\n  function getReputationScore(address owner) view external returns (uint256){\\n    require(_ownerToId[owner] != uint256(0), \\\"No Id found\\\");\\n    return _reputation[_ownerToId[owner]].score;\\n  }\\n\\n  function setReputationScore(address owner, uint256 score) external returns (uint256) \\n  //onlyOwner\\n  {\\n    require(_ownerToId[owner] != uint256(0), \\\"No Id found\\\");\\n    return _reputation[_ownerToId[owner]].score = score;\\n  }\\n\\n\\n  function updateScore(address to, int256 score) external onlyController{\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    if (score > 0) data.score = data.score + uint256(score);\\n    else{\\n        if (data.score <= uint256(-score)) data.score = 0; \\n        else data.score = data.score - uint256(-score);\\n      } \\n\\n    storeTopX(data.score, to); \\n  }\\n\\n\\n  function addScore(address to, uint256 score) external onlyController\\n   {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    data.score = data.score + score; \\n\\n    storeTopX(data.score, to); \\n  }\\n\\n  function decrementScore(address to, uint256 score) external onlyController\\n   {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    if (data.score <= score) data.score = 0; \\n    else data.score = data.score - score; \\n\\n    storeTopX(data.score, to); \\n  }\\n\\n  function addAverageScore(address to, uint256 score) external onlyController\\n\\n   {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n\\n    ReputationData storage data = _reputation[_ownerToId[to]];\\n    \\n    if (data.n == 0) {\\n      data.score = score;\\n    } else {\\n      data.score = (data.score / data.n + score) / (data.n + 1);\\n    }\\n\\n    data.n++;\\n  }\\n\\n  /**\\n   @notice reset scores\\n   */\\n  function resetScore(address to) external {\\n    require(_ownerToId[to] != uint256(0), \\\"No Id found\\\");\\n    delete _reputation[_ownerToId[to]];\\n  }\\n\\n  /// @notice called by controller when initiating market,\\n  function storeTopReputation(uint256 topX, uint256 marketId) external onlyController{\\n    if (getAvailableTopX() < topX) {\\n      allowAll[marketId] =true; \\n      return; \\n    }\\n\\n    for (uint256 i; i<topX; i++){\\n      canTrade[marketId][topReputations[i].trader] = true;\\n    }\\n\\n  }\\n\\n  /// @notice gets the x's ranked score from all reputation scores \\n  /// @dev returns 0 if topX is greater then avaiable nonzero rep scores-> everyone is allowed\\n  /// during reputation constraint periods \\n  function getMinRepScore(uint256 topX) public view returns(uint256) {\\n    if (getAvailableTopX() < topX) {\\n      return 0; \\n    }\\n    return topReputations[topX].score;\\n  }\\n\\n  function getAvailableTopX() public view returns(uint256){\\n    return unique_traders.length; \\n  }\\n\\n  function getAvailableTraderNum() public view returns(uint256){\\n    return nonce -1; \\n  }\\n\\n  /// @notice whether trader is above reputation threshold \\n  function traderCanTrade(uint256 marketId, address trader) external returns(bool){\\n    return allowAll[marketId]? true : canTrade[marketId][trader]; \\n  }\\n\\n  /// @notice called whenever a score is incremented   \\n  function storeTopX(uint256 score, address trader) internal {\\n    uint256 i = 0;\\n\\n    for(i; i < topReputations.length; i++) {\\n      if(topReputations[i].score < score) {\\n        break;\\n      }\\n    }\\n    // shifting the array of position (getting rid of the last element) \\n    for(uint j = topReputations.length - 1; j > i; j--) {\\n        topReputations[j].score = topReputations[j - 1].score;\\n        topReputations[j].trader = topReputations[j - 1].trader;\\n    }\\n    // update the new max element \\n    topReputations[i].score = score;\\n    topReputations[i].trader = trader;\\n\\n    if (isUnique[trader]) return; \\n    isUnique[trader] = true; \\n    unique_traders.push(trader);\\n\\n  }\\n\\n  function testStore() public view {\\n    for (uint i=0; i<10; i++){\\n      console.log('score', topReputations[i].score); \\n    }\\n  }  \\n}\",\"keccak256\":\"0x2c71c31fefb21938281e183cf5cba9824b9beb8f252a933daaaef1d276a6a0df\"},\"contracts/utils/helpers.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n\\nlibrary config{\\n\\n  uint256 public constant WAD_PRECISION = 18; \\n  uint256 public constant WAD = 1e18; \\n  uint256 public constant USDC_dec = 1e6; \\n  uint256 public constant roundLimit = 1e14; //0.0001 \\n\\n  //Max amount in one transaction \\n  uint256 private constant max_amount = 1e8 * WAD; \\n\\n  //Min amount in one transaction \\n  uint256 private constant min_amount = WAD/1e4; \\n\\n  function convertToWad(uint256 number, uint256 dec) internal pure returns(uint256 new_number){\\n    //number should not be 18 dec, but in collateral_dec\\n    new_number = number * (10 ** (WAD_PRECISION - dec));\\n    assert(new_number <= max_amount); \\n  }\\n\\n  function wadToDec(uint256 number, uint256 dec) internal pure returns(uint256 new_number){\\n    // number should be 18 dec \\n    assert(isInWad(number)); \\n    new_number = number/(10 ** (WAD_PRECISION - dec)); \\n\\n  }\\n\\n  function isInWad(uint256 number) internal pure returns(bool){\\n    return (number >= min_amount); \\n  }\\n\\n\\n\\n\\n}\",\"keccak256\":\"0xd30e0b9fdc4387086c91449032c63c8190e50bd580306e1e2a0b0dccbf735779\"},\"contracts/vaults/auth/Auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Provides a flexible and updatable auth pattern which is completely separate from application logic.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\nabstract contract Auth {\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    event AuthorityUpdated(address indexed user, Authority indexed newAuthority);\\n\\n    address public owner;\\n\\n    Authority public authority;\\n    mapping(address=>bool) Authorized; \\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(msg.sender, _owner);\\n    }\\n\\n    modifier requiresAuth() virtual {\\n        require(isAuthorized(msg.sender, msg.sig), \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    function isAuthorized(address user, bytes4 functionSig) internal view virtual returns (bool) {\\n        //Authority auth = authority; // Memoizing authority saves us a warm SLOAD, around 100 gas.\\n\\n        // Checking if the caller is the owner only after calling the authority saves gas in most cases, but be\\n        // aware that this makes protected functions uncallable even to the owner if the authority is out of order.\\n        return(user == owner || Authorized[user]);\\n        //return (address(auth) != address(0) && auth.canCall(user, address(this), functionSig)) || user == owner;\\n    }\\n\\n    function setNewAuthority(address newAuthority) public {\\n        require(msg.sender == owner );\\n        Authorized[newAuthority] = true; \\n\\n    }\\n\\n    function setAuthority(Authority newAuthority) public virtual {\\n        // We check if the caller is the owner first because we want to ensure they can\\n        // always swap out the authority even if it's reverting or using up a lot of gas.\\n        require(msg.sender == owner || authority.canCall(msg.sender, address(this), msg.sig));\\n\\n        authority = newAuthority;\\n\\n        emit AuthorityUpdated(msg.sender, newAuthority);\\n    }\\n\\n    function setOwner(address newOwner) public virtual requiresAuth {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which provides authorization data to an Auth instance.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Auth.sol)\\n/// @author Modified from Dappsys (https://github.com/dapphub/ds-auth/blob/master/src/auth.sol)\\ninterface Authority {\\n    function canCall(\\n        address user,\\n        address target,\\n        bytes4 functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x46c0e8d518396b50d7dc7f0050d716a5643afad9320b0cd27490fd8e00689dc7\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/instrument.sol\":{\"content\":\"\\n// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport \\\"./vault.sol\\\";\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {FixedPointMathLib} from \\\"./utils/FixedPointMathLib.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\nabstract contract Instrument {\\n\\n    modifier onlyUtilizer() {\\n        require(msg.sender == Utilizer, \\\"!Utilizer\\\");\\n        _;\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(msg.sender == vault.owner() || isValidator[msg.sender], \\\"!authorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault), \\\"caller must be vault\\\");\\n        _;\\n    }\\n\\n    modifier notLocked() {\\n        require(!locked); \\n        _; \\n    }\\n\\n    constructor (\\n        address _vault,\\n        address _Utilizer\\n    ) {\\n        vault = Vault(_vault);\\n        underlying = ERC20(vault.UNDERLYING());\\n        underlying.approve(_vault, MAX_UINT); // Give Vault unlimited access \\n        Utilizer = _Utilizer;\\n    }\\n\\n\\n    ERC20 public underlying;\\n    Vault public vault; \\n    bool locked; \\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private maturity_balance; \\n\\n    /// @notice address of user who submits the liquidity proposal \\n    address public Utilizer; \\n    address[] public validators; //set when deployed, but can't be ch\\n    mapping(address=>bool) isValidator; \\n\\n    /**\\n     @notice hooks for approval logic that are specific to each instrument type, called by controller for approval/default logic\\n     */\\n    function onMarketApproval(uint256 principal, uint256 yield) virtual external {}\\n\\n    function setUtilizer(address _Utilizer) external onlyAuthorized {\\n        require(_Utilizer != address(0));\\n        Utilizer = _Utilizer;\\n    }\\n\\n    // function setValidator(address _validator) external {\\n    //     require(msg.sender == vault.owner(), \\\"Not owner\\\"); \\n    //     validators.push(_validator); \\n    //     isValidator[_validator] = true;     \\n    // }\\n\\n\\n    /// @notice Withdraws a specific amount of underlying tokens from the Instrument.\\n    /// @param amount The amount of underlying tokens to withdraw.\\n    /// @return An error code, or 0 if the withdrawal was successful.\\n    function redeemUnderlying(uint256 amount) external onlyVault returns (bool){\\n        return underlying.transfer(address(vault), amount); \\n    }\\n\\n    /// @notice Returns a user's Instrument balance in underlying tokens.\\n    /// @param user The user to get the underlying balance of.\\n    /// @return The user's Instrument balance in underlying tokens.\\n    /// @dev May mutate the state of the Instrument by accruing interest.\\n    function balanceOfUnderlying(address user) public view returns (uint256){\\n        return underlying.balanceOf(user); \\n    }\\n\\n\\n    /**\\n     * @notice\\n     *  Provide an accurate estimate for the total amount of assets\\n     *  (principle + return) that this Instrument is currently managing,\\n     *  denominated in terms of Underlying tokens.\\n     *\\n     *  This total should be \\\"realizable\\\" e.g. the total value that could\\n     *  *actually* be obtained from this Instrument if it were to divest its\\n     *  entire position based on current on-chain conditions.\\n     * @dev\\n     *  Care must be taken in using this function, since it relies on external\\n     *  systems, which could be manipulated by the attacker to give an inflated\\n     *  (or reduced) value produced by this function, based on current on-chain\\n     *  conditions (e.g. this function is possible to influence through\\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\\n     *  mechanisms).\\n     *\\n     *  It is up to governance to use this function to correctly order this\\n     *  Instrument relative to its peers in the withdrawal queue to minimize\\n     *  losses for the Vault based on sudden withdrawals. This value should be\\n     *  higher than the total debt of the Instrument and higher than its expected\\n     *  value to be \\\"safe\\\".\\n     *  Estimated Total assets should be \\n\\n     * @return The estimated total assets in this Strategy.\\n     */\\n    function estimatedTotalAssets() public view virtual returns (uint256){}\\n\\n\\n    /// @notice Free up returns for vault to pull,  checks if the instrument is ready to be withdrawed, i.e all \\n    /// loans have been paid, all non-underlying have been liquidated, etc\\n    function readyForWithdrawal() public view virtual returns(bool){\\n        return true; \\n    }\\n\\n    /// @notice checks whether the vault can withdraw and record profit from this instrument \\n    /// for this instrument to resolve \\n    /// For creditlines, all debts should be repaid\\n    /// for strategies, all assets should be divested + converted to Underlying\\n    /// this function is important in preventing manipulations, \\n    /// @dev prepareWithdraw->vault.beforeResolve->vault.resolveInstrument in separate txs\\n    function prepareWithdraw()\\n        external \\n        onlyVault \\n        virtual\\n        returns (\\n            uint256 _profit,\\n            uint256 _loss,\\n            uint256 _debtPayment\\n        ){\\n            require(readyForWithdrawal(), \\\"not ready to withdraw\\\"); \\n\\n            // Lock additional drawdowns or usage of instrument balance \\n            lockLiquidityFlow();    \\n\\n        }\\n\\n    /**\\n     * Liquidate up to `_amountNeeded` of `underlying` of this strategy's positions,\\n     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\\n     * This function should return the amount of `underlying` tokens made available by the\\n     * liquidation. If there is a difference between them, `_loss` indicates whether the\\n     * difference is due to a realized loss, or if there is some other sitution at play\\n     * (e.g. locked funds) where the amount made available is less than what is needed.\\n     *\\n     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\\n     */\\n    function liquidatePosition(uint256 _amountNeeded) public  virtual returns (uint256 _liquidatedAmount, uint256 _loss){}\\n\\n    /**\\n     * Liquidate everything and returns the amount that got freed.\\n     * This function is used during emergency exit instead of `prepareReturn()` to\\n     * liquidate all of the instrument's positions back to the Vault.\\n     */\\n    function liquidateAllPositions() public  virtual returns (uint256 _amountFreed){}\\n\\n    function lockLiquidityFlow() internal{\\n        locked = true; \\n    }\\n\\n    function isLocked() public view returns(bool){\\n        return locked; \\n    }\\n\\n\\n    function transfer_liq(address to, uint256 amount) internal notLocked {\\n        if (vault.decimal_mismatch()) amount = vault.decSharesToAssets(amount); \\n        underlying.transfer(to, amount);\\n    }\\n\\n    function transfer_liq_from(address from, address to, uint256 amount) internal notLocked {\\n        if (vault.decimal_mismatch()) amount = vault.decSharesToAssets(amount); \\n        underlying.transferFrom(from, to, amount);\\n    }\\n\\n    /// @notice called before resolve, to avoid calculating redemption price based on manipulations \\n    function store_internal_balance() external onlyVault{\\n\\n        maturity_balance = balanceOfUnderlying(address(this)); \\n        if (vault.decimal_mismatch()) maturity_balance = vault.decAssetsToShares(maturity_balance); \\n\\n    }\\n\\n    function getMaturityBalance() public view returns(uint256){\\n        return maturity_balance; \\n    }\\n\\n    function isLiquid(uint256 amount) public virtual view returns(bool){}\\n\\n\\n    /// @notice Before supplying liquidity from the vault to this instrument,\\n    /// which is done automatically when instrument is trusted, \\n    /// need to check if certain conditions that are required to this specific \\n    /// instrument is met. For example, for a creditline with a collateral \\n    /// requirement need to check if this address has the specific amount of collateral\\n    /// @dev called to be checked at the approve phase from controller  \\n    function instrumentApprovalCondition() public virtual view returns(bool); \\n}\\n\\n\\n// contract RevenueToken is ERC20{\\n\\n// }\\n\\n \\n/// @notice Contract for unsecured loans, each instance will be associated to a borrower+marketId\\n/// approved borrowers will interact with this contract to borrow, repay. \\n/// and vault will supply principal and harvest principal/interest \\ncontract CreditLine is Instrument {\\n    using FixedPointMathLib for uint256;\\n    address public immutable borrower; \\n\\n    //  variables initiated at creation\\n    uint256 principal;\\n    uint256 notionalInterest; \\n    uint256 faceValue; //total amount due, i.e principal+interest\\n    uint256 duration; // normalized to a year 1 means 1 year, 0.5 means 6 month \\n    uint256 interestAPR; \\n\\n    // Modify-able Global Variables during repayments, borrow\\n    uint256 totalOwed; \\n    uint256 principalOwed; \\n    uint256 interestOwed;\\n    uint256 accumulated_interest; \\n    uint256 principalRepayed;\\n    uint256 interestRepayed; \\n\\n    // Collateral Info \\n    enum CollateralType{\\n        liquidateAble, \\n        nonLiquid, \\n        ownership \\n    }\\n    address public collateral; \\n    address public oracle; \\n    uint256 public collateral_balance; \\n    CollateralType public collateral_type; \\n\\n    uint256 drawdown_block; \\n    bool didDrawdown; \\n\\n    uint256 gracePeriod; \\n    uint256 resolveBlock; \\n    uint256 constant DUST = 1e18; //1usd\\n\\n    enum LoanStatus{\\n        notApproved,\\n        approvedNotDrawdowned,\\n        drawdowned, \\n        partially_repayed,\\n\\n        prepayment_fulfilled, \\n        matured, \\n        grace_period, \\n        isDefault\\n    }\\n\\n    LoanStatus public loanStatus; \\n\\n    uint256 lastRepaymentTime; \\n    uint256 gracePeriodStart; \\n    Proxy proxy; \\n\\n    /// @notice both _collateral and _oracle could be 0\\n    /// address if fully uncollateralized or does not have a price oracle \\n    /// param _notionalInterest and _principal is initialized as desired variables\\n    constructor(\\n        address vault,\\n        address _borrower, \\n        uint256 _principal,\\n        uint256 _notionalInterest, \\n        uint256 _duration,\\n        uint256 _faceValue,\\n        address _collateral, //collateral for the dao, could be their own native token or some tokenized revenue \\n        address _oracle, // oracle for price of collateral \\n        uint256 _collateral_balance, //promised collateral balance\\n        uint256 _collateral_type\\n    )  Instrument(vault, _borrower) {\\n        borrower = _borrower; \\n        principal = _principal; \\n        notionalInterest = _notionalInterest; \\n        duration = _duration;   \\n        faceValue = _faceValue;\\n\\n        collateral = _collateral; \\n        oracle = _oracle; \\n        collateral_balance = _collateral_balance; \\n        collateral_type = CollateralType(_collateral_type); \\n\\n        loanStatus = LoanStatus.notApproved; \\n\\n        proxy = new Proxy(address(this), _borrower); \\n    }\\n\\n    function getCurrentTime() internal view returns(uint256){\\n        return block.timestamp + 31536000/2; \\n    }\\n    function getProxy() public view returns(address){\\n        return address(proxy); \\n    }\\n\\n    /// @notice checks if the creditline is ready to be withdrawed, i.e all \\n    /// loans have been paid, all non-underlying have been liquidated, etc\\n    function readyForWithdrawal() public view override returns(bool){\\n        if (loanStatus == LoanStatus.matured || loanStatus == LoanStatus.isDefault\\n            || loanStatus == LoanStatus.prepayment_fulfilled) return true; \\n        return true; \\n        //return false  \\n    }\\n\\n    function getApprovedBorrowConditions() public view returns(uint256, uint256){\\n        if (vault.isTrusted(this)) return(principal, notionalInterest) ;\\n\\n        return (0,0); \\n    }\\n\\n    /// @notice if possible, and borrower defaults, liquidates given collateral to underlying\\n    /// and push back to vault. If not possible, push the collateral back to\\n    function liquidateAndPushToVault() internal  {}\\n    function auctionAndPushToVault() internal {} \\n    function isLiquidatable(address collateral) public view returns(bool){}\\n\\n    /// @notice if collateral is liquidateable and has oracle, fetch value of collateral \\n    /// and return ratio to principal \\n    function getCollateralRatio() public view returns(uint256){\\n\\n    }\\n    /// @notice After grace period auction off ownership to some other party and transfer the funds back to vault \\n    /// @dev assumes collateral has already been transferred to vault, needs to be checked by the caller \\n    function liquidateOwnership(address buyer) public virtual onlyAuthorized{\\n        // TODO implement auction \\n        proxy.changeOwnership(buyer);\\n    }\\n\\n    /// @notice transfers collateral back to vault when default \\n    function pushCollateralToVault(uint256 amount, address to) public virtual onlyAuthorized{\\n        require(loanStatus == LoanStatus.isDefault); \\n        ERC20(collateral).transfer(to, amount); \\n    }\\n\\n\\n\\n    /// @notice validators have to check these conditions at a human level too before approving \\n    function instrumentApprovalCondition() public override view returns(bool){\\n        // check if borrower has correct identity \\n\\n        // check if enough collateral has been added as agreed   \\n        if (collateral_type == CollateralType.liquidateAble || collateral_type == CollateralType.nonLiquid){\\n            require(ERC20(collateral).balanceOf(address(this)) >= collateral_balance, \\\"Insufficient collateral\\\"); \\n        }\\n\\n        // // check if validator(s) are set \\n        // if (validators.length == 0) {revert(\\\"No validators\\\"); }\\n\\n        // Check if proxy has been given ownership\\n        if (collateral_type == CollateralType.ownership && proxy.numContracts() == 0) revert(\\\"Ownership \\\"); \\n\\n        return true; \\n    } \\n\\n    /// @notice borrower deposit promised collateral  \\n    function depositCollateral(uint256 amount) external onlyUtilizer {\\n        require(collateral!= address(0)); \\n        ERC20(collateral).transferFrom(msg.sender, address(this), amount); \\n    }\\n\\n    /// @notice can only redeem collateral when debt is fully paid \\n    function releaseAllCollateral() internal {\\n        require(loanStatus == LoanStatus.matured || loanStatus == LoanStatus.prepayment_fulfilled, \\\"Loan status err\\\"); \\n\\n        ERC20(collateral).transfer(msg.sender,collateral_balance); \\n    }\\n\\n\\n\\n    /// @notice should only be called when (portion of) principal is repayed\\n    function adjustInterestOwed() internal {\\n\\n        uint256 remainingDuration = (drawdown_block + toSeconds(duration)) - getCurrentTime();\\n\\n        interestOwed = interestAPR.mulWadDown(toYear(remainingDuration).mulWadDown(principalOwed)); \\n    }\\n\\n    /// @param quoted_yield is in notional amount denominated in underlying, which is the area between curve and 1 at the x-axis point \\n    /// where area under curve is max_principal \\n    function onMarketApproval(uint256 max_principal, uint256 quoted_yield)  external override onlyVault {\\n        principal = max_principal; \\n        notionalInterest = quoted_yield; //this accounts for duration as well\\n        interestAPR = quoted_yield.divWadDown(duration.mulWadDown(principal)); \\n\\n        loanStatus = LoanStatus.approvedNotDrawdowned;\\n    }\\n\\n    function onMaturity() external onlyUtilizer {\\n        require(loanStatus == LoanStatus.prepayment_fulfilled || loanStatus == LoanStatus.matured,\\\"Not matured\\\"); \\n        require(block.number > resolveBlock, \\\"Block equal\\\"); \\n\\n        if (collateral_type == CollateralType.liquidateAble || collateral_type == CollateralType.nonLiquid ){\\n            releaseAllCollateral(); \\n        }\\n\\n        else proxy.changeOwnership(borrower);\\n        \\n        bool isPrepaid = loanStatus == LoanStatus.prepayment_fulfilled? true:false;\\n        // Write to storage resolve details (principal+interest repaid, is prepaid, etc) \\n        vault.pingMaturity(address(this), isPrepaid); \\n\\n    }\\n\\n    /// @notice borrower can see how much to repay now starting from last repayment time, also used to calculated\\n    /// how much interest to repay for the current principalOwed, which can be changed \\n    function interestToRepay() public view returns(uint256){\\n\\n        // Normalized to year\\n        uint256 elapsedTime = toYear(getCurrentTime() - lastRepaymentTime);\\n        // Owed interest from last timestamp till now  + any unpaid interest that has accumulated\\n        return elapsedTime.mulWadDown(interestAPR.mulWadDown(principalOwed)) + accumulated_interest ; \\n    }\\n     \\n    /// @notice Allows a borrower to borrow on their creditline.\\n    /// This creditline allows only lump sum drawdowns, all approved principal needs to be borrowed\\n    /// which would start the interest timer \\n    function drawdown() external onlyUtilizer{\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\n        require(loanStatus == LoanStatus.approvedNotDrawdowned, \\\"Already borrowed\\\"); \\n        loanStatus = LoanStatus.drawdowned; \\n\\n        drawdown_block = block.timestamp; \\n        lastRepaymentTime = block.timestamp;//-31536000/2; \\n\\n        totalOwed = principal + notionalInterest; \\n        principalOwed = principal; \\n        interestOwed = notionalInterest;\\n\\n        transfer_liq(msg.sender, principal); \\n    }\\n\\n    /// @notice allows a borrower to repay their loan\\n    /// Standard repayment structure is repaying interest for the owed principal periodically and\\n    /// whenever principal is repayed interest owed is decreased proportionally \\n    function repay( uint256 _repay_amount) external onlyUtilizer{\\n        require(vault.isTrusted(this), \\\"Not approved\\\");\\n\\n        uint256 owedInterest = interestToRepay(); \\n        uint256 repay_principal; \\n        uint256 repay_interest = _repay_amount; \\n\\n        // Push remaineder to repaying principal \\n        if (_repay_amount >= owedInterest){\\n            repay_principal += (_repay_amount - owedInterest);  \\n            repay_interest = owedInterest; \\n            accumulated_interest = 0; \\n        }\\n\\n        //else repay_amount is less than owed interest, accumulate the debt \\n        else accumulated_interest = owedInterest - repay_interest;\\n\\n        if(handleRepay(repay_principal, repay_interest)){\\n\\n            // Save resolve block, so that onMaturity can be called later\\n            resolveBlock = block.number; \\n\\n            // Prepayment //TODO cases where repayed a significant portion at the start but paid rest at maturity date\\n            if (isPaymentPremature()) loanStatus = LoanStatus.prepayment_fulfilled; \\n\\n            // Repayed at full maturity \\n            else loanStatus = LoanStatus.matured; \\n\\n        }\\n\\n        lastRepaymentTime = getCurrentTime();  \\n\\n        transfer_liq_from(msg.sender, address(this), _repay_amount);\\n\\n    }   \\n\\n    /// @notice updates balances after repayment\\n    /// need to remove min.\\n    function handleRepay(uint256 repay_principal, uint256 repay_interest) internal returns(bool){\\n        totalOwed -= Math.min((repay_principal + repay_interest), totalOwed); \\n        principalOwed -= Math.min(repay_principal, principalOwed);\\n        interestOwed -= Math.min(repay_interest, interestOwed);\\n\\n        principalRepayed += repay_principal;\\n        interestRepayed += repay_interest; \\n        if (repay_principal > 0) adjustInterestOwed(); \\n\\n        bool fullyRepayed = (principalOwed == 0 && interestOwed == 0)? true : false; \\n        return fullyRepayed; \\n    }\\n\\n    function setGracePeriod() external {}\\n\\n    /// @notice callable by anyone \\n    function beginGracePeriod() external {\\n       // require(block.timestamp >= drawdown_block + toSeconds(duration), \\\"time err\\\"); \\n        require(principalOwed > 0 && interestOwed > 0, \\\"repaid\\\"); \\n        gracePeriodStart = block.timestamp; \\n        loanStatus = LoanStatus.grace_period; \\n    }\\n\\n    function declareDefault() external onlyAuthorized {\\n       // require(gracePeriodStart + gracePeriod >= block.timestamp);\\n        require(loanStatus == LoanStatus.grace_period); \\n\\n        loanStatus = LoanStatus.isDefault; \\n    }\\n\\n    /// @notice should be called  at default by validators\\n    /// calling this function will go thorugh the necessary process\\n    /// to recoup bad debt, and will push the remaining funds to vault\\n    function onDefault() external onlyAuthorized{\\n        require(loanStatus == LoanStatus.isDefault); \\n\\n        // If collateral is liquidateable, liquidate at dex and push to vault\\n        if (isLiquidatable(collateral)) {\\n            liquidateAndPushToVault(); //TODO get pool \\n        }\\n\\n        // Else for non liquid governance tokens or ownership, should auction off \\n        else {\\n            auctionAndPushToVault(); \\n        }\\n\\n        //Testing purposes only \\n        underlying.transferFrom(msg.sender, address(this), principal/2); \\n\\n    }\\n\\n    /// @notice when principal/interest owed becomes 0, need to find out if this is prepaid\\n    function isPaymentPremature() internal returns(bool){\\n        // bool timeCondition = getCurrentTime() <= drawdown_block + toSeconds(duration); \\n        bool amountCondition = (principal+notionalInterest) > (principalRepayed + interestRepayed) + DUST; \\n\\n        // timeCondition implies amountCondition, but not the other way around \\n        return amountCondition; \\n    }\\n\\n\\n    function toYear(uint256 sec) internal pure returns(uint256){\\n        return (sec*1e18)/uint256(31536000); \\n    }\\n\\n    function toSeconds(uint256 y) internal pure returns(uint256){\\n        return uint256(31536000).mulWadDown(y); \\n    }\\n\\n    function getRemainingOwed() public view returns(uint256, uint256){\\n        return(principalOwed, interestOwed); \\n    }\\n\\n    function getCurrentLoanStatus() public view returns(uint256){}\\n\\n\\n\\n\\n\\n}\\n\\n\\ncontract Proxy{\\n    address owner; \\n    address delegator; \\n\\n    address[] public ownedContracts;\\n    mapping(address=>bytes4) public ownerTransferFunctions; \\n    mapping(address=>bool) public isValidContract; \\n\\n    /// @notice owner is first set to be the instrument contract\\n    /// and is meant to be changed back to the borrower or whoever is\\n    /// buying the ownership \\n    constructor(address _owner, address _delegator){\\n        owner = _owner; \\n        delegator = _delegator; \\n\\n    }\\n\\n    function changeOwnership(address newOwner) external {\\n        require(msg.sender == owner, \\\"Not owner\\\"); \\n        owner = newOwner; \\n    }\\n\\n    function numContracts() public view returns(uint256){\\n        return ownedContracts.length; \\n    }\\n\\n    /// @notice temporarily delegate ownership of relevant contract \\n    /// to this address, and stores the ownership transfering function\\n    /// called when initialized\\n    /// @param ownershipFunction is selector of the functions that transfers\\n    /// ownership \\n    /// @dev called by the borrower during assessment, after they had given ownership \\n    /// of the contract to this address first, \\n    /// but ownerTransferfunction/contract needs to be checked before approval by the validators\\n    /// Validators are responsible for checking if there isn't any other ownership transferring functions \\n    /// and check that the contract is legit, and think ways that the borrower can game the system. \\n    function delegateOwnership(\\n        address _contract, \\n        bytes4 ownershipFunction) external \\n    {\\n        ownedContracts.push(_contract); \\n        isValidContract[_contract] = true; \\n        ownerTransferFunctions[_contract] = ownershipFunction; \\n\\n    }\\n\\n    /// @notice transfers ownership to borrower or any other party if necessary\\n    function grantOwnership(\\n        address _contract, \\n        address newOwner,\\n        bytes calldata data, \\n        bool isSingleArgument) external{   \\n        require(msg.sender == owner);\\n        require(isValidContract[_contract]);\\n        if(newOwner != address(this)) isValidContract[_contract] = false; \\n\\n        if(isSingleArgument){\\n            (bool success, ) = _contract.call(\\n                abi.encodeWithSelector(\\n                    ownerTransferFunctions[_contract], \\n                    newOwner\\n                )\\n            );  \\n            require(success, \\\"!success\\\"); \\n        }\\n\\n        else{\\n            require(convertBytesToBytes4(data) != ownerTransferFunctions[_contract], \\\"func not allowed\\\"); \\n            (bool success, ) = _contract.call(data);\\n            require(success, \\\"!success\\\"); \\n\\n        }\\n    }\\n\\n    /// @notice function that ownership delegators use to call functions \\n    /// in their contract other than the transferFunction contract \\n    function proxyFunc(address _contract, bytes calldata data) external{\\n        require(msg.sender == delegator); \\n        require(convertBytesToBytes4(data) != ownerTransferFunctions[_contract], \\\"func not allowed\\\"); \\n\\n        (bool success, ) = _contract.call(data); \\n        require(success, \\\"!success\\\"); \\n\\n    }\\n\\n    function convertBytesToBytes4(bytes memory inBytes) internal pure returns (bytes4 outBytes4) {\\n        if (inBytes.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            outBytes4 := mload(add(inBytes, 4))\\n        }\\n    }\\n\\n    function getOwner() public view returns(address){\\n        return owner; \\n    }\\n}\\n\\n\\ncontract MockBorrowerContract{\\n\\n    address public owner; \\n    constructor(){\\n        owner = msg.sender;  \\n    }\\n\\n    function changeOwner(address newOwner) public {\\n        require(msg.sender == owner, \\\"notowner\\\"); \\n        owner = newOwner; \\n    } \\n\\n    function onlyOwnerFunction(uint256 a) public {\\n        console.log('msgsender', msg.sender, owner); \\n        require(msg.sender == owner, \\\"notowner\\\"); \\n        console.log('hello', a); \\n    }\\n\\n    function autoDelegate(address proxyad) public {\\n        Proxy(proxyad).delegateOwnership(address(this), this.changeOwner.selector); \\n    }\\n    fallback () external {\\n        console.log('hi?'); \\n    }\\n}\\n\",\"keccak256\":\"0xbe3f181b9f8ea2b91161aefcb809f9c352d1dae0a7043069ab62e086fc03319f\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n// import {ERC20} from \\\"../../ERC20/ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    uint immutable underlying_decimals; \\n    uint8 constant default_decimals = 18; \\n    bool public decimal_mismatch; \\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, default_decimals) {\\n        asset = _asset;\\n\\n        underlying_decimals = _asset.decimals(); \\n        decimal_mismatch = (_asset.decimals() != default_decimals);\\n        if(decimal_mismatch) assert(_asset.decimals() < default_decimals);  \\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function burn(uint256 shares) public virtual {\\n        _burn(msg.sender, shares);\\n    }\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n   \\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n        // if (decimal_mismatch) assets = decAssetsToShares(assets); \\n        return supply == 0 ? decimal_mismatch? decAssetsToShares(assets) : assets \\n                : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n        // if(decimal_mismatch) shares = decSharesToAssets(shares); \\n        return supply == 0 ? decimal_mismatch? decSharesToAssets(shares) : shares \\n                : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? decimal_mismatch? decSharesToAssets(shares) : shares \\n                : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n        // if (decimal_mismatch) assets = decAssetsToShares(assets); \\n\\n        return supply == 0 ? decimal_mismatch? decAssetsToShares(assets) : assets \\n                : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function decAssetsToShares(uint256 assets) public view virtual returns(uint256) {\\n        return assets * (10 ** (default_decimals - underlying_decimals)); \\n    }\\n\\n    function decSharesToAssets(uint256 shares) public view virtual returns(uint256){\\n        return shares / (10**(default_decimals - underlying_decimals)); \\n    }\\n}\\n\",\"keccak256\":\"0xb1d94074f056086ca6705a73c6adf5cd02bc215cd39befc83e6d7beb1ea0f710\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeCastLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Safe unsigned integer casting library that reverts on overflow.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeCastLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\\nlibrary SafeCastLib {\\n    function safeCastTo248(uint256 x) internal pure returns (uint248 y) {\\n        require(x < 1 << 248);\\n\\n        y = uint248(x);\\n    }\\n\\n    function safeCastTo224(uint256 x) internal pure returns (uint224 y) {\\n        require(x < 1 << 224);\\n\\n        y = uint224(x);\\n    }\\n\\n    function safeCastTo192(uint256 x) internal pure returns (uint192 y) {\\n        require(x < 1 << 192);\\n\\n        y = uint192(x);\\n    }\\n\\n    function safeCastTo160(uint256 x) internal pure returns (uint160 y) {\\n        require(x < 1 << 160);\\n\\n        y = uint160(x);\\n    }\\n\\n    function safeCastTo128(uint256 x) internal pure returns (uint128 y) {\\n        require(x < 1 << 128);\\n\\n        y = uint128(x);\\n    }\\n\\n    function safeCastTo96(uint256 x) internal pure returns (uint96 y) {\\n        require(x < 1 << 96);\\n\\n        y = uint96(x);\\n    }\\n\\n    function safeCastTo64(uint256 x) internal pure returns (uint64 y) {\\n        require(x < 1 << 64);\\n\\n        y = uint64(x);\\n    }\\n\\n    function safeCastTo32(uint256 x) internal pure returns (uint32 y) {\\n        require(x < 1 << 32);\\n\\n        y = uint32(x);\\n    }\\n\\n    function safeCastTo24(uint256 x) internal pure returns (uint24 y) {\\n        require(x < 1 << 24);\\n\\n        y = uint24(x);\\n    }\\n\\n    function safeCastTo8(uint256 x) internal pure returns (uint8 y) {\\n        require(x < 1 << 8);\\n\\n        y = uint8(x);\\n    }\\n}\\n\",\"keccak256\":\"0x636e0f18c1b287c9342e14660a914b37a927d9f64d6c29e27016784979ce8d59\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/vault.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport {Auth} from \\\"./auth/Auth.sol\\\";\\nimport {ERC4626} from \\\"./mixins/ERC4626.sol\\\";\\n\\nimport {SafeCastLib} from \\\"./utils/SafeCastLib.sol\\\";\\nimport {SafeTransferLib} from \\\"./utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"./utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC20} from \\\"./tokens/ERC20.sol\\\";\\nimport {Instrument} from \\\"./instrument.sol\\\";\\nimport {Controller} from \\\"../protocol/controller.sol\\\";\\nimport {MarketManager} from \\\"../protocol/marketmanager.sol\\\"; \\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\ncontract Vault is ERC4626, Auth{\\n    using SafeCastLib for uint256; \\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n\\n    event InstrumentDeposit(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\n    event InstrumentWithdrawal(address indexed user, Instrument indexed instrument, uint256 underlyingAmount);\\n    event InstrumentTrusted(address indexed user, Instrument indexed instrument);\\n    event InstrumentDistrusted(address indexed user, Instrument indexed instrument);\\n    event InstrumentHarvest(address indexed instrument, uint256 instrument_balance, uint256 mag, bool sign); //sign is direction of mag, + or -.\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                 CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal BASE_UNIT;\\n    uint256 totalInstrumentHoldings; //total holdings deposited into all Instruments collateral\\n    ERC20 public immutable UNDERLYING;\\n    Controller private controller;\\n    MarketManager.MarketParameters default_params; \\n\\n    ///// For Factory\\n    bool public onlyVerified; \\n    uint256 public r; //reputation ranking  \\n    uint256 public asset_limit; \\n    uint256 public total_asset_limit; \\n\\n    mapping(Instrument => InstrumentData) public instrument_data;\\n    mapping(address => uint256) public  num_proposals;\\n    mapping(uint256=> Instrument) public Instruments; //marketID-> Instrument\\n    mapping(uint256 => bool) resolveBeforeMaturity;\\n    mapping(uint256=>ResolveVar) prepareResolveBlock;\\n\\n    enum InstrumentType {\\n        CreditLine,\\n        CoveredCall,\\n        Pool, \\n        Other\\n    }\\n\\n\\n    /// @param trusted Whether the Instrument is trusted.\\n    /// @param balance The amount of underlying tokens held in the Instrument.\\n    struct InstrumentData {\\n      bool isPool; \\n      // Used to determine if the Vault will operate on a Instrument.\\n      bool trusted;\\n      // Balance of the contract denominated in Underlying, \\n      // used to determine profit and loss during harvests of the Instrument.  \\n      // represents the amount of debt the Instrument has incurred from this vault   \\n      uint256 balance; // in underlying, IMPORTANT to get this number right as it modifies key states \\n      uint256 faceValue; // in underlying\\n      uint256 marketId;\\n      uint256 principal; //this is total available allowance in underlying\\n      uint256 expectedYield; // total interest paid over duration in underlying\\n      uint256 duration;\\n      string description;\\n      address Instrument_address;\\n      InstrumentType instrument_type;\\n      uint256 maturityDate;\\n\\n      PoolData poolData; \\n    }\\n    struct PoolData{\\n      uint256 saleAmount; \\n      uint256 initPrice; // init price of longZCB in the amm \\n      uint256 promisedReturn; //per unit time \\n      uint256 inceptionTime;\\n      uint256 inceptionPrice; // init price of longZCB after assessment \\n      uint256 leverageFactor; //leverageFactor * manager collateral = capital from vault to instrument\\n    }\\n\\n    struct ResolveVar{\\n        uint256 endBlock; \\n        bool isPrepared; \\n    }\\n\\n    constructor(\\n        address _UNDERLYING,\\n        address _controller, \\n        address owner, \\n\\n        bool _onlyVerified, //\\n        uint256 _r, //reputation ranking\\n        uint256 _asset_limit, \\n        uint256 _total_asset_limit,\\n\\n        MarketManager.MarketParameters memory _default_params\\n    )\\n        ERC4626(\\n            ERC20(_UNDERLYING),\\n            string(abi.encodePacked(\\\"debita \\\", ERC20(_UNDERLYING).name(), \\\" Vault\\\")),\\n            string(abi.encodePacked(\\\"db\\\", ERC20(_UNDERLYING).symbol()))\\n        )  Auth(owner)\\n\\n    {\\n        UNDERLYING = ERC20(_UNDERLYING);\\n        //BASE_UNIT = 10**ERC20(_UNDERLYING).decimals();\\n        BASE_UNIT = 10**18; \\n        controller = Controller(_controller);\\n        set_minting_conditions( _onlyVerified,  _r, _asset_limit, _total_asset_limit); \\n        default_params = _default_params; \\n        //totalSupply = type(uint256).max;\\n    }\\n\\n    function getInstrumentType(uint256 marketId) public view returns(uint256){\\n        // return 0 if credit line //TODO \\n        return 0; \\n    }\\n\\n    function getInstrumentData(Instrument _instrument) public view returns (InstrumentData memory) {\\n        return instrument_data[_instrument];\\n    }\\n    \\n    modifier onlyController(){\\n        require(address(controller) == msg.sender || msg.sender == owner || address(this) == msg.sender ,  \\\"is not controller\\\"); \\n        _;\\n    }\\n\\n    /// @notice called by controller at maturity \\n    function controller_burn(uint256 amount, address bc_address) external onlyController {\\n        _burn(bc_address,amount); \\n    }\\n    /// @notice called by controller at maturity, since redeem amount > balance in bc\\n    function controller_mint(uint256 amount, address to) external onlyController {\\n        _mint(to , amount); \\n    }\\n    /// @notice amount is always in WAD, so need to convert if decimals mismatch\\n    function trusted_transfer(uint256 amount, address to) external onlyController{\\n        if (decimal_mismatch) amount = decSharesToAssets(amount); \\n        UNDERLYING.transfer(to, amount); \\n    }\\n\\n    function balanceInUnderlying(address ad) external view returns(uint256){\\n        return previewRedeem(balanceOf[ad]); \\n    }\\n\\n    /// @notice burns all balance of address \\n    function burnAll(address to) private{\\n      _burn(to, balanceOf[to]); \\n    }\\n\\n    /// @notice Harvest a trusted Instrument, records profit/loss \\n    function harvest(address instrument) public {\\n      require(instrument_data[Instrument(instrument)].trusted, \\\"UNTRUSTED_Instrument\\\");\\n      InstrumentData storage data = instrument_data[Instrument(instrument)]; \\n\\n      uint256 oldTotalInstrumentHoldings = totalInstrumentHoldings; \\n      uint256 balanceLastHarvest = data.balance;\\n      uint256 balanceThisHarvest = Instrument(instrument).balanceOfUnderlying(address(instrument));\\n      \\n      if (balanceLastHarvest == balanceThisHarvest) {\\n          return;\\n      }\\n\\n      data.balance = balanceThisHarvest;\\n\\n      uint256 delta;\\n      bool net_positive = balanceThisHarvest >= balanceLastHarvest;\\n      delta = net_positive ? balanceThisHarvest - balanceLastHarvest : balanceLastHarvest - balanceThisHarvest;\\n      totalInstrumentHoldings = net_positive ? oldTotalInstrumentHoldings + delta : oldTotalInstrumentHoldings - delta;\\n\\n      emit InstrumentHarvest(instrument, balanceThisHarvest, delta, net_positive);\\n    }\\n\\n    /// @notice Deposit a specific amount of float into a trusted Instrument.\\n    /// Called when market is approved. \\n    /// Also has the role of granting a credit line to a credit-based Instrument like uncol.loans \\n    function depositIntoInstrument(uint256 marketId, uint256 underlyingAmount) public \\n  //onlyManager\\n    {\\n      Instrument instrument = fetchInstrument(marketId); \\n      require(instrument_data[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\n\\n      if (decimal_mismatch) underlyingAmount = decSharesToAssets(underlyingAmount); \\n\\n      if (underlyingAmount > UNDERLYING.balanceOf(address(this))) revert(\\\"Not enough bal in vault\\\"); \\n\\n      totalInstrumentHoldings += underlyingAmount; \\n\\n      instrument_data[instrument].balance += underlyingAmount;\\n\\n      require(UNDERLYING.transfer(address(instrument), underlyingAmount), \\\"DEPOSIT_FAILED\\\");\\n\\n      emit InstrumentDeposit(msg.sender, instrument, underlyingAmount);\\n    }\\n\\n    /// @notice Withdraw a specific amount of underlying tokens from a Instrument.\\n    function withdrawFromInstrument(Instrument instrument, uint256 underlyingAmount) internal {\\n      require(instrument_data[instrument].trusted, \\\"UNTRUSTED Instrument\\\");\\n      \\n      if (decimal_mismatch) underlyingAmount = decSharesToAssets(underlyingAmount); \\n\\n      instrument_data[instrument].balance -= underlyingAmount;\\n      \\n      totalInstrumentHoldings -= underlyingAmount;\\n      \\n      require(instrument.redeemUnderlying(underlyingAmount), \\\"REDEEM_FAILED\\\");\\n      \\n      emit InstrumentWithdrawal(msg.sender, instrument, underlyingAmount);\\n    }\\n\\n    function withdrawFromInstrumentExternal(\\n      uint256 marketId, \\n      uint256 underlyingAmount\\n      ) external\\n    //onlyManager\\n    {\\n      withdrawFromInstrument(fetchInstrument(marketId), underlyingAmount);\\n    }\\n    /// @notice Stores a Instrument as trusted when its approved\\n    function trustInstrument(\\n      uint256 marketId,\\n      Controller.ApprovalData memory data, \\n      bool isPool\\n      ) external onlyController{\\n      instrument_data[fetchInstrument(marketId)].trusted = true;\\n\\n      //Write to storage \\n      if(!isPool){\\n        InstrumentData storage instrumentData = instrument_data[Instruments[marketId]]; \\n        instrumentData.principal = data.approved_principal; \\n        instrumentData.expectedYield = data.approved_yield;\\n        instrumentData.faceValue = data.approved_principal + data.approved_yield; \\n\\n        depositIntoInstrument(marketId, data.approved_principal);\\n        \\n        setMaturityDate(marketId);\\n\\n        fetchInstrument(marketId).onMarketApproval(data.approved_principal, data.approved_yield); \\n\\n      } else{\\n        depositIntoInstrument(marketId, data.approved_principal);\\n      }\\n    }\\n\\n    /// @notice fetches how much asset the instrument has in underlying. \\n    function instrumentAssetOracle(uint256 marketId) public view returns(uint256){\\n      // Default balance oracle \\n      return instrument_data[Instruments[marketId]].balance; \\n      //TODO custom oracle \\n    }\\n\\n    /// @notice Stores a Instrument as untrusted\\n    function distrustInstrument(Instrument instrument) external onlyController {\\n      instrument_data[instrument].trusted = false; \\n    }\\n\\n    /// @notice returns true if Instrument is approved\\n    function isTrusted(Instrument instrument) public view returns(bool){\\n      return instrument_data[instrument].trusted; \\n    }\\n\\n    /// @notice Calculates the total amount of underlying tokens the Vault holds, excluding profit \\n    function totalAssets() public view override returns(uint256){\\n      return totalInstrumentHoldings + totalFloat();\\n    }\\n\\n    function utilizationRate() public view returns(uint256){\\n\\n        if (totalInstrumentHoldings==0) return 0;  \\n        return totalInstrumentHoldings.divWadDown(totalAssets()); \\n\\n    }\\n    function totalFloat() public view returns (uint256) {\\n        return UNDERLYING.balanceOf(address(this));\\n    }\\n\\n    function fetchInstrument(uint256 marketId) public view returns(Instrument){\\n      return Instruments[marketId]; \\n    }\\n\\n    function fetchInstrumentData(uint256 marketId) public view returns(InstrumentData memory){\\n      return instrument_data[Instruments[marketId]];\\n    }\\n\\n    function fetchPoolTrancheData(uint256 marketId) public view returns(uint256, uint256, uint256, uint256){\\n      InstrumentData memory data = instrument_data[Instruments[marketId]]; \\n      return (data.poolData.promisedReturn, data.poolData.inceptionTime, \\n            data.poolData.inceptionPrice, data.poolData.leverageFactor); \\n    }\\n\\n    /**\\n     called on market denial + removal, maybe no chekcs?\\n     */\\n    function removeInstrument(uint256 marketId) internal {\\n        InstrumentData storage data = instrument_data[Instruments[marketId]];\\n        require(data.marketId > 0, \\\"instrument doesn't exist\\\");\\n        delete instrument_data[Instruments[marketId]];\\n        delete Instruments[marketId];\\n        // emit event here;\\n    }\\n\\n    /// @notice add instrument proposal created by the Utilizer \\n    /// @dev Instrument instance should be created before this is called\\n    /// need to add authorization\\n    function addProposal(\\n        InstrumentData memory data\\n    ) external onlyController {\\n      if(!data.isPool){\\n        require(data.principal > 0, \\\"principal must be greater than 0\\\");\\n        require(data.duration > 0, \\\"duration must be greater than 0\\\");\\n        require(data.faceValue > 0, \\\"faceValue must be greater than 0\\\");\\n        require(data.principal >= BASE_UNIT, \\\"Needs to be in decimal format\\\"); \\n        require(data.marketId > 0, \\\"must be valid instrument\\\");\\n      }\\n        num_proposals[msg.sender] ++; \\n\\n        instrument_data[Instrument(data.Instrument_address)] = data;  \\n\\n        Instruments[data.marketId] = Instrument(data.Instrument_address);\\n    }\\n\\n    function setMaturityDate(uint256 marketId) internal {\\n\\n        instrument_data[fetchInstrument(marketId)].maturityDate = instrument_data[fetchInstrument(marketId)].duration + block.timestamp;\\n    }\\n\\n    /// @notice function called when instrument resolves from within\\n    function pingMaturity(address instrument, bool premature) external {\\n        require(msg.sender == instrument || isTrusted(Instrument(instrument))); \\n        uint256 marketId = instrument_data[Instrument(instrument)].marketId; \\n        beforeResolve(marketId); \\n        resolveBeforeMaturity[marketId] = premature; \\n    }\\n\\n    /// @notice RESOLVE FUNCTION #1\\n    /// Checks if instrument is ready to be resolved and locks capital.\\n    /// records blocknumber such that resolveInstrument is called after this function \\n    /// records balances+PnL of instrument\\n    /// @dev need to store internal balance that is used to calculate the redemption price \\n    function beforeResolve(uint256 marketId) public {\\n        Instrument _instrument = Instruments[marketId]; \\n\\n        require(msg.sender == address(_instrument) || msg.sender == address(controller), \\\"Not allowed\\\"); \\n        require(isTrusted( _instrument), \\\"Not trusted\\\"); \\n\\n        // Should revert if can't be resolved \\n        _instrument.prepareWithdraw();\\n\\n        // Record profit/loss used for calculation of redemption price \\n        harvest(address(_instrument));\\n\\n        _instrument.store_internal_balance(); \\n        prepareResolveBlock[marketId] = ResolveVar(block.number,true) ;  \\n      }\\n\\n    /// @notice RESOLVE FUNCTION #2\\n    /// @dev In cases of default, needs to be called AFTER the principal recouperation attempts \\n    /// like liquidations, auctions, etc such that the redemption price takes into account the maturity balance\\n    function resolveInstrument(\\n        uint256 marketId\\n    ) external onlyController\\n    returns(bool, uint256, uint256, bool) {\\n        Instrument _instrument = Instruments[marketId];\\n        ResolveVar memory rvar = prepareResolveBlock[marketId]; \\n        require(_instrument.isLocked(), \\\"Not Locked\\\");\\n        require(rvar.isPrepared && rvar.endBlock < block.number, \\\"can't resolve\\\"); \\n\\n        uint256 bal = UNDERLYING.balanceOf(address(this)); \\n        uint256 instrument_balance = _instrument.getMaturityBalance(); \\n\\n        InstrumentData memory data = instrument_data[_instrument];\\n\\n        bool prematureResolve = resolveBeforeMaturity[marketId]; \\n        bool atLoss; \\n        uint256 total_loss; \\n        uint256 extra_gain; \\n\\n        // If resolved at predetermined maturity date, loss is defined by\\n        // the event the instrument has paid out all its yield + principal \\n        if (!prematureResolve){\\n            atLoss = instrument_balance < data.faceValue;\\n            total_loss = atLoss ? data.faceValue - instrument_balance : 0;\\n            extra_gain = !atLoss ? instrument_balance - data.faceValue : 0;\\n        }\\n\\n        // If resolved before predetermined maturity date, loss is defined by \\n        // the event the instrument has balance less then principal \\n        else {\\n            atLoss = instrument_balance < data.principal; \\n            total_loss = atLoss? data.principal - instrument_balance :0; \\n        }\\n\\n        withdrawFromInstrument(_instrument, instrument_balance);\\n        removeInstrument(data.marketId);\\n\\n        return(atLoss, extra_gain, total_loss, prematureResolve); \\n    }\\n\\n    /// @notice when market resolves, send back pulled collateral from managers \\n    function repayDebt(address to, uint256 amount) external onlyController{\\n        UNDERLYING.transfer(to, amount); \\n    }\\n\\n    /**\\n     called on market denial by controller.\\n     */\\n    function denyInstrument(uint256 marketId) external onlyController {\\n        InstrumentData storage data = instrument_data[Instruments[marketId]];\\n\\n        require(marketId > 0 && data.Instrument_address != address(0), \\\"invalid instrument\\\");\\n\\n        require(!data.trusted, \\\"can't deny approved instrument\\\");\\n        \\n        removeInstrument(marketId);\\n    }\\n\\n\\n    function instrumentApprovalCondition(uint256 marketId) external view returns(bool){\\n      return Instruments[marketId].instrumentApprovalCondition(); \\n    }\\n\\n    /// TODO \\n    function deduct_withdrawal_fees(uint256 amount) internal returns(uint256){\\n      return amount; \\n    }\\n\\n\\n    /// @notice types of restrictions are: \\n    /// a) verified address b) reputation scores \\n    function receiver_conditions(address receiver) public view returns(bool){\\n        return true; \\n    }\\n\\n    /// @notice called when constructed, params set by the creater of the vault \\n    function set_minting_conditions(\\n      bool _onlyVerified, \\n      uint256 _r, \\n      uint256 _asset_limit,\\n      uint256 _total_asset_limit) internal{\\n        onlyVerified = _onlyVerified; \\n        r = _r; \\n        asset_limit = _asset_limit; \\n        total_asset_limit = _total_asset_limit; \\n    } \\n\\n\\n    function get_vault_params() public view returns(MarketManager.MarketParameters memory){\\n      return default_params; \\n    }\\n\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual override {\\n      require(enoughLiqudity(assets), \\\"Not enough liqudity in vault\\\"); \\n\\n    }\\n\\n    /// @notice returns true if the vault has enough balance to withdraw or supply to new instrument\\n    /// (excluding those supplied to existing instruments)\\n    /// @dev for now this implies that the vault allows full utilization ratio, but the utilization ratio\\n    /// should be (soft)maxed and tunable by a parameter \\n    function enoughLiqudity(uint256 amounts) public view returns(bool){\\n        return (UNDERLYING.balanceOf(address(this)) >= amounts); \\n    }\\n\\n\\n    /// @notice function that closes instrument prematurely \\n    function closeInstrument(uint256 marketId) external onlyController{\\n      Instrument instrument = fetchInstrument( marketId); \\n\\n      // If instrument has non-underlying tokens, liquidate them first. \\n      instrument.liquidateAllPositions(); \\n\\n    }\\n\\n    function viewPrincipalAndYield(uint256 marketId) public view returns(uint256,uint256){\\n        InstrumentData memory data = instrument_data[Instruments[marketId]];\\n        return (data.principal, data.expectedYield); \\n    }\\n\\n    /// @notice a minting restrictor is set for different vaults \\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256 assets) {\\n        if (!receiver_conditions(receiver)) revert(\\\"Minting Restricted\\\"); \\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n   \\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n\\n    /// @notice apply fee before withdrawing to prevent just minting before maturities and withdrawing after \\n     function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        assets = deduct_withdrawal_fees(assets); \\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n\\n\\n\\n}\",\"keccak256\":\"0x71c335c08a8053c2495250dcaecc5b472ce82ce506681f734a9fa673fb45fd81\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/tokens/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern, minimalist, and gas efficient ERC-721 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 indexed id);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 indexed id);\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         METADATA STORAGE/LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    function tokenURI(uint256 id) public view virtual returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) internal _ownerOf;\\n\\n    mapping(address => uint256) internal _balanceOf;\\n\\n    function ownerOf(uint256 id) public view virtual returns (address owner) {\\n        require((owner = _ownerOf[id]) != address(0), \\\"NOT_MINTED\\\");\\n    }\\n\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS\\\");\\n\\n        return _balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(uint256 => address) public getApproved;\\n\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(string memory _name, string memory _symbol) {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 id) public virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender], \\\"NOT_AUTHORIZED\\\");\\n\\n        getApproved[id] = spender;\\n\\n        emit Approval(owner, spender, id);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        isApprovedForAll[msg.sender][operator] = approved;\\n\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        require(from == _ownerOf[id], \\\"WRONG_FROM\\\");\\n\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(\\n            msg.sender == from || isApprovedForAll[from][msg.sender] || msg.sender == getApproved[id],\\n            \\\"NOT_AUTHORIZED\\\"\\n        );\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        unchecked {\\n            _balanceOf[from]--;\\n\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(from, to, id);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes calldata data\\n    ) public virtual {\\n        transferFrom(from, to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, from, id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 Interface ID for ERC165\\n            interfaceId == 0x80ac58cd || // ERC165 Interface ID for ERC721\\n            interfaceId == 0x5b5e139f; // ERC165 Interface ID for ERC721Metadata\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 id) internal virtual {\\n        require(to != address(0), \\\"INVALID_RECIPIENT\\\");\\n\\n        require(_ownerOf[id] == address(0), \\\"ALREADY_MINTED\\\");\\n\\n        // Counter overflow is incredibly unrealistic.\\n        unchecked {\\n            _balanceOf[to]++;\\n        }\\n\\n        _ownerOf[id] = to;\\n\\n        emit Transfer(address(0), to, id);\\n    }\\n\\n    function _burn(uint256 id) internal virtual {\\n        address owner = _ownerOf[id];\\n\\n        require(owner != address(0), \\\"NOT_MINTED\\\");\\n\\n        // Ownership check above ensures no underflow.\\n        unchecked {\\n            _balanceOf[owner]--;\\n        }\\n\\n        delete _ownerOf[id];\\n\\n        delete getApproved[id];\\n\\n        emit Transfer(owner, address(0), id);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL SAFE MINT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _safeMint(address to, uint256 id) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, \\\"\\\") ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n\\n    function _safeMint(\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, id);\\n\\n        require(\\n            to.code.length == 0 ||\\n                ERC721TokenReceiver(to).onERC721Received(msg.sender, address(0), id, data) ==\\n                ERC721TokenReceiver.onERC721Received.selector,\\n            \\\"UNSAFE_RECIPIENT\\\"\\n        );\\n    }\\n}\\n\\n/// @notice A generic interface for a contract which properly accepts ERC721 tokens.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC721.sol)\\nabstract contract ERC721TokenReceiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external virtual returns (bytes4) {\\n        return ERC721TokenReceiver.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x04af19f16f00ba65ae168d6d10da5210dc18da6bcec6974dccf984ba388aa22d\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"},\"solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x333b56bef66ff71e3838910781df214acbeb6c2d6ace27a04ebb510f0e669300\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005b8338038062005b83833981016040819052620000349162000078565b50600880546001600160a01b0319166001600160a01b0392909216919091179055620000b0565b80516001600160a01b03811681146200007357600080fd5b919050565b600080604083850312156200008c57600080fd5b62000097836200005b565b9150620000a7602084016200005b565b90509250929050565b615ac380620000c06000396000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c80637ea3417f116101de578063ad4e4e701161010f578063d82aff11116100ad578063ebd4dc461161007c578063ebd4dc461461094d578063f0fd1d3814610970578063f251f82e14610983578063f25fcc9f1461099657600080fd5b8063d82aff1114610901578063da0a697f14610914578063e8a7802614610927578063ebac31401461093a57600080fd5b8063c4abc650116100e9578063c4abc650146107f5578063ce93ec6714610469578063d1227136146108db578063d65ec964146108ee57600080fd5b8063ad4e4e701461087c578063b1b7e1f21461088f578063b9209e33146108af57600080fd5b80638dc3d9b41161017c578063937b6feb11610156578063937b6feb146107d25780639403b634146107f55780639fe1458b14610808578063ac1b6b011461083157600080fd5b80638dc3d9b41461078c5780638f5709a51461079f5780638fbbc868146107b257600080fd5b8063830e2a02116101b8578063830e2a02146106d9578063875e487e146106ec5780638c64ea4a1461070f5780638d4f16d71461073857600080fd5b80637ea3417f14610678578063805798ac1461068b57806381e1b07c146106ae57600080fd5b806338ba4614116102b8578063482c0aa8116102565780634cb44087116102305780634cb440871461062a57806357b613601461063d5780636399d03d146106455780637789ec5a1461065857600080fd5b8063482c0aa8146105f1578063494ef447146106045780634a7e35f91461061757600080fd5b806343437be01161029257806343437be01461058b57806344c74393146105ab578063457a89f6146105cb578063473597a0146105de57600080fd5b806338ba4614146105455780633ea7fbdb146105585780633ec8dc3b1461056b57600080fd5b806314f2b14c1161032557806323f2a73f116102ff57806323f2a73f146104e95780632b858734146104fc5780632f8899f31461050f578063340e04b31461053257600080fd5b806314f2b14c146104695780632358d5a81461048957806323ba6107146104c657600080fd5b80630c33df18116103615780630c33df18146103e75780630d159896146103fa5780630db065f41461041b578063135e563d1461043e57600080fd5b806303cccb351461038857806305a1ce99146103ac5780630622fd17146103d4575b600080fd5b6103aa336000908152600160208190526040909120805460ff19169091179055565b005b6103bf6103ba366004614bb8565b6109bf565b60405190151581526020015b60405180910390f35b6103aa6103e2366004614bf6565b610a02565b6103bf6103f5366004614c3b565b610a4c565b61040d610408366004614bb8565b610b27565b6040519081526020016103cb565b6103bf610429366004614c6b565b60016020526000908152604090205460ff1681565b61045161044c366004614bb8565b610bd7565b6040516001600160a01b0390911681526020016103cb565b61040d610477366004614bb8565b60009081526005602052604090205490565b6103bf610497366004614c88565b6000828152600d602090815260408083206001600160a01b038516845260010190915290205460ff1692915050565b6103bf6104d4366004614c6b565b600f6020526000908152604090205460ff1681565b6103bf6104f7366004614c88565b610c01565b6103aa61050a366004614bb8565b610c7c565b61040d61051d366004614bb8565b6000908152600d602052604090206008015490565b6103aa610540366004614d65565b610ea5565b6103aa610553366004614e2f565b610f5e565b6103aa610566366004614c6b565b61113f565b61057e610579366004614bb8565b61118b565b6040516103cb9190614ee1565b61040d610599366004614bb8565b60066020526000908152604090205481565b61040d6105b9366004614c6b565b600e6020526000908152604090205481565b6103aa6105d9366004614bb8565b6111fa565b6103aa6105ec366004614c6b565b611382565b61040d6105ff366004614f22565b6113ce565b6103aa610612366004614f44565b6113ff565b6103aa610625366004615074565b6114ec565b6103aa610638366004614bb8565b611ca2565b61057e611ded565b6103aa610653366004614bb8565b611e4f565b61040d610666366004614c6b565b60036020526000908152604090205481565b61057e610686366004614c88565b611fed565b61040d610699366004614bb8565b6000908152600d602052604090206009015490565b6103bf6106bc366004614bb8565b6000908152600d602052604090206003810154600c909101541490565b61040d6106e7366004614c88565b61243f565b61040d6106fa366004614bb8565b6000908152600d60205260409020600a015490565b61045161071d366004614bb8565b6004602052600090815260409020546001600160a01b031681565b61076c610746366004614bb8565b600260205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152016103cb565b6103aa61079a366004614bb8565b6124df565b6103aa6107ad366004614c88565b612847565b61040d6107c0366004614bb8565b60056020526000908152604090205481565b61040d6107e0366004614bb8565b6000908152600d60205260409020600b015490565b610451610803366004614bb8565b6128ac565b610451610816366004614bb8565b6000908152600460205260409020546001600160a01b031690565b61086161083f366004614bb8565b6040805180820190915260008082526020820152600091825260209190915290565b604080518251815260209283015192810192909252016103cb565b6103aa61088a366004614bb8565b6128d4565b6108a261089d366004614bb8565b612b60565b6040516103cb91906151aa565b6103bf6108bd366004614c6b565b6001600160a01b031660009081526001602052604090205460ff1690565b61040d6108e9366004614bb8565b612bc1565b61040d6108fc366004614bb8565b6130a7565b6103aa61090f366004614c6b565b613162565b6103aa610922366004614f22565b6131c1565b6103bf610935366004614bf6565b613241565b6103aa610948366004614bf6565b6132d4565b61040d61095b366004614bb8565b6000908152600d60205260409020600c015490565b6103aa61097e3660046151e2565b61334e565b6103aa610991366004614bf6565b613412565b61040d6109a4366004614c6b565b6001600160a01b031660009081526003602052604090205490565b6000818152600d602052604081206004810154600790910154108015906109fc57506000828152600d602052604090206009810154600390910154145b92915050565b6001600160a01b0382166000908152600e602052604090205480821115610a3657610a31836109918385615230565b505050565b80821015610a3157610a31836109488484615230565b60008281526005602090815260408083205483526004918290528083205490516359dc5c6f60e01b81529182018590526001600160a01b03169081906359dc5c6f90602401600060405180830381600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b5050604051630ae161cd60e21b8152600481018790526001600160a01b0384169250632b8587349150602401600060405180830381600087803b158015610b0557600080fd5b505af1158015610b19573d6000803e3d6000fd5b506001979650505050505050565b6010546000908190610b4290670de0b6b3a764000090615247565b9050610b4f60648461527c565b610b5c5750600092915050565b6000610b73610b6c60648661527c565b839061344b565b9050610b87670de0b6b3a76400008261527c565b9050600e60006010610b9a600185615230565b81548110610baa57610baa615290565b60009182526020808320909101546001600160a01b03168352820192909252604001902054949350505050565b60108181548110610be757600080fd5b6000918252602090912001546001600160a01b0316905081565b6000828152600d60205260408120600301815b8154811015610c7157836001600160a01b0316828281548110610c3957610c39615290565b6000918252602090912001546001600160a01b03161415610c5f576001925050506109fc565b80610c69816152a6565b915050610c14565b506000949350505050565b600954604051636ff3062160e11b8152600481018390526001600160a01b039091169063dfe60c4290602401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906152cc565b158015610d5e5750600954604051637a513a1960e01b8152600481018390526001600160a01b0390911690637a513a1990602401602060405180830381865afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e91906152cc565b610daf5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420636f6e646974696f6e73206e6f74206d65740000000000000060448201526064015b60405180910390fd5b6000818152600d602052604090206003810154600c9091015414610e295760405162461bcd60e51b815260206004820152602b60248201527f6e6f7420656e6f7567682076616c696461746f7273206861766520766f74656460448201526a20746f207265736f6c766560a81b6064820152608401610da6565b600081815260056020908152604080832054835260049182905291829020549151630ae161cd60e21b81529081018390526001600160a01b0390911690632b858734906024015b600060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b5050505050565b600a5460405163da33133360e01b815260009182916001600160a01b039091169063da33133390610ee6908b9030908c908c908c908c908c90600401615337565b60408051808303816000875af1158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f289190615386565b600090815260046020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050505050505050565b6000828152600c6020526040808220546009549151632a4a9dd160e01b81526004810182905290929182916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe091906153b4565b5050955050505050915081845114610ffa57610ffa615411565b6000838152600260205260408120600101546001600160a01b0316906110208383611fed565b805190915060005b858160ff16101561113457600061105c84848b8560ff168151811061104f5761104f615290565b6020026020010151613467565b9050600d600089815260200190815260200160002060030184828151811061108657611086615290565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915584906110d19085615230565b815181106110e1576110e1615290565b60200260200101518482815181106110fb576110fb615290565b6001600160a01b03909216602092830291909101909101528261111d81615427565b93505050808061112c9061543e565b915050611028565b505050505050505050565b6008546001600160a01b031633146111695760405162461bcd60e51b8152600401610da69061545e565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600d60209081526040918290206003018054835181840281018401909452808452606093928301828280156111ee57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111d0575b50505050509050919050565b600081815260026020526040808220600101546009549151632a4a9dd160e01b8152600481018590526001600160a01b03918216939283921690632a4a9dd19060240161010060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f91906153b4565b5050955050505050915060006112958285611fed565b905082815111611332576000858152600d6020908152604090912082516112c492600390920191840190614b3e565b508281511015610e9e57600954815160405163555f8d2d60e01b81526004810188905260248101919091526001600160a01b039091169063555f8d2d90604401600060405180830381600087803b15801561131e57600080fd5b505af1158015611134573d6000803e3d6000fd5b5050506000828152600d602090815260408220600601805460ff19166001908117909155909152600c9052507fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c55565b6008546001600160a01b031633146113ac5760405162461bcd60e51b8152600401610da69061545e565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600760205281600052604060002081815481106113ea57600080fd5b90600052602060002001600091509150505481565b6009546001600160a01b031633148061142257506008546001600160a01b031633145b61143e5760405162461bcd60e51b8152600401610da69061549f565b600954604051632841c2b760e21b8152600481018590526001600160a01b038481166024830152600092169063a1070adc90604401602060405180830381865afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b491906154e2565b905060006114cb8280670de0b6b3a76400006135a7565b905082156114e2576114dd8482613412565b610e9e565b610e9e84826132d4565b6001600160a01b0383166115125760405162461bcd60e51b8152600401610da6906154fb565b6101208201516001600160a01b031661153d5760405162461bcd60e51b8152600401610da6906154fb565b6000818152600460205260409020546001600160a01b03166115715760405162461bcd60e51b8152600401610da6906154fb565b600081815260046020818152604080842054600954825163764bc84160e11b815292516001600160a01b039283169695919092169363ec97908293808301939192908290030181865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f091906154e2565b60008181526005602090815260408083208790558683526007825280832080546001818101835591855283852001859055815180830183526101208a01516001600160a01b0390811682528b8116828601908152878752600290955294839020905181549086166001600160a01b031991821617825593519101805491851691909316179091556009548151637572cb1f60e01b81529151939450821692634e042a5992861691637572cb1f916004808301926101009291908290030181865afa1580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e6919061551d565b846001600160a01b0316636c321c8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174891906154e2565b846040518463ffffffff1660e01b8152600401611767939291906155ad565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b5050600b5460008681526004602081815260408084205481516362eb326360e11b8152915194975087965086956001600160a01b039081169563981f513695919092169363c5d664c693808301939192908290030181865afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182391906155cf565b60095460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044016060604051808303816000875af1158015611873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189791906155f7565b925092509250866000015115611a6c576101808701518051602082015160809092015160095460405163c6ceb96b60e01b8152600481018990526001600160a01b03868116956334327d8b95949093909291169063c6ceb96b9060240161010060405180830381865afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611936919061551d565b602001516040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608401600060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b505050506119bf604051806040016040528060018152602001603f60f81b8152506135c6565b60095461010088015160405163080ec90d60e21b81526001600160a01b039092169163203b2434916119fe918891869189918991600190600401615691565b600060405180830381600087803b158015611a1857600080fd5b505af1158015611a2c573d6000803e3d6000fd5b50505050611a53604051806040016040528060028152602001613f3f60f01b8152506135c6565b610180870151518751611a6791869161360c565b611bd7565b60a087015160c088015160095460405163c6ceb96b60e01b8152600481018890526001600160a01b03858116946375e2d946949093909291169063c6ceb96b9060240161010060405180830381865afa158015611acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af1919061551d565b602001516040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b50506009546101008a015160405163080ec90d60e21b81526001600160a01b03909216935063203b24349250611b92918891869189918991600090600401615691565b600060405180830381600087803b158015611bac57600080fd5b505af1158015611bc0573d6000803e3d6000fd5b50505050611bd7848860a00151896000015161360c565b608087018490526040516283d6f160e11b81526001600160a01b03861690630107ade290611c09908a90600401615702565b600060405180830381600087803b158015611c2357600080fd5b505af1158015611c37573d6000803e3d6000fd5b5050604080518781526001600160a01b038c1660208201527f5e2ab39d79551e4c4e66256d806dd566d4d015420519d2ed2621563488a5d2a8935001905060405180910390a15050506001600160a01b03909416600090815260036020526040902093909355505050565b80611cad8133610c01565b80611cc257506008546001600160a01b031633145b611d095760405162461bcd60e51b81526020600482015260186024820152771b9bdd081d985b1a59185d1bdc88199bdc881b585c9ad95d60421b6044820152606401610da6565b60008281526005602090815260408083205483526004918290529182902054915163d746d3ef60e01b81529081018490526001600160a01b039091169063d746d3ef90602401600060405180830381600087803b158015611d6957600080fd5b505af1158015611d7d573d6000803e3d6000fd5b50505050611d8a82613665565b600954604051634cb4408760e01b8152600481018490526001600160a01b0390911690634cb44087906024015b600060405180830381600087803b158015611dd157600080fd5b505af1158015611de5573d6000803e3d6000fd5b505050505050565b60606010805480602002602001604051908101604052809291908181526020018280548015611e4557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e27575b5050505050905090565b80611e5a8133610c01565b80611e6f57506008546001600160a01b031633145b611eb65760405162461bcd60e51b81526020600482015260186024820152771b9bdd081d985b1a59185d1bdc88199bdc881b585c9ad95d60421b6044820152606401610da6565b600082815260056020908152604080832054835260049182905280832054905163709a664160e11b81529182018590528291829182916001600160a01b039091169063e134cc82906024016080604051808303816000875af1158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f449190615814565b60095460405163573ed96360e01b8152600481018c905285151560248201526044810185905260648101849052821515608482015294985092965090945092506001600160a01b03169063573ed9639060a401600060405180830381600087803b158015611fb157600080fd5b505af1158015611fc5573d6000803e3d6000fd5b505050600087815260208190526040902054611fe4915087908461371d565b611de586613665565b60105460609060009061200990670de0b6b3a764000090615247565b905061201660648561527c565b6121e45761203f604051806040016040528060048152602001636865726560e01b8152506135c6565b6001600160a01b0383166000908152600f602052604090205460ff16156121815760105460009061207290600190615230565b67ffffffffffffffff81111561208a5761208a614cad565b6040519080825280602002602001820160405280156120b3578160200160208202803683370190505b5090506000805b60105481101561217557601081815481106120d7576120d7615290565b6000918252602090912001546001600160a01b03878116911614156120ff5760019150612163565b6010818154811061211257612112615290565b6000918252602090912001546001600160a01b0316836121328484615230565b8151811061214257612142615290565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061216d816152a6565b9150506120ba565b508193505050506109fc565b60108054806020026020016040519081016040528092919081815260200182805480156121d757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121b9575b50505050509150506109fc565b60006122126064866121fe670de0b6b3a764000083615247565b6122089190615230565b610b6c919061527c565b9050612226670de0b6b3a76400008261527c565b905060606001600160a01b038516158061225957506001600160a01b0385166000908152600f602052604090205460ff16155b15612321578167ffffffffffffffff81111561227757612277614cad565b6040519080825280602002602001820160405280156122a0578160200160208202803683370190505b50905060005b8281101561231b57601081815481106122c1576122c1615290565b9060005260206000200160009054906101000a90046001600160a01b03168282815181106122f1576122f1615290565b6001600160a01b039092166020928302919091019091015280612313816152a6565b9150506122a6565b50612436565b61232c600183615230565b67ffffffffffffffff81111561234457612344614cad565b60405190808252806020026020018201604052801561236d578160200160208202803683370190505b5090506000805b8381101561243357866001600160a01b03166010828154811061239957612399615290565b6000918252602090912001546001600160a01b031614156123bd5760019150612421565b601081815481106123d0576123d0615290565b6000918252602090912001546001600160a01b0316836123f08484615230565b8151811061240057612400615290565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061242b816152a6565b915050612374565b50505b95945050505050565b6009546000906001600160a01b031633148061246557506008546001600160a01b031633145b6124815760405162461bcd60e51b8152600401610da69061549f565b6000838152600d6020908152604080832060058101546001600160a01b03871685529252909120546124b29161344b565b6000938452600d602090815260408086206001600160a01b03909516865293905291832092909255919050565b6124e98133610c01565b6125275760405162461bcd60e51b815260206004820152600f60248201526e3737ba1030903b30b634b230ba37b960891b6044820152606401610da6565b6000818152600d6020908152604080832033845260010190915290205460ff1661257e5760405162461bcd60e51b81526020600482015260086024820152676e6f207374616b6560c01b6044820152606401610da6565b600954604051637a513a1960e01b8152600481018390526001600160a01b0390911690637a513a1990602401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb91906152cc565b1561262b5760405162461bcd60e51b815260206004820152601060248201526f6d61726b6574206e6f7420616c69766560801b6044820152606401610da6565b600954604051633acc765360e01b8152600481018390526001600160a01b0390911690633acc765390602401602060405180830381865afa158015612674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269891906152cc565b6126da5760405162461bcd60e51b81526020600482015260136024820152721b585c9ad95d081b9bdd081c995cdbdb1d9959606a1b6044820152606401610da6565b600081815260056020908152604080832054835260049182905291829020546009549251636ff3062160e11b81529182018490526001600160a01b0390811692169063dfe60c4290602401602060405180830381865afa158015612742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276691906152cc565b156127d0576000828152600d60205260409020600a015461279c90339061278c856128ac565b6001600160a01b0316919061393c565b6000828152600d60205260408120600a81015460089091018054919290916127c5908490615230565b909155506128209050565b6000828152600d60205260409020600b01546127f190339061278c856128ac565b6000828152600d60205260408120600b810154600890910180549192909161281a908490615230565b90915550505b506000908152600d602090815260408083203384526001019091529020805460ff19169055565b6009546001600160a01b031633148061286a57506008546001600160a01b031633145b6128865760405162461bcd60e51b8152600401610da69061549f565b6000918252600d602090815260408084206001600160a01b039093168452919052812055565b600090815260056020908152604080832054835260049091529020546001600160a01b031690565b6128de8133610c01565b61293c5760405162461bcd60e51b815260206004820152602960248201527f6d7573742062652076616c696461746f7220746f207265736f6c76652074686560448201526810333ab731ba34b7b760b91b6064820152608401610da6565b600954604051637a513a1960e01b8152600481018390526001600160a01b0390911690637a513a1990602401602060405180830381865afa158015612985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a991906152cc565b6129e95760405162461bcd60e51b81526020600482015260116024820152706d61726b6574206e6f742061637469766560781b6044820152606401610da6565b600954604051636ff3062160e11b8152600481018390526001600160a01b039091169063dfe60c4290602401602060405180830381865afa158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5691906152cc565b15612aa35760405162461bcd60e51b815260206004820152601860248201527f6d61726b657420647572696e67206173736573736d656e7400000000000000006044820152606401610da6565b6000818152600d6020908152604080832033845260020190915290205460ff1615612b1b5760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f7220616c726561647920766f74656420746f207265736f6c604482015261766560f01b6064820152608401610da6565b6000818152600d60208181526040808420338552600281018352908420805460ff19166001179055848452919052600c01805491612b58836152a6565b919050555050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156111ee57602002820191906000526020600020905b815481526020019060010190808311612ba25750505050509050919050565b6000612bcd8233610c01565b612c195760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420612076616c696461746f7220666f7220746865206d61726b657400006044820152606401610da6565b600954604051636ff3062160e11b8152600481018490526001600160a01b039091169063dfe60c4290602401602060405180830381865afa158015612c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8691906152cc565b612cc55760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e48185c1c1c9bdd995960821b6044820152606401610da6565b60095460405163b743939b60e01b8152600481018490526001600160a01b039091169063b743939b90602401602060405180830381865afa158015612d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3291906152cc565b612d7e5760405162461bcd60e51b815260206004820152601860248201527f6d61726b657420636f6e646974696f6e206e6f74206d657400000000000000006044820152606401610da6565b6000828152600d60209081526040808320338452600181019092529091205460ff1615612dfb5760405162461bcd60e51b815260206004820152602560248201527f63616c6c657220616c7265616479207374616b656420666f722074686973206d604482015264185c9ad95d60da1b6064820152608401610da6565b612e1f333083600a0154612e0e876128ac565b6001600160a01b03169291906139ba565b80600a0154816008016000828254612e379190615860565b909155505033600090815260018281016020526040808320805460ff19169092179091556009549051632a4a9dd160e01b8152600481018690526001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015612ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec891906153b4565b5050505050505090506000818360040154612ee3919061527c565b90506000612efe84600501548361344b90919063ffffffff16565b33600090815260208690526040902054909150821015612f535760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e48185c1c1c9bdd995960821b6044820152606401610da6565b3360009081526020859052604081208054849290612f72908490615860565b90915550612f839050826001615860565b846007016000828254612f969190615860565b925050819055506001846009016000828254612fb29190615860565b909155505060095460405163334b11d360e11b81526004810188905260248101839052604481018490523360648201526001600160a01b039091169063669623a690608401600060405180830381600087803b15801561301157600080fd5b505af1158015613025573d6000803e3d6000fd5b50505050613032866109bf565b156124365761304086613a3d565b60095460405163cabe2ae160e01b8152600481018890526001600160a01b039091169063cabe2ae190602401600060405180830381600087803b15801561308657600080fd5b505af115801561309a573d6000803e3d6000fd5b5050505095945050505050565b6000818152600d60205260408082206004908101546009549251632a4a9dd160e01b81529182018590529183916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b91906153b4565b50505050505050905060008183613142919061527c565b6000868152600d602052604090206005015490915061243690829061344b565b6008546001600160a01b0316331461318c5760405162461bcd60e51b8152600401610da69061545e565b6001600160a01b03811661319f57600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b03163314806131e457506008546001600160a01b031633145b6132005760405162461bcd60e51b8152600401610da69061549f565b613209826128ac565b600954604051633c16f3ed60e21b8152600481018490526001600160a01b03918216602482015291169063f05bcfb490604401611db7565b60008061324d84613f3a565b90506000670de0b6b3a7640000613265836001615860565b6010546132729190615230565b61327c9190615247565b60105490915060009061329890670de0b6b3a764000090615247565b905060006132a68383613f98565b6132b1906064615247565b90508581106132c75760019450505050506109fc565b60009450505050506109fc565b6001600160a01b0382166000908152600e60205260409020548110613311576001600160a01b0382166000908152600e602052604081205561333f565b6001600160a01b0382166000908152600e602052604081208054839290613339908490615230565b90915550505b61334a826000613fad565b5050565b6009546001600160a01b031633148061337157506008546001600160a01b031633145b61338d5760405162461bcd60e51b8152600401610da69061549f565b600081815260056020908152604080832054835260049182905291829020549151633c16f3ed60e21b81529081018590526001600160a01b0384811660248301529091169063f05bcfb490604401600060405180830381600087803b1580156133f557600080fd5b505af1158015613409573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166000908152600e60205260408120805483929061343a908490615860565b9091555061334a9050826001613fad565b60006134608383670de0b6b3a76400006135a7565b9392505050565b60008060005b848160ff1610156134d957600e6000878360ff168151811061349157613491615290565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054826134c59190615860565b9150806134d18161543e565b91505061346d565b5060006134e68285615878565b905060005b858160ff161015613568576000600e6000898460ff168151811061351157613511615290565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905080831015613552575060ff169250613460915050565b90910390806135608161543e565b9150506134eb565b5061359e6040518060400160405280601481526020017373686f756c64206e65766572206265206865726560601b8152506135c6565b50509392505050565b8282028115158415858304851417166135bf57600080fd5b0492915050565b613609816040516024016135da919061588c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614345565b50565b816136475760405162461bcd60e51b815260206004820152600b60248201526a0c081c1c9a5b98da5c185b60aa1b6044820152606401610da6565b613650836111fa565b61365b838383614366565b610a318383614548565b60095460405163068bcd8d60e01b8152600481018390526001600160a01b039091169063068bcd8d90602401602060405180830381865afa1580156136ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d291906155cf565b6001600160a01b03166396fd1c426136e9836128ac565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526000196024820152604401610e70565b8061373f5750506000908152600d60205260409020600a810154600b90910155565b60008381526005602090815260408083205483526004918290528083205490516363737ac960e11b81529182018590526001600160a01b03169190829063c6e6f59290602401602060405180830381865afa1580156137a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c691906154e2565b6040516363737ac960e11b8152600481018590529091506000906001600160a01b0384169063c6e6f59290602401602060405180830381865afa158015613811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383591906154e2565b6000878152600d602052604081206008015491925061387261385860028461527c565b61386c866138668782615230565b90613f98565b9061344b565b61387d60028461527c565b6138879190615860565b9050613892886128ac565b6001600160a01b03166342966c686138aa8385615230565b6040518263ffffffff1660e01b81526004016138c891815260200190565b600060405180830381600087803b1580156138e257600080fd5b505af11580156138f6573d6000803e3d6000fd5b5050506000898152600d60205260409020600881018390556003015461391d91508261527c565b6000988952600d6020526040909820600b019790975550505050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806139b45760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610da6565b50505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610e9e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610da6565b600081815260056020908152604080832054835260049182905280832054600954915163068bcd8d60e01b81529283018590526001600160a01b03908116939291169063068bcd8d90602401602060405180830381865afa158015613aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aca91906155cf565b600954604051634bee760b60e11b8152600481018690529192506001600160a01b0316906397dcec1690602401602060405180830381865afa158015613b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3891906154e2565b600314613b7a5760405162461bcd60e51b815260206004820152601060248201526f10b6b0b935b2ba21b7b73234ba34b7b760811b6044820152606401610da6565b60405163238f0e7560e11b8152600481018490526001600160a01b0383169063471e1cea90602401602060405180830381865afa158015613bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be391906152cc565b613c265760405162461bcd60e51b815260206004820152601460248201527310b4b739ba393ab6b2b73a21b7b73234ba34b7b760611b6044820152606401610da6565b600954604051636b51d35560e01b8152600481018590526000916001600160a01b031690636b51d35590602401602060405180830381865afa158015613c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9491906152cc565b60095460405163661f1cf560e01b8152600481018790529192506000916001600160a01b039091169063661f1cf590602401602060405180830381865afa158015613ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0791906154e2565b90508115613d9a57613d958582866001600160a01b0316639ec4d40e896040518263ffffffff1660e01b8152600401613d4291815260200190565b600060405180830381865afa158015613d5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d87919081019061594f565b610180015160a0015161467b565b613e1a565b6040516303d972f160e21b8152600481018690526001600160a01b03851690630f65cbc490602401602060405180830381865afa158015613ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0391906154e2565b613e1157613d9585846146fa565b613e1a85614933565b604051634b7e8e2160e11b81526001600160a01b038581166004830152602482018390528416906396fd1c4290604401600060405180830381600087803b158015613e6457600080fd5b505af1158015613e78573d6000803e3d6000fd5b505050600086815260208190526040908190209051636a9f1bdb60e01b81526004810188905281546024820152600190910154604482015283151560648201526001600160a01b0386169150636a9f1bdb90608401600060405180830381600087803b158015613ee757600080fd5b505af1158015613efb573d6000803e3d6000fd5b50505050826001600160a01b0316638d01450f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561131e57600080fd5b6000805b601054811015613f925760108181548110613f5b57613f5b615290565b6000918252602090912001546001600160a01b0384811691161415613f805792915050565b80613f8a816152a6565b915050613f3e565b50919050565b600061346083670de0b6b3a7640000846135a7565b6001600160a01b0382166000908152600e6020908152604080832054600f9092529091205460ff166141c6576001600160a01b0383166000908152600f60205260409020805460ff19166001179055601054614057575050601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b0392909216919091179055565b60005b6010548110156139b457600e60006010838154811061407b5761407b615290565b60009182526020808320909101546001600160a01b0316835282019290925260400190205482111561414857601080546001818101835560008390527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180546001600160a01b031916905590546141009183916140fb9190615230565b6149ec565b836010828154811061411457614114615290565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60105461415790600190615230565b8114156141b4575050601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b03939093169290921790915550565b806141be816152a6565b91505061405a565b60006141d184613f3a565b9050801580156141de5750825b806141ff57506010546141f390600190615230565b811480156141ff575082155b1561420a5750505050565b82156142c95760005b818110156142c357600e60006010838154811061423257614232615290565b60009182526020808320909101546001600160a01b031683528201929092526040019020548311156142b15761426881836149ec565b846010828154811061427c5761427c615290565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b806142bb816152a6565b915050614213565b506139b4565b6010546000906142db90600190615230565b90505b81811115610e9e57600e6000601083815481106142fd576142fd615290565b60009182526020808320909101546001600160a01b03168352820192909252604001902054831015614333576142688282614a7a565b8061433d81615427565b9150506142de565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600954604051634bd9725160e11b8152600481018590526000916001600160a01b0316906397b2e4a290602401602060405180830381865afa1580156143b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d491906155cf565b600954604051632a4a9dd160e01b8152600481018790529192506000916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015614424573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061444891906153b4565b50505050505091505061445a81614b08565b801561446a575061446a84614b08565b6144a15760405162461bcd60e51b81526020600482015260086024820152673830b930b6a2a92960c11b6044820152606401610da6565b6000858152600d60205260408120906144ba838761344b565b90506000846001600160a01b0316637063b06c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452091906154e2565b9050600061452e8383613f98565b600485019290925550600590920191909155505050505050565b60008281526005602090815260408083205483526004918290528083205490516363737ac960e11b81529182018490526001600160a01b03169190829063c6e6f59290602401602060405180830381865afa1580156145ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145cf91906154e2565b600954604051632a4a9dd160e01b8152600481018790529192506000916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa15801561461f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061464391906153b4565b97505050505050505061465f828261344b90919063ffffffff16565b6000958652600d6020526040909520600a019490945550505050565b600081116146ba5760405162461bcd60e51b815260206004820152600c60248201526b18102622ab2fa320a1aa27a960a11b6044820152606401610da6565b60408051808201909152806146cf848461344b565b8152600060209182018190529485528481526040909420815181559301516001909301929092555050565b60008281526005602090815260408083205483526004918290528083205490516318353be960e21b815291820185905282916001600160a01b03909116906360d4efa4906024016040805180830381865afa15801561475d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147819190615a69565b60095460405163661f1cf560e01b81526004810188905292945090925060009161488991614883916001600160a01b039091169063661f1cf590602401602060405180830381865afa1580156147db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ff91906154e2565b60095460405163c6ceb96b60e01b8152600481018a9052670de0b6b3a7640000916001600160a01b03169063c6ceb96b9060240161010060405180830381865afa158015614851573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614875919061551d565b60c0015161386c9190615860565b84614b27565b905060006148ff856001600160a01b03166314e2b929846040518263ffffffff1660e01b81526004016148be91815260200190565b602060405180830381865afa1580156148db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061488391906154e2565b6040805180820182529384526020808501928352600098895288905290962091518255509351600190940193909355505050565b60008181526005602090815260408083205483526004918290528083205490516318353be960e21b815291820184905282916001600160a01b03909116906360d4efa4906024016040805180830381865afa158015614996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ba9190615a69565b604080518082018252928352602080840192835260009687528690529094209051815592516001909301929092555050565b805b82811115610a31576010614a03600183615230565b81548110614a1357614a13615290565b600091825260209091200154601080546001600160a01b039092169183908110614a3f57614a3f615290565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580614a7281615427565b9150506149ee565b815b81811015610a31576010614a91826001615860565b81548110614aa157614aa1615290565b600091825260209091200154601080546001600160a01b039092169183908110614acd57614acd615290565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580614b00816152a6565b915050614a7c565b6000614b1e612710670de0b6b3a764000061527c565b90911015919050565b600081831115614b375781613460565b5090919050565b828054828255906000526020600020908101928215614b93579160200282015b82811115614b9357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614b5e565b50614b9f929150614ba3565b5090565b5b80821115614b9f5760008155600101614ba4565b600060208284031215614bca57600080fd5b5035919050565b6001600160a01b038116811461360957600080fd5b8035614bf181614bd1565b919050565b60008060408385031215614c0957600080fd5b8235614c1481614bd1565b946020939093013593505050565b801515811461360957600080fd5b8035614bf181614c22565b60008060408385031215614c4e57600080fd5b823591506020830135614c6081614c22565b809150509250929050565b600060208284031215614c7d57600080fd5b813561346081614bd1565b60008060408385031215614c9b57600080fd5b823591506020830135614c6081614bd1565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715614ce757614ce7614cad565b60405290565b60405160c0810167ffffffffffffffff81118282101715614ce757614ce7614cad565b6040516101a0810167ffffffffffffffff81118282101715614ce757614ce7614cad565b604051601f8201601f1916810167ffffffffffffffff81118282101715614d5d57614d5d614cad565b604052919050565b6000806000806000808688036101a0811215614d8057600080fd5b8735614d8b81614bd1565b96506020880135614d9b81614c22565b9550604088013594506060880135935060808801359250610100609f198201811315614dc657600080fd5b614dce614cc3565b915060a0890135825260c0890135602083015260e0890135604083015280890135606083015250610120880135608082015261014088013560a082015261016088013560c082015261018088013560e0820152809150509295509295509295565b60008060408385031215614e4257600080fd5b8235915060208084013567ffffffffffffffff80821115614e6257600080fd5b818601915086601f830112614e7657600080fd5b813581811115614e8857614e88614cad565b8060051b9150614e99848301614d34565b8181529183018401918481019089841115614eb357600080fd5b938501935b83851015614ed157843582529385019390850190614eb8565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156124335783516001600160a01b031683529284019291840191600101614efd565b60008060408385031215614f3557600080fd5b50508035926020909101359150565b600080600060608486031215614f5957600080fd5b833592506020840135614f6b81614bd1565b91506040840135614f7b81614c22565b809150509250925092565b600067ffffffffffffffff821115614fa057614fa0614cad565b50601f01601f191660200190565b600082601f830112614fbf57600080fd5b8135614fd2614fcd82614f86565b614d34565b818152846020838601011115614fe757600080fd5b816020850160208301376000918101602001919091529392505050565b6004811061360957600080fd5b8035614bf181615004565b600060c0828403121561502e57600080fd5b615036614ced565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015292915050565b60008060006060848603121561508957600080fd5b833561509481614bd1565b9250602084013567ffffffffffffffff808211156150b157600080fd5b9085019061024082880312156150c657600080fd5b6150ce614d10565b6150d783614c30565b81526150e560208401614c30565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561513a57600080fd5b6151468a828701614fae565b828401525050610120915061515c828401614be6565b828201526101409150615170828401615011565b828201526101609150818301358282015261018091506151928883850161501c565b82820152809450505050604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b81811015612433578351835292840192918401916001016151c6565b6000806000606084860312156151f757600080fd5b83359250602084013561520981614bd1565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b6000828210156152425761524261521a565b500390565b60008160001904831182151516156152615761526161521a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261528b5761528b615266565b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156152ba576152ba61521a565b5060010190565b8051614bf181614c22565b6000602082840312156152de57600080fd5b815161346081614c22565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b6001600160a01b038881168252871660208201528515156040820152606081018590526080810184905260a081018390526101c0810161537a60c08301846152e9565b98975050505050505050565b6000806040838503121561539957600080fd5b82516153a481614bd1565b6020939093015192949293505050565b600080600080600080600080610100898b0312156153d157600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b634e487b7160e01b600052600160045260246000fd5b6000816154365761543661521a565b506000190190565b600060ff821660ff8114156154555761545561521a565b60010192915050565b60208082526021908201527f4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b60208082526023908201527f4f6e6c79204d616e616765722063616e2063616c6c20746869732066756e637460408201526234b7b760e91b606082015260800190565b6000602082840312156154f457600080fd5b5051919050565b602080825260089082015267061646472657373360c41b604082015260600190565b600061010080838503121561553157600080fd5b6040519081019067ffffffffffffffff8211818310171561555457615554614cad565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b61014081016155bc82866152e9565b6101008201939093526101200152919050565b6000602082840312156155e157600080fd5b815161346081614bd1565b8051614bf181614bd1565b60008060006060848603121561560c57600080fd5b835161561781614bd1565b602085015190935061562881614bd1565b6040850151909250614f7b81614bd1565b60005b8381101561565457818101518382015260200161563c565b838111156139b45750506000910152565b6000815180845261567d816020860160208601615639565b601f01601f19169290920160200192915050565b8681526001600160a01b03868116602083015285811660408301528416606082015260c0608082018190526000906156cb90830185615665565b905082151560a0830152979650505050505050565b600481106156fe57634e487b7160e01b600052602160045260246000fd5b9052565b6020815261571560208201835115159052565b6000602083015161572a604084018215159052565b506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012061024081850152615789610260850183615665565b908501519091506101406157a7858201836001600160a01b03169052565b85015190506101606157bb858201836156e0565b8501516101808581019190915285015180516101a086015260208101516101c086015260408101516101e08601526060810151610200860152608081015161022086015260a08101516102408601529050509392505050565b6000806000806080858703121561582a57600080fd5b845161583581614c22565b809450506020850151925060408501519150606085015161585581614c22565b939692955090935050565b600082198211156158735761587361521a565b500190565b60008261588757615887615266565b500690565b6020815260006134606020830184615665565b600082601f8301126158b057600080fd5b81516158be614fcd82614f86565b8181528460208386010111156158d357600080fd5b6158e4826020830160208701615639565b949350505050565b8051614bf181615004565b600060c0828403121561590957600080fd5b615911614ced565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015292915050565b60006020828403121561596157600080fd5b815167ffffffffffffffff8082111561597957600080fd5b90830190610240828603121561598e57600080fd5b615996614d10565b61599f836152c1565b81526159ad602084016152c1565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015183811115615a0257600080fd5b615a0e8882870161589f565b8284015250506101209150615a248284016155ec565b828201526101409150615a388284016158ec565b82820152610160915081830151828201526101809150615a5a868385016158f7565b91810191909152949350505050565b60008060408385031215615a7c57600080fd5b50508051602090910151909290915056fea2646970667358221220ba42582f5a6745019e7568f8548dcf7bce7c0ee1d3665c54e2ffbd92c542f6ef64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103835760003560e01c80637ea3417f116101de578063ad4e4e701161010f578063d82aff11116100ad578063ebd4dc461161007c578063ebd4dc461461094d578063f0fd1d3814610970578063f251f82e14610983578063f25fcc9f1461099657600080fd5b8063d82aff1114610901578063da0a697f14610914578063e8a7802614610927578063ebac31401461093a57600080fd5b8063c4abc650116100e9578063c4abc650146107f5578063ce93ec6714610469578063d1227136146108db578063d65ec964146108ee57600080fd5b8063ad4e4e701461087c578063b1b7e1f21461088f578063b9209e33146108af57600080fd5b80638dc3d9b41161017c578063937b6feb11610156578063937b6feb146107d25780639403b634146107f55780639fe1458b14610808578063ac1b6b011461083157600080fd5b80638dc3d9b41461078c5780638f5709a51461079f5780638fbbc868146107b257600080fd5b8063830e2a02116101b8578063830e2a02146106d9578063875e487e146106ec5780638c64ea4a1461070f5780638d4f16d71461073857600080fd5b80637ea3417f14610678578063805798ac1461068b57806381e1b07c146106ae57600080fd5b806338ba4614116102b8578063482c0aa8116102565780634cb44087116102305780634cb440871461062a57806357b613601461063d5780636399d03d146106455780637789ec5a1461065857600080fd5b8063482c0aa8146105f1578063494ef447146106045780634a7e35f91461061757600080fd5b806343437be01161029257806343437be01461058b57806344c74393146105ab578063457a89f6146105cb578063473597a0146105de57600080fd5b806338ba4614146105455780633ea7fbdb146105585780633ec8dc3b1461056b57600080fd5b806314f2b14c1161032557806323f2a73f116102ff57806323f2a73f146104e95780632b858734146104fc5780632f8899f31461050f578063340e04b31461053257600080fd5b806314f2b14c146104695780632358d5a81461048957806323ba6107146104c657600080fd5b80630c33df18116103615780630c33df18146103e75780630d159896146103fa5780630db065f41461041b578063135e563d1461043e57600080fd5b806303cccb351461038857806305a1ce99146103ac5780630622fd17146103d4575b600080fd5b6103aa336000908152600160208190526040909120805460ff19169091179055565b005b6103bf6103ba366004614bb8565b6109bf565b60405190151581526020015b60405180910390f35b6103aa6103e2366004614bf6565b610a02565b6103bf6103f5366004614c3b565b610a4c565b61040d610408366004614bb8565b610b27565b6040519081526020016103cb565b6103bf610429366004614c6b565b60016020526000908152604090205460ff1681565b61045161044c366004614bb8565b610bd7565b6040516001600160a01b0390911681526020016103cb565b61040d610477366004614bb8565b60009081526005602052604090205490565b6103bf610497366004614c88565b6000828152600d602090815260408083206001600160a01b038516845260010190915290205460ff1692915050565b6103bf6104d4366004614c6b565b600f6020526000908152604090205460ff1681565b6103bf6104f7366004614c88565b610c01565b6103aa61050a366004614bb8565b610c7c565b61040d61051d366004614bb8565b6000908152600d602052604090206008015490565b6103aa610540366004614d65565b610ea5565b6103aa610553366004614e2f565b610f5e565b6103aa610566366004614c6b565b61113f565b61057e610579366004614bb8565b61118b565b6040516103cb9190614ee1565b61040d610599366004614bb8565b60066020526000908152604090205481565b61040d6105b9366004614c6b565b600e6020526000908152604090205481565b6103aa6105d9366004614bb8565b6111fa565b6103aa6105ec366004614c6b565b611382565b61040d6105ff366004614f22565b6113ce565b6103aa610612366004614f44565b6113ff565b6103aa610625366004615074565b6114ec565b6103aa610638366004614bb8565b611ca2565b61057e611ded565b6103aa610653366004614bb8565b611e4f565b61040d610666366004614c6b565b60036020526000908152604090205481565b61057e610686366004614c88565b611fed565b61040d610699366004614bb8565b6000908152600d602052604090206009015490565b6103bf6106bc366004614bb8565b6000908152600d602052604090206003810154600c909101541490565b61040d6106e7366004614c88565b61243f565b61040d6106fa366004614bb8565b6000908152600d60205260409020600a015490565b61045161071d366004614bb8565b6004602052600090815260409020546001600160a01b031681565b61076c610746366004614bb8565b600260205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152016103cb565b6103aa61079a366004614bb8565b6124df565b6103aa6107ad366004614c88565b612847565b61040d6107c0366004614bb8565b60056020526000908152604090205481565b61040d6107e0366004614bb8565b6000908152600d60205260409020600b015490565b610451610803366004614bb8565b6128ac565b610451610816366004614bb8565b6000908152600460205260409020546001600160a01b031690565b61086161083f366004614bb8565b6040805180820190915260008082526020820152600091825260209190915290565b604080518251815260209283015192810192909252016103cb565b6103aa61088a366004614bb8565b6128d4565b6108a261089d366004614bb8565b612b60565b6040516103cb91906151aa565b6103bf6108bd366004614c6b565b6001600160a01b031660009081526001602052604090205460ff1690565b61040d6108e9366004614bb8565b612bc1565b61040d6108fc366004614bb8565b6130a7565b6103aa61090f366004614c6b565b613162565b6103aa610922366004614f22565b6131c1565b6103bf610935366004614bf6565b613241565b6103aa610948366004614bf6565b6132d4565b61040d61095b366004614bb8565b6000908152600d60205260409020600c015490565b6103aa61097e3660046151e2565b61334e565b6103aa610991366004614bf6565b613412565b61040d6109a4366004614c6b565b6001600160a01b031660009081526003602052604090205490565b6000818152600d602052604081206004810154600790910154108015906109fc57506000828152600d602052604090206009810154600390910154145b92915050565b6001600160a01b0382166000908152600e602052604090205480821115610a3657610a31836109918385615230565b505050565b80821015610a3157610a31836109488484615230565b60008281526005602090815260408083205483526004918290528083205490516359dc5c6f60e01b81529182018590526001600160a01b03169081906359dc5c6f90602401600060405180830381600087803b158015610aab57600080fd5b505af1158015610abf573d6000803e3d6000fd5b5050604051630ae161cd60e21b8152600481018790526001600160a01b0384169250632b8587349150602401600060405180830381600087803b158015610b0557600080fd5b505af1158015610b19573d6000803e3d6000fd5b506001979650505050505050565b6010546000908190610b4290670de0b6b3a764000090615247565b9050610b4f60648461527c565b610b5c5750600092915050565b6000610b73610b6c60648661527c565b839061344b565b9050610b87670de0b6b3a76400008261527c565b9050600e60006010610b9a600185615230565b81548110610baa57610baa615290565b60009182526020808320909101546001600160a01b03168352820192909252604001902054949350505050565b60108181548110610be757600080fd5b6000918252602090912001546001600160a01b0316905081565b6000828152600d60205260408120600301815b8154811015610c7157836001600160a01b0316828281548110610c3957610c39615290565b6000918252602090912001546001600160a01b03161415610c5f576001925050506109fc565b80610c69816152a6565b915050610c14565b506000949350505050565b600954604051636ff3062160e11b8152600481018390526001600160a01b039091169063dfe60c4290602401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906152cc565b158015610d5e5750600954604051637a513a1960e01b8152600481018390526001600160a01b0390911690637a513a1990602401602060405180830381865afa158015610d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5e91906152cc565b610daf5760405162461bcd60e51b815260206004820152601960248201527f6d61726b657420636f6e646974696f6e73206e6f74206d65740000000000000060448201526064015b60405180910390fd5b6000818152600d602052604090206003810154600c9091015414610e295760405162461bcd60e51b815260206004820152602b60248201527f6e6f7420656e6f7567682076616c696461746f7273206861766520766f74656460448201526a20746f207265736f6c766560a81b6064820152608401610da6565b600081815260056020908152604080832054835260049182905291829020549151630ae161cd60e21b81529081018390526001600160a01b0390911690632b858734906024015b600060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b5050505050565b600a5460405163da33133360e01b815260009182916001600160a01b039091169063da33133390610ee6908b9030908c908c908c908c908c90600401615337565b60408051808303816000875af1158015610f04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f289190615386565b600090815260046020526040902080546001600160a01b0319166001600160a01b03929092169190911790555050505050505050565b6000828152600c6020526040808220546009549151632a4a9dd160e01b81526004810182905290929182916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015610fbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe091906153b4565b5050955050505050915081845114610ffa57610ffa615411565b6000838152600260205260408120600101546001600160a01b0316906110208383611fed565b805190915060005b858160ff16101561113457600061105c84848b8560ff168151811061104f5761104f615290565b6020026020010151613467565b9050600d600089815260200190815260200160002060030184828151811061108657611086615290565b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915584906110d19085615230565b815181106110e1576110e1615290565b60200260200101518482815181106110fb576110fb615290565b6001600160a01b03909216602092830291909101909101528261111d81615427565b93505050808061112c9061543e565b915050611028565b505050505050505050565b6008546001600160a01b031633146111695760405162461bcd60e51b8152600401610da69061545e565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600d60209081526040918290206003018054835181840281018401909452808452606093928301828280156111ee57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116111d0575b50505050509050919050565b600081815260026020526040808220600101546009549151632a4a9dd160e01b8152600481018590526001600160a01b03918216939283921690632a4a9dd19060240161010060405180830381865afa15801561125b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127f91906153b4565b5050955050505050915060006112958285611fed565b905082815111611332576000858152600d6020908152604090912082516112c492600390920191840190614b3e565b508281511015610e9e57600954815160405163555f8d2d60e01b81526004810188905260248101919091526001600160a01b039091169063555f8d2d90604401600060405180830381600087803b15801561131e57600080fd5b505af1158015611134573d6000803e3d6000fd5b5050506000828152600d602090815260408220600601805460ff19166001908117909155909152600c9052507fd421a5181c571bba3f01190c922c3b2a896fc1d84e86c9f17ac10e67ebef8b5c55565b6008546001600160a01b031633146113ac5760405162461bcd60e51b8152600401610da69061545e565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600760205281600052604060002081815481106113ea57600080fd5b90600052602060002001600091509150505481565b6009546001600160a01b031633148061142257506008546001600160a01b031633145b61143e5760405162461bcd60e51b8152600401610da69061549f565b600954604051632841c2b760e21b8152600481018590526001600160a01b038481166024830152600092169063a1070adc90604401602060405180830381865afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b491906154e2565b905060006114cb8280670de0b6b3a76400006135a7565b905082156114e2576114dd8482613412565b610e9e565b610e9e84826132d4565b6001600160a01b0383166115125760405162461bcd60e51b8152600401610da6906154fb565b6101208201516001600160a01b031661153d5760405162461bcd60e51b8152600401610da6906154fb565b6000818152600460205260409020546001600160a01b03166115715760405162461bcd60e51b8152600401610da6906154fb565b600081815260046020818152604080842054600954825163764bc84160e11b815292516001600160a01b039283169695919092169363ec97908293808301939192908290030181865afa1580156115cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f091906154e2565b60008181526005602090815260408083208790558683526007825280832080546001818101835591855283852001859055815180830183526101208a01516001600160a01b0390811682528b8116828601908152878752600290955294839020905181549086166001600160a01b031991821617825593519101805491851691909316179091556009548151637572cb1f60e01b81529151939450821692634e042a5992861691637572cb1f916004808301926101009291908290030181865afa1580156116c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e6919061551d565b846001600160a01b0316636c321c8a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611724573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174891906154e2565b846040518463ffffffff1660e01b8152600401611767939291906155ad565b600060405180830381600087803b15801561178157600080fd5b505af1158015611795573d6000803e3d6000fd5b5050600b5460008681526004602081815260408084205481516362eb326360e11b8152915194975087965086956001600160a01b039081169563981f513695919092169363c5d664c693808301939192908290030181865afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182391906155cf565b60095460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044016060604051808303816000875af1158015611873573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061189791906155f7565b925092509250866000015115611a6c576101808701518051602082015160809092015160095460405163c6ceb96b60e01b8152600481018990526001600160a01b03868116956334327d8b95949093909291169063c6ceb96b9060240161010060405180830381865afa158015611912573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611936919061551d565b602001516040516001600160e01b031960e087901b1681526004810194909452602484019290925260448301526064820152608401600060405180830381600087803b15801561198557600080fd5b505af1158015611999573d6000803e3d6000fd5b505050506119bf604051806040016040528060018152602001603f60f81b8152506135c6565b60095461010088015160405163080ec90d60e21b81526001600160a01b039092169163203b2434916119fe918891869189918991600190600401615691565b600060405180830381600087803b158015611a1857600080fd5b505af1158015611a2c573d6000803e3d6000fd5b50505050611a53604051806040016040528060028152602001613f3f60f01b8152506135c6565b610180870151518751611a6791869161360c565b611bd7565b60a087015160c088015160095460405163c6ceb96b60e01b8152600481018890526001600160a01b03858116946375e2d946949093909291169063c6ceb96b9060240161010060405180830381865afa158015611acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af1919061551d565b602001516040516001600160e01b031960e086901b168152600481019390935260248301919091526044820152606401600060405180830381600087803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b50506009546101008a015160405163080ec90d60e21b81526001600160a01b03909216935063203b24349250611b92918891869189918991600090600401615691565b600060405180830381600087803b158015611bac57600080fd5b505af1158015611bc0573d6000803e3d6000fd5b50505050611bd7848860a00151896000015161360c565b608087018490526040516283d6f160e11b81526001600160a01b03861690630107ade290611c09908a90600401615702565b600060405180830381600087803b158015611c2357600080fd5b505af1158015611c37573d6000803e3d6000fd5b5050604080518781526001600160a01b038c1660208201527f5e2ab39d79551e4c4e66256d806dd566d4d015420519d2ed2621563488a5d2a8935001905060405180910390a15050506001600160a01b03909416600090815260036020526040902093909355505050565b80611cad8133610c01565b80611cc257506008546001600160a01b031633145b611d095760405162461bcd60e51b81526020600482015260186024820152771b9bdd081d985b1a59185d1bdc88199bdc881b585c9ad95d60421b6044820152606401610da6565b60008281526005602090815260408083205483526004918290529182902054915163d746d3ef60e01b81529081018490526001600160a01b039091169063d746d3ef90602401600060405180830381600087803b158015611d6957600080fd5b505af1158015611d7d573d6000803e3d6000fd5b50505050611d8a82613665565b600954604051634cb4408760e01b8152600481018490526001600160a01b0390911690634cb44087906024015b600060405180830381600087803b158015611dd157600080fd5b505af1158015611de5573d6000803e3d6000fd5b505050505050565b60606010805480602002602001604051908101604052809291908181526020018280548015611e4557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e27575b5050505050905090565b80611e5a8133610c01565b80611e6f57506008546001600160a01b031633145b611eb65760405162461bcd60e51b81526020600482015260186024820152771b9bdd081d985b1a59185d1bdc88199bdc881b585c9ad95d60421b6044820152606401610da6565b600082815260056020908152604080832054835260049182905280832054905163709a664160e11b81529182018590528291829182916001600160a01b039091169063e134cc82906024016080604051808303816000875af1158015611f20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f449190615814565b60095460405163573ed96360e01b8152600481018c905285151560248201526044810185905260648101849052821515608482015294985092965090945092506001600160a01b03169063573ed9639060a401600060405180830381600087803b158015611fb157600080fd5b505af1158015611fc5573d6000803e3d6000fd5b505050600087815260208190526040902054611fe4915087908461371d565b611de586613665565b60105460609060009061200990670de0b6b3a764000090615247565b905061201660648561527c565b6121e45761203f604051806040016040528060048152602001636865726560e01b8152506135c6565b6001600160a01b0383166000908152600f602052604090205460ff16156121815760105460009061207290600190615230565b67ffffffffffffffff81111561208a5761208a614cad565b6040519080825280602002602001820160405280156120b3578160200160208202803683370190505b5090506000805b60105481101561217557601081815481106120d7576120d7615290565b6000918252602090912001546001600160a01b03878116911614156120ff5760019150612163565b6010818154811061211257612112615290565b6000918252602090912001546001600160a01b0316836121328484615230565b8151811061214257612142615290565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061216d816152a6565b9150506120ba565b508193505050506109fc565b60108054806020026020016040519081016040528092919081815260200182805480156121d757602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116121b9575b50505050509150506109fc565b60006122126064866121fe670de0b6b3a764000083615247565b6122089190615230565b610b6c919061527c565b9050612226670de0b6b3a76400008261527c565b905060606001600160a01b038516158061225957506001600160a01b0385166000908152600f602052604090205460ff16155b15612321578167ffffffffffffffff81111561227757612277614cad565b6040519080825280602002602001820160405280156122a0578160200160208202803683370190505b50905060005b8281101561231b57601081815481106122c1576122c1615290565b9060005260206000200160009054906101000a90046001600160a01b03168282815181106122f1576122f1615290565b6001600160a01b039092166020928302919091019091015280612313816152a6565b9150506122a6565b50612436565b61232c600183615230565b67ffffffffffffffff81111561234457612344614cad565b60405190808252806020026020018201604052801561236d578160200160208202803683370190505b5090506000805b8381101561243357866001600160a01b03166010828154811061239957612399615290565b6000918252602090912001546001600160a01b031614156123bd5760019150612421565b601081815481106123d0576123d0615290565b6000918252602090912001546001600160a01b0316836123f08484615230565b8151811061240057612400615290565b60200260200101906001600160a01b031690816001600160a01b0316815250505b8061242b816152a6565b915050612374565b50505b95945050505050565b6009546000906001600160a01b031633148061246557506008546001600160a01b031633145b6124815760405162461bcd60e51b8152600401610da69061549f565b6000838152600d6020908152604080832060058101546001600160a01b03871685529252909120546124b29161344b565b6000938452600d602090815260408086206001600160a01b03909516865293905291832092909255919050565b6124e98133610c01565b6125275760405162461bcd60e51b815260206004820152600f60248201526e3737ba1030903b30b634b230ba37b960891b6044820152606401610da6565b6000818152600d6020908152604080832033845260010190915290205460ff1661257e5760405162461bcd60e51b81526020600482015260086024820152676e6f207374616b6560c01b6044820152606401610da6565b600954604051637a513a1960e01b8152600481018390526001600160a01b0390911690637a513a1990602401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb91906152cc565b1561262b5760405162461bcd60e51b815260206004820152601060248201526f6d61726b6574206e6f7420616c69766560801b6044820152606401610da6565b600954604051633acc765360e01b8152600481018390526001600160a01b0390911690633acc765390602401602060405180830381865afa158015612674573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269891906152cc565b6126da5760405162461bcd60e51b81526020600482015260136024820152721b585c9ad95d081b9bdd081c995cdbdb1d9959606a1b6044820152606401610da6565b600081815260056020908152604080832054835260049182905291829020546009549251636ff3062160e11b81529182018490526001600160a01b0390811692169063dfe60c4290602401602060405180830381865afa158015612742573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276691906152cc565b156127d0576000828152600d60205260409020600a015461279c90339061278c856128ac565b6001600160a01b0316919061393c565b6000828152600d60205260408120600a81015460089091018054919290916127c5908490615230565b909155506128209050565b6000828152600d60205260409020600b01546127f190339061278c856128ac565b6000828152600d60205260408120600b810154600890910180549192909161281a908490615230565b90915550505b506000908152600d602090815260408083203384526001019091529020805460ff19169055565b6009546001600160a01b031633148061286a57506008546001600160a01b031633145b6128865760405162461bcd60e51b8152600401610da69061549f565b6000918252600d602090815260408084206001600160a01b039093168452919052812055565b600090815260056020908152604080832054835260049091529020546001600160a01b031690565b6128de8133610c01565b61293c5760405162461bcd60e51b815260206004820152602960248201527f6d7573742062652076616c696461746f7220746f207265736f6c76652074686560448201526810333ab731ba34b7b760b91b6064820152608401610da6565b600954604051637a513a1960e01b8152600481018390526001600160a01b0390911690637a513a1990602401602060405180830381865afa158015612985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129a991906152cc565b6129e95760405162461bcd60e51b81526020600482015260116024820152706d61726b6574206e6f742061637469766560781b6044820152606401610da6565b600954604051636ff3062160e11b8152600481018390526001600160a01b039091169063dfe60c4290602401602060405180830381865afa158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5691906152cc565b15612aa35760405162461bcd60e51b815260206004820152601860248201527f6d61726b657420647572696e67206173736573736d656e7400000000000000006044820152606401610da6565b6000818152600d6020908152604080832033845260020190915290205460ff1615612b1b5760405162461bcd60e51b815260206004820152602260248201527f76616c696461746f7220616c726561647920766f74656420746f207265736f6c604482015261766560f01b6064820152608401610da6565b6000818152600d60208181526040808420338552600281018352908420805460ff19166001179055848452919052600c01805491612b58836152a6565b919050555050565b6000818152600760209081526040918290208054835181840281018401909452808452606093928301828280156111ee57602002820191906000526020600020905b815481526020019060010190808311612ba25750505050509050919050565b6000612bcd8233610c01565b612c195760405162461bcd60e51b815260206004820152601e60248201527f6e6f7420612076616c696461746f7220666f7220746865206d61726b657400006044820152606401610da6565b600954604051636ff3062160e11b8152600481018490526001600160a01b039091169063dfe60c4290602401602060405180830381865afa158015612c62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8691906152cc565b612cc55760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e48185c1c1c9bdd995960821b6044820152606401610da6565b60095460405163b743939b60e01b8152600481018490526001600160a01b039091169063b743939b90602401602060405180830381865afa158015612d0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d3291906152cc565b612d7e5760405162461bcd60e51b815260206004820152601860248201527f6d61726b657420636f6e646974696f6e206e6f74206d657400000000000000006044820152606401610da6565b6000828152600d60209081526040808320338452600181019092529091205460ff1615612dfb5760405162461bcd60e51b815260206004820152602560248201527f63616c6c657220616c7265616479207374616b656420666f722074686973206d604482015264185c9ad95d60da1b6064820152608401610da6565b612e1f333083600a0154612e0e876128ac565b6001600160a01b03169291906139ba565b80600a0154816008016000828254612e379190615860565b909155505033600090815260018281016020526040808320805460ff19169092179091556009549051632a4a9dd160e01b8152600481018690526001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015612ea4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec891906153b4565b5050505050505090506000818360040154612ee3919061527c565b90506000612efe84600501548361344b90919063ffffffff16565b33600090815260208690526040902054909150821015612f535760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e48185c1c1c9bdd995960821b6044820152606401610da6565b3360009081526020859052604081208054849290612f72908490615860565b90915550612f839050826001615860565b846007016000828254612f969190615860565b925050819055506001846009016000828254612fb29190615860565b909155505060095460405163334b11d360e11b81526004810188905260248101839052604481018490523360648201526001600160a01b039091169063669623a690608401600060405180830381600087803b15801561301157600080fd5b505af1158015613025573d6000803e3d6000fd5b50505050613032866109bf565b156124365761304086613a3d565b60095460405163cabe2ae160e01b8152600481018890526001600160a01b039091169063cabe2ae190602401600060405180830381600087803b15801561308657600080fd5b505af115801561309a573d6000803e3d6000fd5b5050505095945050505050565b6000818152600d60205260408082206004908101546009549251632a4a9dd160e01b81529182018590529183916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015613107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312b91906153b4565b50505050505050905060008183613142919061527c565b6000868152600d602052604090206005015490915061243690829061344b565b6008546001600160a01b0316331461318c5760405162461bcd60e51b8152600401610da69061545e565b6001600160a01b03811661319f57600080fd5b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b03163314806131e457506008546001600160a01b031633145b6132005760405162461bcd60e51b8152600401610da69061549f565b613209826128ac565b600954604051633c16f3ed60e21b8152600481018490526001600160a01b03918216602482015291169063f05bcfb490604401611db7565b60008061324d84613f3a565b90506000670de0b6b3a7640000613265836001615860565b6010546132729190615230565b61327c9190615247565b60105490915060009061329890670de0b6b3a764000090615247565b905060006132a68383613f98565b6132b1906064615247565b90508581106132c75760019450505050506109fc565b60009450505050506109fc565b6001600160a01b0382166000908152600e60205260409020548110613311576001600160a01b0382166000908152600e602052604081205561333f565b6001600160a01b0382166000908152600e602052604081208054839290613339908490615230565b90915550505b61334a826000613fad565b5050565b6009546001600160a01b031633148061337157506008546001600160a01b031633145b61338d5760405162461bcd60e51b8152600401610da69061549f565b600081815260056020908152604080832054835260049182905291829020549151633c16f3ed60e21b81529081018590526001600160a01b0384811660248301529091169063f05bcfb490604401600060405180830381600087803b1580156133f557600080fd5b505af1158015613409573d6000803e3d6000fd5b50505050505050565b6001600160a01b0382166000908152600e60205260408120805483929061343a908490615860565b9091555061334a9050826001613fad565b60006134608383670de0b6b3a76400006135a7565b9392505050565b60008060005b848160ff1610156134d957600e6000878360ff168151811061349157613491615290565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054826134c59190615860565b9150806134d18161543e565b91505061346d565b5060006134e68285615878565b905060005b858160ff161015613568576000600e6000898460ff168151811061351157613511615290565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905080831015613552575060ff169250613460915050565b90910390806135608161543e565b9150506134eb565b5061359e6040518060400160405280601481526020017373686f756c64206e65766572206265206865726560601b8152506135c6565b50509392505050565b8282028115158415858304851417166135bf57600080fd5b0492915050565b613609816040516024016135da919061588c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614345565b50565b816136475760405162461bcd60e51b815260206004820152600b60248201526a0c081c1c9a5b98da5c185b60aa1b6044820152606401610da6565b613650836111fa565b61365b838383614366565b610a318383614548565b60095460405163068bcd8d60e01b8152600481018390526001600160a01b039091169063068bcd8d90602401602060405180830381865afa1580156136ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d291906155cf565b6001600160a01b03166396fd1c426136e9836128ac565b6040516001600160e01b031960e084901b1681526001600160a01b0390911660048201526000196024820152604401610e70565b8061373f5750506000908152600d60205260409020600a810154600b90910155565b60008381526005602090815260408083205483526004918290528083205490516363737ac960e11b81529182018590526001600160a01b03169190829063c6e6f59290602401602060405180830381865afa1580156137a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c691906154e2565b6040516363737ac960e11b8152600481018590529091506000906001600160a01b0384169063c6e6f59290602401602060405180830381865afa158015613811573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061383591906154e2565b6000878152600d602052604081206008015491925061387261385860028461527c565b61386c866138668782615230565b90613f98565b9061344b565b61387d60028461527c565b6138879190615860565b9050613892886128ac565b6001600160a01b03166342966c686138aa8385615230565b6040518263ffffffff1660e01b81526004016138c891815260200190565b600060405180830381600087803b1580156138e257600080fd5b505af11580156138f6573d6000803e3d6000fd5b5050506000898152600d60205260409020600881018390556003015461391d91508261527c565b6000988952600d6020526040909820600b019790975550505050505050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806139b45760405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606401610da6565b50505050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610e9e5760405162461bcd60e51b81526020600482015260146024820152731514905394d1915497d19493d357d1905253115160621b6044820152606401610da6565b600081815260056020908152604080832054835260049182905280832054600954915163068bcd8d60e01b81529283018590526001600160a01b03908116939291169063068bcd8d90602401602060405180830381865afa158015613aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aca91906155cf565b600954604051634bee760b60e11b8152600481018690529192506001600160a01b0316906397dcec1690602401602060405180830381865afa158015613b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3891906154e2565b600314613b7a5760405162461bcd60e51b815260206004820152601060248201526f10b6b0b935b2ba21b7b73234ba34b7b760811b6044820152606401610da6565b60405163238f0e7560e11b8152600481018490526001600160a01b0383169063471e1cea90602401602060405180830381865afa158015613bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613be391906152cc565b613c265760405162461bcd60e51b815260206004820152601460248201527310b4b739ba393ab6b2b73a21b7b73234ba34b7b760611b6044820152606401610da6565b600954604051636b51d35560e01b8152600481018590526000916001600160a01b031690636b51d35590602401602060405180830381865afa158015613c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9491906152cc565b60095460405163661f1cf560e01b8152600481018790529192506000916001600160a01b039091169063661f1cf590602401602060405180830381865afa158015613ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0791906154e2565b90508115613d9a57613d958582866001600160a01b0316639ec4d40e896040518263ffffffff1660e01b8152600401613d4291815260200190565b600060405180830381865afa158015613d5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d87919081019061594f565b610180015160a0015161467b565b613e1a565b6040516303d972f160e21b8152600481018690526001600160a01b03851690630f65cbc490602401602060405180830381865afa158015613ddf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e0391906154e2565b613e1157613d9585846146fa565b613e1a85614933565b604051634b7e8e2160e11b81526001600160a01b038581166004830152602482018390528416906396fd1c4290604401600060405180830381600087803b158015613e6457600080fd5b505af1158015613e78573d6000803e3d6000fd5b505050600086815260208190526040908190209051636a9f1bdb60e01b81526004810188905281546024820152600190910154604482015283151560648201526001600160a01b0386169150636a9f1bdb90608401600060405180830381600087803b158015613ee757600080fd5b505af1158015613efb573d6000803e3d6000fd5b50505050826001600160a01b0316638d01450f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561131e57600080fd5b6000805b601054811015613f925760108181548110613f5b57613f5b615290565b6000918252602090912001546001600160a01b0384811691161415613f805792915050565b80613f8a816152a6565b915050613f3e565b50919050565b600061346083670de0b6b3a7640000846135a7565b6001600160a01b0382166000908152600e6020908152604080832054600f9092529091205460ff166141c6576001600160a01b0383166000908152600f60205260409020805460ff19166001179055601054614057575050601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b0392909216919091179055565b60005b6010548110156139b457600e60006010838154811061407b5761407b615290565b60009182526020808320909101546001600160a01b0316835282019290925260400190205482111561414857601080546001818101835560008390527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67290910180546001600160a01b031916905590546141009183916140fb9190615230565b6149ec565b836010828154811061411457614114615290565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050565b60105461415790600190615230565b8114156141b4575050601080546001810182556000919091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b03939093169290921790915550565b806141be816152a6565b91505061405a565b60006141d184613f3a565b9050801580156141de5750825b806141ff57506010546141f390600190615230565b811480156141ff575082155b1561420a5750505050565b82156142c95760005b818110156142c357600e60006010838154811061423257614232615290565b60009182526020808320909101546001600160a01b031683528201929092526040019020548311156142b15761426881836149ec565b846010828154811061427c5761427c615290565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505050505050565b806142bb816152a6565b915050614213565b506139b4565b6010546000906142db90600190615230565b90505b81811115610e9e57600e6000601083815481106142fd576142fd615290565b60009182526020808320909101546001600160a01b03168352820192909252604001902054831015614333576142688282614a7a565b8061433d81615427565b9150506142de565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600954604051634bd9725160e11b8152600481018590526000916001600160a01b0316906397b2e4a290602401602060405180830381865afa1580156143b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143d491906155cf565b600954604051632a4a9dd160e01b8152600481018790529192506000916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa158015614424573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061444891906153b4565b50505050505091505061445a81614b08565b801561446a575061446a84614b08565b6144a15760405162461bcd60e51b81526020600482015260086024820152673830b930b6a2a92960c11b6044820152606401610da6565b6000858152600d60205260408120906144ba838761344b565b90506000846001600160a01b0316637063b06c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452091906154e2565b9050600061452e8383613f98565b600485019290925550600590920191909155505050505050565b60008281526005602090815260408083205483526004918290528083205490516363737ac960e11b81529182018490526001600160a01b03169190829063c6e6f59290602401602060405180830381865afa1580156145ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906145cf91906154e2565b600954604051632a4a9dd160e01b8152600481018790529192506000916001600160a01b0390911690632a4a9dd19060240161010060405180830381865afa15801561461f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061464391906153b4565b97505050505050505061465f828261344b90919063ffffffff16565b6000958652600d6020526040909520600a019490945550505050565b600081116146ba5760405162461bcd60e51b815260206004820152600c60248201526b18102622ab2fa320a1aa27a960a11b6044820152606401610da6565b60408051808201909152806146cf848461344b565b8152600060209182018190529485528481526040909420815181559301516001909301929092555050565b60008281526005602090815260408083205483526004918290528083205490516318353be960e21b815291820185905282916001600160a01b03909116906360d4efa4906024016040805180830381865afa15801561475d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147819190615a69565b60095460405163661f1cf560e01b81526004810188905292945090925060009161488991614883916001600160a01b039091169063661f1cf590602401602060405180830381865afa1580156147db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147ff91906154e2565b60095460405163c6ceb96b60e01b8152600481018a9052670de0b6b3a7640000916001600160a01b03169063c6ceb96b9060240161010060405180830381865afa158015614851573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614875919061551d565b60c0015161386c9190615860565b84614b27565b905060006148ff856001600160a01b03166314e2b929846040518263ffffffff1660e01b81526004016148be91815260200190565b602060405180830381865afa1580156148db573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061488391906154e2565b6040805180820182529384526020808501928352600098895288905290962091518255509351600190940193909355505050565b60008181526005602090815260408083205483526004918290528083205490516318353be960e21b815291820184905282916001600160a01b03909116906360d4efa4906024016040805180830381865afa158015614996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149ba9190615a69565b604080518082018252928352602080840192835260009687528690529094209051815592516001909301929092555050565b805b82811115610a31576010614a03600183615230565b81548110614a1357614a13615290565b600091825260209091200154601080546001600160a01b039092169183908110614a3f57614a3f615290565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580614a7281615427565b9150506149ee565b815b81811015610a31576010614a91826001615860565b81548110614aa157614aa1615290565b600091825260209091200154601080546001600160a01b039092169183908110614acd57614acd615290565b600091825260209091200180546001600160a01b0319166001600160a01b039290921691909117905580614b00816152a6565b915050614a7c565b6000614b1e612710670de0b6b3a764000061527c565b90911015919050565b600081831115614b375781613460565b5090919050565b828054828255906000526020600020908101928215614b93579160200282015b82811115614b9357825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614b5e565b50614b9f929150614ba3565b5090565b5b80821115614b9f5760008155600101614ba4565b600060208284031215614bca57600080fd5b5035919050565b6001600160a01b038116811461360957600080fd5b8035614bf181614bd1565b919050565b60008060408385031215614c0957600080fd5b8235614c1481614bd1565b946020939093013593505050565b801515811461360957600080fd5b8035614bf181614c22565b60008060408385031215614c4e57600080fd5b823591506020830135614c6081614c22565b809150509250929050565b600060208284031215614c7d57600080fd5b813561346081614bd1565b60008060408385031215614c9b57600080fd5b823591506020830135614c6081614bd1565b634e487b7160e01b600052604160045260246000fd5b604051610100810167ffffffffffffffff81118282101715614ce757614ce7614cad565b60405290565b60405160c0810167ffffffffffffffff81118282101715614ce757614ce7614cad565b6040516101a0810167ffffffffffffffff81118282101715614ce757614ce7614cad565b604051601f8201601f1916810167ffffffffffffffff81118282101715614d5d57614d5d614cad565b604052919050565b6000806000806000808688036101a0811215614d8057600080fd5b8735614d8b81614bd1565b96506020880135614d9b81614c22565b9550604088013594506060880135935060808801359250610100609f198201811315614dc657600080fd5b614dce614cc3565b915060a0890135825260c0890135602083015260e0890135604083015280890135606083015250610120880135608082015261014088013560a082015261016088013560c082015261018088013560e0820152809150509295509295509295565b60008060408385031215614e4257600080fd5b8235915060208084013567ffffffffffffffff80821115614e6257600080fd5b818601915086601f830112614e7657600080fd5b813581811115614e8857614e88614cad565b8060051b9150614e99848301614d34565b8181529183018401918481019089841115614eb357600080fd5b938501935b83851015614ed157843582529385019390850190614eb8565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156124335783516001600160a01b031683529284019291840191600101614efd565b60008060408385031215614f3557600080fd5b50508035926020909101359150565b600080600060608486031215614f5957600080fd5b833592506020840135614f6b81614bd1565b91506040840135614f7b81614c22565b809150509250925092565b600067ffffffffffffffff821115614fa057614fa0614cad565b50601f01601f191660200190565b600082601f830112614fbf57600080fd5b8135614fd2614fcd82614f86565b614d34565b818152846020838601011115614fe757600080fd5b816020850160208301376000918101602001919091529392505050565b6004811061360957600080fd5b8035614bf181615004565b600060c0828403121561502e57600080fd5b615036614ced565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015292915050565b60008060006060848603121561508957600080fd5b833561509481614bd1565b9250602084013567ffffffffffffffff808211156150b157600080fd5b9085019061024082880312156150c657600080fd5b6150ce614d10565b6150d783614c30565b81526150e560208401614c30565b602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358381111561513a57600080fd5b6151468a828701614fae565b828401525050610120915061515c828401614be6565b828201526101409150615170828401615011565b828201526101609150818301358282015261018091506151928883850161501c565b82820152809450505050604084013590509250925092565b6020808252825182820181905260009190848201906040850190845b81811015612433578351835292840192918401916001016151c6565b6000806000606084860312156151f757600080fd5b83359250602084013561520981614bd1565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b6000828210156152425761524261521a565b500390565b60008160001904831182151516156152615761526161521a565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261528b5761528b615266565b500490565b634e487b7160e01b600052603260045260246000fd5b60006000198214156152ba576152ba61521a565b5060010190565b8051614bf181614c22565b6000602082840312156152de57600080fd5b815161346081614c22565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b6001600160a01b038881168252871660208201528515156040820152606081018590526080810184905260a081018390526101c0810161537a60c08301846152e9565b98975050505050505050565b6000806040838503121561539957600080fd5b82516153a481614bd1565b6020939093015192949293505050565b600080600080600080600080610100898b0312156153d157600080fd5b505086516020880151604089015160608a015160808b015160a08c015160c08d015160e0909d0151959e949d50929b919a50985090965094509092509050565b634e487b7160e01b600052600160045260246000fd5b6000816154365761543661521a565b506000190190565b600060ff821660ff8114156154555761545561521a565b60010192915050565b60208082526021908201527f4f6e6c79204f776e65722063616e2063616c6c20746869732066756e6374696f6040820152603760f91b606082015260800190565b60208082526023908201527f4f6e6c79204d616e616765722063616e2063616c6c20746869732066756e637460408201526234b7b760e91b606082015260800190565b6000602082840312156154f457600080fd5b5051919050565b602080825260089082015267061646472657373360c41b604082015260600190565b600061010080838503121561553157600080fd5b6040519081019067ffffffffffffffff8211818310171561555457615554614cad565b81604052835181526020840151602082015260408401516040820152606084015160608201526080840151608082015260a084015160a082015260c084015160c082015260e084015160e0820152809250505092915050565b61014081016155bc82866152e9565b6101008201939093526101200152919050565b6000602082840312156155e157600080fd5b815161346081614bd1565b8051614bf181614bd1565b60008060006060848603121561560c57600080fd5b835161561781614bd1565b602085015190935061562881614bd1565b6040850151909250614f7b81614bd1565b60005b8381101561565457818101518382015260200161563c565b838111156139b45750506000910152565b6000815180845261567d816020860160208601615639565b601f01601f19169290920160200192915050565b8681526001600160a01b03868116602083015285811660408301528416606082015260c0608082018190526000906156cb90830185615665565b905082151560a0830152979650505050505050565b600481106156fe57634e487b7160e01b600052602160045260246000fd5b9052565b6020815261571560208201835115159052565b6000602083015161572a604084018215159052565b506040830151606083015260608301516080830152608083015160a083015260a083015160c083015260c083015160e083015260e083015161010081818501528085015191505061012061024081850152615789610260850183615665565b908501519091506101406157a7858201836001600160a01b03169052565b85015190506101606157bb858201836156e0565b8501516101808581019190915285015180516101a086015260208101516101c086015260408101516101e08601526060810151610200860152608081015161022086015260a08101516102408601529050509392505050565b6000806000806080858703121561582a57600080fd5b845161583581614c22565b809450506020850151925060408501519150606085015161585581614c22565b939692955090935050565b600082198211156158735761587361521a565b500190565b60008261588757615887615266565b500690565b6020815260006134606020830184615665565b600082601f8301126158b057600080fd5b81516158be614fcd82614f86565b8181528460208386010111156158d357600080fd5b6158e4826020830160208701615639565b949350505050565b8051614bf181615004565b600060c0828403121561590957600080fd5b615911614ced565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015292915050565b60006020828403121561596157600080fd5b815167ffffffffffffffff8082111561597957600080fd5b90830190610240828603121561598e57600080fd5b615996614d10565b61599f836152c1565b81526159ad602084016152c1565b602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015183811115615a0257600080fd5b615a0e8882870161589f565b8284015250506101209150615a248284016155ec565b828201526101409150615a388284016158ec565b82820152610160915081830151828201526101809150615a5a868385016158f7565b91810191909152949350505050565b60008060408385031215615a7c57600080fd5b50508051602090910151909290915056fea2646970667358221220ba42582f5a6745019e7568f8548dcf7bce7c0ee1d3665c54e2ffbd92c542f6ef64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_decrementScore(address,uint256)": {
        "details": "score >= 0, update > 0"
      },
      "_filterTraders(uint256,address)": {
        "details": "percentile is is wad 0-100"
      },
      "_getValidators(uint256)": {
        "details": "for now called on market initialization"
      },
      "_incrementScore(address,uint256)": {
        "details": "score >= 0, update > 0"
      },
      "beforeResolve(uint256)": {
        "details": "Prepare market/instrument for closing, called separately before resolveMarket this is either called automatically from the instrument when conditions are met i.e fully repaid principal + interest or, in the event of a default, by validators who deem the principal recouperation is finished and need to collect remaining funds by redeeming ZCB"
      },
      "calculateMinScore(uint256)": {
        "details": "returns 0 on no minimum threshold",
        "params": {
          "percentile": ": 0-100 WAD"
        }
      },
      "createVault(address,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "params": {
          "_asset_limit": ": max number of shares for a single address",
          "_onlyVerified": ": only verified users can mint shares",
          "_r": ": minimum reputation score to mint shares",
          "_total_asset_limit": ": max number of shares for entire vault",
          "default_params": ": default params for markets created by vault",
          "underlying": ": underlying asset for vault"
        }
      },
      "denyMarket(uint256)": {
        "details": "called by validator denial of market."
      },
      "forceCloseInstrument(uint256,bool)": {
        "details": "withdraws all balance from the instrument.  If assets in instrument is not in underlying, need all balances to be divested to underlying  Ideally this should be called by several validators, maybe implement a voting scheme and have a keeper call it.",
        "params": {
          "emergency": "ascribes cases where the instrument should be forcefully liquidated back to the vault"
        }
      },
      "fulfillRandomWords(uint256,uint256[])": {
        "details": "TODO => can be called by anyone?"
      },
      "initiateMarket(address,(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256,(uint256,uint256,uint256,uint256,uint256,uint256)),uint256)": {
        "details": "Instrument should already be deployed ",
        "params": {
          "instrumentData": ": instrument arguments",
          "recipient": ": utilizer for the associated instrument",
          "vaultId": ": vault identifier"
        }
      },
      "isReputable(address,uint256)": {
        "params": {
          "percentile": ": 0-100 w/ WAD."
        }
      },
      "resolveMarket(uint256)": {
        "details": "validators call this function from market manager any funds left for the instrument, irrespective of whether it is in profit or inloss. "
      },
      "validatorApprove(uint256)": {
        "details": "get val_cap, the total amount of zcb for sale and each validators should buy  val_cap/num validators zcb  They also need to hold the corresponding vault, so they are incentivized to assess at a systemic level and avoid highly  correlated instruments triggers controller.approveMarket"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "_decrementScore(address,uint256)": {
        "notice": "decrements trader's score"
      },
      "_filterTraders(uint256,address)": {
        "notice": "returns a list of top X percentile traders excluding the utilizer. "
      },
      "_getValidators(uint256)": {
        "notice": "randomly choose validators for market approval, async operation => fulfillRandomness is the callback function."
      },
      "_incrementScore(address,uint256)": {
        "notice": "increments trader's score"
      },
      "approvalCondition(uint256)": {
        "notice": "conditions for approval => validator zcb stake fulfilled + validators have all approved"
      },
      "beforeResolve(uint256)": {
        "notice": "Resolve function 1"
      },
      "calculateMinScore(uint256)": {
        "notice": "finds the first trader within the percentile"
      },
      "createVault(address,bool,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))": {
        "notice": "creates vault"
      },
      "deniedValidator(uint256,address)": {
        "notice": "called by marketManager.redeemDeniedMarket, redeems the discounted ZCB"
      },
      "forceCloseInstrument(uint256,bool)": {
        "notice": "function that closes the instrument/market before maturity, maybe to realize gains/cut losses fast or debt is prematurely fully repaid, or underlying strategy is deemed dangerous, etc.  After, the resolveMarket function should be called in a new block  "
      },
      "fulfillRandomWords(uint256,uint256[])": {
        "notice": "chainlink callback function, sets validators."
      },
      "getTraders()": {
        "notice": "retrieves all rated traders"
      },
      "initiateMarket(address,(bool,bool,uint256,uint256,uint256,uint256,uint256,uint256,string,address,uint8,uint256,(uint256,uint256,uint256,uint256,uint256,uint256)),uint256)": {
        "notice": "initiates market, called by frontend loan proposal or instrument form submit button."
      },
      "isReputable(address,uint256)": {
        "notice": "calculates whether a trader meets the requirements to trade during the reputation assessment phase."
      },
      "isValidator(uint256,address)": {
        "notice": "returns true if user is validator for corresponding market"
      },
      "redeem_transfer(uint256,address,uint256)": {
        "notice": "called only when redeeming, transfer funds from vault "
      },
      "resolveCondition(uint256)": {
        "notice": "condition for resolving market, met when all the validators chosen for the market have voted to resolve."
      },
      "resolveMarket(uint256)": {
        "notice": "Resolve function 2main function called at maturity OR premature resolve of instrument(from early default)  "
      },
      "unlockValidatorStake(uint256)": {
        "notice": "called by validators when the market is resolved or denied to retrieve their stake."
      },
      "updateReputation(uint256,address,bool)": {
        "notice": "when market is resolved(maturity/early default), calculates score and update each assessment phase trader's reputation, called by individual traders when redeeming "
      },
      "validatorApprove(uint256)": {
        "notice": "allows validators to buy at a discount + automatically stake a percentage of the principal They can only buy a fixed amount of ZCB, usually a at lot larger amount "
      },
      "validatorResolve(uint256)": {
        "notice": "called by validators to approve resolving the market, after approval."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7796,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "approvalDatas",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ApprovalData)7785_storage)"
      },
      {
        "astId": 7813,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "verified",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7818,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "market_data",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(MarketData)7780_storage)"
      },
      {
        "astId": 7822,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "ad_to_id",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7827,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vaults",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_contract(Vault)24723)"
      },
      {
        "astId": 7831,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "id_parent",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7835,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vault_debt",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7840,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vault_to_marketIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 7842,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "creator_address",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7845,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "marketManager",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(MarketManager)14711"
      },
      {
        "astId": 7848,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "vaultFactory",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(VaultFactory)10970"
      },
      {
        "astId": 7851,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "poolFactory",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(SyntheticZCBPoolFactory)7015"
      },
      {
        "astId": 8774,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "requestToMarketId",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8779,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "validator_data",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(ValidatorData)8770_storage)"
      },
      {
        "astId": 9935,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "trader_scores",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9939,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "isRated",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9942,
        "contract": "contracts/protocol/controller.sol:Controller",
        "label": "traders",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(MarketManager)14711": {
        "encoding": "inplace",
        "label": "contract MarketManager",
        "numberOfBytes": "20"
      },
      "t_contract(SyntheticZCBPoolFactory)7015": {
        "encoding": "inplace",
        "label": "contract SyntheticZCBPoolFactory",
        "numberOfBytes": "20"
      },
      "t_contract(Vault)24723": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_contract(VaultFactory)10970": {
        "encoding": "inplace",
        "label": "contract VaultFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_contract(Vault)24723)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract Vault)",
        "numberOfBytes": "32",
        "value": "t_contract(Vault)24723"
      },
      "t_mapping(t_uint256,t_struct(ApprovalData)7785_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.ApprovalData)",
        "numberOfBytes": "32",
        "value": "t_struct(ApprovalData)7785_storage"
      },
      "t_mapping(t_uint256,t_struct(MarketData)7780_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.MarketData)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketData)7780_storage"
      },
      "t_mapping(t_uint256,t_struct(ValidatorData)8770_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.ValidatorData)",
        "numberOfBytes": "32",
        "value": "t_struct(ValidatorData)8770_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ApprovalData)7785_storage": {
        "encoding": "inplace",
        "label": "struct Controller.ApprovalData",
        "members": [
          {
            "astId": 7782,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "approved_principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7784,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "approved_yield",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketData)7780_storage": {
        "encoding": "inplace",
        "label": "struct Controller.MarketData",
        "members": [
          {
            "astId": 7777,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "instrument_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7779,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "utilizer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ValidatorData)8770_storage": {
        "encoding": "inplace",
        "label": "struct Controller.ValidatorData",
        "members": [
          {
            "astId": 8740,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "sales",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 8744,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "staked",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8748,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "resolved",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 8751,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "validators",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 8753,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "val_cap",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8755,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "avg_price",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8757,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "requested",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 8759,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "totalSales",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8761,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "totalStaked",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8763,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "numApproved",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8765,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "initialStake",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8767,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "finalStake",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8769,
            "contract": "contracts/protocol/controller.sol:Controller",
            "label": "numResolved",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}