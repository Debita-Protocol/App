{
  "address": "0x38fCC8c20b6CDDBaBa8E764830030764f99f4CB1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creator_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_MasterChef_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LendingPool_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_DS_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interep_address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "ammFactoryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "marketFactoryAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidityAmountUSD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketID",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "uint256[]",
              "name": "odds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IController.MarketInfo",
          "name": "marketData",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "loanID",
          "type": "string"
        }
      ],
      "name": "_initiateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "validator_address",
          "type": "address"
        }
      ],
      "name": "addValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "approveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "borrower_market_data",
      "outputs": [
        {
          "internalType": "address",
          "name": "ammFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountUSD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "loanID",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "marketFactoryAddress",
          "type": "address"
        }
      ],
      "name": "canBeApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ammFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "marketFactoryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountUSD",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "loanID",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "odds",
          "type": "uint256[]"
        }
      ],
      "name": "initiateMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "loanID",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isDefault",
          "type": "bool"
        }
      ],
      "name": "resolveMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "validators",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "verified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nullifier_hash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "external_nullifier",
          "type": "uint256"
        },
        {
          "internalType": "uint256[8]",
          "name": "proof",
          "type": "uint256[8]"
        }
      ],
      "name": "verifyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xac2ac327890563421ff8e458032c12cf1ab664131fe33d96742ab3a963cf1035",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0x38fCC8c20b6CDDBaBa8E764830030764f99f4CB1",
    "transactionIndex": 11,
    "gasUsed": "1945761",
    "logsBloom": "0x
    "blockHash": "0x1e713bbe0be550fd92619b29da64add3b6f66eb9377489ea3e538b73d4c5a8d8",
    "transactionHash": "0xac2ac327890563421ff8e458032c12cf1ab664131fe33d96742ab3a963cf1035",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 27289100,
        "transactionHash": "0xac2ac327890563421ff8e458032c12cf1ab664131fe33d96742ab3a963cf1035",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000374d4648bd1a570000000000000000000000000000000000000000000000026b80e5d60a9488f300000000000000000000000000000000000000000000120abd554d79f59320b40000000000000000000000000000000000000000000000026b49988fc1d76e9c00000000000000000000000000000000000000000000120abd8c9ac03e503b0b",
        "logIndex": 35,
        "blockHash": "0x1e713bbe0be550fd92619b29da64add3b6f66eb9377489ea3e538b73d4c5a8d8"
      }
    ],
    "blockNumber": 27289100,
    "cumulativeGasUsed": "3302341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "0xf2B351F19Cc58f52ca7C4f7B8B2663B932f889AC",
    "0x52e187467bf9d22614b3867e68d53143aad87dde",
    "0xe38Df11EDe1426F2e93E0A518a3D349d4425200B",
    "0xb21ae1581F747C7913B9d8e3026A949f0cB0221b",
    "0xf2B351F19Cc58f52ca7C4f7B8B2663B932f889AC"
  ],
  "numDeployments": 1,
  "solcInputHash": "f1e7de409326fef85577dc516fa72386",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creator_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MasterChef_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LendingPool_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_DS_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interep_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ammFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"odds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IController.MarketInfo\",\"name\":\"marketData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"loanID\",\"type\":\"string\"}],\"name\":\"_initiateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validator_address\",\"type\":\"address\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"approveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"borrower_market_data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ammFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"loanID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"}],\"name\":\"canBeApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ammFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketFactoryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountUSD\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"loanID\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"odds\",\"type\":\"uint256[]\"}],\"name\":\"initiateMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"loanID\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isDefault\",\"type\":\"bool\"}],\"name\":\"resolveMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nullifier_hash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"external_nullifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"verifyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/stablecoin/controller.sol\":\"Controller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@interep/contracts/IInterep.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @title Interep interface.\\n/// @dev Interface of a Interep contract.\\ninterface IInterep {\\n    struct Verifier {\\n        address contractAddress;\\n        uint8 merkleTreeDepth;\\n    }\\n\\n    struct Group {\\n        bytes32 provider;\\n        bytes32 name;\\n        uint256 root;\\n        uint8 depth;\\n    }\\n\\n    /// @dev Emitted when a Semaphore proof is verified.\\n    /// @param groupId: Id of the group.\\n    /// @param signal: Semaphore signal.\\n    event ProofVerified(uint256 indexed groupId, bytes32 signal);\\n\\n    /// @dev Emitted when an Interep group is updated.\\n    /// @param groupId: Id of the group.\\n    /// @param provider: Provider of the group.\\n    /// @param name: Name of the group.\\n    /// @param root: Root hash of the tree.\\n    /// @param depth: Depth of the tree.\\n    event GroupUpdated(\\n        uint256 groupId,\\n        bytes32 indexed provider,\\n        bytes32 indexed name,\\n        uint256 root,\\n        uint8 indexed depth\\n    );\\n\\n    /// @dev Updates the Interep groups.\\n    /// @param groups: List of Interep groups.\\n    function updateGroups(Group[] calldata groups) external;\\n\\n    /// @dev Saves the nullifier hash to avoid double signaling and emits an event\\n    /// if the zero-knowledge proof is valid.\\n    /// @param groupId: Id of the group.\\n    /// @param signal: Semaphore signal.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    function verifyProof(\\n        uint256 groupId,\\n        bytes32 signal,\\n        uint256 nullifierHash,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof\\n    ) external;\\n\\n    /// @dev Returns the root hash of an Interep group.\\n    /// @param groupId: Id of the group.\\n    /// @return Root hash of the group.\\n    function getRoot(uint256 groupId) external view returns (uint256);\\n\\n    /// @dev Returns the tree depth of an Interep group.\\n    /// @param groupId: Id of the group.\\n    /// @return Tree depth of the group.\\n    function getDepth(uint256 groupId) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd3279ce9fbbb58b7567f66d18735f81df7e8ee61c677e9dd739d3a4823e31c5d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface BColor {\\r\\n    function getColor() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ncontract BBronze is BColor {\\r\\n    function getColor() external pure override returns (bytes32) {\\r\\n        return bytes32(\\\"BRONZE\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5684acd4711203183665f2ab65bafb6d12d22d08d18423e4bb143d79d1d6c\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BColor.sol\\\";\\r\\n\\r\\ncontract BConst is BBronze {\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\r\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\r\\n\\r\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\r\\n    uint256 public constant MAX_FEE = BONE / 10;\\r\\n    uint256 public constant EXIT_FEE = 0;\\r\\n\\r\\n    uint256 public constant MIN_WEIGHT = BONE;\\r\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\r\\n\\r\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\r\\n\\r\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\r\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\r\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\r\\n\\r\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\r\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\r\\n}\\r\\n\",\"keccak256\":\"0x861f4d61a141af61fbc9c4824e0952b112c4dcb5329093ac73c5c31bdf83aec2\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is disstributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\r\\n\\r\\nimport \\\"./BPool.sol\\\";\\r\\n\\r\\ncontract BFactory is BBronze {\\r\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\r\\n\\r\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\r\\n\\r\\n    mapping(address => bool) private _isBPool;\\r\\n\\r\\n    function isBPool(address b) external view returns (bool) {\\r\\n        return _isBPool[b];\\r\\n    }\\r\\n\\r\\n    function newBPool() external returns (BPool) {\\r\\n        BPool bpool = new BPool();\\r\\n        _isBPool[address(bpool)] = true;\\r\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\r\\n        bpool.setController(msg.sender);\\r\\n        return bpool;\\r\\n    }\\r\\n\\r\\n    address private _blabs;\\r\\n\\r\\n    constructor() {\\r\\n        _blabs = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getBLabs() external view returns (address) {\\r\\n        return _blabs;\\r\\n    }\\r\\n\\r\\n    function setBLabs(address b) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        emit LOG_BLABS(msg.sender, b);\\r\\n        _blabs = b;\\r\\n    }\\r\\n\\r\\n    function collect(BPool pool) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\r\\n        bool xfer = pool.transfer(_blabs, collected);\\r\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fc1280b9ded4e258eca3987f20e5feab64f577a6537920121e174c8ddb8830c\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ncontract BMath is BBronze, BConst, BNum {\\r\\n    /**********************************************************************************************\\r\\n    // calcSpotPrice                                                                             //\\r\\n    // sP = spotPrice                                                                            //\\r\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\r\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\r\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcSpotPrice(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 spotPrice) {\\r\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\r\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\r\\n        uint256 ratio = bdiv(numer, denom);\\r\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\r\\n        return (spotPrice = bmul(ratio, scale));\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcOutGivenIn                                                                            //\\r\\n    // aO = tokenAmountOut                                                                       //\\r\\n    // bO = tokenBalanceOut                                                                      //\\r\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\r\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\r\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcOutGivenIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\r\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\r\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\r\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        uint256 bar = bsub(BONE, foo);\\r\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcInGivenOut                                                                            //\\r\\n    // aI = tokenAmountIn                                                                        //\\r\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\r\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\r\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\r\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\r\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcInGivenOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\r\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\r\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        foo = bsub(foo, BONE);\\r\\n        tokenAmountIn = bsub(BONE, swapFee);\\r\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolOutGivenSingleIn                                                                  //\\r\\n    // pAo = poolAmountOut         /                                              \\\\              //\\r\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\r\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\r\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\r\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\r\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\r\\n    // sF = swapFee                \\\\                                              /              //\\r\\n    **********************************************************************************************/\\r\\n\\r\\n    // Charge the trading fee for the proportion of tokenAi\\r\\n    ///  which is implicitly traded to the other pool tokens.\\r\\n    // That proportion is (1- weightTokenIn)\\r\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\r\\n\\r\\n    function calcPoolOutGivenSingleIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\r\\n\\r\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\r\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\r\\n\\r\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleInGivenPoolOut                                                                  //\\r\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\r\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\r\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\r\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\r\\n    // wI = weightIn                              /      wI  \\\\                                   //\\r\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\r\\n    // sF = swapFee                               \\\\      tW  /                                   //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleInGivenPoolOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\r\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\r\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\r\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\r\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\r\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\r\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\r\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\r\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleOutGivenPoolIn                                                                  //\\r\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\r\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\r\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\r\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\r\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\r\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\r\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\r\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleOutGivenPoolIn(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\r\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\r\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\r\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\r\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\r\\n\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\r\\n\\r\\n        // charge swap fee on the output token side\\r\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolInGivenSingleOut                                                                  //\\r\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\r\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\r\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\r\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\r\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\r\\n    // tW = totalWeight           -------------------------------------------------------------  //\\r\\n    // sF = swapFee                                        ( 1 - eF )                            //\\r\\n    // eF = exitFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcPoolInGivenSingleOut(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountIn) {\\r\\n        // charge swap fee on the output token side\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\r\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\r\\n        uint256 zar = bmul(zoo, swapFee);\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\r\\n\\r\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\r\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\r\\n\\r\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\r\\n\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\r\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9051281ae3cdaab135eb51e0d1e5b6e16bc1fe29f756bcf0a248c061163df7ea\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BConst.sol\\\";\\r\\n\\r\\ncontract BNum is BConst {\\r\\n    function btoi(uint256 a) internal pure returns (uint256) {\\r\\n        return a / BONE;\\r\\n    }\\r\\n\\r\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\r\\n        return btoi(a) * BONE;\\r\\n    }\\r\\n\\r\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        (uint256 c, bool flag) = bsubSign(a, b);\\r\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\r\\n        if (a >= b) {\\r\\n            return (a - b, false);\\r\\n        } else {\\r\\n            return (b - a, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c0 = a * b;\\r\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c1 = c0 + (BONE / 2);\\r\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c2 = c1 / BONE;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\r\\n        uint256 c0 = a * BONE;\\r\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\r\\n        uint256 c1 = c0 + (b / 2);\\r\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\r\\n        uint256 c2 = c1 / b;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    // DSMath.wpow\\r\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 z = n % 2 != 0 ? a : BONE;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            a = bmul(a, a);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = bmul(z, a);\\r\\n            }\\r\\n        }\\r\\n        return z;\\r\\n    }\\r\\n\\r\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\r\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\r\\n    // of approximation of b^0.w\\r\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\r\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\r\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\r\\n\\r\\n        uint256 whole = bfloor(exp);\\r\\n        uint256 remain = bsub(exp, whole);\\r\\n\\r\\n        uint256 wholePow = bpowi(base, btoi(whole));\\r\\n\\r\\n        if (remain == 0) {\\r\\n            return wholePow;\\r\\n        }\\r\\n\\r\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\r\\n        return bmul(wholePow, partialResult);\\r\\n    }\\r\\n\\r\\n    function bpowApprox(\\r\\n        uint256 base,\\r\\n        uint256 exp,\\r\\n        uint256 precision\\r\\n    ) internal pure returns (uint256) {\\r\\n        // term 0:\\r\\n        uint256 a = exp;\\r\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\r\\n        uint256 term = BONE;\\r\\n        uint256 sum = term;\\r\\n        bool negative = false;\\r\\n\\r\\n        // term(k) = numer / denom\\r\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\r\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\r\\n        // continue until term is less than precision\\r\\n        for (uint256 i = 1; term >= precision; i++) {\\r\\n            uint256 bigK = i * BONE;\\r\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\r\\n            term = bmul(term, bmul(c, x));\\r\\n            term = bdiv(term, bigK);\\r\\n            if (term == 0) break;\\r\\n\\r\\n            if (xneg) negative = !negative;\\r\\n            if (cneg) negative = !negative;\\r\\n            if (negative) {\\r\\n                sum = bsub(sum, term);\\r\\n            } else {\\r\\n                sum = badd(sum, term);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ae56173eeb8f5522a3bbbfde10905514f68320bbcad3dd7e46ba546dd4010a\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BToken.sol\\\";\\r\\nimport \\\"./BMath.sol\\\";\\r\\n\\r\\ncontract BPool is BBronze, BToken, BMath {\\r\\n    struct Record {\\r\\n        bool bound; // is token bound to pool\\r\\n        uint256 index; // private\\r\\n        uint256 denorm; // denormalized weight\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    event LOG_SWAP(\\r\\n        address indexed caller,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 tokenAmountOut\\r\\n    );\\r\\n\\r\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\r\\n\\r\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\r\\n\\r\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\r\\n\\r\\n    modifier _logs_() {\\r\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    modifier _viewlock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    bool private _mutex;\\r\\n\\r\\n    address private _factory; // BFactory address to push token exitFee to\\r\\n    address private _controller; // has CONTROL role\\r\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\r\\n\\r\\n    // `setSwapFee` and `finalize` require CONTROL\\r\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\r\\n    uint256 private _swapFee;\\r\\n    bool private _finalized;\\r\\n\\r\\n    address[] private _tokens;\\r\\n    mapping(address => Record) private _records;\\r\\n    uint256 private _totalWeight;\\r\\n\\r\\n    constructor() {\\r\\n        _controller = msg.sender;\\r\\n        _factory = msg.sender;\\r\\n        _swapFee = MIN_FEE;\\r\\n        _publicSwap = false;\\r\\n        _finalized = false;\\r\\n    }\\r\\n\\r\\n    function isPublicSwap() external view returns (bool) {\\r\\n        return _publicSwap;\\r\\n    }\\r\\n\\r\\n    function isFinalized() external view returns (bool) {\\r\\n        return _finalized;\\r\\n    }\\r\\n\\r\\n    function isBound(address t) external view returns (bool) {\\r\\n        return _records[t].bound;\\r\\n    }\\r\\n\\r\\n    function getNumTokens() external view returns (uint256) {\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].denorm;\\r\\n    }\\r\\n\\r\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\r\\n        return _totalWeight;\\r\\n    }\\r\\n\\r\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        uint256 denorm = _records[token].denorm;\\r\\n        return bdiv(denorm, _totalWeight);\\r\\n    }\\r\\n\\r\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].balance;\\r\\n    }\\r\\n\\r\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\r\\n        return _swapFee;\\r\\n    }\\r\\n\\r\\n    function getController() external view _viewlock_ returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\r\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\r\\n        _swapFee = swapFee;\\r\\n    }\\r\\n\\r\\n    function setController(address manager) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _controller = manager;\\r\\n    }\\r\\n\\r\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _publicSwap = public_;\\r\\n    }\\r\\n\\r\\n    function finalize() external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\r\\n\\r\\n        _finalized = true;\\r\\n        _publicSwap = true;\\r\\n\\r\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\r\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function bind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    )\\r\\n        external\\r\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\r\\n    {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\r\\n\\r\\n        _records[token] = Record({\\r\\n            bound: true,\\r\\n            index: _tokens.length,\\r\\n            denorm: 0, // balance and denorm will be validated\\r\\n            balance: 0 // and set by `rebind`\\r\\n        });\\r\\n        _tokens.push(token);\\r\\n        rebind(token, balance, denorm);\\r\\n    }\\r\\n\\r\\n    function rebind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    ) public _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n\\r\\n        // Adjust the denorm and totalWeight\\r\\n        uint256 oldWeight = _records[token].denorm;\\r\\n        if (denorm > oldWeight) {\\r\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\r\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n        } else if (denorm < oldWeight) {\\r\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\r\\n        }\\r\\n        _records[token].denorm = denorm;\\r\\n\\r\\n        // Adjust the balance record and actual token balance\\r\\n        uint256 oldBalance = _records[token].balance;\\r\\n        _records[token].balance = balance;\\r\\n        if (balance > oldBalance) {\\r\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\r\\n        } else if (balance < oldBalance) {\\r\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\r\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\r\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\r\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\r\\n            _pushUnderlying(token, _factory, tokenExitFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unbind(address token) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        uint256 tokenBalance = _records[token].balance;\\r\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\r\\n\\r\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\r\\n\\r\\n        // Swap the token-to-unbind with the last token,\\r\\n        // then delete the last token\\r\\n        uint256 index = _records[token].index;\\r\\n        uint256 last = _tokens.length - 1;\\r\\n        _tokens[index] = _tokens[last];\\r\\n        _records[_tokens[index]].index = index;\\r\\n        _tokens.pop();\\r\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\r\\n\\r\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\r\\n        _pushUnderlying(token, _factory, tokenExitFee);\\r\\n    }\\r\\n\\r\\n    // Absorb any tokens that have been sent to this contract into the pool\\r\\n    function gulp(address token) external _logs_ _lock_ {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n    }\\r\\n\\r\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\r\\n        external\\r\\n        view\\r\\n        _viewlock_\\r\\n        returns (uint256 spotPrice)\\r\\n    {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\r\\n    }\\r\\n\\r\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\r\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\r\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\r\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\r\\n        }\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    }\\r\\n\\r\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _burnPoolShare(pAiAfterExitFee);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\r\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\r\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\r\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n\\r\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n\\r\\n            _amounts[i] = bmul(ratio, bal);\\r\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\r\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n        }\\r\\n\\r\\n        return _amounts;\\r\\n    }\\r\\n\\r\\n    function swapExactAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 minAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountOut = calcOutGivenIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountOut, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function swapExactAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 maxAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountIn = calcInGivenOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountIn, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function joinswapExternAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 minPoolAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    function joinswapPoolAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 maxAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    function exitswapPoolAmountIn(\\r\\n        address tokenOut,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 minAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    function exitswapExternAmountOut(\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPoolAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        poolAmountIn = calcPoolInGivenSingleOut(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n\\r\\n    // ==\\r\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\r\\n    // You must `_lock_` or otherwise ensure reentry-safety\\r\\n\\r\\n    function _pullUnderlying(\\r\\n        address erc20,\\r\\n        address from,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pushUnderlying(\\r\\n        address erc20,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pullPoolShare(address from, uint256 amount) internal {\\r\\n        _pull(from, amount);\\r\\n    }\\r\\n\\r\\n    function _pushPoolShare(address to, uint256 amount) internal {\\r\\n        _push(to, amount);\\r\\n    }\\r\\n\\r\\n    function _mintPoolShare(uint256 amount) internal {\\r\\n        _mint(amount);\\r\\n    }\\r\\n\\r\\n    function _burnPoolShare(uint256 amount) internal {\\r\\n        _burn(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7158032f88b03d54bba37cc3bdb432fa1906ab69bcd69d1baa43591a36e5f13a\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ninterface IERC20Balancer {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address whom) external view returns (uint256);\\r\\n\\r\\n    function allowance(address src, address dst) external view returns (uint256);\\r\\n\\r\\n    function approve(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract BTokenBase is BNum {\\r\\n    mapping(address => uint256) internal _balance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n    function _mint(uint256 amt) internal {\\r\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\r\\n        _totalSupply = badd(_totalSupply, amt);\\r\\n        emit Transfer(address(0), address(this), amt);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 amt) internal {\\r\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\r\\n        _totalSupply = bsub(_totalSupply, amt);\\r\\n        emit Transfer(address(this), address(0), amt);\\r\\n    }\\r\\n\\r\\n    function _move(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) internal {\\r\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[src] = bsub(_balance[src], amt);\\r\\n        _balance[dst] = badd(_balance[dst], amt);\\r\\n        emit Transfer(src, dst, amt);\\r\\n    }\\r\\n\\r\\n    function _push(address to, uint256 amt) internal {\\r\\n        _move(address(this), to, amt);\\r\\n    }\\r\\n\\r\\n    function _pull(address from, uint256 amt) internal {\\r\\n        _move(from, address(this), amt);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BToken is BTokenBase, IERC20Balancer {\\r\\n    string private _name = \\\"Balancer Pool Token\\\";\\r\\n    string private _symbol = \\\"BPT\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address dst) external view override returns (uint256) {\\r\\n        return _allowance[src][dst];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address whom) external view override returns (uint256) {\\r\\n        return _balance[whom];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\r\\n        _allowance[msg.sender][dst] = amt;\\r\\n        emit Approval(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        uint256 oldValue = _allowance[msg.sender][dst];\\r\\n        if (amt > oldValue) {\\r\\n            _allowance[msg.sender][dst] = 0;\\r\\n        } else {\\r\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\r\\n        }\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\r\\n        _move(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external override returns (bool) {\\r\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\r\\n        _move(src, dst, amt);\\r\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\r\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\r\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcbe41ffe3ae5f17388e0418cc5aa0e85c9acc4094e89fdf695d223c15b6f56b7\",\"license\":\"MIT\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\nabstract contract CalculateLinesToBPoolOdds {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\r\\n\\r\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _total = sum(_proportions);\\r\\n\\r\\n        _odds = new uint256[](_proportions.length);\\r\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\r\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\r\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\r\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\r\\n            _sum += _numbers[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\r\\n        _odds = new uint256[](_size);\\r\\n\\r\\n        if (_invalid) _odds[0] = 1e18; // 2%\\r\\n\\r\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\r\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\r\\n            _odds[i] = _each;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\r\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\r\\n\\r\\n        uint256 _total = _odds1 + _odds2;\\r\\n\\r\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\r\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\r\\n\\r\\n        // Moneyline odds are too skewed: would have under 2% odds.\\r\\n        require(_odds1 >= 1e18);\\r\\n        require(_odds2 >= 1e18);\\r\\n\\r\\n        _odds = new uint256[](3);\\r\\n        _odds[0] = 1e18; // Invalid, 2%\\r\\n        _odds[1] = _odds1;\\r\\n        _odds[2] = _odds2;\\r\\n    }\\r\\n\\r\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\r\\n        if (_line < 0) {\\r\\n            // favored\\r\\n            uint256 _posLine = uint256(-_line);\\r\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\r\\n        } else {\\r\\n            // underdog\\r\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x416898d926442f8779f85482a1b0e5f0e7c9d1933a2c1293d8d72f45bc84feaf\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Full is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x41ff2e58c059015e2253de4dd9662eb9c508dbe06173d6c86d40eaf9931a825a\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address _newOwner) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x76d07e413556985a60ee4605c19060e334d2837d5a6a516c9778a10f6762a4ca\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\nabstract contract Ownable is IOwnable {\\r\\n    address internal owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view override returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param _newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\r\\n        require(_newOwner != address(0));\\r\\n        onTransferOwnership(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\r\\n    function onTransferOwnership(address, address) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x88fbb6eef836056a42280c96f7f5f2a721f7f714c4b4681f53193812cd38958e\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Rewardable {\\r\\n    // Rewards will be paid out over the lifetime of an event.\\r\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\r\\n\\r\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\r\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x45a1a84b8cd35d8663aa8e93a8cc33acdcd5f81939d71d25e36425f23e2d3cbe\",\"license\":\"MIT\"},\"contracts/libraries/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Versioned {\\r\\n    string internal version;\\r\\n\\r\\n    constructor(string memory _version) {\\r\\n        version = _version;\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (string memory) {\\r\\n        return version;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5ba98803ed1e2332153aba2d4124c242ac1d009579e875c5d286f0ac8bf7264c\",\"license\":\"MIT\"},\"contracts/rewards/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\" as OpenZeppelinOwnable;\\r\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../turbo/AMMFactory.sol\\\";\\r\\n\\r\\n// MasterChef is the master of Reward. He can make Reward and he is a fair guy.\\r\\ncontract MasterChef is OpenZeppelinOwnable.Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    // The percentage of the rewards period that early deposit bonus will payout.\\r\\n    // e.g. Early deposit bonus hits if LP is done in the first x percent of the period.\\r\\n    uint256 public constant EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE = BONE / 10; // 10% of reward period.\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 lastActionTimestamp; // Timestamp of the withdrawal or deposit from this user.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of REWARDs\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accRewardsPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n    // Info of each user that deposits LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 accRewardsPerShare; // Accumulated REWARDs per share, times BONE. See below.\\r\\n        uint256 totalEarlyDepositBonusRewardShares; // The total number of share currently qualifying bonus REWARDs.\\r\\n        uint256 beginTimestamp; // The timestamp to begin calculating rewards at.\\r\\n        uint256 endTimestamp; // Timestamp of the end of the rewards period.\\r\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs to distribute to early depositors.\\r\\n        uint256 lastRewardTimestamp; // Last timestamp REWARDs distribution occurred.\\r\\n        uint256 rewardsPerSecond; // Number of rewards paid out per second.\\r\\n    }\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    // This is a snapshot of the current state of a market.\\r\\n    struct PoolStatusInfo {\\r\\n        uint256 beginTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 earlyDepositEndTimestamp;\\r\\n        uint256 totalRewardsAccrued;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    struct PendingRewardInfo {\\r\\n        uint256 beginTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 earlyDepositEndTimestamp;\\r\\n        uint256 accruedStandardRewards;\\r\\n        uint256 accruedEarlyDepositBonusRewards;\\r\\n        uint256 pendingEarlyDepositBonusRewards;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    struct MarketFactoryInfo {\\r\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs per day to distribute to early depositors.\\r\\n        uint256 rewardsPeriods; // Number of days the rewards for this pool will payout.\\r\\n        uint256 rewardsPerPeriod; // Amount of rewards to be given out for a given period.\\r\\n    }\\r\\n    mapping(address => MarketFactoryInfo) marketFactoryRewardInfo;\\r\\n\\r\\n    struct RewardPoolLookupInfo {\\r\\n        uint256 pid;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    // AMMFactory => MarketFactory => MarketId\\r\\n    mapping(address => mapping(address => mapping(uint256 => RewardPoolLookupInfo))) public rewardPoolLookup;\\r\\n\\r\\n    // The REWARD TOKEN!\\r\\n    IERC20 private rewardsToken;\\r\\n\\r\\n    mapping(address => bool) private approvedAMMFactories;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address recipient);\\r\\n    event TrustMarketFactory(\\r\\n        address indexed MarketFactory,\\r\\n        uint256 OriginEarlyDepositBonusRewards,\\r\\n        uint256 OriginrewardsPeriods,\\r\\n        uint256 OriginRewardsPerPeriod,\\r\\n        uint256 EarlyDepositBonusRewards,\\r\\n        uint256 rewardsPeriods,\\r\\n        uint256 RewardsPerPeriod\\r\\n    );\\r\\n\\r\\n    event PoolCreated(\\r\\n        address indexed ammFactory,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address creator,\\r\\n        address lpTokenRecipient\\r\\n    );\\r\\n    event LiquidityChanged(\\r\\n        address indexed ammFactory,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address user,\\r\\n        address recipient,\\r\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\r\\n        int256 collateral,\\r\\n        int256 lpTokens,\\r\\n        uint256[] sharesReturned\\r\\n    );\\r\\n\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(IERC20 _rewardsToken) {\\r\\n        rewardsToken = _rewardsToken;\\r\\n    }\\r\\n\\r\\n    function trustAMMFactory(address _ammFactory) public onlyOwner {\\r\\n        approvedAMMFactories[_ammFactory] = true;\\r\\n    }\\r\\n\\r\\n    function untrustAMMFactory(address _ammFactory) public onlyOwner {\\r\\n        delete approvedAMMFactories[_ammFactory];\\r\\n    }\\r\\n\\r\\n    // This method can also be used to update rewards\\r\\n    function addRewards(\\r\\n        address _marketFactory,\\r\\n        uint256 _rewardsPerMarket,\\r\\n        uint256 _rewardDaysPerMarket,\\r\\n        uint256 _earlyDepositBonusRewards\\r\\n    ) public onlyOwner {\\r\\n        MarketFactoryInfo memory _oldMarketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\r\\n\\r\\n        marketFactoryRewardInfo[_marketFactory] = MarketFactoryInfo({\\r\\n            rewardsPeriods: _rewardDaysPerMarket,\\r\\n            rewardsPerPeriod: _rewardsPerMarket,\\r\\n            earlyDepositBonusRewards: _earlyDepositBonusRewards\\r\\n        });\\r\\n\\r\\n        emit TrustMarketFactory(\\r\\n            _marketFactory,\\r\\n            _oldMarketFactoryInfo.earlyDepositBonusRewards,\\r\\n            _oldMarketFactoryInfo.rewardsPeriods,\\r\\n            _oldMarketFactoryInfo.rewardsPerPeriod,\\r\\n            _earlyDepositBonusRewards,\\r\\n            _rewardDaysPerMarket,\\r\\n            _rewardsPerMarket\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    // An _endTimestamp of zero means the rewards start immediately.\\r\\n    function add(\\r\\n        address _ammFactory,\\r\\n        address _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        IERC20 _lpToken,\\r\\n        uint256 _endTimestamp\\r\\n    ) public onlyOwner returns (uint256 _nextPID) {\\r\\n        return addInternal(_ammFactory, _marketFactory, _marketId, _lpToken, _endTimestamp);\\r\\n    }\\r\\n\\r\\n    function addInternal(\\r\\n        address _ammFactory,\\r\\n        address _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        IERC20 _lpToken,\\r\\n        uint256 _endTimestamp\\r\\n    ) internal returns (uint256 _nextPID) {\\r\\n        require(\\r\\n            !rewardPoolLookup[_ammFactory][_marketFactory][_marketId].created,\\r\\n            \\\"Reward pool has already been created.\\\"\\r\\n        );\\r\\n\\r\\n        require(approvedAMMFactories[address(_ammFactory)], \\\"AMMFactory must be approved to create pool\\\");\\r\\n\\r\\n        _nextPID = poolInfo.length;\\r\\n\\r\\n        rewardPoolLookup[_ammFactory][_marketFactory][_marketId] = RewardPoolLookupInfo({pid: _nextPID, created: true});\\r\\n\\r\\n        MarketFactoryInfo memory _marketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\r\\n\\r\\n        // Need to figure out the beginning/end of the reward period.\\r\\n        uint256 _rewardsPeriodsInSeconds = _marketFactoryInfo.rewardsPeriods * 1 days;\\r\\n        uint256 _beginTimestamp = block.timestamp;\\r\\n\\r\\n        // Add one hour buffer for LPs to withdraw before event start.\\r\\n        if (_endTimestamp != 0) {\\r\\n            _endTimestamp = _endTimestamp - 1 hours;\\r\\n        }\\r\\n\\r\\n        if (_endTimestamp == 0) {\\r\\n            _endTimestamp = _beginTimestamp + _rewardsPeriodsInSeconds;\\r\\n        } else if ((_endTimestamp - _rewardsPeriodsInSeconds) > block.timestamp) {\\r\\n            _beginTimestamp = _endTimestamp - _rewardsPeriodsInSeconds;\\r\\n        } else if (block.timestamp >= _endTimestamp) {\\r\\n            // reward period already over.\\r\\n            _beginTimestamp = _endTimestamp;\\r\\n        }\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                accRewardsPerShare: 0,\\r\\n                beginTimestamp: _beginTimestamp,\\r\\n                endTimestamp: _endTimestamp,\\r\\n                totalEarlyDepositBonusRewardShares: 0,\\r\\n                earlyDepositBonusRewards: (_marketFactoryInfo.earlyDepositBonusRewards / 1 days) *\\r\\n                    (_endTimestamp - _beginTimestamp),\\r\\n                lpToken: _lpToken,\\r\\n                rewardsPerSecond: (_marketFactoryInfo.rewardsPerPeriod / 1 days),\\r\\n                lastRewardTimestamp: _beginTimestamp\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Return number of seconds elapsed in terms of BONEs.\\r\\n    function getTimeElapsed(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        uint256 _fromTimestamp = block.timestamp;\\r\\n\\r\\n        if (\\r\\n            // Rewards have not started yet.\\r\\n            _pool.beginTimestamp > _fromTimestamp ||\\r\\n            // Not sure how this happens but it is accounted for in the original master chef contract.\\r\\n            _pool.lastRewardTimestamp > _fromTimestamp ||\\r\\n            // No rewards to be distributed\\r\\n            _pool.rewardsPerSecond == 0\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Rewards are over for this pool. No more rewards have accrued.\\r\\n        if (_pool.lastRewardTimestamp >= _pool.endTimestamp) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return min(_fromTimestamp, _pool.endTimestamp).sub(_pool.lastRewardTimestamp).add(1).mul(BONE);\\r\\n        // return (min(_fromTimestamp, _pool.endTimestamp) - _pool.lastRewardTimestamp + 1) * BONE;\\r\\n    }\\r\\n\\r\\n    function getPoolTokenBalance(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        if (_rewardPoolLookupInfo.created) {\\r\\n            return userInfo[_rewardPoolLookupInfo.pid][_user].amount;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserAmount(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        return userInfo[_pid][_user].amount;\\r\\n    }\\r\\n\\r\\n    function getPoolRewardEndTimestamp(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        return _pool.endTimestamp;\\r\\n    }\\r\\n\\r\\n    function getEarlyDepositEndTimestamp(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n\\r\\n        return ((_duration * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\r\\n    }\\r\\n\\r\\n    function getPoolLPTokenTotalSupply(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId\\r\\n    ) public view returns (uint256) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getPoolLPToken(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId\\r\\n    ) public view returns (IERC20) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken;\\r\\n    }\\r\\n\\r\\n    function getPoolInfo(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId\\r\\n    ) public view returns (PoolStatusInfo memory _poolStatusInfo) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        // This cannot revert as it will be used in a multicall.\\r\\n        if (_rewardPoolLookupInfo.created) {\\r\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\r\\n\\r\\n            _poolStatusInfo.beginTimestamp = _pool.beginTimestamp;\\r\\n            _poolStatusInfo.endTimestamp = _pool.endTimestamp;\\r\\n            _poolStatusInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\r\\n\\r\\n            _poolStatusInfo.totalRewardsAccrued =\\r\\n                (min(block.timestamp, _pool.endTimestamp) - _pool.beginTimestamp) *\\r\\n                _pool.rewardsPerSecond;\\r\\n            _poolStatusInfo.created = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // View function to see pending REWARDs on frontend.\\r\\n    function getUserPendingRewardInfo(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _userAddress\\r\\n    ) external view returns (PendingRewardInfo memory _pendingRewardInfo) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        if (_rewardPoolLookupInfo.created) {\\r\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\r\\n            UserInfo storage _user = userInfo[_rewardPoolLookupInfo.pid][_userAddress];\\r\\n            uint256 accRewardsPerShare = _pool.accRewardsPerShare;\\r\\n            uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n\\r\\n            _pendingRewardInfo.created = true;\\r\\n            _pendingRewardInfo.beginTimestamp = _pool.beginTimestamp;\\r\\n            _pendingRewardInfo.endTimestamp = _pool.endTimestamp;\\r\\n            _pendingRewardInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\r\\n\\r\\n            if (_user.lastActionTimestamp <= _pendingRewardInfo.earlyDepositEndTimestamp) {\\r\\n                if (_pool.totalEarlyDepositBonusRewardShares > 0 && block.timestamp > _pendingRewardInfo.endTimestamp) {\\r\\n                    _pendingRewardInfo.accruedEarlyDepositBonusRewards = _pool\\r\\n                        .earlyDepositBonusRewards\\r\\n                        .mul(_user.amount)\\r\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\r\\n                } else if (_pool.totalEarlyDepositBonusRewardShares > 0) {\\r\\n                    _pendingRewardInfo.pendingEarlyDepositBonusRewards = _pool\\r\\n                        .earlyDepositBonusRewards\\r\\n                        .mul(_user.amount)\\r\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (block.timestamp > _pool.lastRewardTimestamp && lpSupply != 0) {\\r\\n                uint256 multiplier = getTimeElapsed(_rewardPoolLookupInfo.pid);\\r\\n                accRewardsPerShare = accRewardsPerShare.add(multiplier.mul(_pool.rewardsPerSecond).div(lpSupply));\\r\\n            }\\r\\n\\r\\n            _pendingRewardInfo.accruedStandardRewards = _user.amount.mul(accRewardsPerShare).div(BONE).sub(\\r\\n                _user.rewardDebt\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getTimeElapsed(_pid);\\r\\n        pool.accRewardsPerShare = pool.accRewardsPerShare.add(multiplier.mul(pool.rewardsPerSecond).div(lpSupply));\\r\\n        pool.lastRewardTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for REWARD allocation.\\r\\n    // Assumes the staked tokens are already on contract.\\r\\n    function depositInternal(\\r\\n        address _userAddress,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (_user.amount > 0) {\\r\\n            uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\r\\n            safeRewardsTransfer(_userAddress, pending);\\r\\n        }\\r\\n\\r\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\r\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\r\\n\\r\\n        // If the user was an early deposit, remove user amount from the pool.\\r\\n        // Even if the pools reward period has elapsed. They must withdraw first.\\r\\n        if (\\r\\n            block.timestamp > _bonusrewardsPeriodsEndTimestamp &&\\r\\n            _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\r\\n        ) {\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\r\\n        }\\r\\n\\r\\n        // Still in the early deposit bonus period.\\r\\n        if (_bonusrewardsPeriodsEndTimestamp > block.timestamp) {\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.add(_amount);\\r\\n        }\\r\\n\\r\\n        _user.amount = _user.amount.add(_amount);\\r\\n\\r\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\r\\n        _user.lastActionTimestamp = block.timestamp;\\r\\n        emit Deposit(_userAddress, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function depositByMarket(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\r\\n\\r\\n        deposit(_rewardPoolLookupInfo.pid, _amount);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n        depositInternal(msg.sender, _pid, _amount);\\r\\n        poolInfo[_pid].lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    // Assumes caller is handling distribution of LP tokens.\\r\\n    function withdrawInternal(\\r\\n        address _userAddress,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _tokenRecipientAddress\\r\\n    ) internal {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\r\\n        require(_user.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\r\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\r\\n        uint256 _rewardPeriodEndTimestamp = _rewardsPeriodsInSeconds + _pool.beginTimestamp + 1;\\r\\n\\r\\n        if (_rewardPeriodEndTimestamp <= block.timestamp) {\\r\\n            if (\\r\\n                _pool.totalEarlyDepositBonusRewardShares > 0 &&\\r\\n                _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\r\\n            ) {\\r\\n                uint256 _rewardsToUser =\\r\\n                    _pool.earlyDepositBonusRewards.mul(_user.amount).div(_pool.totalEarlyDepositBonusRewardShares);\\r\\n                safeRewardsTransfer(_userAddress, _rewardsToUser);\\r\\n            }\\r\\n        } else if (_bonusrewardsPeriodsEndTimestamp >= block.timestamp) {\\r\\n            // Still in the early deposit bonus period.\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_amount);\\r\\n        } else if (\\r\\n            // If the user was an early deposit, remove user amount from the pool.\\r\\n            _bonusrewardsPeriodsEndTimestamp >= _user.lastActionTimestamp\\r\\n        ) {\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\r\\n        }\\r\\n\\r\\n        uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\r\\n\\r\\n        safeRewardsTransfer(_tokenRecipientAddress, pending);\\r\\n        _user.amount = _user.amount.sub(_amount);\\r\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\r\\n        _user.lastActionTimestamp = block.timestamp;\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount, _tokenRecipientAddress);\\r\\n    }\\r\\n\\r\\n    function withdrawByMarket(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\r\\n\\r\\n        withdraw(_rewardPoolLookupInfo.pid, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n        withdrawInternal(msg.sender, _pid, _amount, msg.sender);\\r\\n        poolInfo[_pid].lpToken.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _initialLiquidity,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256) {\\r\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _initialLiquidity);\\r\\n        _marketFactory.collateral().approve(address(_ammFactory), _initialLiquidity);\\r\\n\\r\\n        uint256 _lpTokensIn = _ammFactory.createPool(_marketFactory, _marketId, _initialLiquidity, address(this));\\r\\n        IERC20 _lpToken = IERC20(address(_ammFactory.getPool(_marketFactory, _marketId)));\\r\\n\\r\\n        uint256 _nextPID =\\r\\n            addInternal(\\r\\n                address(_ammFactory),\\r\\n                address(_marketFactory),\\r\\n                _marketId,\\r\\n                _lpToken,\\r\\n                _marketFactory.getRewardEndTime(_marketId)\\r\\n            );\\r\\n\\r\\n        depositInternal(_lpTokenRecipient, _nextPID, _lpTokensIn);\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _balances[i] = 0;\\r\\n        }\\r\\n\\r\\n        emit PoolCreated(address(_ammFactory), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\r\\n        emit LiquidityChanged(\\r\\n            address(_ammFactory),\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_initialLiquidity),\\r\\n            int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n\\r\\n        return _lpTokensIn;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minLPTokensOut,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        uint256 _pid = _rewardPoolLookupInfo.pid;\\r\\n\\r\\n        // If not created should attempt to create it.\\r\\n        if (!_rewardPoolLookupInfo.created) {\\r\\n            BPool _bPool = _ammFactory.getPool(_marketFactory, _marketId);\\r\\n            require(_bPool != BPool(address(0)), \\\"Pool not created.\\\");\\r\\n\\r\\n            _pid = addInternal(\\r\\n                address(_ammFactory),\\r\\n                address(_marketFactory),\\r\\n                _marketId,\\r\\n                IERC20(address(_bPool)),\\r\\n                _marketFactory.getRewardEndTime(_marketId)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        _marketFactory.collateral().approve(address(_ammFactory), _collateralIn);\\r\\n\\r\\n        (_poolAmountOut, _balances) = _ammFactory.addLiquidity(\\r\\n            _marketFactory,\\r\\n            _marketId,\\r\\n            _collateralIn,\\r\\n            _minLPTokensOut,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        for (uint256 i = 0; i < _balances.length; i++) {\\r\\n            if (_balances[i] > 0) {\\r\\n                _market.shareTokens[i].transfer(_lpTokenRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        depositInternal(_lpTokenRecipient, _pid, _poolAmountOut);\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_ammFactory),\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_poolAmountOut),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _lpTokensIn,\\r\\n        uint256 _minCollateralOut,\\r\\n        address _collateralRecipient\\r\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\r\\n\\r\\n        withdrawInternal(msg.sender, _rewardPoolLookupInfo.pid, _lpTokensIn, _collateralRecipient);\\r\\n\\r\\n        PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\r\\n\\r\\n        _pool.lpToken.approve(address(_ammFactory), _lpTokensIn);\\r\\n\\r\\n        (_collateralOut, _balances) = _ammFactory.removeLiquidity(\\r\\n            _marketFactory,\\r\\n            _marketId,\\r\\n            _lpTokensIn,\\r\\n            _minCollateralOut,\\r\\n            _collateralRecipient\\r\\n        );\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_ammFactory),\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _collateralRecipient,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawRewards(uint256 _amount) external onlyOwner {\\r\\n        rewardsToken.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.lastActionTimestamp = 0;\\r\\n    }\\r\\n\\r\\n    function safeRewardsTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 _rewardsBal = rewardsToken.balanceOf(address(this));\\r\\n        if (_amount > _rewardsBal) {\\r\\n            rewardsToken.transfer(_to, _rewardsBal);\\r\\n        } else {\\r\\n            rewardsToken.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a <= b) {\\r\\n            return a;\\r\\n        } else {\\r\\n            return b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa90e8a118dc9ce09dee5a5746316bcd7d9de616699d568299353ffe5027a511b\",\"license\":\"MIT\"},\"contracts/stablecoin/IController.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\n//controller contract responsible for providing initial liquidity to the\\r\\n//borrower cds market, collect winnings when default, and burn the corresponding DS\\r\\ninterface IController  {\\r\\n    struct MarketInfo {\\r\\n        address ammFactoryAddress; \\r\\n        address marketFactoryAddress;\\r\\n        uint256 liquidityAmountUSD;\\r\\n        uint256 marketID;\\r\\n        string description;\\r\\n        string[] names;\\r\\n        uint256[] odds;\\r\\n    }\\r\\n    \\r\\n    // function addPool(address pool_address) external;\\r\\n\\r\\n    function addValidator(address validator_address) external;\\r\\n\\r\\n    function initiateMarket(\\r\\n        address borrower,\\r\\n        address ammFactoryAddress, \\r\\n        address marketFactoryAddress, \\r\\n        uint256 liquidityAmountUSD, \\r\\n        string calldata description,  //Needs to be in format name + \\\":\\\" + borrower description since it is called offchain\\r\\n        string calldata loanID, \\r\\n        string[] memory names, \\r\\n        uint256[] memory odds\\r\\n    ) external;\\r\\n\\r\\n    function resolveMarket(address recipient, bytes32 loanID, bool isDefault) external;\\r\\n    function verified(address _addr) external returns (bool);\\r\\n    function validators(address _addr) external returns (bool);\\r\\n    function canBeApproved (\\r\\n        address borrower, \\r\\n        string calldata loanID, \\r\\n        address marketFactoryAddress \\r\\n    ) external returns(bool);\\r\\n    \\r\\n    function _initiateMarket(\\r\\n        MarketInfo memory data,\\r\\n        address borrower,\\r\\n        string calldata loanID\\r\\n    ) external;\\r\\n    \\r\\n    function verifyAddress(\\r\\n        uint256 nullifier_hash, \\r\\n        uint256 external_nullifier,\\r\\n        uint256[8] calldata proof\\r\\n    ) external;\\r\\n}\",\"keccak256\":\"0x2388cebdcb2e4cb0b962e5137b2ad7e56da56fac3a02649657e2bb09c4971dc7\"},\"contracts/stablecoin/ILendingPool.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport \\\"./IController.sol\\\";\\r\\n\\r\\ninterface ILendingPool {\\r\\n    struct LoanMetadata {\\r\\n        bytes32 id;\\r\\n        uint256 principal;\\r\\n        uint256 totalInterest; // total interest paid over duration\\r\\n        uint256 duration;\\r\\n        uint256 repaymentDate;\\r\\n        uint256 interestPaid; // how much paid toward interest\\r\\n        uint256 allowance;\\r\\n        uint256 amountBorrowed; // how much currently borrowed, should be 0 on full loan repayment\\r\\n        string description;\\r\\n        bool approved; // proposal => false, active loan => true\\r\\n        address recipient; // set to  0x0 if discretionary, address set to smart contract if smart contract loan.\\r\\n    }\\r\\n\\r\\n    struct LoanData {\\r\\n        uint256 _total_borrowed_amount;\\r\\n        uint256 _accrued_interest;\\r\\n    }\\r\\n\\r\\n    function mintDS(uint256 collateral_amount, uint256 DS_out_min) external;\\r\\n\\r\\n    function redeemDS(\\r\\n        uint256 DS_amount,\\r\\n        uint256 DSS_out_min,\\r\\n        uint256 COLLATERAL_out_min\\r\\n    ) external;\\r\\n\\r\\n    function collectRedemption(uint256 col_idx) external returns (uint256 dss_amount, uint256 collateral_amount);\\r\\n\\r\\n    function setPoolParameters(\\r\\n        uint256 new_ceiling,\\r\\n        uint256 new_bonus_rate,\\r\\n        uint256 new_redemption_delay,\\r\\n        uint256 new_mint_fee,\\r\\n        uint256 new_redeem_fee,\\r\\n        uint256 new_buyback_fee,\\r\\n        uint256 new_recollat_fee\\r\\n    ) external;\\r\\n\\r\\n    function setController(address controller) external;\\r\\n\\r\\n    function controllerMintDS(uint256 amount) external;\\r\\n\\r\\n    function controllerBurnDS(uint256 amount) external;\\r\\n\\r\\n    function addValidator(address validator) external;\\r\\n\\r\\n    function addDiscretionaryLoanProposal(\\r\\n        string calldata _id,\\r\\n        uint256 _principal,\\r\\n        uint256 _duration,\\r\\n        uint256 _totalInterest,\\r\\n        string calldata _description,\\r\\n        IController.MarketInfo memory market_info\\r\\n    ) external;\\r\\n\\r\\n    function addContractLoanProposal(\\r\\n        string calldata _id,\\r\\n        address _recipient,\\r\\n        uint256 _principal,\\r\\n        uint256 _duration,\\r\\n        uint256 _totalInterest,\\r\\n        string calldata _description,\\r\\n        IController.MarketInfo memory market_info\\r\\n    ) external;\\r\\n\\r\\n    function removeProposal(string calldata id) external returns (bool); // called by recipient\\r\\n\\r\\n    function removeProposalGov(address recipient, string calldata id) external returns (bool);\\r\\n\\r\\n    function approveLoan(\\r\\n        address recipient,\\r\\n        string calldata id,\\r\\n        address marketFactoryAddress\\r\\n    ) external;\\r\\n\\r\\n    function borrow(string calldata loan_id, uint256 amount) external;\\r\\n\\r\\n    function contractBorrow(\\r\\n        address owner,\\r\\n        string calldata id,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function repay(\\r\\n        string calldata loan_id,\\r\\n        uint256 repay_principal,\\r\\n        uint256 repay_interest\\r\\n    ) external;\\r\\n\\r\\n    function contractRepay(\\r\\n        address owner,\\r\\n        string calldata loan_id,\\r\\n        uint256 repay_principal,\\r\\n        uint256 repay_interest\\r\\n    ) external;\\r\\n\\r\\n    function resolveLoan(string calldata id) external;\\r\\n\\r\\n    function contractResolveLoan(address owner, string calldata id) external;\\r\\n\\r\\n    function checkAddressLoans(address recipient) external;\\r\\n\\r\\n    function fullLoanCheck() external;\\r\\n\\r\\n    function checkLoanStatus (address owner, string calldata id) external;\\r\\n\\r\\n    function is_borrower(address addr) external returns (bool);\\r\\n\\r\\n    function getLoan(address borrower, string calldata id) external returns (LoanMetadata memory);\\r\\n\\r\\n    function getLoans(address borrower) external returns (LoanMetadata[] memory);\\r\\n\\r\\n    function borrower_allowance(address addr) external returns (uint256);\\r\\n\\r\\n    function amount_borrowed(address addr) external returns (uint256);\\r\\n\\r\\n    function num_loans(address addr) external returns (uint256);\\r\\n\\r\\n    function num_proposals(address addr) external returns (uint256);\\r\\n\\r\\n    function getBorrowerLoanData(address recipient) external returns (LoanMetadata memory);\\r\\n\\r\\n    function getProtocolLoanData() external returns (LoanData memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x35daf8508751d2beb8992e398269e0c29772bfa0ae344b128b660896408c4e8a\"},\"contracts/stablecoin/controller.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport \\\"../rewards/MasterChef.sol\\\";\\r\\nimport \\\"./ILendingPool.sol\\\";\\r\\nimport \\\"./IController.sol\\\";\\r\\nimport \\\"../turbo/TrustedMarketFactoryV3.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@interep/contracts/IInterep.sol\\\";\\r\\n// Controller contract responsible for providing initial liquidity to the\\r\\n// borrower cds market, collect winnings when default, and burn the corresponding DS\\r\\ncontract Controller is IController {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    struct LiquidityInfo {\\r\\n    \\tuint256 lptokenamount;\\r\\n    \\tuint256 suppliedDS; \\r\\n    }\\r\\n\\r\\n    mapping(address => bool) public override validators; \\r\\n    mapping(address => bool) pools;\\r\\n    mapping(address => bool) public override verified;\\r\\n    mapping(address => mapping(bytes32 => MarketInfo)) public borrower_market_data; // maps address + loan id => market information, called by lendingpool\\r\\n\\r\\n    mapping(address => mapping(uint256=> LiquidityInfo)) lpinfo; \\r\\n\\r\\n    address[] validators_array;\\r\\n\\r\\n    address creator_address;\\r\\n    address timelock_address;\\r\\n    address MasterChef_address;\\r\\n\\r\\n    MasterChef masterchef; \\r\\n    ILendingPool lendingpool;\\r\\n    IInterep interep;\\r\\n\\r\\n    uint256 constant TWITTER_UNRATED_GROUP_ID = 16106950158033643226105886729341667676405340206102109927577753383156646348711;\\r\\n    bytes32 constant private signal = bytes32(\\\"twitter-unrated\\\");\\r\\n    uint256 insurance_constant = 5e5; //1 is 1e6, also needs to be able to be changed \\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n    modifier onlyValidator() {\\r\\n        require(validators[msg.sender] == true, \\\"Only Validators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPools() {\\r\\n        require(msg.sender == address(lendingpool), \\\"Only Pools can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == creator_address, \\\"Only Owner can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor (\\r\\n        address _creator_address,\\r\\n        address _timelock_address,\\r\\n        address _MasterChef_address, \\r\\n        address _LendingPool_address, \\r\\n        address _DS_address,\\r\\n        address _interep_address\\r\\n    )   \\r\\n    {   // _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n        // DEFAULT_ADMIN_ADDRESS = _msgSender();\\r\\n        // _grantRole(DEFAULT_ADMIN_ROLE, _creator_address);\\r\\n        creator_address = _creator_address;\\r\\n        MasterChef_address=_MasterChef_address;\\r\\n\\r\\n        masterchef = MasterChef(_MasterChef_address);\\r\\n        lendingpool = ILendingPool(_LendingPool_address); \\r\\n        interep = IInterep(_interep_address);\\r\\n    }\\r\\n\\r\\n    function verifyAddress(\\r\\n        uint256 nullifier_hash, \\r\\n        uint256 external_nullifier,\\r\\n        uint256[8] calldata proof\\r\\n    ) external override {\\r\\n        require(!verified[msg.sender], \\\"address already verified\\\");\\r\\n        interep.verifyProof(TWITTER_UNRATED_GROUP_ID, signal, nullifier_hash, external_nullifier, proof);\\r\\n        verified[msg.sender] = true;\\r\\n    }\\r\\n\\r\\n    //Pool added when contract is deployed \\r\\n    // function addPool(address pool_address) external override onlyOwner {\\r\\n    //     require(pool_address != address(0), \\\"Zero address detected\\\");\\r\\n    //     require(pools[pool_address] == false, \\\"Address already exists\\\");\\r\\n\\r\\n    //     pools[pool_address] = true; \\r\\n    //     pools_array.push(pool_address);\\r\\n\\r\\n    // }\\r\\n\\r\\n    //Validator should be added for each borrower\\r\\n    function addValidator(address validator_address) external override onlyPools {\\r\\n        require(validator_address != address(0), \\\"Zero address detected\\\");\\r\\n        require(validators[validator_address] == false, \\\"Address already exists\\\");\\r\\n\\r\\n        validators[validator_address] = true; \\r\\n        validators_array.push(validator_address);\\r\\n\\r\\n    }\\r\\n\\r\\n    //provide initial liquidity when market is created\\r\\n    //allow lendingpool to mint DS to controller address, \\r\\n    //liquidityAmountUSD determines how much IL loss Debita is willing to take,\\r\\n    //which depends on interest rate proposed + principal value of borrowers \\r\\n    //It will be computed offchain for now\\r\\n    function initiateMarket(   \\r\\n        address borrower,\\r\\n        address ammFactoryAddress, \\r\\n        address marketFactoryAddress, \\r\\n        uint256 liquidityAmountUSD, \\r\\n        string calldata description,  //Needs to be in format name + \\\":\\\" + borrower description since it is called offchain\\r\\n        string calldata loanID, \\r\\n        string[] memory names, \\r\\n        uint256[] memory odds\\r\\n        )external override onlyValidator{\\r\\n\\r\\n        //Market id is initially set 10000, will be modified later\\r\\n        MarketInfo memory marketInfo = MarketInfo(\\r\\n            ammFactoryAddress, marketFactoryAddress, liquidityAmountUSD, 10000, description, \\r\\n            names, odds\\r\\n            ); \\r\\n       \\r\\n        _initiateMarket(marketInfo, borrower, loanID ); \\r\\n    }\\r\\n\\r\\n    function _initiateMarket(\\r\\n        MarketInfo memory marketData, // marketID shouldn't be set. Everything else should be though\\r\\n        address recipient,\\r\\n        string calldata loanID\\r\\n    ) public override {\\r\\n        \\r\\n\\r\\n        // STACK TOO DEEP\\r\\n        address ammFactoryAddress = marketData.ammFactoryAddress;\\r\\n        address marketFactoryAddress = marketData.marketFactoryAddress;\\r\\n        uint256 liquidityAmountUSD = marketData.liquidityAmountUSD;\\r\\n        string memory description = marketData.description;\\r\\n        string[] memory names = marketData.names;\\r\\n        uint256[] memory odds = marketData.odds;\\r\\n\\r\\n\\r\\n        AMMFactory amm = AMMFactory(ammFactoryAddress);\\r\\n        TrustedMarketFactoryV3 marketFactory = TrustedMarketFactoryV3(marketFactoryAddress);\\r\\n\\r\\n        //TODO change create market modifier to including validators \\r\\n        uint256 marketID = marketFactory.createMarket(msg.sender, description, names, odds);\\r\\n\\r\\n        marketData.marketID = marketID;\\r\\n\\r\\n        // Store marketID <=> loan\\r\\n        borrower_market_data[recipient][keccak256(abi.encodePacked(loanID))] = marketData; // remember to delete to save storage\\r\\n\\r\\n        //Minting DS\\r\\n        lendingpool.controllerMintDS(liquidityAmountUSD); \\r\\n        marketFactory.collateral().approve(address(masterchef), liquidityAmountUSD);\\r\\n\\r\\n        //Creating pool and adding minted DS as liquidity to the created market\\r\\n\\r\\n        masterchef.createPool(amm, marketFactory, marketID, liquidityAmountUSD, address(this));\\r\\n        \\r\\n        uint256 pooltokenamount = masterchef.getPoolTokenBalance(amm, marketFactory, marketID, address(this));\\r\\n       \\r\\n        LiquidityInfo memory info = LiquidityInfo({\\r\\n            lptokenamount: pooltokenamount, \\r\\n            suppliedDS: liquidityAmountUSD\\r\\n            }); \\r\\n\\r\\n        lpinfo[marketFactoryAddress][marketID] = info; \\r\\n    }\\r\\n\\r\\n\\r\\n    function resolveMarket(\\r\\n        address recipient,\\r\\n        bytes32 loanID, // hashed id\\r\\n        bool isDefault\\r\\n    ) external override {\\r\\n        uint256 _collateralOut;\\r\\n        uint256[] memory _balances; \\r\\n\\r\\n        MarketInfo storage marketInfo  = borrower_market_data[recipient][loanID];\\r\\n\\r\\n        address ammFactoryAddress = marketInfo.ammFactoryAddress;\\r\\n        address marketFactoryAddress = marketInfo.marketFactoryAddress;\\r\\n        uint256 marketID = marketInfo.marketID;\\r\\n\\r\\n    \\tAMMFactory amm = AMMFactory(ammFactoryAddress);\\r\\n    \\tTrustedMarketFactoryV3 marketFactory = TrustedMarketFactoryV3(marketFactoryAddress);\\r\\n    \\tuint256 lptokensIn = lpinfo[marketFactoryAddress][marketID].lptokenamount; \\r\\n\\r\\n        uint256 winning_outcome = isDefault? 0: 1; \\r\\n        marketFactory.trustedResolveMarket( marketID, winning_outcome); \\r\\n        //require(marketFactory.isMarketResolved(marketID), \\\"Market is not resolved\\\"); \\r\\n\\r\\n    \\t(_collateralOut, _balances) = masterchef.removeLiquidity(amm, \\r\\n    \\t\\t\\t\\t\\t\\t\\t\\tmarketFactory,\\r\\n    \\t\\t\\t\\t\\t\\t\\t\\tmarketID, lptokensIn, 0, address(this)\\r\\n    \\t\\t\\t\\t\\t\\t\\t\\t );\\r\\n\\r\\n        uint256 initialSuppliedDS = lpinfo[marketFactoryAddress][marketID].suppliedDS; \\r\\n\\r\\n        if (isDefault){\\r\\n            require(_collateralOut > initialSuppliedDS, \\\"Payout not sufficient\\\"); \\r\\n        }\\r\\n\\r\\n        //Whether initial supplied DS is greater or less than payout, they need to be all burned\\r\\n        //if greater, IL loss is transferred to shortCDS buyers, \\r\\n        //if less, then short cds buyer's collateral is used as payout\\r\\n        lendingpool.controllerBurnDS(_collateralOut); \\r\\n\\r\\n\\r\\n        console.log(initialSuppliedDS, _collateralOut); \\r\\n\\r\\n        delete borrower_market_data[recipient][loanID];\\r\\n\\r\\n    }\\r\\n\\r\\n    function approveLoan(address recipient, string calldata id, address marketFactory) external onlyValidator{\\r\\n        lendingpool.approveLoan(recipient, id, marketFactory); \\r\\n    }\\r\\n\\r\\n\\r\\n    //If true, it means net short CDS buys > required collateral and validator can approve the loan \\r\\n    function canBeApproved(address borrower, \\r\\n        string calldata loanID, \\r\\n        address marketFactoryAddress ) external override returns(bool){\\r\\n\\r\\n        MarketInfo memory marketInfo  = borrower_market_data[borrower][keccak256(abi.encodePacked(loanID))];\\r\\n        uint256 marketId = marketInfo.marketID; \\r\\n        TrustedMarketFactoryV3 marketFactory = TrustedMarketFactoryV3(marketFactoryAddress);\\r\\n\\r\\n        //TODO include case for multiple outcomes, for now outcome0 is long outcome1 is short \\r\\n        uint256 longs = marketFactory.getTradeDetails(marketId, 0);\\r\\n        uint256 shorts = marketFactory.getTradeDetails(marketId, 1);\\r\\n        uint256 netShorts = (shorts-longs); //DS amount with decimals \\r\\n\\r\\n        ILendingPool.LoanMetadata memory loanmetadata = lendingpool.getBorrowerLoanData(borrower); \\r\\n        uint256 principal = loanmetadata.principal; //this is in decimals format\\r\\n        uint256 required_net_shorts = (principal * insurance_constant/1e6);   //Hardcoded for now\\r\\n\\r\\n        return (required_net_shorts <= netShorts); \\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x8f2849ddf6e039b034d5811ad5a71a8a974d7ef3de5224422c39024ed0a1ec8c\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../balancer/BFactory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../balancer/BNum.sol\\\";\\r\\n\\r\\ncontract AMMFactory is BNum {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\r\\n\\r\\n    BFactory public bFactory;\\r\\n    // MarketFactory => Market => BPool\\r\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\r\\n    uint256 fee;\\r\\n\\r\\n    event PoolCreated(\\r\\n        address pool,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed creator,\\r\\n        address lpTokenRecipient\\r\\n    );\\r\\n    event LiquidityChanged(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        address recipient,\\r\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\r\\n        int256 collateral,\\r\\n        int256 lpTokens,\\r\\n        uint256[] sharesReturned\\r\\n    );\\r\\n    event SharesSwapped(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        uint256 outcome,\\r\\n        // from the perspective of the user. e.g. collateral is negative when buying\\r\\n        int256 collateral,\\r\\n        int256 shares,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor(BFactory _bFactory, uint256 _fee) {\\r\\n        bFactory = _bFactory;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _initialLiquidity,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256) {\\r\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\r\\n\\r\\n        // Comparing to sets because sets are normalized to 10e18.\\r\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        require(\\r\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\r\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\r\\n        );\\r\\n\\r\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Create pool\\r\\n        BPool _pool = bFactory.newBPool();\\r\\n\\r\\n        // Add each outcome to the pool. Collateral is NOT added.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _token.approve(address(_pool), MAX_UINT);\\r\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\r\\n        }\\r\\n\\r\\n        // Set the swap fee.\\r\\n        _pool.setSwapFee(fee);\\r\\n\\r\\n        // Finalize pool setup\\r\\n        _pool.finalize();\\r\\n\\r\\n        pools[address(_marketFactory)][_marketId] = _pool;\\r\\n\\r\\n        // Pass along LP tokens for initial liquidity\\r\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\r\\n\\r\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\r\\n        _pool.transfer(address(0x0), (BONE / 1000));\\r\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\r\\n\\r\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _balances[i] = 0;\\r\\n        }\\r\\n\\r\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_initialLiquidity),\\r\\n            int256(_lpTokenBalance),\\r\\n            _balances\\r\\n        );\\r\\n\\r\\n        return _lpTokenBalance;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minLPTokensOut,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Find poolAmountOut\\r\\n        _poolAmountOut = MAX_UINT;\\r\\n\\r\\n        {\\r\\n            uint256 _totalSupply = _pool.totalSupply();\\r\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                _maxAmountsIn[i] = _sets;\\r\\n\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\r\\n\\r\\n                // This is the result the following when solving for poolAmountOut:\\r\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n                uint256 _tokenPoolAmountOut =\\r\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\r\\n\\r\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\r\\n                    _poolAmountOut = _tokenPoolAmountOut;\\r\\n                }\\r\\n            }\\r\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\r\\n        }\\r\\n\\r\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\r\\n\\r\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\r\\n\\r\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _balances[i] = _token.balanceOf(address(this));\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_poolAmountOut),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _lpTokensIn,\\r\\n        uint256 _minCollateralOut,\\r\\n        address _collateralRecipient\\r\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\r\\n\\r\\n        uint256[] memory exitPoolEstimate;\\r\\n        {\\r\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\r\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\r\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\r\\n        }\\r\\n\\r\\n        // Find the number of sets to sell.\\r\\n        uint256 _setsToSell = MAX_UINT;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\r\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\r\\n        }\\r\\n\\r\\n        // Must be a multiple of share factor.\\r\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n\\r\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\r\\n        if (_resolved) {\\r\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\r\\n        } else {\\r\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\r\\n        }\\r\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\r\\n\\r\\n        // Transfer the remaining shares back to _collateralRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\r\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_collateralRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _collateralRecipient,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function buy(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minTokensOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        uint256 _totalDesiredOutcome = _sets;\\r\\n        {\\r\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 _acquiredToken, ) =\\r\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\r\\n                _totalDesiredOutcome += _acquiredToken;\\r\\n            }\\r\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\r\\n\\r\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\r\\n        }\\r\\n\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_totalDesiredOutcome),\\r\\n            bdiv(_sets, _totalDesiredOutcome)\\r\\n        );\\r\\n\\r\\n        return _totalDesiredOutcome;\\r\\n    }\\r\\n\\r\\n    function sellForCollateral(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256[] memory _shareTokensIn,\\r\\n        uint256 _minSetsOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _setsOut = MAX_UINT;\\r\\n        uint256 _totalUndesiredTokensIn = 0;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\r\\n        }\\r\\n\\r\\n        {\\r\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\r\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 tokenAmountOut, ) =\\r\\n                    _pool.swapExactAmountIn(\\r\\n                        address(_market.shareTokens[_outcome]),\\r\\n                        _shareTokensIn[i],\\r\\n                        address(_token),\\r\\n                        0,\\r\\n                        MAX_UINT\\r\\n                    );\\r\\n\\r\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\r\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\r\\n            }\\r\\n\\r\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\r\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\r\\n        }\\r\\n\\r\\n        // Transfer undesired token balance back.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            uint256 _balance = _token.balanceOf(address(this));\\r\\n            if (_balance > 0) {\\r\\n                _token.transfer(msg.sender, _balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_totalUndesiredTokensIn),\\r\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\r\\n        );\\r\\n\\r\\n        return _collateralOut;\\r\\n    }\\r\\n\\r\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\r\\n    // So the first outcome is 10**18 and all others are higher or lower.\\r\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\r\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        address _basisToken = address(_market.shareTokens[0]);\\r\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\r\\n        _ratios[0] = 10**18;\\r\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\r\\n            _ratios[i] = _price;\\r\\n        }\\r\\n        return _ratios;\\r\\n    }\\r\\n\\r\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\r\\n        }\\r\\n        return _balances;\\r\\n    }\\r\\n\\r\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\r\\n        }\\r\\n        return _weights;\\r\\n    }\\r\\n\\r\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.getSwapFee();\\r\\n    }\\r\\n\\r\\n    function getPoolTokenBalance(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.balanceOf(_user);\\r\\n    }\\r\\n\\r\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\r\\n        return pools[address(_marketFactory)][_marketId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xab5d086eb4084d149cdebd19f7c089507785c7578302981a18a0deaa325c8a79\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"../libraries/Rewardable.sol\\\";\\r\\n\\r\\nabstract contract AbstractMarketFactoryV3 is TurboShareTokenFactory, Ownable, Rewardable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\r\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\r\\n    event MarketActivated(uint256 id);\\r\\n\\r\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\r\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\r\\n    event WinningsClaimed(\\r\\n        uint256 id,\\r\\n        address winningOutcome,\\r\\n        uint256 winningIndex,\\r\\n        string winningName,\\r\\n        uint256 amount,\\r\\n        uint256 settlementFee,\\r\\n        uint256 payout,\\r\\n        address indexed receiver\\r\\n    );\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    FeePot public feePot;\\r\\n\\r\\n    // fees are out of 1e18 and only apply to new markets\\r\\n    uint256 public stakerFee;\\r\\n    uint256 public settlementFee;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    address public protocol; // collects protocol fees\\r\\n\\r\\n    uint256 public accumulatedProtocolFee = 0;\\r\\n    // settlement address => amount of collateral\\r\\n    mapping(address => uint256) public accumulatedSettlementFees;\\r\\n\\r\\n    // How many shares equals one collateral.\\r\\n    // Necessary to account for math errors from small numbers in balancer.\\r\\n    // shares = collateral / shareFactor\\r\\n    // collateral = shares * shareFactor\\r\\n    uint256 public shareFactor;\\r\\n\\r\\n    struct Market {\\r\\n        address settlementAddress;\\r\\n        OwnedERC20[] shareTokens;\\r\\n        OwnedERC20 winner;\\r\\n        uint256 winnerIndex;\\r\\n        uint256 settlementFee;\\r\\n        uint256 protocolFee;\\r\\n        uint256 stakerFee;\\r\\n        uint256 creationTimestamp;\\r\\n        uint256 resolutionTimestamp; // when winner is declared\\r\\n        uint256[] initialOdds;\\r\\n        bool active; // false if not ready to use or if resolved\\r\\n    }\\r\\n    Market[] internal markets;\\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees, // staker, settlement, protocol\\r\\n        address _protocol\\r\\n    ) {\\r\\n        owner = _owner; // controls fees for new markets\\r\\n        collateral = _collateral;\\r\\n        shareFactor = _shareFactor;\\r\\n        feePot = _feePot;\\r\\n        stakerFee = _fees[0];\\r\\n        settlementFee = _fees[1];\\r\\n        protocolFee = _fees[2];\\r\\n        protocol = _protocol;\\r\\n\\r\\n        _collateral.approve(address(_feePot), MAX_UINT);\\r\\n\\r\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\r\\n        markets.push(makeEmptyMarket());\\r\\n    }\\r\\n        \\r\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n\\r\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n        return TradeDetails[_marketId][_outcome]; \\r\\n    }\\r\\n    // Returns an empty struct if the market doesn't exist.\\r\\n    // Can check market existence before calling this by comparing _id against markets.length.\\r\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\r\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n            return makeEmptyMarket();\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketCount() public view returns (uint256) {\\r\\n        return markets.length;\\r\\n    }\\r\\n\\r\\n    // Returns factory-specific details about a market.\\r\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\r\\n\\r\\n    function mintShares(\\r\\n        uint256 _id,\\r\\n        uint256 _shareToMint,\\r\\n        address _receiver\\r\\n    ) public {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        uint256 _cost = calcCost(_shareToMint);\\r\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\r\\n        }\\r\\n\\r\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\r\\n    }\\r\\n\\r\\n    function burnShares(\\r\\n        uint256 _id,\\r\\n        uint256 _sharesToBurn,\\r\\n        address _receiver\\r\\n    ) public returns (uint256) {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            // errors if sender doesn't have enough shares\\r\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\r\\n        }\\r\\n\\r\\n        uint256 _payout = calcCost(_sharesToBurn);\\r\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\r\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\r\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\r\\n\\r\\n        accumulatedProtocolFee += _protocolFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n        feePot.depositFees(_stakerFee);\\r\\n\\r\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\r\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\r\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\r\\n\\r\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\r\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\r\\n        _payout = _payout.sub(_settlementFee);\\r\\n\\r\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n\\r\\n        uint256 _winningIndex = _market.winnerIndex;\\r\\n        string memory _winningName = _market.winner.name();\\r\\n\\r\\n        emit WinningsClaimed(\\r\\n            _id,\\r\\n            address(_market.winner),\\r\\n            _winningIndex,\\r\\n            _winningName,\\r\\n            _winningShares,\\r\\n            _settlementFee,\\r\\n            _payout,\\r\\n            _receiver\\r\\n        );\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\r\\n        uint256 _totalWinnings = 0;\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\r\\n        }\\r\\n        return _totalWinnings;\\r\\n    }\\r\\n\\r\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\r\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\r\\n        if (_fees > 0) {\\r\\n            accumulatedSettlementFees[msg.sender] = 0;\\r\\n            collateral.transfer(_receiver, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees() public returns (uint256) {\\r\\n        require(msg.sender == protocol || msg.sender == address(this));\\r\\n        uint256 _fees = accumulatedProtocolFee;\\r\\n        if (_fees > 0) {\\r\\n            accumulatedProtocolFee = 0;\\r\\n            collateral.transfer(protocol, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\r\\n        settlementFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\r\\n        stakerFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\r\\n        protocolFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\r\\n        if (_claimFirst) {\\r\\n            claimProtocolFees();\\r\\n        }\\r\\n        protocol = _newProtocol;\\r\\n    }\\r\\n\\r\\n    function startMarket(\\r\\n        address _settlementAddress,\\r\\n        string[] memory _names,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active\\r\\n    ) internal returns (uint256 _marketId) {\\r\\n        _marketId = markets.length;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                createShareTokens(_names, address(this)),\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n            )\\r\\n        );\\r\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function activateMarket(uint256 _marketId) internal {\\r\\n        markets[_marketId].active = true;\\r\\n        emit MarketActivated(_marketId);\\r\\n    }\\r\\n\\r\\n    function makeEmptyMarket() private pure returns (Market memory) {\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\r\\n        uint256[] memory _initialOdds = new uint256[](0);\\r\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\r\\n    }\\r\\n\\r\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\r\\n        Market storage _market = markets[_marketId];\\r\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\r\\n\\r\\n        _market.winner = _winner;\\r\\n        _market.active = false;\\r\\n        _market.winnerIndex = _winningOutcome;\\r\\n        _market.resolutionTimestamp = block.timestamp;\\r\\n        string memory _outcomeName = _winner.name();\\r\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\r\\n    }\\r\\n\\r\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\r\\n        Market memory _market = markets[_id];\\r\\n        return _market.winner != OwnedERC20(address(0));\\r\\n    }\\r\\n\\r\\n    // shares => collateral\\r\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\r\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\r\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\r\\n        return _shares / shareFactor;\\r\\n    }\\r\\n\\r\\n    // collateral => shares\\r\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\r\\n        return _collateralIn * shareFactor;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0x65850f44f42930591a35b0b26f1b0113daf6b61fabc85692ab121c1fd88f8bd9\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\n\\r\\ncontract FeePot is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant magnitude = 2**128;\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    IERC20Full public reputationToken;\\r\\n\\r\\n    uint256 public magnifiedFeesPerShare;\\r\\n\\r\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\r\\n    mapping(address => uint256) public storedFees;\\r\\n\\r\\n    uint256 public feeReserve;\\r\\n\\r\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\r\\n        ERC20(\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\r\\n        )\\r\\n    {\\r\\n        collateral = _collateral;\\r\\n        reputationToken = _reputationToken;\\r\\n\\r\\n        require(_collateral != IERC20Full(address(0)));\\r\\n    }\\r\\n\\r\\n    function depositFees(uint256 _amount) public returns (bool) {\\r\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\r\\n        if (_totalSupply == 0) {\\r\\n            feeReserve = feeReserve.add(_amount);\\r\\n            return true;\\r\\n        }\\r\\n        if (feeReserve > 0) {\\r\\n            _amount = _amount.add(feeReserve);\\r\\n            feeReserve = 0;\\r\\n        }\\r\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\r\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\r\\n    }\\r\\n\\r\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\r\\n        uint256 _ownerBalance = balanceOf(_owner);\\r\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\r\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\r\\n        super._transfer(_from, _to, _amount);\\r\\n\\r\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\r\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external returns (bool) {\\r\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        _mint(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\r\\n            magnifiedFeesPerShare.mul(_amount)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function exit(uint256 _amount) external returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        _burn(msg.sender, _amount);\\r\\n        reputationToken.transfer(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeem() public returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeemInternal(address _account) internal {\\r\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\r\\n        if (_withdrawableFees > 0) {\\r\\n            storedFees[_account] = 0;\\r\\n            collateral.transfer(_account, _withdrawableFees);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0045efc6b0eb6013e765caa47470f1d66ac487fcd9fd2bfafc04c6c61b3c6865\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../libraries/Ownable.sol\\\";\\r\\n\\r\\ncontract OwnedERC20 is ERC20, Ownable {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _owner\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function trustedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        _transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\r\\n        _mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\r\\n        _burn(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\r\\n        uint256 _balance = balanceOf(_target);\\r\\n        _burn(_target, _balance);\\r\\n        return _balance;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xbf92d998fc0b4d44b77f863ce32ebadf43ecc4091c3c9c44f556b9618eec6111\",\"license\":\"MIT\"},\"contracts/turbo/TrustedMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\n\\r\\ncontract TrustedMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\r\\n\\r\\n    struct MarketDetails {\\r\\n        string description;\\r\\n    }\\r\\n    MarketDetails[] internal marketDetails;\\r\\n    // mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n\\r\\n    modifier onlyOwnerManager() {\\r\\n        require(msg.sender == owner || managers[msg.sender] , \\\"Only Validators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(address=>bool) managers; \\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol\\r\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.1.0\\\") {}\\r\\n\\r\\n    //TODO add managers \\r\\n    function createMarket(\\r\\n        address _creator,\\r\\n        string calldata _description,\\r\\n        string[] calldata _names,\\r\\n        uint256[] calldata _odds\\r\\n    ) public  returns (uint256) {\\r\\n        marketDetails.push(MarketDetails(_description));\\r\\n        return startMarket(_creator, _names, _odds, true);\\r\\n    }\\r\\n\\r\\n    //TODO add managers \\r\\n    function trustedResolveMarket(uint256 _id, uint256 _winningOutcome) public {\\r\\n        endMarket(_id, _winningOutcome);\\r\\n    }\\r\\n\\r\\n    function getMarketDetails(uint256 _id) public view returns (MarketDetails memory) {\\r\\n        return marketDetails[_id];\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n   // function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n   //      TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n   //  }\\r\\n\\r\\n   //  function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n   //      return TradeDetails[_marketId][_outcome]; \\r\\n   //  }\\r\\n}\\r\\n\",\"keccak256\":\"0x0bd5c051184399d085e523289867a3b48a894cc9b001d3aa78c38a4755b9ccbc\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./OwnedShareToken.sol\\\";\\r\\n\\r\\nabstract contract TurboShareTokenFactory {\\r\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract TurboShareTokenFactoryV1 {\\r\\n    function createShareTokens(\\r\\n        string[] memory _names,\\r\\n        string[] memory _symbols,\\r\\n        address _owner\\r\\n    ) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x06804e9fbaa93f213284e3d5753d0cb72bb05caaedac4a29bf66cf8663243c90\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526207a120600c553480156200001857600080fd5b50604051620020fd380380620020fd8339810160408190526200003b91620000b8565b600680546001600160a01b039788166001600160a01b0319918216179091556008805495881695821686179055600980548216909517909455600a80549387169385169390931790925550600b8054919094169116179091555062000138565b80516001600160a01b0381168114620000b357600080fd5b919050565b60008060008060008060c08789031215620000d1578182fd5b620000dc876200009b565b9550620000ec602088016200009b565b9450620000fc604088016200009b565b93506200010c606088016200009b565b92506200011c608088016200009b565b91506200012c60a088016200009b565b90509295509295509295565b611fb580620001486000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80634d238c8e116100665780634d238c8e1461013a578063554ef5711461014d5780638928dfc314610160578063d04fa29314610173578063fa52c7d81461018657600080fd5b806307a9ec08146100a35780630db065f4146100cb578063315786f1146100ee57806342f045c51461011257806348d026b214610127575b600080fd5b6100b66100b13660046117f9565b6101a9565b60405190151581526020015b60405180910390f35b6100b66100d936600461167b565b60026020526000908152604090205460ff1681565b6101016100fc36600461178d565b6105ed565b6040516100c2959493929190611c03565b6101256101203660046117b8565b6106bb565b005b61012561013536600461197d565b6109cf565b61012561014836600461167b565b610e56565b61012561015b3660046117f9565b610fd0565b61012561016e366004611b50565b611072565b61012561018136600461169e565b61118d565b6100b661019436600461167b565b60006020819052908152604090205460ff1681565b6001600160a01b03841660009081526003602090815260408083209051839283916101d8918991899101611bf3565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160e08101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003820154606082015260048201805491929160808401919061025190611ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90611ef5565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156103a457838290600052602060002001805461031790611ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461034390611ef5565b80156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b5050505050815260200190600101906102f8565b505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156103fb57602002820191906000526020600020905b8154815260200190600101908083116103e7575b505050919092525050506060810151604051630d9d711160e01b815260048101829052600060248201819052929350909185916001600160a01b03831690630d9d71119060440160206040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190611a99565b604051630d9d711160e01b815260048101859052600160248201529091506000906001600160a01b03841690630d9d71119060440160206040518083038186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190611a99565b905060006105258383611eae565b600a54604051630db2ba4760e31b81526001600160a01b038e8116600483015292935060009290911690636d95d23890602401600060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ae9190810190611897565b90506000816020015190506000620f4240600c54836105cd9190611e8f565b6105d79190611e6f565b93909311159d9c50505050505050505050505050565b60036020818152600093845260408085209091529183529120805460018201546002830154938301546004840180546001600160a01b03948516969490931694919261063890611ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461066490611ef5565b80156106b15780601f10610686576101008083540402835291602001916106b1565b820191906000526020600020905b81548152906001019060200180831161069457829003601f168201915b5050505050905085565b6001600160a01b03808416600090815260036020818152604080842087855282528084208054600182015494820154948716808752600485528387208688529094529185205494956060959194921692919083908390888a61071e576001610721565b60005b604051631fc6ebd560e11b81526004810187905260ff919091166024820181905291506001600160a01b03841690633f8dd7aa90604401600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505060095460405163c0e3ee6b60e01b81526001600160a01b0388811660048301528781166024830152604482018a905260648201879052600060848301523060a4830152909116925063c0e3ee6b915060c401600060405180830381600087803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108309190810190611ab1565b6001600160a01b03881660009081526004602090815260408083208a8452909152902060010154919b5099508b156108ae57808b116108ae5760405162461bcd60e51b815260206004820152601560248201527414185e5bdd5d081b9bdd081cdd59999a58da595b9d605a1b60448201526064015b60405180910390fd5b600a54604051631e05c99760e31b8152600481018d90526001600160a01b039091169063f02e4cb890602401600060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b50505050610916818c61125b565b600360008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600080820160006101000a8154906001600160a01b0302191690556001820160006101000a8154906001600160a01b030219169055600282016000905560038201600090556004820160006109a191906112c6565b6109af600583016000611303565b6109bd600683016000611321565b50505050505050505050505050505050565b83516020850151604080870151608088015160a089015160c08a01519351636a87a1c560e01b815292939192909190869086906000906001600160a01b03831690636a87a1c590610a2a9033908a908a908a90600401611c95565b602060405180830381600087803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190611a99565b9050808d60600181815250508c600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8d604051602001610ac3929190611bf3565b60408051601f198184030181529181528151602092830120835282820193909352908201600020835181546001600160a01b039182166001600160a01b0319918216178355858401516001840180549190931691161790559183015160028301556060830151600383015560808301518051610b45926004850192019061133f565b5060a08201518051610b619160058401916020909101906113c3565b5060c08201518051610b7d91600684019160209091019061141c565b5050600a5460405163e0cd9c8f60e01b8152600481018a90526001600160a01b03909116915063e0cd9c8f90602401600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b50505050816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1757600080fd5b505afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061187b565b60095460405163095ea7b360e01b81526001600160a01b039182166004820152602481018a905291169063095ea7b390604401602060405180830381600087803b158015610c9c57600080fd5b505af1158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd4919061185f565b506009546040516321123f4b60e21b81526001600160a01b038581166004830152848116602483015260448201849052606482018a905230608483015290911690638448fd2c9060a401602060405180830381600087803b158015610d3857600080fd5b505af1158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190611a99565b5060095460405163fe04b54960e01b81526001600160a01b038581166004830152848116602483015260448201849052306064830152600092169063fe04b5499060840160206040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611a99565b60408051808201825291825260208083019a8b526001600160a01b03909b16600090815260048c5281812094815293909a52989091209751885550509351600190950194909455505050505050505050565b600a546001600160a01b03163314610eba5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920506f6f6c732063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084016108a5565b6001600160a01b038116610f085760405162461bcd60e51b815260206004820152601560248201527416995c9bc81859191c995cdcc819195d1958dd1959605a1b60448201526064016108a5565b6001600160a01b03811660009081526020819052604090205460ff1615610f6a5760405162461bcd60e51b81526020600482015260166024820152754164647265737320616c72656164792065786973747360501b60448201526064016108a5565b6001600160a01b03166000818152602081905260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319169091179055565b3360009081526020819052604090205460ff1615156001146110045760405162461bcd60e51b81526004016108a590611d2a565b600a5460405163554ef57160e01b81526001600160a01b039091169063554ef5719061103a908790879087908790600401611c48565b600060405180830381600087803b15801561105457600080fd5b505af1158015611068573d6000803e3d6000fd5b5050505050505050565b3360009081526002602052604090205460ff16156110d25760405162461bcd60e51b815260206004820152601860248201527f6164647265737320616c7265616479207665726966696564000000000000000060448201526064016108a5565b600b54604051636673e84960e01b81526001600160a01b0390911690636673e8499061113c907f239c35f1f32f5943610fcc78e22c7d7a412ac0939d50bb892b9987f4326f07a7906e1d1dda5d1d195c8b5d5b9c985d1959608a1b90889088908890600401611d70565b600060405180830381600087803b15801561115657600080fd5b505af115801561116a573d6000803e3d6000fd5b5050336000908152600260205260409020805460ff191660011790555050505050565b3360009081526020819052604090205460ff1615156001146111c15760405162461bcd60e51b81526004016108a590611d2a565b60006040518060e001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001898152602001612710815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060208101859052604001839052905061124e818c87876109cf565b5050505050505050505050565b60405160248101839052604481018290526112a19060640160408051601f198184030181529190526020810180516001600160e01b031662d81ed360e71b1790526112a5565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b5080546112d290611ef5565b6000825580601f106112e2575050565b601f0160209004906000526020600020908101906113009190611456565b50565b5080546000825590600052602060002090810190611300919061146b565b50805460008255906000526020600020908101906113009190611456565b82805461134b90611ef5565b90600052602060002090601f01602090048101928261136d57600085556113b3565b82601f1061138657805160ff19168380011785556113b3565b828001600101855582156113b3579182015b828111156113b3578251825591602001919060010190611398565b506113bf929150611456565b5090565b828054828255906000526020600020908101928215611410579160200282015b82811115611410578251805161140091849160209091019061133f565b50916020019190600101906113e3565b506113bf92915061146b565b8280548282559060005260206000209081019282156113b357916020028201828111156113b3578251825591602001919060010190611398565b5b808211156113bf5760008155600101611457565b808211156113bf57600061147f82826112c6565b5060010161146b565b803561149381611f5c565b919050565b805161149381611f5c565b600082601f8301126114b3578081fd5b813560206114c86114c383611e23565b611df2565b80838252828201915082860187848660051b89010111156114e7578586fd5b855b8581101561152857813567ffffffffffffffff811115611507578788fd5b6115158a87838c01016115e4565b85525092840192908401906001016114e9565b5090979650505050505050565b600082601f830112611545578081fd5b813560206115556114c383611e23565b80838252828201915082860187848660051b8901011115611574578586fd5b855b8581101561152857813584529284019290840190600101611576565b805161149381611f71565b60008083601f8401126115ae578182fd5b50813567ffffffffffffffff8111156115c5578182fd5b6020830191508360208285010111156115dd57600080fd5b9250929050565b600082601f8301126115f4578081fd5b81356116026114c382611e47565b818152846020838601011115611616578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611640578081fd5b815161164e6114c382611e47565b818152846020838601011115611662578283fd5b611673826020830160208701611ec5565b949350505050565b60006020828403121561168c578081fd5b813561169781611f5c565b9392505050565b6000806000806000806000806000806101008b8d0312156116bd578586fd5b6116c68b611488565b99506116d460208c01611488565b98506116e260408c01611488565b975060608b0135965060808b013567ffffffffffffffff80821115611705578788fd5b6117118e838f0161159d565b909850965060a08d0135915080821115611729578586fd5b6117358e838f0161159d565b909650945060c08d013591508082111561174d578384fd5b6117598e838f016114a3565b935060e08d013591508082111561176e578283fd5b5061177b8d828e01611535565b9150509295989b9194979a5092959850565b6000806040838503121561179f578182fd5b82356117aa81611f5c565b946020939093013593505050565b6000806000606084860312156117cc578081fd5b83356117d781611f5c565b92506020840135915060408401356117ee81611f71565b809150509250925092565b6000806000806060858703121561180e578182fd5b843561181981611f5c565b9350602085013567ffffffffffffffff811115611834578283fd5b6118408782880161159d565b909450925050604085013561185481611f5c565b939692955090935050565b600060208284031215611870578081fd5b815161169781611f71565b60006020828403121561188c578081fd5b815161169781611f5c565b6000602082840312156118a8578081fd5b815167ffffffffffffffff808211156118bf578283fd5b9083019061016082860312156118d3578283fd5b6118db611da5565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015183811115611938578586fd5b61194488828701611630565b828401525050610120915061195a828401611592565b82820152610140915061196e828401611498565b91810191909152949350505050565b60008060008060608587031215611992578182fd5b843567ffffffffffffffff808211156119a9578384fd5b9086019060e082890312156119bc578384fd5b6119c4611dcf565b6119cd83611488565b81526119db60208401611488565b60208201526040830135604082015260608301356060820152608083013582811115611a05578586fd5b611a118a8286016115e4565b60808301525060a083013582811115611a28578586fd5b611a348a8286016114a3565b60a08301525060c083013582811115611a4b578586fd5b611a578a828601611535565b60c0830152509550611a6b60208801611488565b94506040870135915080821115611a80578384fd5b50611a8d8782880161159d565b95989497509550505050565b600060208284031215611aaa578081fd5b5051919050565b60008060408385031215611ac3578182fd5b8251915060208084015167ffffffffffffffff811115611ae1578283fd5b8401601f81018613611af1578283fd5b8051611aff6114c382611e23565b80828252848201915084840189868560051b8701011115611b1e578687fd5b8694505b83851015611b40578051835260019490940193918501918501611b22565b5080955050505050509250929050565b6000806000610140808587031215611b66578182fd5b8435935060208501359250858186011115611b7f578182fd5b506040840190509250925092565b6000815180845260208085019450808401835b83811015611bbc57815187529582019590820190600101611ba0565b509495945050505050565b60008151808452611bdf816020860160208601611ec5565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611c3d90830184611bc7565b979650505050505050565b6001600160a01b038581168252606060208301819052820184905260009084866080850137828501608090810192909252929092166040820152601f909201601f19169091010192915050565b6001600160a01b038516815260806020808301829052600091611cba90840187611bc7565b8381036040850152855180825282820190600581901b83018401848901865b83811015611d0757601f19868403018552611cf5838351611bc7565b94870194925090860190600101611cd9565b50508681036060880152611d1b8189611b8d565b9b9a5050505050505050505050565b60208082526026908201527f4f6e6c792056616c696461746f72732063616e2063616c6c20746869732066756040820152653731ba34b7b760d11b606082015260800190565b600061018082019050868252856020830152846040830152836060830152610100836080840137600081529695505050505050565b604051610160810167ffffffffffffffff81118282101715611dc957611dc9611f46565b60405290565b60405160e0810167ffffffffffffffff81118282101715611dc957611dc9611f46565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1b57611e1b611f46565b604052919050565b600067ffffffffffffffff821115611e3d57611e3d611f46565b5060051b60200190565b600067ffffffffffffffff821115611e6157611e61611f46565b50601f01601f191660200190565b600082611e8a57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ea957611ea9611f30565b500290565b600082821015611ec057611ec0611f30565b500390565b60005b83811015611ee0578181015183820152602001611ec8565b83811115611eef576000848401525b50505050565b600181811c90821680611f0957607f821691505b60208210811415611f2a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461130057600080fd5b801515811461130057600080fdfea26469706673582212209f2ded1f67449156a7ce7015ebcf0fea2d247a7277407a1e4dff70d7e15030de64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80634d238c8e116100665780634d238c8e1461013a578063554ef5711461014d5780638928dfc314610160578063d04fa29314610173578063fa52c7d81461018657600080fd5b806307a9ec08146100a35780630db065f4146100cb578063315786f1146100ee57806342f045c51461011257806348d026b214610127575b600080fd5b6100b66100b13660046117f9565b6101a9565b60405190151581526020015b60405180910390f35b6100b66100d936600461167b565b60026020526000908152604090205460ff1681565b6101016100fc36600461178d565b6105ed565b6040516100c2959493929190611c03565b6101256101203660046117b8565b6106bb565b005b61012561013536600461197d565b6109cf565b61012561014836600461167b565b610e56565b61012561015b3660046117f9565b610fd0565b61012561016e366004611b50565b611072565b61012561018136600461169e565b61118d565b6100b661019436600461167b565b60006020819052908152604090205460ff1681565b6001600160a01b03841660009081526003602090815260408083209051839283916101d8918991899101611bf3565b60408051601f198184030181529181528151602092830120835282820193909352908201600020825160e08101845281546001600160a01b039081168252600183015416928101929092526002810154928201929092526003820154606082015260048201805491929160808401919061025190611ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461027d90611ef5565b80156102ca5780601f1061029f576101008083540402835291602001916102ca565b820191906000526020600020905b8154815290600101906020018083116102ad57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156103a457838290600052602060002001805461031790611ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461034390611ef5565b80156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b5050505050815260200190600101906102f8565b505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156103fb57602002820191906000526020600020905b8154815260200190600101908083116103e7575b505050919092525050506060810151604051630d9d711160e01b815260048101829052600060248201819052929350909185916001600160a01b03831690630d9d71119060440160206040518083038186803b15801561045a57600080fd5b505afa15801561046e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104929190611a99565b604051630d9d711160e01b815260048101859052600160248201529091506000906001600160a01b03841690630d9d71119060440160206040518083038186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190611a99565b905060006105258383611eae565b600a54604051630db2ba4760e31b81526001600160a01b038e8116600483015292935060009290911690636d95d23890602401600060405180830381600087803b15801561057257600080fd5b505af1158015610586573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105ae9190810190611897565b90506000816020015190506000620f4240600c54836105cd9190611e8f565b6105d79190611e6f565b93909311159d9c50505050505050505050505050565b60036020818152600093845260408085209091529183529120805460018201546002830154938301546004840180546001600160a01b03948516969490931694919261063890611ef5565b80601f016020809104026020016040519081016040528092919081815260200182805461066490611ef5565b80156106b15780601f10610686576101008083540402835291602001916106b1565b820191906000526020600020905b81548152906001019060200180831161069457829003601f168201915b5050505050905085565b6001600160a01b03808416600090815260036020818152604080842087855282528084208054600182015494820154948716808752600485528387208688529094529185205494956060959194921692919083908390888a61071e576001610721565b60005b604051631fc6ebd560e11b81526004810187905260ff919091166024820181905291506001600160a01b03841690633f8dd7aa90604401600060405180830381600087803b15801561077257600080fd5b505af1158015610786573d6000803e3d6000fd5b505060095460405163c0e3ee6b60e01b81526001600160a01b0388811660048301528781166024830152604482018a905260648201879052600060848301523060a4830152909116925063c0e3ee6b915060c401600060405180830381600087803b1580156107f457600080fd5b505af1158015610808573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108309190810190611ab1565b6001600160a01b03881660009081526004602090815260408083208a8452909152902060010154919b5099508b156108ae57808b116108ae5760405162461bcd60e51b815260206004820152601560248201527414185e5bdd5d081b9bdd081cdd59999a58da595b9d605a1b60448201526064015b60405180910390fd5b600a54604051631e05c99760e31b8152600481018d90526001600160a01b039091169063f02e4cb890602401600060405180830381600087803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b50505050610916818c61125b565b600360008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600080820160006101000a8154906001600160a01b0302191690556001820160006101000a8154906001600160a01b030219169055600282016000905560038201600090556004820160006109a191906112c6565b6109af600583016000611303565b6109bd600683016000611321565b50505050505050505050505050505050565b83516020850151604080870151608088015160a089015160c08a01519351636a87a1c560e01b815292939192909190869086906000906001600160a01b03831690636a87a1c590610a2a9033908a908a908a90600401611c95565b602060405180830381600087803b158015610a4457600080fd5b505af1158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c9190611a99565b9050808d60600181815250508c600360008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d8d604051602001610ac3929190611bf3565b60408051601f198184030181529181528151602092830120835282820193909352908201600020835181546001600160a01b039182166001600160a01b0319918216178355858401516001840180549190931691161790559183015160028301556060830151600383015560808301518051610b45926004850192019061133f565b5060a08201518051610b619160058401916020909101906113c3565b5060c08201518051610b7d91600684019160209091019061141c565b5050600a5460405163e0cd9c8f60e01b8152600481018a90526001600160a01b03909116915063e0cd9c8f90602401600060405180830381600087803b158015610bc657600080fd5b505af1158015610bda573d6000803e3d6000fd5b50505050816001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1757600080fd5b505afa158015610c2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4f919061187b565b60095460405163095ea7b360e01b81526001600160a01b039182166004820152602481018a905291169063095ea7b390604401602060405180830381600087803b158015610c9c57600080fd5b505af1158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd4919061185f565b506009546040516321123f4b60e21b81526001600160a01b038581166004830152848116602483015260448201849052606482018a905230608483015290911690638448fd2c9060a401602060405180830381600087803b158015610d3857600080fd5b505af1158015610d4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d709190611a99565b5060095460405163fe04b54960e01b81526001600160a01b038581166004830152848116602483015260448201849052306064830152600092169063fe04b5499060840160206040518083038186803b158015610dcc57600080fd5b505afa158015610de0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e049190611a99565b60408051808201825291825260208083019a8b526001600160a01b03909b16600090815260048c5281812094815293909a52989091209751885550509351600190950194909455505050505050505050565b600a546001600160a01b03163314610eba5760405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920506f6f6c732063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084016108a5565b6001600160a01b038116610f085760405162461bcd60e51b815260206004820152601560248201527416995c9bc81859191c995cdcc819195d1958dd1959605a1b60448201526064016108a5565b6001600160a01b03811660009081526020819052604090205460ff1615610f6a5760405162461bcd60e51b81526020600482015260166024820152754164647265737320616c72656164792065786973747360501b60448201526064016108a5565b6001600160a01b03166000818152602081905260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319169091179055565b3360009081526020819052604090205460ff1615156001146110045760405162461bcd60e51b81526004016108a590611d2a565b600a5460405163554ef57160e01b81526001600160a01b039091169063554ef5719061103a908790879087908790600401611c48565b600060405180830381600087803b15801561105457600080fd5b505af1158015611068573d6000803e3d6000fd5b5050505050505050565b3360009081526002602052604090205460ff16156110d25760405162461bcd60e51b815260206004820152601860248201527f6164647265737320616c7265616479207665726966696564000000000000000060448201526064016108a5565b600b54604051636673e84960e01b81526001600160a01b0390911690636673e8499061113c907f239c35f1f32f5943610fcc78e22c7d7a412ac0939d50bb892b9987f4326f07a7906e1d1dda5d1d195c8b5d5b9c985d1959608a1b90889088908890600401611d70565b600060405180830381600087803b15801561115657600080fd5b505af115801561116a573d6000803e3d6000fd5b5050336000908152600260205260409020805460ff191660011790555050505050565b3360009081526020819052604090205460ff1615156001146111c15760405162461bcd60e51b81526004016108a590611d2a565b60006040518060e001604052808b6001600160a01b031681526020018a6001600160a01b03168152602001898152602001612710815260200188888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060208101859052604001839052905061124e818c87876109cf565b5050505050505050505050565b60405160248101839052604481018290526112a19060640160408051601f198184030181529190526020810180516001600160e01b031662d81ed360e71b1790526112a5565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b5080546112d290611ef5565b6000825580601f106112e2575050565b601f0160209004906000526020600020908101906113009190611456565b50565b5080546000825590600052602060002090810190611300919061146b565b50805460008255906000526020600020908101906113009190611456565b82805461134b90611ef5565b90600052602060002090601f01602090048101928261136d57600085556113b3565b82601f1061138657805160ff19168380011785556113b3565b828001600101855582156113b3579182015b828111156113b3578251825591602001919060010190611398565b506113bf929150611456565b5090565b828054828255906000526020600020908101928215611410579160200282015b82811115611410578251805161140091849160209091019061133f565b50916020019190600101906113e3565b506113bf92915061146b565b8280548282559060005260206000209081019282156113b357916020028201828111156113b3578251825591602001919060010190611398565b5b808211156113bf5760008155600101611457565b808211156113bf57600061147f82826112c6565b5060010161146b565b803561149381611f5c565b919050565b805161149381611f5c565b600082601f8301126114b3578081fd5b813560206114c86114c383611e23565b611df2565b80838252828201915082860187848660051b89010111156114e7578586fd5b855b8581101561152857813567ffffffffffffffff811115611507578788fd5b6115158a87838c01016115e4565b85525092840192908401906001016114e9565b5090979650505050505050565b600082601f830112611545578081fd5b813560206115556114c383611e23565b80838252828201915082860187848660051b8901011115611574578586fd5b855b8581101561152857813584529284019290840190600101611576565b805161149381611f71565b60008083601f8401126115ae578182fd5b50813567ffffffffffffffff8111156115c5578182fd5b6020830191508360208285010111156115dd57600080fd5b9250929050565b600082601f8301126115f4578081fd5b81356116026114c382611e47565b818152846020838601011115611616578283fd5b816020850160208301379081016020019190915292915050565b600082601f830112611640578081fd5b815161164e6114c382611e47565b818152846020838601011115611662578283fd5b611673826020830160208701611ec5565b949350505050565b60006020828403121561168c578081fd5b813561169781611f5c565b9392505050565b6000806000806000806000806000806101008b8d0312156116bd578586fd5b6116c68b611488565b99506116d460208c01611488565b98506116e260408c01611488565b975060608b0135965060808b013567ffffffffffffffff80821115611705578788fd5b6117118e838f0161159d565b909850965060a08d0135915080821115611729578586fd5b6117358e838f0161159d565b909650945060c08d013591508082111561174d578384fd5b6117598e838f016114a3565b935060e08d013591508082111561176e578283fd5b5061177b8d828e01611535565b9150509295989b9194979a5092959850565b6000806040838503121561179f578182fd5b82356117aa81611f5c565b946020939093013593505050565b6000806000606084860312156117cc578081fd5b83356117d781611f5c565b92506020840135915060408401356117ee81611f71565b809150509250925092565b6000806000806060858703121561180e578182fd5b843561181981611f5c565b9350602085013567ffffffffffffffff811115611834578283fd5b6118408782880161159d565b909450925050604085013561185481611f5c565b939692955090935050565b600060208284031215611870578081fd5b815161169781611f71565b60006020828403121561188c578081fd5b815161169781611f5c565b6000602082840312156118a8578081fd5b815167ffffffffffffffff808211156118bf578283fd5b9083019061016082860312156118d3578283fd5b6118db611da5565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015183811115611938578586fd5b61194488828701611630565b828401525050610120915061195a828401611592565b82820152610140915061196e828401611498565b91810191909152949350505050565b60008060008060608587031215611992578182fd5b843567ffffffffffffffff808211156119a9578384fd5b9086019060e082890312156119bc578384fd5b6119c4611dcf565b6119cd83611488565b81526119db60208401611488565b60208201526040830135604082015260608301356060820152608083013582811115611a05578586fd5b611a118a8286016115e4565b60808301525060a083013582811115611a28578586fd5b611a348a8286016114a3565b60a08301525060c083013582811115611a4b578586fd5b611a578a828601611535565b60c0830152509550611a6b60208801611488565b94506040870135915080821115611a80578384fd5b50611a8d8782880161159d565b95989497509550505050565b600060208284031215611aaa578081fd5b5051919050565b60008060408385031215611ac3578182fd5b8251915060208084015167ffffffffffffffff811115611ae1578283fd5b8401601f81018613611af1578283fd5b8051611aff6114c382611e23565b80828252848201915084840189868560051b8701011115611b1e578687fd5b8694505b83851015611b40578051835260019490940193918501918501611b22565b5080955050505050509250929050565b6000806000610140808587031215611b66578182fd5b8435935060208501359250858186011115611b7f578182fd5b506040840190509250925092565b6000815180845260208085019450808401835b83811015611bbc57815187529582019590820190600101611ba0565b509495945050505050565b60008151808452611bdf816020860160208601611ec5565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611c3d90830184611bc7565b979650505050505050565b6001600160a01b038581168252606060208301819052820184905260009084866080850137828501608090810192909252929092166040820152601f909201601f19169091010192915050565b6001600160a01b038516815260806020808301829052600091611cba90840187611bc7565b8381036040850152855180825282820190600581901b83018401848901865b83811015611d0757601f19868403018552611cf5838351611bc7565b94870194925090860190600101611cd9565b50508681036060880152611d1b8189611b8d565b9b9a5050505050505050505050565b60208082526026908201527f4f6e6c792056616c696461746f72732063616e2063616c6c20746869732066756040820152653731ba34b7b760d11b606082015260800190565b600061018082019050868252856020830152846040830152836060830152610100836080840137600081529695505050505050565b604051610160810167ffffffffffffffff81118282101715611dc957611dc9611f46565b60405290565b60405160e0810167ffffffffffffffff81118282101715611dc957611dc9611f46565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e1b57611e1b611f46565b604052919050565b600067ffffffffffffffff821115611e3d57611e3d611f46565b5060051b60200190565b600067ffffffffffffffff821115611e6157611e61611f46565b50601f01601f191660200190565b600082611e8a57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611ea957611ea9611f30565b500290565b600082821015611ec057611ec0611f30565b500390565b60005b83811015611ee0578181015183820152602001611ec8565b83811115611eef576000848401525b50505050565b600181811c90821680611f0957607f821691505b60208210811415611f2a57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461130057600080fd5b801515811461130057600080fdfea26469706673582212209f2ded1f67449156a7ce7015ebcf0fea2d247a7277407a1e4dff70d7e15030de64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17211,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "validators",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17215,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17220,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "verified",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 17227,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "borrower_market_data",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(MarketInfo)16662_storage))"
      },
      {
        "astId": 17234,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "lpinfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(LiquidityInfo)17206_storage))"
      },
      {
        "astId": 17237,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "validators_array",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17239,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "creator_address",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 17241,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "timelock_address",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 17243,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "MasterChef_address",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 17246,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "masterchef",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(MasterChef)16293"
      },
      {
        "astId": 17249,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "lendingpool",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ILendingPool)17028"
      },
      {
        "astId": 17252,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "interep",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IInterep)1054"
      },
      {
        "astId": 17264,
        "contract": "contracts/stablecoin/controller.sol:Controller",
        "label": "insurance_constant",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IInterep)1054": {
        "encoding": "inplace",
        "label": "contract IInterep",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)17028": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(MasterChef)16293": {
        "encoding": "inplace",
        "label": "contract MasterChef",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(MarketInfo)16662_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct IController.MarketInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(MarketInfo)16662_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(LiquidityInfo)17206_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Controller.LiquidityInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(LiquidityInfo)17206_storage)"
      },
      "t_mapping(t_bytes32,t_struct(MarketInfo)16662_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IController.MarketInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MarketInfo)16662_storage"
      },
      "t_mapping(t_uint256,t_struct(LiquidityInfo)17206_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.LiquidityInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LiquidityInfo)17206_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LiquidityInfo)17206_storage": {
        "encoding": "inplace",
        "label": "struct Controller.LiquidityInfo",
        "members": [
          {
            "astId": 17203,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "lptokenamount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 17205,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "suppliedDS",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MarketInfo)16662_storage": {
        "encoding": "inplace",
        "label": "struct IController.MarketInfo",
        "members": [
          {
            "astId": 16647,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "ammFactoryAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16649,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "marketFactoryAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16651,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "liquidityAmountUSD",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16653,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "marketID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16655,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "description",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 16658,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "names",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 16661,
            "contract": "contracts/stablecoin/controller.sol:Controller",
            "label": "odds",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}