{
  "address": "0x04F2E0E4e3627C83e415586D64Be4df35792A240",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract BFactory",
          "name": "_bFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "lpTokens",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "sharesReturned",
          "type": "uint256[]"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "shares",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SharesSwapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BPOW_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INIT_POOL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BOUND_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPOW_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_IN_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OUT_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BALANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BOUND_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BPOW_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLPTokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bFactory",
      "outputs": [
        {
          "internalType": "contract BFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensOut",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondingcurve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        }
      ],
      "name": "buyZCB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract BPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPoolTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract BPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokensIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralRecipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_collateralOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_shareTokensIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minSetsOut",
          "type": "uint256"
        }
      ],
      "name": "sellForCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bondingcurve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_zcb_amountIn",
          "type": "uint256"
        }
      ],
      "name": "sellZCB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "tokenRatios",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xde7b67cf678a8c8ff19c8b5269c32e092b4433f57c95e0c65c28550e57544a6f",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0x04F2E0E4e3627C83e415586D64Be4df35792A240",
    "transactionIndex": 8,
    "gasUsed": "3849105",
    "logsBloom": "0x
    "blockHash": "0x5d9f3e7c0baeccc09109f916a125316313978080f4ea21054372b8b1121daf71",
    "transactionHash": "0xde7b67cf678a8c8ff19c8b5269c32e092b4433f57c95e0c65c28550e57544a6f",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 27679765,
        "transactionHash": "0xde7b67cf678a8c8ff19c8b5269c32e092b4433f57c95e0c65c28550e57544a6f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006d65ecbffd73780000000000000000000000000000000000000000000000028a1d6e0843a16762000000000000000000000000000000000000000000001423ac3f3bab44916fb200000000000000000000000000000000000000000000000289b0081b83a3f3ea000000000000000000000000000000000000000000001423acaca198048ee32a",
        "logIndex": 19,
        "blockHash": "0x5d9f3e7c0baeccc09109f916a125316313978080f4ea21054372b8b1121daf71"
      }
    ],
    "blockNumber": 27679765,
    "cumulativeGasUsed": "5761739",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE152327f9700F1733d12e7a507045FB4A4606C6F",
    "1000000000000"
  ],
  "numDeployments": 5,
  "solcInputHash": "8691fb0b2a39bd5a97393529a6363a7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BFactory\",\"name\":\"_bFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lpTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sharesReturned\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"shares\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SharesSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPOW_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_POOL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_IN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLPTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract BFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensOut\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondingcurve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"}],\"name\":\"buyZCB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract BPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract BPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralRecipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_shareTokensIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minSetsOut\",\"type\":\"uint256\"}],\"name\":\"sellForCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondingcurve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_zcb_amountIn\",\"type\":\"uint256\"}],\"name\":\"sellZCB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"tokenRatios\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/AMMFactory.sol\":\"AMMFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface BColor {\\r\\n    function getColor() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ncontract BBronze is BColor {\\r\\n    function getColor() external pure override returns (bytes32) {\\r\\n        return bytes32(\\\"BRONZE\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5684acd4711203183665f2ab65bafb6d12d22d08d18423e4bb143d79d1d6c\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BColor.sol\\\";\\r\\n\\r\\ncontract BConst is BBronze {\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\r\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\r\\n\\r\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\r\\n    uint256 public constant MAX_FEE = BONE / 10;\\r\\n    uint256 public constant EXIT_FEE = 0;\\r\\n\\r\\n    uint256 public constant MIN_WEIGHT = BONE;\\r\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\r\\n\\r\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\r\\n\\r\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\r\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\r\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\r\\n\\r\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\r\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\r\\n}\\r\\n\",\"keccak256\":\"0x861f4d61a141af61fbc9c4824e0952b112c4dcb5329093ac73c5c31bdf83aec2\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is disstributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\r\\n\\r\\nimport \\\"./BPool.sol\\\";\\r\\n\\r\\ncontract BFactory is BBronze {\\r\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\r\\n\\r\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\r\\n\\r\\n    mapping(address => bool) private _isBPool;\\r\\n\\r\\n    function isBPool(address b) external view returns (bool) {\\r\\n        return _isBPool[b];\\r\\n    }\\r\\n\\r\\n    function newBPool() external returns (BPool) {\\r\\n        BPool bpool = new BPool();\\r\\n        _isBPool[address(bpool)] = true;\\r\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\r\\n        bpool.setController(msg.sender);\\r\\n        return bpool;\\r\\n    }\\r\\n\\r\\n    address private _blabs;\\r\\n\\r\\n    constructor() {\\r\\n        _blabs = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getBLabs() external view returns (address) {\\r\\n        return _blabs;\\r\\n    }\\r\\n\\r\\n    function setBLabs(address b) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        emit LOG_BLABS(msg.sender, b);\\r\\n        _blabs = b;\\r\\n    }\\r\\n\\r\\n    function collect(BPool pool) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\r\\n        bool xfer = pool.transfer(_blabs, collected);\\r\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fc1280b9ded4e258eca3987f20e5feab64f577a6537920121e174c8ddb8830c\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ncontract BMath is BBronze, BConst, BNum {\\r\\n    /**********************************************************************************************\\r\\n    // calcSpotPrice                                                                             //\\r\\n    // sP = spotPrice                                                                            //\\r\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\r\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\r\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcSpotPrice(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 spotPrice) {\\r\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\r\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\r\\n        uint256 ratio = bdiv(numer, denom);\\r\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\r\\n        return (spotPrice = bmul(ratio, scale));\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcOutGivenIn                                                                            //\\r\\n    // aO = tokenAmountOut                                                                       //\\r\\n    // bO = tokenBalanceOut                                                                      //\\r\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\r\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\r\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcOutGivenIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\r\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\r\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\r\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        uint256 bar = bsub(BONE, foo);\\r\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcInGivenOut                                                                            //\\r\\n    // aI = tokenAmountIn                                                                        //\\r\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\r\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\r\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\r\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\r\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcInGivenOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\r\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\r\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        foo = bsub(foo, BONE);\\r\\n        tokenAmountIn = bsub(BONE, swapFee);\\r\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolOutGivenSingleIn                                                                  //\\r\\n    // pAo = poolAmountOut         /                                              \\\\              //\\r\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\r\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\r\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\r\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\r\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\r\\n    // sF = swapFee                \\\\                                              /              //\\r\\n    **********************************************************************************************/\\r\\n\\r\\n    // Charge the trading fee for the proportion of tokenAi\\r\\n    ///  which is implicitly traded to the other pool tokens.\\r\\n    // That proportion is (1- weightTokenIn)\\r\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\r\\n\\r\\n    function calcPoolOutGivenSingleIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\r\\n\\r\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\r\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\r\\n\\r\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleInGivenPoolOut                                                                  //\\r\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\r\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\r\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\r\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\r\\n    // wI = weightIn                              /      wI  \\\\                                   //\\r\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\r\\n    // sF = swapFee                               \\\\      tW  /                                   //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleInGivenPoolOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\r\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\r\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\r\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\r\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\r\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\r\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\r\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\r\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleOutGivenPoolIn                                                                  //\\r\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\r\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\r\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\r\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\r\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\r\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\r\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\r\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleOutGivenPoolIn(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\r\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\r\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\r\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\r\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\r\\n\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\r\\n\\r\\n        // charge swap fee on the output token side\\r\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolInGivenSingleOut                                                                  //\\r\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\r\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\r\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\r\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\r\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\r\\n    // tW = totalWeight           -------------------------------------------------------------  //\\r\\n    // sF = swapFee                                        ( 1 - eF )                            //\\r\\n    // eF = exitFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcPoolInGivenSingleOut(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountIn) {\\r\\n        // charge swap fee on the output token side\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\r\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\r\\n        uint256 zar = bmul(zoo, swapFee);\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\r\\n\\r\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\r\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\r\\n\\r\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\r\\n\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\r\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9051281ae3cdaab135eb51e0d1e5b6e16bc1fe29f756bcf0a248c061163df7ea\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BConst.sol\\\";\\r\\n\\r\\ncontract BNum is BConst {\\r\\n    function btoi(uint256 a) internal pure returns (uint256) {\\r\\n        return a / BONE;\\r\\n    }\\r\\n\\r\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\r\\n        return btoi(a) * BONE;\\r\\n    }\\r\\n\\r\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        (uint256 c, bool flag) = bsubSign(a, b);\\r\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\r\\n        if (a >= b) {\\r\\n            return (a - b, false);\\r\\n        } else {\\r\\n            return (b - a, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c0 = a * b;\\r\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c1 = c0 + (BONE / 2);\\r\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c2 = c1 / BONE;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\r\\n        uint256 c0 = a * BONE;\\r\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\r\\n        uint256 c1 = c0 + (b / 2);\\r\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\r\\n        uint256 c2 = c1 / b;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    // DSMath.wpow\\r\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 z = n % 2 != 0 ? a : BONE;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            a = bmul(a, a);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = bmul(z, a);\\r\\n            }\\r\\n        }\\r\\n        return z;\\r\\n    }\\r\\n\\r\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\r\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\r\\n    // of approximation of b^0.w\\r\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\r\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\r\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\r\\n\\r\\n        uint256 whole = bfloor(exp);\\r\\n        uint256 remain = bsub(exp, whole);\\r\\n\\r\\n        uint256 wholePow = bpowi(base, btoi(whole));\\r\\n\\r\\n        if (remain == 0) {\\r\\n            return wholePow;\\r\\n        }\\r\\n\\r\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\r\\n        return bmul(wholePow, partialResult);\\r\\n    }\\r\\n\\r\\n    function bpowApprox(\\r\\n        uint256 base,\\r\\n        uint256 exp,\\r\\n        uint256 precision\\r\\n    ) internal pure returns (uint256) {\\r\\n        // term 0:\\r\\n        uint256 a = exp;\\r\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\r\\n        uint256 term = BONE;\\r\\n        uint256 sum = term;\\r\\n        bool negative = false;\\r\\n\\r\\n        // term(k) = numer / denom\\r\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\r\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\r\\n        // continue until term is less than precision\\r\\n        for (uint256 i = 1; term >= precision; i++) {\\r\\n            uint256 bigK = i * BONE;\\r\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\r\\n            term = bmul(term, bmul(c, x));\\r\\n            term = bdiv(term, bigK);\\r\\n            if (term == 0) break;\\r\\n\\r\\n            if (xneg) negative = !negative;\\r\\n            if (cneg) negative = !negative;\\r\\n            if (negative) {\\r\\n                sum = bsub(sum, term);\\r\\n            } else {\\r\\n                sum = badd(sum, term);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ae56173eeb8f5522a3bbbfde10905514f68320bbcad3dd7e46ba546dd4010a\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BToken.sol\\\";\\r\\nimport \\\"./BMath.sol\\\";\\r\\n\\r\\ncontract BPool is BBronze, BToken, BMath {\\r\\n    struct Record {\\r\\n        bool bound; // is token bound to pool\\r\\n        uint256 index; // private\\r\\n        uint256 denorm; // denormalized weight\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    event LOG_SWAP(\\r\\n        address indexed caller,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 tokenAmountOut\\r\\n    );\\r\\n\\r\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\r\\n\\r\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\r\\n\\r\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\r\\n\\r\\n    modifier _logs_() {\\r\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    modifier _viewlock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    bool private _mutex;\\r\\n\\r\\n    address private _factory; // BFactory address to push token exitFee to\\r\\n    address private _controller; // has CONTROL role\\r\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\r\\n\\r\\n    // `setSwapFee` and `finalize` require CONTROL\\r\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\r\\n    uint256 private _swapFee;\\r\\n    bool private _finalized;\\r\\n\\r\\n    address[] private _tokens;\\r\\n    mapping(address => Record) private _records;\\r\\n    uint256 private _totalWeight;\\r\\n\\r\\n    constructor() {\\r\\n        _controller = msg.sender;\\r\\n        _factory = msg.sender;\\r\\n        _swapFee = MIN_FEE;\\r\\n        _publicSwap = false;\\r\\n        _finalized = false;\\r\\n    }\\r\\n\\r\\n    function isPublicSwap() external view returns (bool) {\\r\\n        return _publicSwap;\\r\\n    }\\r\\n\\r\\n    function isFinalized() external view returns (bool) {\\r\\n        return _finalized;\\r\\n    }\\r\\n\\r\\n    function isBound(address t) external view returns (bool) {\\r\\n        return _records[t].bound;\\r\\n    }\\r\\n\\r\\n    function getNumTokens() external view returns (uint256) {\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].denorm;\\r\\n    }\\r\\n\\r\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\r\\n        return _totalWeight;\\r\\n    }\\r\\n\\r\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        uint256 denorm = _records[token].denorm;\\r\\n        return bdiv(denorm, _totalWeight);\\r\\n    }\\r\\n\\r\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].balance;\\r\\n    }\\r\\n\\r\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\r\\n        return _swapFee;\\r\\n    }\\r\\n\\r\\n    function getController() external view _viewlock_ returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\r\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\r\\n        _swapFee = swapFee;\\r\\n    }\\r\\n\\r\\n    function setController(address manager) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _controller = manager;\\r\\n    }\\r\\n\\r\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _publicSwap = public_;\\r\\n    }\\r\\n\\r\\n    function finalize() external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\r\\n\\r\\n        _finalized = true;\\r\\n        _publicSwap = true;\\r\\n\\r\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\r\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function bind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    )\\r\\n        external\\r\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\r\\n    {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\r\\n\\r\\n        _records[token] = Record({\\r\\n            bound: true,\\r\\n            index: _tokens.length,\\r\\n            denorm: 0, // balance and denorm will be validated\\r\\n            balance: 0 // and set by `rebind`\\r\\n        });\\r\\n        _tokens.push(token);\\r\\n        rebind(token, balance, denorm);\\r\\n    }\\r\\n\\r\\n    function rebind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    ) public _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n\\r\\n        // Adjust the denorm and totalWeight\\r\\n        uint256 oldWeight = _records[token].denorm;\\r\\n        if (denorm > oldWeight) {\\r\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\r\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n        } else if (denorm < oldWeight) {\\r\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\r\\n        }\\r\\n        _records[token].denorm = denorm;\\r\\n\\r\\n        // Adjust the balance record and actual token balance\\r\\n        uint256 oldBalance = _records[token].balance;\\r\\n        _records[token].balance = balance;\\r\\n        if (balance > oldBalance) {\\r\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\r\\n        } else if (balance < oldBalance) {\\r\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\r\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\r\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\r\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\r\\n            _pushUnderlying(token, _factory, tokenExitFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unbind(address token) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        uint256 tokenBalance = _records[token].balance;\\r\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\r\\n\\r\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\r\\n\\r\\n        // Swap the token-to-unbind with the last token,\\r\\n        // then delete the last token\\r\\n        uint256 index = _records[token].index;\\r\\n        uint256 last = _tokens.length - 1;\\r\\n        _tokens[index] = _tokens[last];\\r\\n        _records[_tokens[index]].index = index;\\r\\n        _tokens.pop();\\r\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\r\\n\\r\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\r\\n        _pushUnderlying(token, _factory, tokenExitFee);\\r\\n    }\\r\\n\\r\\n    // Absorb any tokens that have been sent to this contract into the pool\\r\\n    function gulp(address token) external _logs_ _lock_ {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n    }\\r\\n\\r\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\r\\n        external\\r\\n        view\\r\\n        _viewlock_\\r\\n        returns (uint256 spotPrice)\\r\\n    {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\r\\n    }\\r\\n\\r\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\r\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\r\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\r\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\r\\n        }\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    }\\r\\n\\r\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _burnPoolShare(pAiAfterExitFee);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\r\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\r\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\r\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n\\r\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n\\r\\n            _amounts[i] = bmul(ratio, bal);\\r\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\r\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n        }\\r\\n\\r\\n        return _amounts;\\r\\n    }\\r\\n\\r\\n    function swapExactAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 minAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountOut = calcOutGivenIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountOut, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function swapExactAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 maxAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountIn = calcInGivenOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountIn, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function joinswapExternAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 minPoolAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    function joinswapPoolAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 maxAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    function exitswapPoolAmountIn(\\r\\n        address tokenOut,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 minAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    function exitswapExternAmountOut(\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPoolAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        poolAmountIn = calcPoolInGivenSingleOut(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n\\r\\n    // ==\\r\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\r\\n    // You must `_lock_` or otherwise ensure reentry-safety\\r\\n\\r\\n    function _pullUnderlying(\\r\\n        address erc20,\\r\\n        address from,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pushUnderlying(\\r\\n        address erc20,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pullPoolShare(address from, uint256 amount) internal {\\r\\n        _pull(from, amount);\\r\\n    }\\r\\n\\r\\n    function _pushPoolShare(address to, uint256 amount) internal {\\r\\n        _push(to, amount);\\r\\n    }\\r\\n\\r\\n    function _mintPoolShare(uint256 amount) internal {\\r\\n        _mint(amount);\\r\\n    }\\r\\n\\r\\n    function _burnPoolShare(uint256 amount) internal {\\r\\n        _burn(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7158032f88b03d54bba37cc3bdb432fa1906ab69bcd69d1baa43591a36e5f13a\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ninterface IERC20Balancer {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address whom) external view returns (uint256);\\r\\n\\r\\n    function allowance(address src, address dst) external view returns (uint256);\\r\\n\\r\\n    function approve(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract BTokenBase is BNum {\\r\\n    mapping(address => uint256) internal _balance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n    function _mint(uint256 amt) internal {\\r\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\r\\n        _totalSupply = badd(_totalSupply, amt);\\r\\n        emit Transfer(address(0), address(this), amt);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 amt) internal {\\r\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\r\\n        _totalSupply = bsub(_totalSupply, amt);\\r\\n        emit Transfer(address(this), address(0), amt);\\r\\n    }\\r\\n\\r\\n    function _move(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) internal {\\r\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[src] = bsub(_balance[src], amt);\\r\\n        _balance[dst] = badd(_balance[dst], amt);\\r\\n        emit Transfer(src, dst, amt);\\r\\n    }\\r\\n\\r\\n    function _push(address to, uint256 amt) internal {\\r\\n        _move(address(this), to, amt);\\r\\n    }\\r\\n\\r\\n    function _pull(address from, uint256 amt) internal {\\r\\n        _move(from, address(this), amt);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BToken is BTokenBase, IERC20Balancer {\\r\\n    string private _name = \\\"Balancer Pool Token\\\";\\r\\n    string private _symbol = \\\"BPT\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address dst) external view override returns (uint256) {\\r\\n        return _allowance[src][dst];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address whom) external view override returns (uint256) {\\r\\n        return _balance[whom];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\r\\n        _allowance[msg.sender][dst] = amt;\\r\\n        emit Approval(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        uint256 oldValue = _allowance[msg.sender][dst];\\r\\n        if (amt > oldValue) {\\r\\n            _allowance[msg.sender][dst] = 0;\\r\\n        } else {\\r\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\r\\n        }\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\r\\n        _move(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external override returns (bool) {\\r\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\r\\n        _move(src, dst, amt);\\r\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\r\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\r\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcbe41ffe3ae5f17388e0418cc5aa0e85c9acc4094e89fdf695d223c15b6f56b7\",\"license\":\"MIT\"},\"contracts/bonds/Ibondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4; \\r\\n\\r\\n\\r\\ninterface IBondingCurve{\\r\\n\\tfunction setMarketManager(address _market_manager) external;\\r\\n\\tfunction getTotalZCB(uint256 marketId) external returns (uint256 result);\\r\\n\\tfunction getTotalDS(uint256 marketId) external returns (uint256 result);\\r\\n\\tfunction getMaxQuantity(uint256 marketId) external view returns (uint256 result);\\r\\n\\tfunction curveInit(uint256 marketId) external;\\r\\n\\tfunction getExpectedPrice(uint256 marketId, uint256 amountIn) external view returns (uint256 result);\\r\\n\\tfunction getCollateral() external returns (address);\\r\\n\\tfunction buy(\\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) external returns(uint256);\\r\\n\\tfunction sell(\\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) external returns (uint256);\\r\\n\\tfunction redeem(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress receiver, \\r\\n\\t\\tuint256 zcb_redeem_amount, \\r\\n\\t\\tuint256 collateral_redeem_amount\\r\\n\\t) external;\\r\\n\\tfunction redeemPostAssessment(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress redeemer,\\r\\n\\t\\tuint256 collateral_amount\\r\\n\\t) external;\\r\\n\\tfunction burnFirstLoss(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 burn_collateral_amount\\r\\n\\t) external;\\r\\n\\tfunction mint(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 mintAmount,\\r\\n\\t\\taddress to\\r\\n\\t) external;\\r\\n\\tfunction burn(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 burnAmount, \\r\\n\\t\\taddress to\\r\\n\\t) external;\\r\\n}\",\"keccak256\":\"0x681f835c1b2c9a33840c3a647ea20e506ad55b67131e71027df8744f0d9d1ca3\"},\"contracts/bonds/LinearBondingCurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @notice y = a * x + b\\r\\n/// @dev NEED TO REDO FOR GAS EFFICIENT\\r\\ncontract LinearBondingCurve is BondingCurve {\\r\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\r\\n    using FixedPointMathLib for uint256;\\r\\n    uint256 a;\\r\\n    uint256 b;\\r\\n\\r\\n    constructor (\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner,\\r\\n        address collateral,\\r\\n        uint256 _a,\\r\\n        uint256 _b\\r\\n    ) BondingCurve(name, symbol, owner, collateral) {\\r\\n        a = _a;\\r\\n        b = _b;\\r\\n    }\\r\\n    /**\\r\\n     @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\r\\n     @param amount: amount collateral in => has collateral decimal number.\\r\\n     tokens returned in 60.18\\r\\n     */\\r\\n    function _calculatePurchaseReturn(uint256 amount) view internal override virtual returns(uint256) {\\r\\n        uint256 s = totalSupply() ;\\r\\n        uint256 _amount = amount * 10 ** (18 - collateral_dec);\\r\\n\\r\\n        uint256 x = ((a.mulWadDown(s) + b) ** 2)/math_precision; \\r\\n\\r\\n        uint256 y = 2*( a.mulWadDown(_amount)); \\r\\n\\r\\n        uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\r\\n\\r\\n        uint256 z = (a.mulWadDown(s) + b); \\r\\n\\r\\n        uint256 result = (x_y_sqrt-z).divWadDown(a);\\r\\n\\r\\n        return result; \\r\\n\\r\\n\\r\\n        // uint256 two = uint256(2).fromUint();\\r\\n        // result = (((a.mul(s) + b).pow(two) + two.mul(a).mul(amount)).sqrt() - (a.mul(s) + b)).div(a);\\r\\n        //result = ( ( ( ((a.mulWadDown(s) + b) ** 2)/math_precision + 2 * a.mulWadDown(_amount) ) * math_precision ).sqrt() - (a.mulWadDown(s) + b) ).divWadDown(a);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates area under the curve from current supply to s+amount\\r\\n    /// result = a * amount / 2  * (2* supply + amount) + b * amount\\r\\n    /// @dev amount is in 60.18.\\r\\n    /// returned in collateral decimals\\r\\n    function _calcAreaUnderCurve(uint256 amount) internal view override virtual returns(uint256 result){\\r\\n        uint256 s = totalSupply(); \\r\\n    \\r\\n        result = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\r\\n        result /= (10 ** (18 - collateral_dec));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates area under curve from s-amount to s, is c(as-ac/2+b) where c is amount \\r\\n     @dev collateral tokens returned\\r\\n     @param amount: tokens burning => 60.18 amount needs to be in 18 decimal \\r\\n     @dev returns amount of collateral tokens with collateral decimals\\r\\n     */\\r\\n    function _calculateSaleReturn(uint256 amount) view internal override virtual returns (uint256) {\\r\\n        uint s = totalSupply();\\r\\n\\r\\n        console.log('amount', amount, s); \\r\\n\\r\\n        uint256 x = a.mulWadDown(s); \\r\\n        uint256 y = a.mulWadDown(amount)/2; \\r\\n        uint256 z = b + x - y; \\r\\n        uint256 result = amount.mulWadDown(z); \\r\\n\\r\\n        result = result / (10 ** (18 - collateral_dec));\\r\\n\\r\\n        return result; \\r\\n        \\r\\n        // uint256 _reserves = reserves * 10 ** (18 - collateral_dec);\\r\\n\\r\\n        // console.log(\\\"_reserves\\\", _reserves);\\r\\n        // result = _reserves - ( (a / 2).mulWadDown((((s - amount)**2) / math_precision)) + b.mulWadDown(s - amount) );\\r\\n        // console.log(\\\"s - amount\\\", s - amount);\\r\\n        // result /= (10 ** (18 - collateral_dec));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @param amount: amount added in 60.18\\r\\n     @dev returns price in 60.18\\r\\n     */\\r\\n    function _calculateExpectedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\r\\n        uint256 s = totalSupply();\\r\\n\\r\\n        result = (s + amount).mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n    function _calculateDecreasedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\r\\n        result = (totalSupply() - amount).mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice probability = a * x + b, 60.18\\r\\n     returns probability in 60.18\\r\\n     */\\r\\n    function _calculateProbability(uint256 amount) view internal override virtual returns (uint256 score) {\\r\\n        //score = amount.mul(a) + b;\\r\\n        score = amount.mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n   function _calculateScore(uint256 priceOut, bool atLoss)view internal override virtual returns (uint256 score) {\\r\\n        // uint256 two = uint256(2).fromUint();\\r\\n        // if (atLoss) {score =  ((priceOut-math_precision).div(math_precision)).pow(two);}\\r\\n        // else {score = ((priceOut).div(math_precision)).pow(two);}\\r\\n        if (atLoss) {\\r\\n            score = ((priceOut - math_precision) ** 2) / math_precision;\\r\\n        } else {\\r\\n            score = (priceOut ** 2) / math_precision;\\r\\n        }\\r\\n\\r\\n    }\\r\\n }\",\"keccak256\":\"0x618198aec0deb44cf3eed3f06ba60b34de98295f9765759742520090436722a4\"},\"contracts/bonds/bondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n//TODO need to actually review for security and shit.\\r\\nabstract contract BondingCurve is OwnedERC20 {\\r\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 internal price_upper_bound;\\r\\n    uint256 internal price_lower_bound;\\r\\n    uint256 internal reserves;\\r\\n    uint256 internal max_quantity;\\r\\n    uint256 internal math_precision; \\r\\n    uint256 internal collateral_dec;\\r\\n    ERC20 collateral; // NEED TO CHANGE ONCE VAULT IS DONE\\r\\n    address[] private buyers; // keeps track for final reputation.\\r\\n\\r\\n\\r\\n    constructor (\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner, // market manager.\\r\\n        address _collateral\\r\\n    ) OwnedERC20(name, symbol, owner) {\\r\\n        collateral = ERC20(_collateral);\\r\\n        math_precision = 1e18;\\r\\n        collateral_dec = collateral.decimals();\\r\\n    }\\r\\n\\r\\n    function setUpperBound(uint256 upper_bound) public onlyOwner {\\r\\n        price_upper_bound = upper_bound;\\r\\n    }\\r\\n\\r\\n    function setLowerBound(uint256 lower_bound) public onlyOwner {\\r\\n        price_lower_bound = lower_bound;\\r\\n    }\\r\\n\\r\\n    function setMaxQuantity(uint256 _max_quantity) public onlyOwner {\\r\\n        max_quantity = _max_quantity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice called by market manager, like trustedMint but returns amount out\\r\\n     @param collateral_amount: amount of collateral in. => w/ collateral decimals\\r\\n     */\\r\\n    function trustedBuy(address trader, uint256 collateral_amount) public onlyOwner returns (uint256) {\\r\\n        uint256 tokens = _calculatePurchaseReturn(collateral_amount);\\r\\n        console.log('TOKENS', tokens, collateral_amount); \\r\\n        reserves += collateral_amount;\\r\\n\\r\\n        require(collateral.balanceOf(trader)>= collateral_amount,\\\"not enough balance\\\"); \\r\\n        collateral.safeTransferFrom(trader, address(this), collateral_amount);\\r\\n        _mint(trader, tokens);\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @param zcb_amount: amount of zcb tokens burned, needs to be in 18 decimals \\r\\n     */\\r\\n    function trustedSell(address trader, uint256 zcb_amount) public onlyOwner returns (uint256) {\\r\\n        uint256 collateral_out = _calculateSaleReturn(zcb_amount);\\r\\n        console.log(\\\"colalteralout\\\", collateral_out); \\r\\n        _burn(trader, zcb_amount);\\r\\n\\r\\n        collateral.safeTransfer(trader, collateral_out);\\r\\n        reserves -= collateral_out;\\r\\n        return collateral_out;\\r\\n    }\\r\\n\\r\\n    function trustedApproveCollateralTransfer(address trader, uint256 amount) public onlyOwner {\\r\\n        collateral.approve(trader, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates tokens returns from input collateral\\r\\n     @dev shouldn't be calling this function, should be calculating amount from frontend.\\r\\n     @param amount: input collateral (ds)\\r\\n     */\\r\\n    function calculatePurchaseReturn(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculatePurchaseReturn(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice gets required amount of collateral to purchase X amount of tokens\\r\\n    /// need to get area under the curve from current supply X_  to X_+X \\r\\n    function calcAreaUnderCurve(uint256 amount) public view  returns(uint){\\r\\n    \\t  return _calcAreaUnderCurve(amount); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates collateral returns from selling tokens\\r\\n     @param amount: amount of tokens selling\\r\\n     */\\r\\n    function calculateSaleReturn(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculateSaleReturn(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates score necessary to update reputation score\\r\\n    function calculateScore(uint256 priceOut, bool atLoss) public view returns(uint){\\r\\n    \\treturn _calculateScore(priceOut, atLoss);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     @notice calculates expected price given user buys X tokens\\r\\n     @param amount: hypothetical amount of tokens bought\\r\\n     */\\r\\n    function calculateExpectedPrice(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculateExpectedPrice(amount);\\r\\n    }\\r\\n    \\r\\n    function getTotalCollateral() public view returns (uint256 result) {\\r\\n        result = collateral.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getCollateral() public view returns (address) {\\r\\n        return address(collateral);\\r\\n    } \\r\\n\\r\\n    function getTotalZCB() public view returns (uint256 result) {\\r\\n        result = totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMaxQuantity() public view returns (uint256 result) {\\r\\n        result = max_quantity;\\r\\n    }\\r\\n\\r\\n    function getUpperBound() public view returns (uint256 result) {\\r\\n        result = price_upper_bound;\\r\\n    }\\r\\n\\r\\n    function getLowerBound() public view returns (uint256 result) {\\r\\n        result = price_lower_bound;\\r\\n    }\\r\\n    function getReserves() public view returns(uint256){\\r\\n    \\treturn reserves; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice buy bond tokens with necessary checks and transfers of collateral.\\r\\n     @param amount: amount of collateral/ds paid in exchange for tokens\\r\\n     @dev amount has number of collateral decimals\\r\\n     */\\r\\n    function buy(uint256 amount) public {\\r\\n        uint256 tokens = _calculatePurchaseReturn(amount);\\r\\n        console.log(\\\"buy:tokens\\\", tokens);\\r\\n        reserves += amount; // CAN REPLACE WITH collateral.balanceOf(this)\\r\\n        _mint(msg.sender, tokens);\\r\\n        collateral.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice sell bond tokens with necessary checks and transfers of collateral\\r\\n     @param amount: amount of tokens selling. 60.18.\\r\\n     */\\r\\n    function sell(uint256 amount) public {\\r\\n        uint256 sale = _calculateSaleReturn(amount);\\r\\n        _burn(msg.sender, amount);\\r\\n        collateral.safeTransfer(msg.sender, sale);\\r\\n        reserves -= sale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @dev doesn't perform any checks, checks performed by caller\\r\\n     */\\r\\n    function incrementReserves(uint256 amount) public onlyOwner{\\r\\n        reserves += amount;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     @dev doesn't perform any checks, checks performed by caller\\r\\n     */\\r\\n    function decrementReserves(uint256 amount) public onlyOwner {\\r\\n        reserves -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice used for calculating reputation score on resolved market.\\r\\n     */\\r\\n    function calculateProbability(uint256 amount) view public returns (uint256 score) {\\r\\n        return _calculateProbability(amount);\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n\\t\\taddress receiver, \\r\\n\\t\\tuint256 zcb_redeem_amount, \\r\\n\\t\\tuint256 collateral_redeem_amount\\r\\n\\t) external  onlyOwner {\\r\\n        _burn(receiver, zcb_redeem_amount);\\r\\n\\t\\tcollateral.safeTransfer(receiver, collateral_redeem_amount); \\r\\n        reserves -= collateral_redeem_amount;\\r\\n\\t}\\r\\n\\r\\n    function redeemPostAssessment(\\r\\n\\t\\taddress redeemer,\\r\\n\\t\\tuint256 collateral_amount\\r\\n\\t) external  onlyOwner{\\r\\n        uint256 redeem_amount = balanceOf(redeemer);\\r\\n\\t\\t_burn(redeemer, redeem_amount); \\r\\n\\t\\tcollateral.safeTransfer(redeemer, collateral_amount); \\r\\n        reserves -= collateral_amount;\\r\\n\\t}\\r\\n\\r\\n    function burnFirstLoss(\\r\\n\\t\\tuint256 burn_collateral_amount\\r\\n\\t) external onlyOwner{\\r\\n\\t\\tcollateral.safeTransfer(owner, burn_collateral_amount); \\r\\n        reserves -= burn_collateral_amount;\\r\\n\\t}\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override virtual {\\r\\n        // on _mint\\r\\n        if (from == address(0) && price_upper_bound > 0) {\\r\\n            console.log(\\\"beforeTT: price_upper_bound\\\", price_upper_bound);\\r\\n            require(_calculateExpectedPrice(amount) <= price_upper_bound, \\\"above price upper bound\\\");\\r\\n            // if (balanceOf(to) == 0 && amount > 0) {\\r\\n            //     buyers.push(to);\\r\\n            // }\\r\\n        }\\r\\n        // on _burn\\r\\n        else if (to == address(0) && price_lower_bound > 0) {\\r\\n            require(_calculateDecreasedPrice(amount) >= price_lower_bound, \\\"below price lower bound\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @dev amount is tokens burned.\\r\\n     */\\r\\n    function calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result) {\\r\\n        result = _calculateDecreasedPrice(amount);\\r\\n    }\\r\\n\\r\\n    function _calcAreaUnderCurve(uint256 amount) internal view  virtual returns(uint256 result); \\r\\n\\r\\n    function _calculateScore(uint256 priceOut, bool atLoss) view internal virtual returns(uint256 score);\\r\\n\\r\\n    function _calculatePurchaseReturn(uint256 amount) view internal virtual returns(uint256 result);\\r\\n\\r\\n    function _calculateSaleReturn(uint256 amount) view internal virtual returns (uint256 result);\\r\\n\\r\\n    function _calculateExpectedPrice(uint256 amount) view internal virtual returns (uint256 result);\\r\\n\\r\\n    function _calculateProbability(uint256 amount) view internal virtual returns (uint256 score);\\r\\n\\r\\n    function _calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result);\\r\\n}\",\"keccak256\":\"0x43235f0945d43ec5d92d232bf8c127c5251dda972136361a107cb1684f8e168d\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Full is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x41ff2e58c059015e2253de4dd9662eb9c508dbe06173d6c86d40eaf9931a825a\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address _newOwner) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x76d07e413556985a60ee4605c19060e334d2837d5a6a516c9778a10f6762a4ca\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\nabstract contract Ownable is IOwnable {\\r\\n    address internal owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view override returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param _newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\r\\n        require(_newOwner != address(0));\\r\\n        onTransferOwnership(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\r\\n    function onTransferOwnership(address, address) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x88fbb6eef836056a42280c96f7f5f2a721f7f714c4b4681f53193812cd38958e\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Rewardable {\\r\\n    // Rewards will be paid out over the lifetime of an event.\\r\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\r\\n\\r\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\r\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x45a1a84b8cd35d8663aa8e93a8cc33acdcd5f81939d71d25e36425f23e2d3cbe\",\"license\":\"MIT\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../balancer/BFactory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../balancer/BNum.sol\\\";\\r\\nimport \\\"../bonds/Ibondingcurve.sol\\\"; \\r\\n\\r\\ncontract AMMFactory is BNum {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\r\\n\\r\\n    BFactory public bFactory;\\r\\n    // MarketFactory => Market => BPool\\r\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\r\\n    uint256 fee;\\r\\n\\r\\n    event PoolCreated(\\r\\n        address pool,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed creator,\\r\\n        address lpTokenRecipient\\r\\n    );\\r\\n    event LiquidityChanged(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        address recipient,\\r\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\r\\n        int256 collateral,\\r\\n        int256 lpTokens,\\r\\n        uint256[] sharesReturned\\r\\n    );\\r\\n    event SharesSwapped(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        uint256 outcome,\\r\\n        // from the perspective of the user. e.g. collateral is negative when buying\\r\\n        int256 collateral,\\r\\n        int256 shares,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor(BFactory _bFactory, uint256 _fee) {\\r\\n        bFactory = _bFactory;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _initialLiquidity,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256) {\\r\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\r\\n\\r\\n        // Comparing to sets because sets are normalized to 10e18.\\r\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        require(\\r\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\r\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\r\\n        );\\r\\n\\r\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Create pool\\r\\n        BPool _pool = bFactory.newBPool();\\r\\n\\r\\n        // Add each outcome to the pool. Collateral is NOT added.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _token.approve(address(_pool), MAX_UINT);\\r\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\r\\n        }\\r\\n\\r\\n        // Set the swap fee.\\r\\n        _pool.setSwapFee(fee);\\r\\n\\r\\n        // Finalize pool setup\\r\\n        _pool.finalize();\\r\\n\\r\\n        pools[address(_marketFactory)][_marketId] = _pool;\\r\\n\\r\\n        // Pass along LP tokens for initial liquidity\\r\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\r\\n\\r\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\r\\n        _pool.transfer(address(0x0), (BONE / 1000));\\r\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\r\\n\\r\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _balances[i] = 0;\\r\\n        }\\r\\n\\r\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_initialLiquidity),\\r\\n            int256(_lpTokenBalance),\\r\\n            _balances\\r\\n        );\\r\\n\\r\\n        return _lpTokenBalance;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minLPTokensOut,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Find poolAmountOut\\r\\n        _poolAmountOut = MAX_UINT;\\r\\n\\r\\n        {\\r\\n            uint256 _totalSupply = _pool.totalSupply();\\r\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                _maxAmountsIn[i] = _sets;\\r\\n\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\r\\n\\r\\n                // This is the result the following when solving for poolAmountOut:\\r\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n                uint256 _tokenPoolAmountOut =\\r\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\r\\n\\r\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\r\\n                    _poolAmountOut = _tokenPoolAmountOut;\\r\\n                }\\r\\n            }\\r\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\r\\n        }\\r\\n\\r\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\r\\n\\r\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\r\\n\\r\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _balances[i] = _token.balanceOf(address(this));\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_poolAmountOut),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _lpTokensIn,\\r\\n        uint256 _minCollateralOut,\\r\\n        address _collateralRecipient\\r\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\r\\n\\r\\n        uint256[] memory exitPoolEstimate;\\r\\n        {\\r\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\r\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\r\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\r\\n        }\\r\\n\\r\\n        // Find the number of sets to sell.\\r\\n        uint256 _setsToSell = MAX_UINT;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\r\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\r\\n        }\\r\\n\\r\\n        // Must be a multiple of share factor.\\r\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n\\r\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\r\\n        if (_resolved) {\\r\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\r\\n        } else {\\r\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\r\\n        }\\r\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\r\\n\\r\\n        // Transfer the remaining shares back to _collateralRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\r\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_collateralRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _collateralRecipient,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function buyZCB(\\r\\n        AbstractMarketFactoryV3 _marketFactory, \\r\\n        address from, \\r\\n        address bondingcurve, \\r\\n        uint256 _marketId, \\r\\n        uint256 _collateralIn\\r\\n        ) external returns(uint256){\\r\\n\\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(from, address(this), _collateralIn);\\r\\n        _collateral.approve(bondingcurve, _collateralIn); \\r\\n\\r\\n        return IBondingCurve(bondingcurve).buy(address(_marketFactory), from, _collateralIn, _marketId);\\r\\n    }\\r\\n\\r\\n    function sellZCB(\\r\\n        AbstractMarketFactoryV3 _marketFactory, \\r\\n        address from, \\r\\n        address bondingcurve, \\r\\n        uint256 _marketId, \\r\\n        uint256 _zcb_amountIn\\r\\n        ) external returns(uint256){\\r\\n\\r\\n        uint256 fee_deducted_collateral_out = IBondingCurve(bondingcurve).sell(\\r\\n            address(_marketFactory),\\r\\n            from, \\r\\n            _zcb_amountIn, \\r\\n             _marketId); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transfer(from, fee_deducted_collateral_out); \\r\\n\\r\\n        return fee_deducted_collateral_out; \\r\\n    }\\r\\n\\r\\n\\r\\n    function buy(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minTokensOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        uint256 _totalDesiredOutcome = _sets;\\r\\n        {\\r\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 _acquiredToken, ) =\\r\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\r\\n                _totalDesiredOutcome += _acquiredToken;\\r\\n            }\\r\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\r\\n\\r\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\r\\n        }\\r\\n\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_totalDesiredOutcome),\\r\\n            bdiv(_sets, _totalDesiredOutcome)\\r\\n        );\\r\\n\\r\\n        return _totalDesiredOutcome;\\r\\n    }\\r\\n\\r\\n    function sellForCollateral(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256[] memory _shareTokensIn,\\r\\n        uint256 _minSetsOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _setsOut = MAX_UINT;\\r\\n        uint256 _totalUndesiredTokensIn = 0;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\r\\n        }\\r\\n\\r\\n        {\\r\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\r\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 tokenAmountOut, ) =\\r\\n                    _pool.swapExactAmountIn(\\r\\n                        address(_market.shareTokens[_outcome]),\\r\\n                        _shareTokensIn[i],\\r\\n                        address(_token),\\r\\n                        0,\\r\\n                        MAX_UINT\\r\\n                    );\\r\\n\\r\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\r\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\r\\n            }\\r\\n\\r\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\r\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\r\\n        }\\r\\n\\r\\n        // Transfer undesired token balance back.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            uint256 _balance = _token.balanceOf(address(this));\\r\\n            if (_balance > 0) {\\r\\n                _token.transfer(msg.sender, _balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_totalUndesiredTokensIn),\\r\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\r\\n        );\\r\\n\\r\\n        return _collateralOut;\\r\\n    }\\r\\n\\r\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\r\\n    // So the first outcome is 10**18 and all others are higher or lower.\\r\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\r\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        address _basisToken = address(_market.shareTokens[0]);\\r\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\r\\n        _ratios[0] = 10**18;\\r\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\r\\n            _ratios[i] = _price;\\r\\n        }\\r\\n        return _ratios;\\r\\n    }\\r\\n\\r\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\r\\n        }\\r\\n        return _balances;\\r\\n    }\\r\\n\\r\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\r\\n        }\\r\\n        return _weights;\\r\\n    }\\r\\n\\r\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.getSwapFee();\\r\\n    }\\r\\n\\r\\n    function getPoolTokenBalance(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.balanceOf(_user);\\r\\n    }\\r\\n\\r\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\r\\n        return pools[address(_marketFactory)][_marketId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc07d87d08f41ce5e5feae47a5ee1948e424e1860c2270a8bf33dab0590725568\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"../libraries/Rewardable.sol\\\";\\r\\nimport { LinearBondingCurve } from \\\"../bonds/LinearBondingCurve.sol\\\";\\r\\n\\r\\nabstract contract AbstractMarketFactoryV3 is ZCBFactory, TurboShareTokenFactory, Ownable, Rewardable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\r\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\r\\n    event MarketActivated(uint256 id);\\r\\n\\r\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\r\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\r\\n    event WinningsClaimed(\\r\\n        uint256 id,\\r\\n        address winningOutcome,\\r\\n        uint256 winningIndex,\\r\\n        string winningName,\\r\\n        uint256 amount,\\r\\n        uint256 settlementFee,\\r\\n        uint256 payout,\\r\\n        address indexed receiver\\r\\n    );\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    FeePot public feePot;\\r\\n\\r\\n    // fees are out of 1e18 and only apply to new markets\\r\\n    uint256 public stakerFee;\\r\\n    uint256 public settlementFee;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    address public protocol; // collects protocol fees\\r\\n\\r\\n    uint256 public accumulatedProtocolFee = 0;\\r\\n    // settlement address => amount of collateral\\r\\n    mapping(address => uint256) public accumulatedSettlementFees;\\r\\n\\r\\n    // How many shares equals one collateral.\\r\\n    // Necessary to account for math errors from small numbers in balancer.\\r\\n    // shares = collateral / shareFactor\\r\\n    // collateral = shares * shareFactor\\r\\n    uint256 public shareFactor;\\r\\n\\r\\n    struct Market {\\r\\n        address settlementAddress;\\r\\n        OwnedERC20[] shareTokens;\\r\\n        OwnedERC20 winner;\\r\\n        uint256 winnerIndex;\\r\\n        uint256 settlementFee;\\r\\n        uint256 protocolFee;\\r\\n        uint256 stakerFee;\\r\\n        uint256 creationTimestamp;\\r\\n        uint256 resolutionTimestamp; // when winner is declared\\r\\n        uint256[] initialOdds;\\r\\n        bool active; // false if not ready to use or if resolved\\r\\n    }\\r\\n\\r\\n    Market[] internal markets;\\r\\n    // ZCBMarket[] internal zcbmarkets; \\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n    mapping(uint256 => bool ) inAssessment; \\r\\n    mapping(uint256=> uint256) buy_thresholds;\\r\\n\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees, // staker, settlement, protocol\\r\\n        address _protocol\\r\\n    ) {\\r\\n        owner = _owner; // controls fees for new markets\\r\\n        collateral = _collateral;\\r\\n        shareFactor = _shareFactor;\\r\\n        feePot = _feePot;\\r\\n        stakerFee = _fees[0];\\r\\n        settlementFee = _fees[1];\\r\\n        protocolFee = _fees[2];\\r\\n        protocol = _protocol;\\r\\n\\r\\n        _collateral.approve(address(_feePot), MAX_UINT);\\r\\n\\r\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\r\\n        markets.push(makeEmptyMarket());\\r\\n\\r\\n        //FOR TESTING ONLY\\r\\n        buy_thresholds[0] = MAX_UINT;\\r\\n        buy_thresholds[1] = MAX_UINT; \\r\\n        buy_thresholds[2] = MAX_UINT; \\r\\n    }\\r\\n        \\r\\n\\r\\n   // function quantityAvailable(uint256 marketId)\\r\\n\\r\\n    //Called by lendingpool when market is created i.e , and when loan is approved \\r\\n    function handleAssessment(uint256 _marketId, bool startAssessing) \\r\\n    external\\r\\n    //onlyController\\r\\n     {\\r\\n        bool market_inAssessment = startAssessing? true : false; \\r\\n        inAssessment[_marketId] = market_inAssessment; \\r\\n    }\\r\\n    function handleOnlyReputable(uint256 _marketId)\\r\\n    external \\r\\n    //onlyController\\r\\n    {\\r\\n\\r\\n    }\\r\\n    //Called by controller after assessment phase \\r\\n    function set_buy_threshold(uint256 _marketId, uint256 threshold)\\r\\n    external \\r\\n    //onlyController\\r\\n    {\\r\\n        buy_thresholds[_marketId] = threshold;\\r\\n    }\\r\\n\\r\\n    function get_buy_threshold(uint256 _marketId) external view returns(uint256){\\r\\n        return buy_thresholds[_marketId]; \\r\\n    }\\r\\n    function isInAssessment(uint256 _marketId) external view returns(bool){\\r\\n        return inAssessment[_marketId]; \\r\\n    }\\r\\n\\r\\n    function onlyReputable(uint256 _marketId) external view returns(bool){\\r\\n        return false;\\r\\n    }\\r\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n        return TradeDetails[_marketId][_outcome]; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // Returns an empty struct if the market doesn't exist.\\r\\n    // Can check market existence before calling this by comparing _id against markets.length.\\r\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\r\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n            return makeEmptyMarket();\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketCount() public view returns (uint256) {\\r\\n        return markets.length; //+ zcbmarkets.length;\\r\\n    }\\r\\n\\r\\n    // Returns factory-specific details about a market.\\r\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\r\\n\\r\\n    function mintShares(\\r\\n        uint256 _id,\\r\\n        uint256 _shareToMint,\\r\\n        address _receiver\\r\\n    ) public {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        uint256 _cost = calcCost(_shareToMint);\\r\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\r\\n        }\\r\\n\\r\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\r\\n    }\\r\\n\\r\\n    function burnShares(\\r\\n        uint256 _id,\\r\\n        uint256 _sharesToBurn,\\r\\n        address _receiver\\r\\n    ) public returns (uint256) {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            // errors if sender doesn't have enough shares\\r\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\r\\n        }\\r\\n\\r\\n        uint256 _payout = calcCost(_sharesToBurn);\\r\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\r\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\r\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\r\\n\\r\\n        accumulatedProtocolFee += _protocolFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n        feePot.depositFees(_stakerFee);\\r\\n\\r\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\r\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\r\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\r\\n\\r\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\r\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\r\\n        _payout = _payout.sub(_settlementFee);\\r\\n\\r\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n\\r\\n        uint256 _winningIndex = _market.winnerIndex;\\r\\n        string memory _winningName = _market.winner.name();\\r\\n\\r\\n        emit WinningsClaimed(\\r\\n            _id,\\r\\n            address(_market.winner),\\r\\n            _winningIndex,\\r\\n            _winningName,\\r\\n            _winningShares,\\r\\n            _settlementFee,\\r\\n            _payout,\\r\\n            _receiver\\r\\n        );\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\r\\n        uint256 _totalWinnings = 0;\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\r\\n        }\\r\\n        return _totalWinnings;\\r\\n    }\\r\\n\\r\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\r\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\r\\n        if (_fees > 0) {\\r\\n            accumulatedSettlementFees[msg.sender] = 0;\\r\\n            collateral.transfer(_receiver, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees() public returns (uint256) {\\r\\n        require(msg.sender == protocol || msg.sender == address(this));\\r\\n        uint256 _fees = accumulatedProtocolFee;\\r\\n        if (_fees > 0) {\\r\\n            accumulatedProtocolFee = 0;\\r\\n            collateral.transfer(protocol, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\r\\n        settlementFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\r\\n        stakerFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\r\\n        protocolFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\r\\n        if (_claimFirst) {\\r\\n            claimProtocolFees();\\r\\n        }\\r\\n        protocol = _newProtocol;\\r\\n    }\\r\\n\\r\\n\\r\\n    function startMarket(\\r\\n        address _settlementAddress,\\r\\n        string[] memory _names,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active\\r\\n    ) internal returns (uint256 _marketId) {\\r\\n        _marketId = markets.length;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                createShareTokens(_names, address(this)),\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n            )\\r\\n        );\\r\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n    }\\r\\n       \\r\\n    \\r\\n    function activateMarket(uint256 _marketId) internal {\\r\\n        markets[_marketId].active = true;\\r\\n        emit MarketActivated(_marketId);\\r\\n    }\\r\\n\\r\\n    function makeEmptyMarket() private pure returns (Market memory) {\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\r\\n        uint256[] memory _initialOdds = new uint256[](0);\\r\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\r\\n    }\\r\\n\\r\\n\\r\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\r\\n        Market storage _market = markets[_marketId];\\r\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\r\\n\\r\\n        _market.winner = _winner;\\r\\n        _market.active = false;\\r\\n        _market.winnerIndex = _winningOutcome;\\r\\n        _market.resolutionTimestamp = block.timestamp;\\r\\n        string memory _outcomeName = _winner.name();\\r\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\r\\n    }\\r\\n\\r\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\r\\n        Market memory _market = markets[_id];\\r\\n        return _market.winner != OwnedERC20(address(0));\\r\\n    }\\r\\n\\r\\n    // shares => collateral\\r\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\r\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\r\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\r\\n        return _shares / shareFactor;\\r\\n    }\\r\\n\\r\\n    // collateral => shares\\r\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\r\\n        return _collateralIn * shareFactor;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n\\r\\n    /**\\r\\n     @notice \\r\\n     */\\r\\n    function startZCBMarket(\\r\\n        address _settlementAddress,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active,\\r\\n        OwnedERC20 _zcb\\r\\n    ) internal returns (uint256 _marketId){\\r\\n\\r\\n        _marketId = markets.length;\\r\\n        OwnedERC20[] memory zcb = new OwnedERC20[](2);\\r\\n        zcb[0] = _zcb;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                zcb,\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n                )\\r\\n            );\\r\\n\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getZCBMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n           revert(\\\"Market Not Activated\\\");\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2f0ac2b89b9ac1965eea4cfe93c2dd71a11fb90e5b87f3421c17defea93c1f\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\n\\r\\ncontract FeePot is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant magnitude = 2**128;\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    IERC20Full public reputationToken;\\r\\n\\r\\n    uint256 public magnifiedFeesPerShare;\\r\\n\\r\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\r\\n    mapping(address => uint256) public storedFees;\\r\\n\\r\\n    uint256 public feeReserve;\\r\\n\\r\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\r\\n        ERC20(\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\r\\n        )\\r\\n    {\\r\\n        collateral = _collateral;\\r\\n        reputationToken = _reputationToken;\\r\\n\\r\\n        require(_collateral != IERC20Full(address(0)));\\r\\n    }\\r\\n\\r\\n    function depositFees(uint256 _amount) public returns (bool) {\\r\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\r\\n        if (_totalSupply == 0) {\\r\\n            feeReserve = feeReserve.add(_amount);\\r\\n            return true;\\r\\n        }\\r\\n        if (feeReserve > 0) {\\r\\n            _amount = _amount.add(feeReserve);\\r\\n            feeReserve = 0;\\r\\n        }\\r\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\r\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\r\\n    }\\r\\n\\r\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\r\\n        uint256 _ownerBalance = balanceOf(_owner);\\r\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\r\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\r\\n        super._transfer(_from, _to, _amount);\\r\\n\\r\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\r\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external returns (bool) {\\r\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        _mint(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\r\\n            magnifiedFeesPerShare.mul(_amount)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function exit(uint256 _amount) external returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        _burn(msg.sender, _amount);\\r\\n        reputationToken.transfer(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeem() public returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeemInternal(address _account) internal {\\r\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\r\\n        if (_withdrawableFees > 0) {\\r\\n            storedFees[_account] = 0;\\r\\n            collateral.transfer(_account, _withdrawableFees);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0045efc6b0eb6013e765caa47470f1d66ac487fcd9fd2bfafc04c6c61b3c6865\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../libraries/Ownable.sol\\\";\\r\\n\\r\\ncontract OwnedERC20 is ERC20, Ownable {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _owner\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function trustedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        _transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedMint(address _target, uint256 _amount) external virtual onlyOwner {\\r\\n        _mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurn(address _target, uint256 _amount) external virtual onlyOwner {\\r\\n        _burn(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\r\\n        uint256 _balance = balanceOf(_target);\\r\\n        _burn(_target, _balance);\\r\\n        return _balance;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xe53cbce33918d8e12803f2b496c6c78c84933b43c7600bbd836618e9aa37b7b5\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./OwnedShareToken.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nabstract contract ZCBFactory {\\r\\n    function createZCB(string memory _name, address _owner) internal returns(OwnedERC20[] memory){\\r\\n        uint256 _numOutcomes = 1; \\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_name, _name, _owner);\\r\\n        }\\r\\n        return _tokens; \\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract TurboShareTokenFactory {\\r\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract TurboShareTokenFactoryV1 {\\r\\n    function createShareTokens(\\r\\n        string[] memory _names,\\r\\n        string[] memory _symbols,\\r\\n        address _owner\\r\\n    ) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x907fb0a55d5a5ed12e9163f4dea48d24181b055c9153088f65c6cdb8a088cd02\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620044813803806200448183398101604081905262000034916200005e565b600080546001600160a01b0319166001600160a01b03939093169290921790915560025562000098565b6000806040838503121562000071578182fd5b82516001600160a01b038116811462000088578283fd5b6020939093015192949293505050565b6143d980620000a86000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80639a86139b1161010f578063c6580d12116100a2578063e4a28a5211610071578063e4a28a52146101f5578063ec093021146103d1578063f6dc695c146103d9578063fa0de359146103ec57600080fd5b8063c6580d1214610383578063c7b4b6dd1461038b578063d055da71146103ab578063d2364bf3146103be57600080fd5b8063ba019dab116100de578063ba019dab1461036b578063bc063e1a14610373578063bc694ea21461037b578063c36596a61461024357600080fd5b80639a86139b14610339578063a0147aa114610348578063b0e0d1361461035b578063b7b800a41461036357600080fd5b806371e684e511610187578063867378c511610156578063867378c5146102ed5780638f38a555146102f55780639381cd2b14610329578063992e2a921461033157600080fd5b806371e684e5146102ac57806372b60c30146102bf57806376c7a3c7146102d2578063842980f4146102da57600080fd5b806345fa6783116101c357806345fa67831461025257806359f842b2146102735780635b5b9ea21461028657806360cac85a1461029957600080fd5b806309a3bbe4146101f55780630a16594014610210578063189d00ca1461023b578063218b538214610243575b600080fd5b6101fd6103ff565b6040519081526020015b60405180910390f35b600054610223906001600160a01b031681565b6040516001600160a01b039091168152602001610207565b6101fd610415565b6101fd670de0b6b3a764000081565b610265610260366004613f27565b61042c565b604051610207929190614208565b610265610281366004613f27565b610d7e565b610223610294366004613c6a565b6115d1565b6101fd6102a7366004613e67565b6115fe565b6101fd6102ba366004613d83565b611e06565b6101fd6102cd366004613f7c565b61201d565b6101fd612573565b6101fd6102e8366004613e1e565b612588565b6101fd613037565b610223610303366004613c6a565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6101fd61304e565b6101fd613061565b6542524f4e5a4560d01b6101fd565b6101fd610356366004613ddd565b61307f565b6101fd600881565b6101fd600281565b6101fd600181565b6101fd613121565b6101fd613134565b6101fd600081565b61039e610399366004613c6a565b613153565b60405161020791906141be565b61039e6103b9366004613c6a565b613412565b61039e6103cc366004613c6a565b61361a565b6101fd613818565b6101fd6103e7366004613d83565b61382b565b6101fd6103fa366004613c6a565b6139c6565b610412670de0b6b3a764000060326142f4565b81565b6104126402540be400670de0b6b3a76400006142d4565b6001600160a01b0380861660009081526001602090815260408083208884529091528120549091606091168061047d5760405162461bcd60e51b8152600401610474906141d1565b60405180910390fd5b60405163eb44fdd360e01b8152600481018890526000906001600160a01b038a169063eb44fdd39060240160006040518083038186803b1580156104c057600080fd5b505afa1580156104d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fc9190810190613fdb565b90506000896001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190613fbf565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906105a490339030908d90600401614154565b602060405180830381600087803b1580156105be57600080fd5b505af11580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190613d62565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b390610627908d90600019906004016141a5565b602060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190613d62565b50604051636643d6f560e11b8152600481018990526000906001600160a01b038c169063cc87adea9060240160206040518083038186803b1580156106bd57600080fd5b505afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f591906140df565b60405163221fff8160e01b81529091506001600160a01b038c169063221fff8190610728908d9085903090600401614221565b600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b5050505060001995506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d291906140df565b905060008460200151516001600160401b0381111561080157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561082a578160200160208202803683370190505b50905060005b8560200151518110156109af578382828151811061085e57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060008660200151828151811061089057634e487b7160e01b600052603260045260246000fd5b602090810291909101015160405163f8b2cb4f60e01b81526001600160a01b0380831660048301529192506000918a169063f8b2cb4f9060240160206040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a91906140df565b90506000670de0b6b3a76400006109326002886142d4565b83886109476002670de0b6b3a76400006142d4565b610959670de0b6b3a76400008d6142f4565b6109639190614313565b61096d91906142f4565b61097791906142d4565b6109819190614313565b61098b91906142d4565b90508b81101561099957809b505b50505080806109a79061432a565b915050610830565b506040516313da703560e21b81526001600160a01b03871690634f69c0d4906109de908b908590600401614208565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50505050505087861015610a735760405162461bcd60e51b815260206004820152602860248201527f576f756c64206e6f74206861766520726563656976656420656e6f756768204c6044820152675020746f6b656e7360c01b6064820152608401610474565b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb90610aa1908a908a906004016141a5565b602060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190613d62565b508260200151516001600160401b03811115610b1f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b48578160200160208202803683370190505b50945060005b836020015151811015610d1e57600084602001518281518110610b8157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0691906140df565b878381518110610c2657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506000878381518110610c5457634e487b7160e01b600052603260045260246000fd5b60200260200101511115610d0b57806001600160a01b031663a9059cbb8a898581518110610c9257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610cb79291906141a5565b602060405180830381600087803b158015610cd157600080fd5b505af1158015610ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190613d62565b505b5080610d168161432a565b915050610b4e565b50338a6001600160a01b038d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8a610d568e614345565b8b8b604051610d689493929190614178565b60405180910390a4505050509550959350505050565b6001600160a01b03808616600090815260016020908152604080832088845290915281205490916060911680610dc65760405162461bcd60e51b8152600401610474906141d1565b60405163eb44fdd360e01b8152600481018890526000906001600160a01b038a169063eb44fdd39060240160006040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e459190810190613fdb565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610e7890339030908c90600401614154565b602060405180830381600087803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eca9190613d62565b50606060008260200151516001600160401b03811115610efa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f23578160200160208202803683370190505b5060405163ea40f3f760e01b81529091506001600160a01b0385169063ea40f3f790610f55908c908590600401614208565b60006040518083038186803b158015610f6d57600080fd5b505afa158015610f81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fa99190810190613d30565b60405163b02f0b7360e01b81529092506001600160a01b0385169063b02f0b7390610fda908c908590600401614208565b600060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b5060001993506000925050505b83602001515181101561106d57600083828151811061104457634e487b7160e01b600052603260045260246000fd5b602002602001015190508281101561105a578092505b50806110658161432a565b915050611015565b508a6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df91906140df565b8b6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115091906140df565b61115a90836142d4565b61116491906142f4565b6040516353ac55f560e01b8152600481018c90529091506000906001600160a01b038d16906353ac55f59060240160206040518083038186803b1580156111aa57600080fd5b505afa1580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e29190613d62565b905080156112735760405163992c907960e01b8152600481018c90526001600160a01b0389811660248301528d169063992c907990604401602060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c91906140df565b96506112f8565b6040516335a9cdad60e01b81526001600160a01b038d16906335a9cdad906112a3908e9086908d90600401614221565b602060405180830381600087803b1580156112bd57600080fd5b505af11580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906140df565b96505b8887116113565760405162461bcd60e51b815260206004820152602660248201527f416d6f756e74206f6620636f6c6c61746572616c2072657475726e656420746f60448201526537903637bb9760d11b6064820152608401610474565b8360200151516001600160401b0381111561138157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113aa578160200160208202803683370190505b50955060005b846020015151811015611566576000856020015182815181106113e357634e487b7160e01b600052603260045260246000fd5b6020026020010151905082801561140f575085604001516001600160a01b0316816001600160a01b0316145b1561141a5750611554565b8385838151811061143b57634e487b7160e01b600052603260045260246000fd5b602002602001015161144d9190614313565b88838151811061146d57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600088838151811061149b57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561155257806001600160a01b031663a9059cbb8b8a85815181106114d957634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016114fe9291906141a5565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115509190613d62565b505b505b8061155e8161432a565b9150506113b0565b50336001600160a01b03168b8d6001600160a01b03167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b8b8f6115a990614345565b8c6040516115ba9493929190614178565b60405180910390a450505050509550959350505050565b6001600160a01b038083166000908152600160209081526040808320858452909152902054165b92915050565b6001600160a01b038086166000908152600160209081526040808320888452909152812054909116806116435760405162461bcd60e51b8152600401610474906141d1565b60405163eb44fdd360e01b8152600481018790526000906001600160a01b0389169063eb44fdd39060240160006040518083038186803b15801561168657600080fd5b505afa15801561169a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c29190810190613fdb565b90506000196000805b83602001515181101561171f578781815181106116f857634e487b7160e01b600052603260045260246000fd5b60200260200101518261170b91906142bc565b9150806117178161432a565b9150506116cb565b508260200151888151811061174457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd3330846040518463ffffffff1660e01b815260040161177b93929190614154565b602060405180830381600087803b15801561179557600080fd5b505af11580156117a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cd9190613d62565b50826020015188815181106117f257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663095ea7b3856000196040518363ffffffff1660e01b81526004016118299291906141a5565b602060405180830381600087803b15801561184357600080fd5b505af1158015611857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187b9190613d62565b5060005b836020015151811015611ae4578881141561189957611ad2565b6000846020015182815181106118bf57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000866001600160a01b0316638201aa3f87602001518d815181106118fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518c868151811061192657634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201526024810191909152908516604482015260006064820152600019608482015260a4016040805180830381600087803b15801561199057600080fd5b505af11580156119a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c891906140f7565b5090508c6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0457600080fd5b505afa158015611a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3c91906140df565b8d6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7557600080fd5b505afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad91906140df565b611ab790836142d4565b611ac191906142f4565b905084811015611acf578094505b50505b80611adc8161432a565b91505061187f565b5085821015611b355760405162461bcd60e51b815260206004820152601b60248201527f4d696e696d756d2073657473206e6f7420617661696c61626c652e00000000006044820152606401610474565b6040516335a9cdad60e01b81526001600160a01b038b16906335a9cdad90611b65908c9086903390600401614221565b602060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb791906140df565b5060005b836020015151811015611d1557600084602001518281518110611bee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015611c3e57600080fd5b505afa158015611c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7691906140df565b90508015611d005760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90611cac90339085906004016141a5565b602060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190613d62565b505b50508080611d0d9061432a565b915050611bbb565b5060405163239d36a960e11b8152600481018390526000906001600160a01b038c169063473a6d529060240160206040518083038186803b158015611d5957600080fd5b505afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9191906140df565b9050338a6001600160a01b038d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c85611dcb88614345565b611dd58a8a613a60565b60408051948552602085019390935291830152606082015260800160405180910390a49a9950505050505050505050565b600080866001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190613fbf565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90611ead90899030908890600401614154565b602060405180830381600087803b158015611ec757600080fd5b505af1158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190613d62565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b390611f2e90889087906004016141a5565b602060405180830381600087803b158015611f4857600080fd5b505af1158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f809190613d62565b506040516354ea127160e11b81526001600160a01b0388811660048301528781166024830152604482018590526064820186905286169063a9d424e290608401602060405180830381600087803b158015611fda57600080fd5b505af1158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201291906140df565b979650505050505050565b6001600160a01b038086166000908152600160209081526040808320888452909152812054909116806120625760405162461bcd60e51b8152600401610474906141d1565b60405163eb44fdd360e01b8152600481018790526000906001600160a01b0389169063eb44fdd39060240160006040518083038186803b1580156120a557600080fd5b505afa1580156120b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120e19190810190613fdb565b60405163ea05487960e01b81526004810189905260248101889052604481018790529091506001600160a01b0389169063ea05487990606401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b505050506000886001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561218757600080fd5b505afa15801561219b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bf9190613fbf565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906121f290339030908b90600401614154565b602060405180830381600087803b15801561220c57600080fd5b505af1158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190613d62565b50604051636643d6f560e11b8152600481018790526000906001600160a01b038b169063cc87adea9060240160206040518083038186803b15801561228857600080fd5b505afa15801561229c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c091906140df565b60405163221fff8160e01b81529091506001600160a01b038b169063221fff81906122f3908c9085903090600401614221565b600060405180830381600087803b15801561230d57600080fd5b505af1158015612321573d6000803e3d6000fd5b505050506000819050600084602001518a8151811061235057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b856020015151811015612469578a81141561237757612457565b60008660200151828151811061239d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604051638201aa3f60e01b81526001600160a01b03808316600483015260248201889052858116604483015260006064830181905260001960848401529293508a1690638201aa3f9060a4016040805180830381600087803b15801561240d57600080fd5b505af1158015612421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244591906140f7565b50905061245281866142bc565b945050505b806124618161432a565b91505061235d565b50878210156124ae5760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b6044820152606401610474565b60405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb906124dc90339086906004016141a5565b602060405180830381600087803b1580156124f657600080fd5b505af115801561250a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252e9190613d62565b503390508a6001600160a01b038d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c6125688d614345565b86611dd58989613a60565b610412620f4240670de0b6b3a76400006142d4565b6001600160a01b038481166000908152600160209081526040808320878452909152812054909116156125f45760405162461bcd60e51b8152602060048201526014602482015273141bdbdb08185b1c9958591e4818dc99585d195960621b6044820152606401610474565b60405163eb44fdd360e01b8152600481018590526000906001600160a01b0387169063eb44fdd39060240160006040518083038186803b15801561263757600080fd5b505afa15801561264b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126739190810190613fdb565b604051636643d6f560e11b8152600481018690529091506000906001600160a01b0388169063cc87adea9060240160206040518083038186803b1580156126b957600080fd5b505afa1580156126cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f191906140df565b9050612706670de0b6b3a764000060646142f4565b8110156127705760405162461bcd60e51b815260206004820152603260248201527f496e697469616c206c6971756964697479206d757374206265206174206c656160448201527139ba101898181031b7b63630ba32b930b61760711b6064820152608401610474565b6000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ab57600080fd5b505afa1580156127bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e39190613fbf565b604051636eb1769f60e11b815233600482015230602482015290915086906001600160a01b0383169063dd62ed3e9060440160206040518083038186803b15801561282d57600080fd5b505afa158015612841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286591906140df565b10156128d95760405162461bcd60e51b815260206004820152603760248201527f696e73756666696369656e7420636f6c6c61746572616c20616c6c6f77616e6360448201527f6520666f7220696e697469616c206c69717569646974790000000000000000006064820152608401610474565b6040516323b872dd60e01b81526001600160a01b038216906323b872dd9061290990339030908b90600401614154565b602060405180830381600087803b15801561292357600080fd5b505af1158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190613d62565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b39061298c908b90600019906004016141a5565b602060405180830381600087803b1580156129a657600080fd5b505af11580156129ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129de9190613d62565b5060405163221fff8160e01b81526001600160a01b0389169063221fff8190612a0f908a9086903090600401614221565b600060405180830381600087803b158015612a2957600080fd5b505af1158015612a3d573d6000803e3d6000fd5b5050505060008060009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612a9257600080fd5b505af1158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca9190613fbf565b905060005b846020015151811015612c4a57600085602001518281518110612b0257634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b031663095ea7b3846000196040518363ffffffff1660e01b8152600401612b3c9291906141a5565b602060405180830381600087803b158015612b5657600080fd5b505af1158015612b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8e9190613d62565b50826001600160a01b031663e4e1e53882878961012001518681518110612bc557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b50505050508080612c429061432a565b915050612acf565b506002546040516334e1990760e01b815260048101919091526001600160a01b038216906334e1990790602401600060405180830381600087803b158015612c9157600080fd5b505af1158015612ca5573d6000803e3d6000fd5b50505050806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b505050506001600160a01b0389811660009081526001602090815260408083208c8452909152812080546001600160a01b03191692841692909217909155612d4a6103e8670de0b6b3a76400006142d4565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b158015612d8957600080fd5b505afa158015612d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc191906140df565b612dcb9190614313565b90506001600160a01b03821663a9059cbb6000612df26103e8670de0b6b3a76400006142d4565b6040518363ffffffff1660e01b8152600401612e0f9291906141a5565b602060405180830381600087803b158015612e2957600080fd5b505af1158015612e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e619190613d62565b5060405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90612e90908a9085906004016141a5565b602060405180830381600087803b158015612eaa57600080fd5b505af1158015612ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee29190613d62565b5060008560200151516001600160401b03811115612f1057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612f39578160200160208202803683370190505b50905060005b866020015151811015612f8b576000828281518110612f6e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612f838161432a565b915050612f3f565b50604080516001600160a01b0385811682528a8116602083015233928d92918f16917ffb27591822deac7913ea973cf845992f243e2ba5634ef8fbe0b6554aca37a428910160405180910390a4338a6001600160a01b038d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b61300f8e614345565b87876040516130219493929190614178565b60405180910390a4509998505050505050505050565b61041264e8d4a51000670de0b6b3a76400006142d4565b610412670de0b6b3a764000060646142f4565b6130746003670de0b6b3a76400006142d4565b6104129060016142bc565b6001600160a01b0383811660009081526001602090815260408083208684529091528082205490516370a0823160e01b815284841660048201529192169081906370a082319060240160206040518083038186803b1580156130e057600080fd5b505afa1580156130f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311891906140df565b95945050505050565b610412600a670de0b6b3a76400006142d4565b6001613149670de0b6b3a764000060026142f4565b6104129190614313565b6001600160a01b03808316600090815260016020908152604080832085845290915290205460609116806131b65760005b6040519080825280602002602001820160405280156131ad578160200160208202803683370190505b509150506115f8565b60405163eb44fdd360e01b8152600481018490526000906001600160a01b0386169063eb44fdd39060240160006040518083038186803b1580156131f957600080fd5b505afa15801561320d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132359190810190613fdb565b90506000816020015160008151811061325e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008260200151516001600160401b0381111561329557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156132be578160200160208202803683370190505b509050670de0b6b3a7640000816000815181106132eb57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260015b836020015151811015613407576000856001600160a01b03166315e84af9858760200151858151811061333c57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016133769291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561338e57600080fd5b505afa1580156133a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c691906140df565b9050808383815181106133e957634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806133ff8161432a565b9150506132f9565b509695505050505050565b6001600160a01b0380831660009081526001602090815260408083208584529091529020546060911680613447576000613184565b6000816001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561348257600080fd5b505afa158015613496573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134be9190810190613c95565b9050600081516001600160401b038111156134e957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613512578160200160208202803683370190505b50905060005b825181101561361057836001600160a01b031663948d8ce684838151811061355057634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161358391906001600160a01b0391909116815260200190565b60206040518083038186803b15801561359b57600080fd5b505afa1580156135af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d391906140df565b8282815181106135f357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806136088161432a565b915050613518565b5095945050505050565b6001600160a01b038083166000908152600160209081526040808320858452909152902054606091168061364f576000613184565b6000816001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561368a57600080fd5b505afa15801561369e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136c69190810190613c95565b9050600081516001600160401b038111156136f157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561371a578160200160208202803683370190505b50905060005b825181101561361057836001600160a01b031663f8b2cb4f84838151811061375857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161378b91906001600160a01b0391909116815260200190565b60206040518083038186803b1580156137a357600080fd5b505afa1580156137b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137db91906140df565b8282815181106137fb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806138108161432a565b915050613720565b6104126002670de0b6b3a76400006142d4565b6040516331de7d1560e01b81526001600160a01b0386811660048301528581166024830152604482018390526064820184905260009182918616906331de7d1590608401602060405180830381600087803b15801561388957600080fd5b505af115801561389d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c191906140df565b90506000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156138fe57600080fd5b505afa158015613912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139369190613fbf565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90613967908a9086906004016141a5565b602060405180830381600087803b15801561398157600080fd5b505af1158015613995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b99190613d62565b5090979650505050505050565b6001600160a01b0380831660009081526001602090815260408083208584528252808320548151631a995bed60e31b8152915193941692839263d4cadf689260048082019391829003018186803b158015613a2057600080fd5b505afa158015613a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5891906140df565b949350505050565b600081613a9e5760405162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b6044820152606401610474565b6000613ab2670de0b6b3a7640000856142f4565b9050831580613ad15750670de0b6b3a7640000613acf85836142d4565b145b613b105760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b6044820152606401610474565b6000613b1d6002856142d4565b613b2790836142bc565b905081811015613b6c5760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b6044820152606401610474565b6000613b7885836142d4565b9695505050505050565b8051613b8d8161438b565b919050565b600082601f830112613ba2578081fd5b81516020613bb7613bb283614299565b614269565b80838252828201915082860187848660051b8901011115613bd6578586fd5b855b858110156139b9578151613beb8161438b565b84529284019290840190600101613bd8565b600082601f830112613c0d578081fd5b81516020613c1d613bb283614299565b80838252828201915082860187848660051b8901011115613c3c578586fd5b855b858110156139b957815184529284019290840190600101613c3e565b80518015158114613b8d57600080fd5b60008060408385031215613c7c578182fd5b8235613c878161438b565b946020939093013593505050565b60006020808385031215613ca7578182fd5b82516001600160401b03811115613cbc578283fd5b8301601f81018513613ccc578283fd5b8051613cda613bb282614299565b80828252848201915084840188868560051b8701011115613cf9578687fd5b8694505b83851015613d24578051613d108161438b565b835260019490940193918501918501613cfd565b50979650505050505050565b600060208284031215613d41578081fd5b81516001600160401b03811115613d56578182fd5b613a5884828501613bfd565b600060208284031215613d73578081fd5b613d7c82613c5a565b9392505050565b600080600080600060a08688031215613d9a578081fd5b8535613da58161438b565b94506020860135613db58161438b565b93506040860135613dc58161438b565b94979396509394606081013594506080013592915050565b600080600060608486031215613df1578081fd5b8335613dfc8161438b565b9250602084013591506040840135613e138161438b565b809150509250925092565b60008060008060808587031215613e33578182fd5b8435613e3e8161438b565b935060208501359250604085013591506060850135613e5c8161438b565b939692955090935050565b600080600080600060a08688031215613e7e578283fd5b8535613e898161438b565b945060208681013594506040870135935060608701356001600160401b03811115613eb2578283fd5b8701601f81018913613ec2578283fd5b8035613ed0613bb282614299565b8082825284820191508484018c868560051b8701011115613eef578687fd5b8694505b83851015613f11578035835260019490940193918501918501613ef3565b50989b979a509598608001359695505050505050565b600080600080600060a08688031215613f3e578283fd5b8535613f498161438b565b94506020860135935060408601359250606086013591506080860135613f6e8161438b565b809150509295509295909350565b600080600080600060a08688031215613f93578283fd5b8535613f9e8161438b565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215613fd0578081fd5b8151613d7c8161438b565b600060208284031215613fec578081fd5b81516001600160401b0380821115614002578283fd5b908301906101608286031215614016578283fd5b61401e614240565b61402783613b82565b815260208301518281111561403a578485fd5b61404687828601613b92565b60208301525061405860408401613b82565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151838111156140ae578586fd5b6140ba88828701613bfd565b82840152505061014091506140d0828401613c5a565b91810191909152949350505050565b6000602082840312156140f0578081fd5b5051919050565b60008060408385031215614109578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156141495781518752958201959082019060010161412d565b509495945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60018060a01b0385168152836020820152826040820152608060608201526000613b78608083018461411a565b6001600160a01b03929092168252602082015260400190565b602081526000613d7c602083018461411a565b60208082526018908201527f506f6f6c206e6565647320746f20626520637265617465640000000000000000604082015260600190565b828152604060208201526000613a58604083018461411a565b92835260208301919091526001600160a01b0316604082015260600190565b60405161016081016001600160401b038111828210171561426357614263614375565b60405290565b604051601f8201601f191681016001600160401b038111828210171561429157614291614375565b604052919050565b60006001600160401b038211156142b2576142b2614375565b5060051b60200190565b600082198211156142cf576142cf61435f565b500190565b6000826142ef57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561430e5761430e61435f565b500290565b6000828210156143255761432561435f565b500390565b600060001982141561433e5761433e61435f565b5060010190565b6000600160ff1b82141561435b5761435b61435f565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146143a057600080fd5b5056fea26469706673582212202f5ac03d87f2fd21e89fee97c4406a421d6ae33ec3a26cf59162b1e7de35383264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80639a86139b1161010f578063c6580d12116100a2578063e4a28a5211610071578063e4a28a52146101f5578063ec093021146103d1578063f6dc695c146103d9578063fa0de359146103ec57600080fd5b8063c6580d1214610383578063c7b4b6dd1461038b578063d055da71146103ab578063d2364bf3146103be57600080fd5b8063ba019dab116100de578063ba019dab1461036b578063bc063e1a14610373578063bc694ea21461037b578063c36596a61461024357600080fd5b80639a86139b14610339578063a0147aa114610348578063b0e0d1361461035b578063b7b800a41461036357600080fd5b806371e684e511610187578063867378c511610156578063867378c5146102ed5780638f38a555146102f55780639381cd2b14610329578063992e2a921461033157600080fd5b806371e684e5146102ac57806372b60c30146102bf57806376c7a3c7146102d2578063842980f4146102da57600080fd5b806345fa6783116101c357806345fa67831461025257806359f842b2146102735780635b5b9ea21461028657806360cac85a1461029957600080fd5b806309a3bbe4146101f55780630a16594014610210578063189d00ca1461023b578063218b538214610243575b600080fd5b6101fd6103ff565b6040519081526020015b60405180910390f35b600054610223906001600160a01b031681565b6040516001600160a01b039091168152602001610207565b6101fd610415565b6101fd670de0b6b3a764000081565b610265610260366004613f27565b61042c565b604051610207929190614208565b610265610281366004613f27565b610d7e565b610223610294366004613c6a565b6115d1565b6101fd6102a7366004613e67565b6115fe565b6101fd6102ba366004613d83565b611e06565b6101fd6102cd366004613f7c565b61201d565b6101fd612573565b6101fd6102e8366004613e1e565b612588565b6101fd613037565b610223610303366004613c6a565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b6101fd61304e565b6101fd613061565b6542524f4e5a4560d01b6101fd565b6101fd610356366004613ddd565b61307f565b6101fd600881565b6101fd600281565b6101fd600181565b6101fd613121565b6101fd613134565b6101fd600081565b61039e610399366004613c6a565b613153565b60405161020791906141be565b61039e6103b9366004613c6a565b613412565b61039e6103cc366004613c6a565b61361a565b6101fd613818565b6101fd6103e7366004613d83565b61382b565b6101fd6103fa366004613c6a565b6139c6565b610412670de0b6b3a764000060326142f4565b81565b6104126402540be400670de0b6b3a76400006142d4565b6001600160a01b0380861660009081526001602090815260408083208884529091528120549091606091168061047d5760405162461bcd60e51b8152600401610474906141d1565b60405180910390fd5b60405163eb44fdd360e01b8152600481018890526000906001600160a01b038a169063eb44fdd39060240160006040518083038186803b1580156104c057600080fd5b505afa1580156104d4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fc9190810190613fdb565b90506000896001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561053957600080fd5b505afa15801561054d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105719190613fbf565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906105a490339030908d90600401614154565b602060405180830381600087803b1580156105be57600080fd5b505af11580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190613d62565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b390610627908d90600019906004016141a5565b602060405180830381600087803b15801561064157600080fd5b505af1158015610655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106799190613d62565b50604051636643d6f560e11b8152600481018990526000906001600160a01b038c169063cc87adea9060240160206040518083038186803b1580156106bd57600080fd5b505afa1580156106d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f591906140df565b60405163221fff8160e01b81529091506001600160a01b038c169063221fff8190610728908d9085903090600401614221565b600060405180830381600087803b15801561074257600080fd5b505af1158015610756573d6000803e3d6000fd5b5050505060001995506000846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d291906140df565b905060008460200151516001600160401b0381111561080157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561082a578160200160208202803683370190505b50905060005b8560200151518110156109af578382828151811061085e57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060008660200151828151811061089057634e487b7160e01b600052603260045260246000fd5b602090810291909101015160405163f8b2cb4f60e01b81526001600160a01b0380831660048301529192506000918a169063f8b2cb4f9060240160206040518083038186803b1580156108e257600080fd5b505afa1580156108f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091a91906140df565b90506000670de0b6b3a76400006109326002886142d4565b83886109476002670de0b6b3a76400006142d4565b610959670de0b6b3a76400008d6142f4565b6109639190614313565b61096d91906142f4565b61097791906142d4565b6109819190614313565b61098b91906142d4565b90508b81101561099957809b505b50505080806109a79061432a565b915050610830565b506040516313da703560e21b81526001600160a01b03871690634f69c0d4906109de908b908590600401614208565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b50505050505087861015610a735760405162461bcd60e51b815260206004820152602860248201527f576f756c64206e6f74206861766520726563656976656420656e6f756768204c6044820152675020746f6b656e7360c01b6064820152608401610474565b60405163a9059cbb60e01b81526001600160a01b0385169063a9059cbb90610aa1908a908a906004016141a5565b602060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190613d62565b508260200151516001600160401b03811115610b1f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b48578160200160208202803683370190505b50945060005b836020015151811015610d1e57600084602001518281518110610b8157634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506001600160a01b038216906370a082319060240160206040518083038186803b158015610bce57600080fd5b505afa158015610be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0691906140df565b878381518110610c2657634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506000878381518110610c5457634e487b7160e01b600052603260045260246000fd5b60200260200101511115610d0b57806001600160a01b031663a9059cbb8a898581518110610c9257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401610cb79291906141a5565b602060405180830381600087803b158015610cd157600080fd5b505af1158015610ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d099190613d62565b505b5080610d168161432a565b915050610b4e565b50338a6001600160a01b038d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8a610d568e614345565b8b8b604051610d689493929190614178565b60405180910390a4505050509550959350505050565b6001600160a01b03808616600090815260016020908152604080832088845290915281205490916060911680610dc65760405162461bcd60e51b8152600401610474906141d1565b60405163eb44fdd360e01b8152600481018890526000906001600160a01b038a169063eb44fdd39060240160006040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e459190810190613fdb565b6040516323b872dd60e01b81529091506001600160a01b038316906323b872dd90610e7890339030908c90600401614154565b602060405180830381600087803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eca9190613d62565b50606060008260200151516001600160401b03811115610efa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f23578160200160208202803683370190505b5060405163ea40f3f760e01b81529091506001600160a01b0385169063ea40f3f790610f55908c908590600401614208565b60006040518083038186803b158015610f6d57600080fd5b505afa158015610f81573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fa99190810190613d30565b60405163b02f0b7360e01b81529092506001600160a01b0385169063b02f0b7390610fda908c908590600401614208565b600060405180830381600087803b158015610ff457600080fd5b505af1158015611008573d6000803e3d6000fd5b5060001993506000925050505b83602001515181101561106d57600083828151811061104457634e487b7160e01b600052603260045260246000fd5b602002602001015190508281101561105a578092505b50806110658161432a565b915050611015565b508a6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b1580156110a757600080fd5b505afa1580156110bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110df91906140df565b8b6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561111857600080fd5b505afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115091906140df565b61115a90836142d4565b61116491906142f4565b6040516353ac55f560e01b8152600481018c90529091506000906001600160a01b038d16906353ac55f59060240160206040518083038186803b1580156111aa57600080fd5b505afa1580156111be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e29190613d62565b905080156112735760405163992c907960e01b8152600481018c90526001600160a01b0389811660248301528d169063992c907990604401602060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126c91906140df565b96506112f8565b6040516335a9cdad60e01b81526001600160a01b038d16906335a9cdad906112a3908e9086908d90600401614221565b602060405180830381600087803b1580156112bd57600080fd5b505af11580156112d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f591906140df565b96505b8887116113565760405162461bcd60e51b815260206004820152602660248201527f416d6f756e74206f6620636f6c6c61746572616c2072657475726e656420746f60448201526537903637bb9760d11b6064820152608401610474565b8360200151516001600160401b0381111561138157634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113aa578160200160208202803683370190505b50955060005b846020015151811015611566576000856020015182815181106113e357634e487b7160e01b600052603260045260246000fd5b6020026020010151905082801561140f575085604001516001600160a01b0316816001600160a01b0316145b1561141a5750611554565b8385838151811061143b57634e487b7160e01b600052603260045260246000fd5b602002602001015161144d9190614313565b88838151811061146d57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600088838151811061149b57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561155257806001600160a01b031663a9059cbb8b8a85815181106114d957634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016114fe9291906141a5565b602060405180830381600087803b15801561151857600080fd5b505af115801561152c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115509190613d62565b505b505b8061155e8161432a565b9150506113b0565b50336001600160a01b03168b8d6001600160a01b03167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b8b8f6115a990614345565b8c6040516115ba9493929190614178565b60405180910390a450505050509550959350505050565b6001600160a01b038083166000908152600160209081526040808320858452909152902054165b92915050565b6001600160a01b038086166000908152600160209081526040808320888452909152812054909116806116435760405162461bcd60e51b8152600401610474906141d1565b60405163eb44fdd360e01b8152600481018790526000906001600160a01b0389169063eb44fdd39060240160006040518083038186803b15801561168657600080fd5b505afa15801561169a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c29190810190613fdb565b90506000196000805b83602001515181101561171f578781815181106116f857634e487b7160e01b600052603260045260246000fd5b60200260200101518261170b91906142bc565b9150806117178161432a565b9150506116cb565b508260200151888151811061174457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd3330846040518463ffffffff1660e01b815260040161177b93929190614154565b602060405180830381600087803b15801561179557600080fd5b505af11580156117a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cd9190613d62565b50826020015188815181106117f257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031663095ea7b3856000196040518363ffffffff1660e01b81526004016118299291906141a5565b602060405180830381600087803b15801561184357600080fd5b505af1158015611857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187b9190613d62565b5060005b836020015151811015611ae4578881141561189957611ad2565b6000846020015182815181106118bf57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000866001600160a01b0316638201aa3f87602001518d815181106118fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518c868151811061192657634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e085901b1681526001600160a01b0392831660048201526024810191909152908516604482015260006064820152600019608482015260a4016040805180830381600087803b15801561199057600080fd5b505af11580156119a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c891906140f7565b5090508c6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b158015611a0457600080fd5b505afa158015611a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3c91906140df565b8d6001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b158015611a7557600080fd5b505afa158015611a89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aad91906140df565b611ab790836142d4565b611ac191906142f4565b905084811015611acf578094505b50505b80611adc8161432a565b91505061187f565b5085821015611b355760405162461bcd60e51b815260206004820152601b60248201527f4d696e696d756d2073657473206e6f7420617661696c61626c652e00000000006044820152606401610474565b6040516335a9cdad60e01b81526001600160a01b038b16906335a9cdad90611b65908c9086903390600401614221565b602060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb791906140df565b5060005b836020015151811015611d1557600084602001518281518110611bee57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a082319060240160206040518083038186803b158015611c3e57600080fd5b505afa158015611c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7691906140df565b90508015611d005760405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90611cac90339085906004016141a5565b602060405180830381600087803b158015611cc657600080fd5b505af1158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe9190613d62565b505b50508080611d0d9061432a565b915050611bbb565b5060405163239d36a960e11b8152600481018390526000906001600160a01b038c169063473a6d529060240160206040518083038186803b158015611d5957600080fd5b505afa158015611d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9191906140df565b9050338a6001600160a01b038d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c85611dcb88614345565b611dd58a8a613a60565b60408051948552602085019390935291830152606082015260800160405180910390a49a9950505050505050505050565b600080866001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e7a9190613fbf565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd90611ead90899030908890600401614154565b602060405180830381600087803b158015611ec757600080fd5b505af1158015611edb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eff9190613d62565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b390611f2e90889087906004016141a5565b602060405180830381600087803b158015611f4857600080fd5b505af1158015611f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f809190613d62565b506040516354ea127160e11b81526001600160a01b0388811660048301528781166024830152604482018590526064820186905286169063a9d424e290608401602060405180830381600087803b158015611fda57600080fd5b505af1158015611fee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201291906140df565b979650505050505050565b6001600160a01b038086166000908152600160209081526040808320888452909152812054909116806120625760405162461bcd60e51b8152600401610474906141d1565b60405163eb44fdd360e01b8152600481018790526000906001600160a01b0389169063eb44fdd39060240160006040518083038186803b1580156120a557600080fd5b505afa1580156120b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120e19190810190613fdb565b60405163ea05487960e01b81526004810189905260248101889052604481018790529091506001600160a01b0389169063ea05487990606401600060405180830381600087803b15801561213457600080fd5b505af1158015612148573d6000803e3d6000fd5b505050506000886001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561218757600080fd5b505afa15801561219b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bf9190613fbf565b6040516323b872dd60e01b81529091506001600160a01b038216906323b872dd906121f290339030908b90600401614154565b602060405180830381600087803b15801561220c57600080fd5b505af1158015612220573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122449190613d62565b50604051636643d6f560e11b8152600481018790526000906001600160a01b038b169063cc87adea9060240160206040518083038186803b15801561228857600080fd5b505afa15801561229c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c091906140df565b60405163221fff8160e01b81529091506001600160a01b038b169063221fff81906122f3908c9085903090600401614221565b600060405180830381600087803b15801561230d57600080fd5b505af1158015612321573d6000803e3d6000fd5b505050506000819050600084602001518a8151811061235057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b856020015151811015612469578a81141561237757612457565b60008660200151828151811061239d57634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604051638201aa3f60e01b81526001600160a01b03808316600483015260248201889052858116604483015260006064830181905260001960848401529293508a1690638201aa3f9060a4016040805180830381600087803b15801561240d57600080fd5b505af1158015612421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244591906140f7565b50905061245281866142bc565b945050505b806124618161432a565b91505061235d565b50878210156124ae5760405162461bcd60e51b815260206004820152601160248201527014db1a5c1c1859d948195e18d959591959607a1b6044820152606401610474565b60405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb906124dc90339086906004016141a5565b602060405180830381600087803b1580156124f657600080fd5b505af115801561250a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252e9190613d62565b503390508a6001600160a01b038d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c6125688d614345565b86611dd58989613a60565b610412620f4240670de0b6b3a76400006142d4565b6001600160a01b038481166000908152600160209081526040808320878452909152812054909116156125f45760405162461bcd60e51b8152602060048201526014602482015273141bdbdb08185b1c9958591e4818dc99585d195960621b6044820152606401610474565b60405163eb44fdd360e01b8152600481018590526000906001600160a01b0387169063eb44fdd39060240160006040518083038186803b15801561263757600080fd5b505afa15801561264b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526126739190810190613fdb565b604051636643d6f560e11b8152600481018690529091506000906001600160a01b0388169063cc87adea9060240160206040518083038186803b1580156126b957600080fd5b505afa1580156126cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f191906140df565b9050612706670de0b6b3a764000060646142f4565b8110156127705760405162461bcd60e51b815260206004820152603260248201527f496e697469616c206c6971756964697479206d757374206265206174206c656160448201527139ba101898181031b7b63630ba32b930b61760711b6064820152608401610474565b6000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ab57600080fd5b505afa1580156127bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e39190613fbf565b604051636eb1769f60e11b815233600482015230602482015290915086906001600160a01b0383169063dd62ed3e9060440160206040518083038186803b15801561282d57600080fd5b505afa158015612841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061286591906140df565b10156128d95760405162461bcd60e51b815260206004820152603760248201527f696e73756666696369656e7420636f6c6c61746572616c20616c6c6f77616e6360448201527f6520666f7220696e697469616c206c69717569646974790000000000000000006064820152608401610474565b6040516323b872dd60e01b81526001600160a01b038216906323b872dd9061290990339030908b90600401614154565b602060405180830381600087803b15801561292357600080fd5b505af1158015612937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295b9190613d62565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b39061298c908b90600019906004016141a5565b602060405180830381600087803b1580156129a657600080fd5b505af11580156129ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129de9190613d62565b5060405163221fff8160e01b81526001600160a01b0389169063221fff8190612a0f908a9086903090600401614221565b600060405180830381600087803b158015612a2957600080fd5b505af1158015612a3d573d6000803e3d6000fd5b5050505060008060009054906101000a90046001600160a01b03166001600160a01b031663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612a9257600080fd5b505af1158015612aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aca9190613fbf565b905060005b846020015151811015612c4a57600085602001518281518110612b0257634e487b7160e01b600052603260045260246000fd5b60200260200101519050806001600160a01b031663095ea7b3846000196040518363ffffffff1660e01b8152600401612b3c9291906141a5565b602060405180830381600087803b158015612b5657600080fd5b505af1158015612b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b8e9190613d62565b50826001600160a01b031663e4e1e53882878961012001518681518110612bc557634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091526044820152606401600060405180830381600087803b158015612c1e57600080fd5b505af1158015612c32573d6000803e3d6000fd5b50505050508080612c429061432a565b915050612acf565b506002546040516334e1990760e01b815260048101919091526001600160a01b038216906334e1990790602401600060405180830381600087803b158015612c9157600080fd5b505af1158015612ca5573d6000803e3d6000fd5b50505050806001600160a01b0316634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612ce457600080fd5b505af1158015612cf8573d6000803e3d6000fd5b505050506001600160a01b0389811660009081526001602090815260408083208c8452909152812080546001600160a01b03191692841692909217909155612d4a6103e8670de0b6b3a76400006142d4565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b158015612d8957600080fd5b505afa158015612d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc191906140df565b612dcb9190614313565b90506001600160a01b03821663a9059cbb6000612df26103e8670de0b6b3a76400006142d4565b6040518363ffffffff1660e01b8152600401612e0f9291906141a5565b602060405180830381600087803b158015612e2957600080fd5b505af1158015612e3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e619190613d62565b5060405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90612e90908a9085906004016141a5565b602060405180830381600087803b158015612eaa57600080fd5b505af1158015612ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ee29190613d62565b5060008560200151516001600160401b03811115612f1057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612f39578160200160208202803683370190505b50905060005b866020015151811015612f8b576000828281518110612f6e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612f838161432a565b915050612f3f565b50604080516001600160a01b0385811682528a8116602083015233928d92918f16917ffb27591822deac7913ea973cf845992f243e2ba5634ef8fbe0b6554aca37a428910160405180910390a4338a6001600160a01b038d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b61300f8e614345565b87876040516130219493929190614178565b60405180910390a4509998505050505050505050565b61041264e8d4a51000670de0b6b3a76400006142d4565b610412670de0b6b3a764000060646142f4565b6130746003670de0b6b3a76400006142d4565b6104129060016142bc565b6001600160a01b0383811660009081526001602090815260408083208684529091528082205490516370a0823160e01b815284841660048201529192169081906370a082319060240160206040518083038186803b1580156130e057600080fd5b505afa1580156130f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311891906140df565b95945050505050565b610412600a670de0b6b3a76400006142d4565b6001613149670de0b6b3a764000060026142f4565b6104129190614313565b6001600160a01b03808316600090815260016020908152604080832085845290915290205460609116806131b65760005b6040519080825280602002602001820160405280156131ad578160200160208202803683370190505b509150506115f8565b60405163eb44fdd360e01b8152600481018490526000906001600160a01b0386169063eb44fdd39060240160006040518083038186803b1580156131f957600080fd5b505afa15801561320d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132359190810190613fdb565b90506000816020015160008151811061325e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008260200151516001600160401b0381111561329557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156132be578160200160208202803683370190505b509050670de0b6b3a7640000816000815181106132eb57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260015b836020015151811015613407576000856001600160a01b03166315e84af9858760200151858151811061333c57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016133769291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b15801561338e57600080fd5b505afa1580156133a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c691906140df565b9050808383815181106133e957634e487b7160e01b600052603260045260246000fd5b602090810291909101015250806133ff8161432a565b9150506132f9565b509695505050505050565b6001600160a01b0380831660009081526001602090815260408083208584529091529020546060911680613447576000613184565b6000816001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561348257600080fd5b505afa158015613496573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526134be9190810190613c95565b9050600081516001600160401b038111156134e957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613512578160200160208202803683370190505b50905060005b825181101561361057836001600160a01b031663948d8ce684838151811061355057634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161358391906001600160a01b0391909116815260200190565b60206040518083038186803b15801561359b57600080fd5b505afa1580156135af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d391906140df565b8282815181106135f357634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806136088161432a565b915050613518565b5095945050505050565b6001600160a01b038083166000908152600160209081526040808320858452909152902054606091168061364f576000613184565b6000816001600160a01b031663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561368a57600080fd5b505afa15801561369e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526136c69190810190613c95565b9050600081516001600160401b038111156136f157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561371a578160200160208202803683370190505b50905060005b825181101561361057836001600160a01b031663f8b2cb4f84838151811061375857634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161378b91906001600160a01b0391909116815260200190565b60206040518083038186803b1580156137a357600080fd5b505afa1580156137b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137db91906140df565b8282815181106137fb57634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806138108161432a565b915050613720565b6104126002670de0b6b3a76400006142d4565b6040516331de7d1560e01b81526001600160a01b0386811660048301528581166024830152604482018390526064820184905260009182918616906331de7d1590608401602060405180830381600087803b15801561388957600080fd5b505af115801561389d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138c191906140df565b90506000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156138fe57600080fd5b505afa158015613912573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139369190613fbf565b60405163a9059cbb60e01b81529091506001600160a01b0382169063a9059cbb90613967908a9086906004016141a5565b602060405180830381600087803b15801561398157600080fd5b505af1158015613995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139b99190613d62565b5090979650505050505050565b6001600160a01b0380831660009081526001602090815260408083208584528252808320548151631a995bed60e31b8152915193941692839263d4cadf689260048082019391829003018186803b158015613a2057600080fd5b505afa158015613a34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5891906140df565b949350505050565b600081613a9e5760405162461bcd60e51b815260206004820152600c60248201526b4552525f4449565f5a45524f60a01b6044820152606401610474565b6000613ab2670de0b6b3a7640000856142f4565b9050831580613ad15750670de0b6b3a7640000613acf85836142d4565b145b613b105760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b6044820152606401610474565b6000613b1d6002856142d4565b613b2790836142bc565b905081811015613b6c5760405162461bcd60e51b815260206004820152601060248201526f11549497d1125597d25395115493905360821b6044820152606401610474565b6000613b7885836142d4565b9695505050505050565b8051613b8d8161438b565b919050565b600082601f830112613ba2578081fd5b81516020613bb7613bb283614299565b614269565b80838252828201915082860187848660051b8901011115613bd6578586fd5b855b858110156139b9578151613beb8161438b565b84529284019290840190600101613bd8565b600082601f830112613c0d578081fd5b81516020613c1d613bb283614299565b80838252828201915082860187848660051b8901011115613c3c578586fd5b855b858110156139b957815184529284019290840190600101613c3e565b80518015158114613b8d57600080fd5b60008060408385031215613c7c578182fd5b8235613c878161438b565b946020939093013593505050565b60006020808385031215613ca7578182fd5b82516001600160401b03811115613cbc578283fd5b8301601f81018513613ccc578283fd5b8051613cda613bb282614299565b80828252848201915084840188868560051b8701011115613cf9578687fd5b8694505b83851015613d24578051613d108161438b565b835260019490940193918501918501613cfd565b50979650505050505050565b600060208284031215613d41578081fd5b81516001600160401b03811115613d56578182fd5b613a5884828501613bfd565b600060208284031215613d73578081fd5b613d7c82613c5a565b9392505050565b600080600080600060a08688031215613d9a578081fd5b8535613da58161438b565b94506020860135613db58161438b565b93506040860135613dc58161438b565b94979396509394606081013594506080013592915050565b600080600060608486031215613df1578081fd5b8335613dfc8161438b565b9250602084013591506040840135613e138161438b565b809150509250925092565b60008060008060808587031215613e33578182fd5b8435613e3e8161438b565b935060208501359250604085013591506060850135613e5c8161438b565b939692955090935050565b600080600080600060a08688031215613e7e578283fd5b8535613e898161438b565b945060208681013594506040870135935060608701356001600160401b03811115613eb2578283fd5b8701601f81018913613ec2578283fd5b8035613ed0613bb282614299565b8082825284820191508484018c868560051b8701011115613eef578687fd5b8694505b83851015613f11578035835260019490940193918501918501613ef3565b50989b979a509598608001359695505050505050565b600080600080600060a08688031215613f3e578283fd5b8535613f498161438b565b94506020860135935060408601359250606086013591506080860135613f6e8161438b565b809150509295509295909350565b600080600080600060a08688031215613f93578283fd5b8535613f9e8161438b565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215613fd0578081fd5b8151613d7c8161438b565b600060208284031215613fec578081fd5b81516001600160401b0380821115614002578283fd5b908301906101608286031215614016578283fd5b61401e614240565b61402783613b82565b815260208301518281111561403a578485fd5b61404687828601613b92565b60208301525061405860408401613b82565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010080840151818301525061012080840151838111156140ae578586fd5b6140ba88828701613bfd565b82840152505061014091506140d0828401613c5a565b91810191909152949350505050565b6000602082840312156140f0578081fd5b5051919050565b60008060408385031215614109578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156141495781518752958201959082019060010161412d565b509495945050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60018060a01b0385168152836020820152826040820152608060608201526000613b78608083018461411a565b6001600160a01b03929092168252602082015260400190565b602081526000613d7c602083018461411a565b60208082526018908201527f506f6f6c206e6565647320746f20626520637265617465640000000000000000604082015260600190565b828152604060208201526000613a58604083018461411a565b92835260208301919091526001600160a01b0316604082015260600190565b60405161016081016001600160401b038111828210171561426357614263614375565b60405290565b604051601f8201601f191681016001600160401b038111828210171561429157614291614375565b604052919050565b60006001600160401b038211156142b2576142b2614375565b5060051b60200190565b600082198211156142cf576142cf61435f565b500190565b6000826142ef57634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561430e5761430e61435f565b500290565b6000828210156143255761432561435f565b500390565b600060001982141561433e5761433e61435f565b5060010190565b6000600160ff1b82141561435b5761435b61435f565b0390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146143a057600080fd5b5056fea26469706673582212202f5ac03d87f2fd21e89fee97c4406a421d6ae33ec3a26cf59162b1e7de35383264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 28821,
        "contract": "contracts/turbo/AMMFactory.sol:AMMFactory",
        "label": "bFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(BFactory)7681"
      },
      {
        "astId": 28828,
        "contract": "contracts/turbo/AMMFactory.sol:AMMFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_contract(BPool)11030))"
      },
      {
        "astId": 28830,
        "contract": "contracts/turbo/AMMFactory.sol:AMMFactory",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BFactory)7681": {
        "encoding": "inplace",
        "label": "contract BFactory",
        "numberOfBytes": "20"
      },
      "t_contract(BPool)11030": {
        "encoding": "inplace",
        "label": "contract BPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_contract(BPool)11030))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => contract BPool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_contract(BPool)11030)"
      },
      "t_mapping(t_uint256,t_contract(BPool)11030)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract BPool)",
        "numberOfBytes": "32",
        "value": "t_contract(BPool)11030"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}