{
  "address": "0x7fc5F526A8be47f9D6460b26D59532C35bd54931",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract BFactory",
          "name": "_bFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "lpTokens",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "sharesReturned",
          "type": "uint256[]"
        }
      ],
      "name": "LiquidityChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outcome",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "collateral",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "shares",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "SharesSwapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BPOW_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXIT_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INIT_POOL_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BOUND_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPOW_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_IN_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OUT_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOTAL_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BALANCE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BOUND_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_BPOW_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_WEIGHT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minLPTokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bFactory",
      "outputs": [
        {
          "internalType": "contract BFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensOut",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLiquidity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lpTokenRecipient",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getColor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract BPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getPoolTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getPoolWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract BPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpTokensIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateralOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralRecipient",
          "type": "address"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_collateralOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outcome",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_shareTokensIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_minSetsOut",
          "type": "uint256"
        }
      ],
      "name": "sellForCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AbstractMarketFactoryV3",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "tokenRatios",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ec8ed081fc3f384a99c0578806ed2d4fa8a7d6debab0810134e4322acf28190",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0x7fc5F526A8be47f9D6460b26D59532C35bd54931",
    "transactionIndex": 6,
    "gasUsed": "4624583",
    "logsBloom": "0x
    "blockHash": "0x84ffb6e5d48c7dd4cbef8988187f0fb42f19c716683451a737222b3c607ae949",
    "transactionHash": "0x4ec8ed081fc3f384a99c0578806ed2d4fa8a7d6debab0810134e4322acf28190",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 27194721,
        "transactionHash": "0x4ec8ed081fc3f384a99c0578806ed2d4fa8a7d6debab0810134e4322acf28190",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008370451563a9c8000000000000000000000000000000000000000000000001fdb505e88423bee50000000000000000000000000000000000000000000011a3fb5b2d035fa1e20c000000000000000000000000000000000000000000000001fd3195a36ec0151d0000000000000000000000000000000000000000000011a3fbde9d4875058bd4",
        "logIndex": 10,
        "blockHash": "0x84ffb6e5d48c7dd4cbef8988187f0fb42f19c716683451a737222b3c607ae949"
      }
    ],
    "blockNumber": 27194721,
    "cumulativeGasUsed": "5114980",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE152327f9700F1733d12e7a507045FB4A4606C6F",
    "1000000000000"
  ],
  "solcInputHash": "bcb06b8b228bc6167eb9eeb2cf5701fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BFactory\",\"name\":\"_bFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lpTokens\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sharesReturned\",\"type\":\"uint256[]\"}],\"name\":\"LiquidityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outcome\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"collateral\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"shares\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SharesSwapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BPOW_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_POOL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_IN_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUT_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOTAL_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BALANCE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BOUND_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_BPOW_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WEIGHT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minLPTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bFactory\",\"outputs\":[{\"internalType\":\"contract BFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensOut\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lpTokenRecipient\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getColor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract BPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPoolTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getPoolWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract BPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpTokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateralOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralRecipient\",\"type\":\"address\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outcome\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_shareTokensIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_minSetsOut\",\"type\":\"uint256\"}],\"name\":\"sellForCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"tokenRatios\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/AMMFactory.sol\":\"AMMFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface BColor {\\n    function getColor() external view returns (bytes32);\\n}\\n\\ncontract BBronze is BColor {\\n    function getColor() external pure override returns (bytes32) {\\n        return bytes32(\\\"BRONZE\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x6d3291d0338666da918131e0b475b360e02f9642401746e7abd2cf5a39f16398\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BColor.sol\\\";\\n\\ncontract BConst is BBronze {\\n    uint256 public constant BONE = 10**18;\\n\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\n\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\n    uint256 public constant MAX_FEE = BONE / 10;\\n    uint256 public constant EXIT_FEE = 0;\\n\\n    uint256 public constant MIN_WEIGHT = BONE;\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\n\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\n\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\n\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\n}\\n\",\"keccak256\":\"0x329a7ddac03d6ab6f9842504b4c66009a8e829782538946be262aef9fc5ac9b3\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is disstributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\n\\nimport \\\"./BPool.sol\\\";\\n\\ncontract BFactory is BBronze {\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\n\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\n\\n    mapping(address => bool) private _isBPool;\\n\\n    function isBPool(address b) external view returns (bool) {\\n        return _isBPool[b];\\n    }\\n\\n    function newBPool() external returns (BPool) {\\n        BPool bpool = new BPool();\\n        _isBPool[address(bpool)] = true;\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\n        bpool.setController(msg.sender);\\n        return bpool;\\n    }\\n\\n    address private _blabs;\\n\\n    constructor() {\\n        _blabs = msg.sender;\\n    }\\n\\n    function getBLabs() external view returns (address) {\\n        return _blabs;\\n    }\\n\\n    function setBLabs(address b) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        emit LOG_BLABS(msg.sender, b);\\n        _blabs = b;\\n    }\\n\\n    function collect(BPool pool) external {\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\n        bool xfer = pool.transfer(_blabs, collected);\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb8a30f5089a3e49d13fa63ca815761b1e67d5985c5549b11d5b5ea88cab45ec5\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ncontract BMath is BBronze, BConst, BNum {\\n    /**********************************************************************************************\\n    // calcSpotPrice                                                                             //\\n    // sP = spotPrice                                                                            //\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcSpotPrice(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 spotPrice) {\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\n        uint256 ratio = bdiv(numer, denom);\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\n        return (spotPrice = bmul(ratio, scale));\\n    }\\n\\n    /**********************************************************************************************\\n    // calcOutGivenIn                                                                            //\\n    // aO = tokenAmountOut                                                                       //\\n    // bO = tokenBalanceOut                                                                      //\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\n    // wO = tokenWeightOut                                                                       //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcOutGivenIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\n        uint256 foo = bpow(y, weightRatio);\\n        uint256 bar = bsub(BONE, foo);\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcInGivenOut                                                                            //\\n    // aI = tokenAmountIn                                                                        //\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\n    // sF = swapFee                                                                              //\\n    **********************************************************************************************/\\n    function calcInGivenOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\n        uint256 foo = bpow(y, weightRatio);\\n        foo = bsub(foo, BONE);\\n        tokenAmountIn = bsub(BONE, swapFee);\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolOutGivenSingleIn                                                                  //\\n    // pAo = poolAmountOut         /                                              \\\\              //\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\n    // sF = swapFee                \\\\                                              /              //\\n    **********************************************************************************************/\\n\\n    // Charge the trading fee for the proportion of tokenAi\\n    ///  which is implicitly traded to the other pool tokens.\\n    // That proportion is (1- weightTokenIn)\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\n\\n    function calcPoolOutGivenSingleIn(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\n\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\n\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\n        return poolAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleInGivenPoolOut                                                                  //\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\n    // wI = weightIn                              /      wI  \\\\                                   //\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\n    // sF = swapFee                               \\\\      tW  /                                   //\\n    **********************************************************************************************/\\n    function calcSingleInGivenPoolOut(\\n        uint256 tokenBalanceIn,\\n        uint256 tokenWeightIn,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountIn) {\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\n        return tokenAmountIn;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcSingleOutGivenPoolIn                                                                  //\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\n    **********************************************************************************************/\\n    function calcSingleOutGivenPoolIn(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 poolAmountIn,\\n        uint256 swapFee\\n    ) public pure returns (uint256 tokenAmountOut) {\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        // charge exit fee on the pool token side\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\n\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\n\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\n\\n        // charge swap fee on the output token side\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\n        return tokenAmountOut;\\n    }\\n\\n    /**********************************************************************************************\\n    // calcPoolInGivenSingleOut                                                                  //\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\n    // tW = totalWeight           -------------------------------------------------------------  //\\n    // sF = swapFee                                        ( 1 - eF )                            //\\n    // eF = exitFee                                                                              //\\n    **********************************************************************************************/\\n    function calcPoolInGivenSingleOut(\\n        uint256 tokenBalanceOut,\\n        uint256 tokenWeightOut,\\n        uint256 poolSupply,\\n        uint256 totalWeight,\\n        uint256 tokenAmountOut,\\n        uint256 swapFee\\n    ) public pure returns (uint256 poolAmountIn) {\\n        // charge swap fee on the output token side\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\n        uint256 zar = bmul(zoo, swapFee);\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\n\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\n\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\n\\n        // charge exit fee on the pool token side\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\n        return poolAmountIn;\\n    }\\n}\\n\",\"keccak256\":\"0x14c1eb51464ef7673b8497df8441093f92f949f374ba58be6c57264f90405ecd\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BConst.sol\\\";\\n\\ncontract BNum is BConst {\\n    function btoi(uint256 a) internal pure returns (uint256) {\\n        return a / BONE;\\n    }\\n\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\n        return btoi(a) * BONE;\\n    }\\n\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (uint256 c, bool flag) = bsubSign(a, b);\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\n        return c;\\n    }\\n\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\n        if (a >= b) {\\n            return (a - b, false);\\n        } else {\\n            return (b - a, true);\\n        }\\n    }\\n\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c0 = a * b;\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c1 = c0 + (BONE / 2);\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\n        uint256 c2 = c1 / BONE;\\n        return c2;\\n    }\\n\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\n        uint256 c0 = a * BONE;\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\n        uint256 c1 = c0 + (b / 2);\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\n        uint256 c2 = c1 / b;\\n        return c2;\\n    }\\n\\n    // DSMath.wpow\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 z = n % 2 != 0 ? a : BONE;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            a = bmul(a, a);\\n\\n            if (n % 2 != 0) {\\n                z = bmul(z, a);\\n            }\\n        }\\n        return z;\\n    }\\n\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\n    // of approximation of b^0.w\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\n\\n        uint256 whole = bfloor(exp);\\n        uint256 remain = bsub(exp, whole);\\n\\n        uint256 wholePow = bpowi(base, btoi(whole));\\n\\n        if (remain == 0) {\\n            return wholePow;\\n        }\\n\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\n        return bmul(wholePow, partialResult);\\n    }\\n\\n    function bpowApprox(\\n        uint256 base,\\n        uint256 exp,\\n        uint256 precision\\n    ) internal pure returns (uint256) {\\n        // term 0:\\n        uint256 a = exp;\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\n        uint256 term = BONE;\\n        uint256 sum = term;\\n        bool negative = false;\\n\\n        // term(k) = numer / denom\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\n        // continue until term is less than precision\\n        for (uint256 i = 1; term >= precision; i++) {\\n            uint256 bigK = i * BONE;\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\n            term = bmul(term, bmul(c, x));\\n            term = bdiv(term, bigK);\\n            if (term == 0) break;\\n\\n            if (xneg) negative = !negative;\\n            if (cneg) negative = !negative;\\n            if (negative) {\\n                sum = bsub(sum, term);\\n            } else {\\n                sum = badd(sum, term);\\n            }\\n        }\\n\\n        return sum;\\n    }\\n}\\n\",\"keccak256\":\"0xce47c1071dc0cce2a78b9e34540ebcda49b4d26de2e011090e99476862a985fd\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BToken.sol\\\";\\nimport \\\"./BMath.sol\\\";\\n\\ncontract BPool is BBronze, BToken, BMath {\\n    struct Record {\\n        bool bound; // is token bound to pool\\n        uint256 index; // private\\n        uint256 denorm; // denormalized weight\\n        uint256 balance;\\n    }\\n\\n    event LOG_SWAP(\\n        address indexed caller,\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        uint256 tokenAmountIn,\\n        uint256 tokenAmountOut\\n    );\\n\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\n\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\n\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\n\\n    modifier _logs_() {\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\n        _;\\n    }\\n\\n    modifier _lock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _mutex = true;\\n        _;\\n        _mutex = false;\\n    }\\n\\n    modifier _viewlock_() {\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\n        _;\\n    }\\n\\n    bool private _mutex;\\n\\n    address private _factory; // BFactory address to push token exitFee to\\n    address private _controller; // has CONTROL role\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\n\\n    // `setSwapFee` and `finalize` require CONTROL\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\n    uint256 private _swapFee;\\n    bool private _finalized;\\n\\n    address[] private _tokens;\\n    mapping(address => Record) private _records;\\n    uint256 private _totalWeight;\\n\\n    constructor() {\\n        _controller = msg.sender;\\n        _factory = msg.sender;\\n        _swapFee = MIN_FEE;\\n        _publicSwap = false;\\n        _finalized = false;\\n    }\\n\\n    function isPublicSwap() external view returns (bool) {\\n        return _publicSwap;\\n    }\\n\\n    function isFinalized() external view returns (bool) {\\n        return _finalized;\\n    }\\n\\n    function isBound(address t) external view returns (bool) {\\n        return _records[t].bound;\\n    }\\n\\n    function getNumTokens() external view returns (uint256) {\\n        return _tokens.length;\\n    }\\n\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        return _tokens;\\n    }\\n\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        return _tokens;\\n    }\\n\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].denorm;\\n    }\\n\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\n        return _totalWeight;\\n    }\\n\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        uint256 denorm = _records[token].denorm;\\n        return bdiv(denorm, _totalWeight);\\n    }\\n\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        return _records[token].balance;\\n    }\\n\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\n        return _swapFee;\\n    }\\n\\n    function getController() external view _viewlock_ returns (address) {\\n        return _controller;\\n    }\\n\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\n        _swapFee = swapFee;\\n    }\\n\\n    function setController(address manager) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _controller = manager;\\n    }\\n\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        _publicSwap = public_;\\n    }\\n\\n    function finalize() external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\n\\n        _finalized = true;\\n        _publicSwap = true;\\n\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\n    }\\n\\n    function bind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    )\\n        external\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\n    {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\n\\n        _records[token] = Record({\\n            bound: true,\\n            index: _tokens.length,\\n            denorm: 0, // balance and denorm will be validated\\n            balance: 0 // and set by `rebind`\\n        });\\n        _tokens.push(token);\\n        rebind(token, balance, denorm);\\n    }\\n\\n    function rebind(\\n        address token,\\n        uint256 balance,\\n        uint256 denorm\\n    ) public _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\n\\n        // Adjust the denorm and totalWeight\\n        uint256 oldWeight = _records[token].denorm;\\n        if (denorm > oldWeight) {\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\n        } else if (denorm < oldWeight) {\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\n        }\\n        _records[token].denorm = denorm;\\n\\n        // Adjust the balance record and actual token balance\\n        uint256 oldBalance = _records[token].balance;\\n        _records[token].balance = balance;\\n        if (balance > oldBalance) {\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\n        } else if (balance < oldBalance) {\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\n            _pushUnderlying(token, _factory, tokenExitFee);\\n        }\\n    }\\n\\n    function unbind(address token) external _logs_ _lock_ {\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\n\\n        uint256 tokenBalance = _records[token].balance;\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\n\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\n\\n        // Swap the token-to-unbind with the last token,\\n        // then delete the last token\\n        uint256 index = _records[token].index;\\n        uint256 last = _tokens.length - 1;\\n        _tokens[index] = _tokens[last];\\n        _records[_tokens[index]].index = index;\\n        _tokens.pop();\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\n\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\n        _pushUnderlying(token, _factory, tokenExitFee);\\n    }\\n\\n    // Absorb any tokens that have been sent to this contract into the pool\\n    function gulp(address token) external _logs_ _lock_ {\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\n    }\\n\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n    }\\n\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\n        external\\n        view\\n        _viewlock_\\n        returns (uint256 spotPrice)\\n    {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        Record storage inRecord = _records[tokenIn];\\n        Record storage outRecord = _records[tokenOut];\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\n    }\\n\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\n        }\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n    }\\n\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _pushPoolShare(_factory, exitFee);\\n        _burnPoolShare(pAiAfterExitFee);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\n        }\\n    }\\n\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n\\n        uint256 poolTotal = totalSupply();\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\n\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            address t = _tokens[i];\\n            uint256 bal = _records[t].balance;\\n\\n            _amounts[i] = bmul(ratio, bal);\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\n        }\\n\\n        return _amounts;\\n    }\\n\\n    function swapExactAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        address tokenOut,\\n        uint256 minAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountOut = calcOutGivenIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountOut, spotPriceAfter);\\n    }\\n\\n    function swapExactAmountOut(\\n        address tokenIn,\\n        uint256 maxAmountIn,\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPrice\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\n\\n        Record storage inRecord = _records[address(tokenIn)];\\n        Record storage outRecord = _records[address(tokenOut)];\\n\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        uint256 spotPriceBefore =\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\n\\n        tokenAmountIn = calcInGivenOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        spotPriceAfter = calcSpotPrice(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _swapFee\\n        );\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\n\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\n\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return (tokenAmountIn, spotPriceAfter);\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountIn,\\n            _swapFee\\n        );\\n\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return poolAmountOut;\\n    }\\n\\n    function joinswapPoolAmountOut(\\n        address tokenIn,\\n        uint256 poolAmountOut,\\n        uint256 maxAmountIn\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage inRecord = _records[tokenIn];\\n\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\n            inRecord.balance,\\n            inRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountOut,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\n\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\n\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\n\\n        _mintPoolShare(poolAmountOut);\\n        _pushPoolShare(msg.sender, poolAmountOut);\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\n\\n        return tokenAmountIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            poolAmountIn,\\n            _swapFee\\n        );\\n\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\n\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return tokenAmountOut;\\n    }\\n\\n    function exitswapExternAmountOut(\\n        address tokenOut,\\n        uint256 tokenAmountOut,\\n        uint256 maxPoolAmountIn\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\n\\n        Record storage outRecord = _records[tokenOut];\\n\\n        poolAmountIn = calcPoolInGivenSingleOut(\\n            outRecord.balance,\\n            outRecord.denorm,\\n            _totalSupply,\\n            _totalWeight,\\n            tokenAmountOut,\\n            _swapFee\\n        );\\n\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\n\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\n\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\n\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\n\\n        _pullPoolShare(msg.sender, poolAmountIn);\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\n        _pushPoolShare(_factory, exitFee);\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\n\\n        return poolAmountIn;\\n    }\\n\\n    // ==\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\n    // You must `_lock_` or otherwise ensure reentry-safety\\n\\n    function _pullUnderlying(\\n        address erc20,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pushUnderlying(\\n        address erc20,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\n    }\\n\\n    function _pullPoolShare(address from, uint256 amount) internal {\\n        _pull(from, amount);\\n    }\\n\\n    function _pushPoolShare(address to, uint256 amount) internal {\\n        _push(to, amount);\\n    }\\n\\n    function _mintPoolShare(uint256 amount) internal {\\n        _mint(amount);\\n    }\\n\\n    function _burnPoolShare(uint256 amount) internal {\\n        _burn(amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8c65c1a2966e2e6d775beea034f3023ce1fb0182fd84da5a83820191fe494664\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./BNum.sol\\\";\\n\\ninterface IERC20Balancer {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address whom) external view returns (uint256);\\n\\n    function allowance(address src, address dst) external view returns (uint256);\\n\\n    function approve(address dst, uint256 amt) external returns (bool);\\n\\n    function transfer(address dst, uint256 amt) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external returns (bool);\\n}\\n\\ncontract BTokenBase is BNum {\\n    mapping(address => uint256) internal _balance;\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n    uint256 internal _totalSupply;\\n\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\n\\n    function _mint(uint256 amt) internal {\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\n        _totalSupply = badd(_totalSupply, amt);\\n        emit Transfer(address(0), address(this), amt);\\n    }\\n\\n    function _burn(uint256 amt) internal {\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\n        _totalSupply = bsub(_totalSupply, amt);\\n        emit Transfer(address(this), address(0), amt);\\n    }\\n\\n    function _move(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) internal {\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\n        _balance[src] = bsub(_balance[src], amt);\\n        _balance[dst] = badd(_balance[dst], amt);\\n        emit Transfer(src, dst, amt);\\n    }\\n\\n    function _push(address to, uint256 amt) internal {\\n        _move(address(this), to, amt);\\n    }\\n\\n    function _pull(address from, uint256 amt) internal {\\n        _move(from, address(this), amt);\\n    }\\n}\\n\\ncontract BToken is BTokenBase, IERC20Balancer {\\n    string private _name = \\\"Balancer Pool Token\\\";\\n    string private _symbol = \\\"BPT\\\";\\n    uint8 private _decimals = 18;\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function allowance(address src, address dst) external view override returns (uint256) {\\n        return _allowance[src][dst];\\n    }\\n\\n    function balanceOf(address whom) external view override returns (uint256) {\\n        return _balance[whom];\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\n        _allowance[msg.sender][dst] = amt;\\n        emit Approval(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\n        uint256 oldValue = _allowance[msg.sender][dst];\\n        if (amt > oldValue) {\\n            _allowance[msg.sender][dst] = 0;\\n        } else {\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\n        }\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\n        _move(msg.sender, dst, amt);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amt\\n    ) external override returns (bool) {\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\n        _move(src, dst, amt);\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\n        }\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4bad2e0da3c0daa4cca2ff05e40cfae7287c5504119e419cb561ee67ab382f43\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Full is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd4f708218be4eb92ec676cde580e2579a03dafd2ca8436b70a25e8331c3f0218\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n\\n    function transferOwnership(address _newOwner) external returns (bool);\\n}\\n\",\"keccak256\":\"0xace284dc2ca2afd8e6e1b16f2c3abb9af28ae70b627c3557722e4618c65ef8d9\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IOwnable.sol\\\";\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\nabstract contract Ownable is IOwnable {\\n    address internal owner;\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    function getOwner() public view override returns (address) {\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param _newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\n        require(_newOwner != address(0));\\n        onTransferOwnership(owner, _newOwner);\\n        owner = _newOwner;\\n        return true;\\n    }\\n\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\n    function onTransferOwnership(address, address) internal virtual;\\n}\\n\",\"keccak256\":\"0x26c297226aeb6ad5e522fe97f9d68cc4474b2560bf22c8cd124c93442d339a4c\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nabstract contract Rewardable {\\n    // Rewards will be paid out over the lifetime of an event.\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\n\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xcb5296c464967afdf84ea175e46345f8e291c0e621299cb0f6ecfed9e9585add\",\"license\":\"MIT\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../balancer/BFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\nimport \\\"../balancer/BNum.sol\\\";\\n\\ncontract AMMFactory is BNum {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\n\\n    BFactory public bFactory;\\n    // MarketFactory => Market => BPool\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\n    uint256 fee;\\n\\n    event PoolCreated(\\n        address pool,\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed creator,\\n        address lpTokenRecipient\\n    );\\n    event LiquidityChanged(\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed user,\\n        address recipient,\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\n        int256 collateral,\\n        int256 lpTokens,\\n        uint256[] sharesReturned\\n    );\\n    event SharesSwapped(\\n        address indexed marketFactory,\\n        uint256 indexed marketId,\\n        address indexed user,\\n        uint256 outcome,\\n        // from the perspective of the user. e.g. collateral is negative when buying\\n        int256 collateral,\\n        int256 shares,\\n        uint256 price\\n    );\\n\\n    constructor(BFactory _bFactory, uint256 _fee) {\\n        bFactory = _bFactory;\\n        fee = _fee;\\n    }\\n\\n    function createPool(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _initialLiquidity,\\n        address _lpTokenRecipient\\n    ) public returns (uint256) {\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\n\\n        // Comparing to sets because sets are normalized to 10e18.\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\n\\n        //  Turn collateral into shares\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        require(\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\n        );\\n\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\n\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        // Create pool\\n        BPool _pool = bFactory.newBPool();\\n\\n        // Add each outcome to the pool. Collateral is NOT added.\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            _token.approve(address(_pool), MAX_UINT);\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\n        }\\n\\n        // Set the swap fee.\\n        _pool.setSwapFee(fee);\\n\\n        // Finalize pool setup\\n        _pool.finalize();\\n\\n        pools[address(_marketFactory)][_marketId] = _pool;\\n\\n        // Pass along LP tokens for initial liquidity\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\n\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\n        _pool.transfer(address(0x0), (BONE / 1000));\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\n\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _balances[i] = 0;\\n        }\\n\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_initialLiquidity),\\n            int256(_lpTokenBalance),\\n            _balances\\n        );\\n\\n        return _lpTokenBalance;\\n    }\\n\\n    function addLiquidity(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _collateralIn,\\n        uint256 _minLPTokensOut,\\n        address _lpTokenRecipient\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        //  Turn collateral into shares\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        // Find poolAmountOut\\n        _poolAmountOut = MAX_UINT;\\n\\n        {\\n            uint256 _totalSupply = _pool.totalSupply();\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                _maxAmountsIn[i] = _sets;\\n\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\n\\n                // This is the result the following when solving for poolAmountOut:\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\n                uint256 _tokenPoolAmountOut =\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\n\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\n                    _poolAmountOut = _tokenPoolAmountOut;\\n                }\\n            }\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\n        }\\n\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\n\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\n\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\n        _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            _balances[i] = _token.balanceOf(address(this));\\n            if (_balances[i] > 0) {\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\n            }\\n        }\\n\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _lpTokenRecipient,\\n            -int256(_collateralIn),\\n            int256(_poolAmountOut),\\n            _balances\\n        );\\n    }\\n\\n    function removeLiquidity(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _lpTokensIn,\\n        uint256 _minCollateralOut,\\n        address _collateralRecipient\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\n\\n        uint256[] memory exitPoolEstimate;\\n        {\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\n        }\\n\\n        // Find the number of sets to sell.\\n        uint256 _setsToSell = MAX_UINT;\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\n        }\\n\\n        // Must be a multiple of share factor.\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\n\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\n        if (_resolved) {\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\n        } else {\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\n        }\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\n\\n        // Transfer the remaining shares back to _collateralRecipient.\\n        _balances = new uint256[](_market.shareTokens.length);\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\n            if (_balances[i] > 0) {\\n                _token.transfer(_collateralRecipient, _balances[i]);\\n            }\\n        }\\n\\n        emit LiquidityChanged(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _collateralRecipient,\\n            int256(_collateralOut),\\n            -int256(_lpTokensIn),\\n            _balances\\n        );\\n    }\\n\\n    function buy(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _outcome,\\n        uint256 _collateralIn,\\n        uint256 _minTokensOut\\n    ) external returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\n\\n        IERC20Full _collateral = _marketFactory.collateral();\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\n\\n        uint256 _totalDesiredOutcome = _sets;\\n        {\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\n\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                if (i == _outcome) continue;\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                (uint256 _acquiredToken, ) =\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\n                _totalDesiredOutcome += _acquiredToken;\\n            }\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\n\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\n        }\\n\\n        emit SharesSwapped(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _outcome,\\n            -int256(_collateralIn),\\n            int256(_totalDesiredOutcome),\\n            bdiv(_sets, _totalDesiredOutcome)\\n        );\\n\\n        return _totalDesiredOutcome;\\n    }\\n\\n    function sellForCollateral(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        uint256 _outcome,\\n        uint256[] memory _shareTokensIn,\\n        uint256 _minSetsOut\\n    ) external returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n\\n        uint256 _setsOut = MAX_UINT;\\n        uint256 _totalUndesiredTokensIn = 0;\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\n        }\\n\\n        {\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\n\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n                if (i == _outcome) continue;\\n                OwnedERC20 _token = _market.shareTokens[i];\\n                (uint256 tokenAmountOut, ) =\\n                    _pool.swapExactAmountIn(\\n                        address(_market.shareTokens[_outcome]),\\n                        _shareTokensIn[i],\\n                        address(_token),\\n                        0,\\n                        MAX_UINT\\n                    );\\n\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\n            }\\n\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\n        }\\n\\n        // Transfer undesired token balance back.\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\n            OwnedERC20 _token = _market.shareTokens[i];\\n            uint256 _balance = _token.balanceOf(address(this));\\n            if (_balance > 0) {\\n                _token.transfer(msg.sender, _balance);\\n            }\\n        }\\n\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\n        emit SharesSwapped(\\n            address(_marketFactory),\\n            _marketId,\\n            msg.sender,\\n            _outcome,\\n            int256(_collateralOut),\\n            -int256(_totalUndesiredTokensIn),\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\n        );\\n\\n        return _collateralOut;\\n    }\\n\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\n    // So the first outcome is 10**18 and all others are higher or lower.\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\n        address _basisToken = address(_market.shareTokens[0]);\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\n        _ratios[0] = 10**18;\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\n            _ratios[i] = _price;\\n        }\\n        return _ratios;\\n    }\\n\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        address[] memory _tokens = _pool.getCurrentTokens();\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\n        }\\n        return _balances;\\n    }\\n\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        // Pool does not exist. Do not want to revert because multicall.\\n        if (_pool == BPool(address(0))) {\\n            return new uint256[](0);\\n        }\\n\\n        address[] memory _tokens = _pool.getCurrentTokens();\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\n        }\\n        return _weights;\\n    }\\n\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        return _pool.getSwapFee();\\n    }\\n\\n    function getPoolTokenBalance(\\n        AbstractMarketFactoryV3 _marketFactory,\\n        uint256 _marketId,\\n        address _user\\n    ) external view returns (uint256) {\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\n        return _pool.balanceOf(_user);\\n    }\\n\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\n        return pools[address(_marketFactory)][_marketId];\\n    }\\n}\\n\",\"keccak256\":\"0xbb4c8d15ddc44406e2b81bbf0746341331640aa13f1ed3fccf25a055e5707bdb\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libraries/IERC20Full.sol\\\";\\nimport \\\"../balancer/BPool.sol\\\";\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\nimport \\\"./FeePot.sol\\\";\\nimport \\\"../libraries/Rewardable.sol\\\";\\n\\nabstract contract AbstractMarketFactoryV3 is TurboShareTokenFactory, Ownable, Rewardable {\\n    using SafeMath for uint256;\\n\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\n    event MarketActivated(uint256 id);\\n\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\n    event WinningsClaimed(\\n        uint256 id,\\n        address winningOutcome,\\n        uint256 winningIndex,\\n        string winningName,\\n        uint256 amount,\\n        uint256 settlementFee,\\n        uint256 payout,\\n        address indexed receiver\\n    );\\n\\n    IERC20Full public collateral;\\n    FeePot public feePot;\\n\\n    // fees are out of 1e18 and only apply to new markets\\n    uint256 public stakerFee;\\n    uint256 public settlementFee;\\n    uint256 public protocolFee;\\n\\n    address public protocol; // collects protocol fees\\n\\n    uint256 public accumulatedProtocolFee = 0;\\n    // settlement address => amount of collateral\\n    mapping(address => uint256) public accumulatedSettlementFees;\\n\\n    // How many shares equals one collateral.\\n    // Necessary to account for math errors from small numbers in balancer.\\n    // shares = collateral / shareFactor\\n    // collateral = shares * shareFactor\\n    uint256 public shareFactor;\\n\\n    struct Market {\\n        address settlementAddress;\\n        OwnedERC20[] shareTokens;\\n        OwnedERC20 winner;\\n        uint256 winnerIndex;\\n        uint256 settlementFee;\\n        uint256 protocolFee;\\n        uint256 stakerFee;\\n        uint256 creationTimestamp;\\n        uint256 resolutionTimestamp; // when winner is declared\\n        uint256[] initialOdds;\\n        bool active; // false if not ready to use or if resolved\\n    }\\n    Market[] internal markets;\\n\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\n\\n    constructor(\\n        address _owner,\\n        IERC20Full _collateral,\\n        uint256 _shareFactor,\\n        FeePot _feePot,\\n        uint256[3] memory _fees, // staker, settlement, protocol\\n        address _protocol\\n    ) {\\n        owner = _owner; // controls fees for new markets\\n        collateral = _collateral;\\n        shareFactor = _shareFactor;\\n        feePot = _feePot;\\n        stakerFee = _fees[0];\\n        settlementFee = _fees[1];\\n        protocolFee = _fees[2];\\n        protocol = _protocol;\\n\\n        _collateral.approve(address(_feePot), MAX_UINT);\\n\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\n        markets.push(makeEmptyMarket());\\n    }\\n        \\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\n\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\n\\n    }\\n\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\n        return TradeDetails[_marketId][_outcome]; \\n    }\\n    // Returns an empty struct if the market doesn't exist.\\n    // Can check market existence before calling this by comparing _id against markets.length.\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\n        if (_id >= markets.length) {\\n            return makeEmptyMarket();\\n        } else {\\n            return markets[_id];\\n        }\\n    }\\n\\n    function marketCount() public view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    // Returns factory-specific details about a market.\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\n\\n    function mintShares(\\n        uint256 _id,\\n        uint256 _shareToMint,\\n        address _receiver\\n    ) public {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        uint256 _cost = calcCost(_shareToMint);\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\n        }\\n\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\n    }\\n\\n    function burnShares(\\n        uint256 _id,\\n        uint256 _sharesToBurn,\\n        address _receiver\\n    ) public returns (uint256) {\\n        require(markets.length > _id);\\n        require(markets[_id].active);\\n\\n        Market memory _market = markets[_id];\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\n            // errors if sender doesn't have enough shares\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\n        }\\n\\n        uint256 _payout = calcCost(_sharesToBurn);\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\n\\n        accumulatedProtocolFee += _protocolFee;\\n        collateral.transfer(_receiver, _payout);\\n        feePot.depositFees(_stakerFee);\\n\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\n        return _payout;\\n    }\\n\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\n\\n        Market memory _market = markets[_id];\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\n\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\n        _payout = _payout.sub(_settlementFee);\\n\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\n        collateral.transfer(_receiver, _payout);\\n\\n        uint256 _winningIndex = _market.winnerIndex;\\n        string memory _winningName = _market.winner.name();\\n\\n        emit WinningsClaimed(\\n            _id,\\n            address(_market.winner),\\n            _winningIndex,\\n            _winningName,\\n            _winningShares,\\n            _settlementFee,\\n            _payout,\\n            _receiver\\n        );\\n        return _payout;\\n    }\\n\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\n        uint256 _totalWinnings = 0;\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\n        }\\n        return _totalWinnings;\\n    }\\n\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\n        if (_fees > 0) {\\n            accumulatedSettlementFees[msg.sender] = 0;\\n            collateral.transfer(_receiver, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function claimProtocolFees() public returns (uint256) {\\n        require(msg.sender == protocol || msg.sender == address(this));\\n        uint256 _fees = accumulatedProtocolFee;\\n        if (_fees > 0) {\\n            accumulatedProtocolFee = 0;\\n            collateral.transfer(protocol, _fees);\\n        }\\n        return _fees;\\n    }\\n\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\n        settlementFee = _newFee;\\n    }\\n\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\n        stakerFee = _newFee;\\n    }\\n\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\n        protocolFee = _newFee;\\n    }\\n\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\n        if (_claimFirst) {\\n            claimProtocolFees();\\n        }\\n        protocol = _newProtocol;\\n    }\\n\\n    function startMarket(\\n        address _settlementAddress,\\n        string[] memory _names,\\n        uint256[] memory _initialOdds,\\n        bool _active\\n    ) internal returns (uint256 _marketId) {\\n        _marketId = markets.length;\\n        markets.push(\\n            Market(\\n                _settlementAddress,\\n                createShareTokens(_names, address(this)),\\n                OwnedERC20(address(0)),\\n                0,\\n                settlementFee,\\n                protocolFee,\\n                stakerFee,\\n                block.timestamp,\\n                0,\\n                _initialOdds,\\n                _active\\n            )\\n        );\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\n        if (_active) {\\n            emit MarketActivated(_marketId);\\n        }\\n    }\\n\\n    function activateMarket(uint256 _marketId) internal {\\n        markets[_marketId].active = true;\\n        emit MarketActivated(_marketId);\\n    }\\n\\n    function makeEmptyMarket() private pure returns (Market memory) {\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\n        uint256[] memory _initialOdds = new uint256[](0);\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\n    }\\n\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\n        Market storage _market = markets[_marketId];\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\n\\n        _market.winner = _winner;\\n        _market.active = false;\\n        _market.winnerIndex = _winningOutcome;\\n        _market.resolutionTimestamp = block.timestamp;\\n        string memory _outcomeName = _winner.name();\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\n    }\\n\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\n        Market memory _market = markets[_id];\\n        return _market.winner != OwnedERC20(address(0));\\n    }\\n\\n    // shares => collateral\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\n        return _shares / shareFactor;\\n    }\\n\\n    // collateral => shares\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\n        return _collateralIn * shareFactor;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0x8c291f9c91a6efbdc37e687492ac09360bdd2794f690570bbc662077e9d77497\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../libraries/IERC20Full.sol\\\";\\n\\ncontract FeePot is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant magnitude = 2**128;\\n\\n    IERC20Full public collateral;\\n    IERC20Full public reputationToken;\\n\\n    uint256 public magnifiedFeesPerShare;\\n\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\n    mapping(address => uint256) public storedFees;\\n\\n    uint256 public feeReserve;\\n\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\n        ERC20(\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\n        )\\n    {\\n        collateral = _collateral;\\n        reputationToken = _reputationToken;\\n\\n        require(_collateral != IERC20Full(address(0)));\\n    }\\n\\n    function depositFees(uint256 _amount) public returns (bool) {\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\n        if (_totalSupply == 0) {\\n            feeReserve = feeReserve.add(_amount);\\n            return true;\\n        }\\n        if (feeReserve > 0) {\\n            _amount = _amount.add(feeReserve);\\n            feeReserve = 0;\\n        }\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\n        return true;\\n    }\\n\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\n    }\\n\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\n        uint256 _ownerBalance = balanceOf(_owner);\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\n    }\\n\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\n        super._transfer(_from, _to, _amount);\\n\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\n    }\\n\\n    function stake(uint256 _amount) external returns (bool) {\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\n        _mint(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\n            magnifiedFeesPerShare.mul(_amount)\\n        );\\n        return true;\\n    }\\n\\n    function exit(uint256 _amount) external returns (bool) {\\n        redeemInternal(msg.sender);\\n        _burn(msg.sender, _amount);\\n        reputationToken.transfer(msg.sender, _amount);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeem() public returns (bool) {\\n        redeemInternal(msg.sender);\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function redeemInternal(address _account) internal {\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\n        if (_withdrawableFees > 0) {\\n            storedFees[_account] = 0;\\n            collateral.transfer(_account, _withdrawableFees);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35a2aa230007983b91a3bf432412cb3f3d497464e911e5c640a6d541f612f8a8\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../libraries/Ownable.sol\\\";\\n\\ncontract OwnedERC20 is ERC20, Ownable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address _owner\\n    ) ERC20(name_, symbol_) {\\n        owner = _owner;\\n    }\\n\\n    function trustedTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _transfer(_from, _to, _amount);\\n    }\\n\\n    function trustedMint(address _target, uint256 _amount) external onlyOwner {\\n        _mint(_target, _amount);\\n    }\\n\\n    function trustedBurn(address _target, uint256 _amount) external onlyOwner {\\n        _burn(_target, _amount);\\n    }\\n\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\n        uint256 _balance = balanceOf(_target);\\n        _burn(_target, _balance);\\n        return _balance;\\n    }\\n\\n    function onTransferOwnership(address, address) internal override {}\\n}\\n\",\"keccak256\":\"0xa4f7f99dab769f071f902e2837bbb902a6b14ebfb257c0781dc8b5d1d2579f90\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./OwnedShareToken.sol\\\";\\n\\nabstract contract TurboShareTokenFactory {\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\\nabstract contract TurboShareTokenFactoryV1 {\\n    function createShareTokens(\\n        string[] memory _names,\\n        string[] memory _symbols,\\n        address _owner\\n    ) internal returns (OwnedERC20[] memory) {\\n        uint256 _numOutcomes = _names.length;\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\n\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\n        }\\n        return _tokens;\\n    }\\n}\\n\",\"keccak256\":\"0xb6054c14344a66fd0fd584466fecd2cd29f3a753fa506e58b66940661a2a5e76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200532e3803806200532e83398101604081905262000034916200005e565b600080546001600160a01b0319166001600160a01b03939093169290921790915560025562000098565b6000806040838503121562000071578182fd5b82516001600160a01b038116811462000088578283fd5b6020939093015192949293505050565b61528680620000a86000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639a86139b11610104578063c36596a6116100a2578063d2364bf311610071578063d2364bf3146103d3578063e4a28a52146101df578063ec093021146103e6578063fa0de359146103ee57600080fd5b8063c36596a614610247578063c6580d1214610398578063c7b4b6dd146103a0578063d055da71146103c057600080fd5b8063b7b800a4116100de578063b7b800a414610378578063ba019dab14610380578063bc063e1a14610388578063bc694ea21461039057600080fd5b80639a86139b14610337578063a0147aa11461035d578063b0e0d1361461037057600080fd5b806360cac85a1161017c578063867378c51161014b578063867378c5146102de5780638f38a555146102e65780639381cd2b14610327578063992e2a921461032f57600080fd5b806360cac85a1461029d57806372b60c30146102b057806376c7a3c7146102c3578063842980f4146102cb57600080fd5b8063218b5382116101b8578063218b53821461024757806345fa67831461025657806359f842b2146102775780635b5b9ea21461028a57600080fd5b806309a3bbe4146101df5780630a165940146101fa578063189d00ca1461023f575b600080fd5b6101e7610401565b6040519081526020015b60405180910390f35b60005461021a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f1565b6101e7610417565b6101e7670de0b6b3a764000081565b610269610264366004614d87565b61042e565b6040516101f1929190615003565b610269610285366004614d87565b6110dd565b61021a610298366004614b21565b611c6d565b6101e76102ab366004614cc6565b611ca7565b6101e76102be366004614ddc565b6127be565b6101e7612f2c565b6101e76102d9366004614c7d565b612f41565b6101e7613d92565b61021a6102f4366004614b21565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6101e7613da9565b6101e7613dbc565b7f42524f4e5a4500000000000000000000000000000000000000000000000000006101e7565b6101e761036b366004614c3c565b613dda565b6101e7600881565b6101e7600281565b6101e7600181565b6101e7613ea2565b6101e7613eb5565b6101e7600081565b6103b36103ae366004614b21565b613ed4565b6040516101f19190614ff0565b6103b36103ce366004614b21565b61427c565b6103b36103e1366004614b21565b614522565b6101e76147be565b6101e76103fc366004614b21565b6147d1565b610414670de0b6b3a7640000603261510a565b81565b6104146402540be400670de0b6b3a76400006150d1565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600160209081526040808320888452909152812054909160609116806104d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064015b60405180910390fd5b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063eb44fdd39060240160006040518083038186803b15801561053b57600080fd5b505afa15801561054f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105959190810190614e3b565b905060008973ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156105df57600080fd5b505afa1580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190614e1f565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b15801561068e57600080fd5b505af11580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190614c1b565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190614c1b565b506040517fcc87adea0000000000000000000000000000000000000000000000000000000081526004810189905260009073ffffffffffffffffffffffffffffffffffffffff8c169063cc87adea9060240160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190614f40565b6040517f221fff81000000000000000000000000000000000000000000000000000000008152600481018c90526024810182905230604482015290915073ffffffffffffffffffffffffffffffffffffffff8c169063221fff8190606401600060405180830381600087803b1580156108a857600080fd5b505af11580156108bc573d6000803e3d6000fd5b505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff955060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190614f40565b9050600084602001515167ffffffffffffffff8111156109ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109d5578160200160208202803683370190505b50905060005b856020015151811015610bb25783828281518110610a22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600086602001518281518110610a6d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000918a169063f8b2cb4f9060240160206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190614f40565b90506000670de0b6b3a7640000610b356002886150d1565b8388610b4a6002670de0b6b3a76400006150d1565b610b5c670de0b6b3a76400008d61510a565b610b669190615147565b610b70919061510a565b610b7a91906150d1565b610b849190615147565b610b8e91906150d1565b90508b811015610b9c57809b505b5050508080610baa9061515e565b9150506109db565b506040517f4f69c0d400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690634f69c0d490610c07908b908590600401615003565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050505087861015610ccb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f576f756c64206e6f74206861766520726563656976656420656e6f756768204c60448201527f5020746f6b656e7300000000000000000000000000000000000000000000000060648201526084016104c9565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820188905285169063a9059cbb90604401602060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d739190614c1b565b5082602001515167ffffffffffffffff811115610db9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610de2578160200160208202803683370190505b50945060005b83602001515181101561107057600084602001518281518110610e34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a082319060240160206040518083038186803b158015610ea757600080fd5b505afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190614f40565b878381518110610f18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000878381518110610f5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151111561105d578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a898581518110610fc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161100992919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190614c1b565b505b50806110688161515e565b915050610de8565b50338a73ffffffffffffffffffffffffffffffffffffffff8d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8a6110b58e615197565b8b8b6040516110c79493929190614fb5565b60405180910390a4505050509550959350505050565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526001602090815260408083208884529091528120549091606091168061117c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063eb44fdd39060240160006040518083038186803b1580156111e557600080fd5b505afa1580156111f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261123f9190810190614e3b565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810189905290915073ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90606401602060405180830381600087803b1580156112b657600080fd5b505af11580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee9190614c1b565b506060600082602001515167ffffffffffffffff811115611338577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611361578160200160208202803683370190505b506040517fea40f3f700000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff85169063ea40f3f7906113b9908c908590600401615003565b60006040518083038186803b1580156113d157600080fd5b505afa1580156113e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261142b9190810190614be8565b6040517fb02f0b7300000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff85169063b02f0b7390611482908c908590600401615003565b600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93506000925050505b83602001515181101561154c576000838281518110611523577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905082811015611539578092505b50806115448161515e565b9150506114db565b508a73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190614f40565b8b73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561161157600080fd5b505afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190614f40565b61165390836150d1565b61165d919061510a565b6040517f53ac55f5000000000000000000000000000000000000000000000000000000008152600481018c905290915060009073ffffffffffffffffffffffffffffffffffffffff8d16906353ac55f59060240160206040518083038186803b1580156116c957600080fd5b505afa1580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190614c1b565b905080156117b8576040517f992c9079000000000000000000000000000000000000000000000000000000008152600481018c905273ffffffffffffffffffffffffffffffffffffffff89811660248301528d169063992c907990604401602060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190614f40565b965061186a565b6040517f35a9cdad000000000000000000000000000000000000000000000000000000008152600481018c90526024810183905273ffffffffffffffffffffffffffffffffffffffff89811660448301528d16906335a9cdad90606401602060405180830381600087803b15801561182f57600080fd5b505af1158015611843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118679190614f40565b96505b8887116118f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416d6f756e74206f6620636f6c6c61746572616c2072657475726e656420746f60448201527f6f206c6f772e000000000000000000000000000000000000000000000000000060648201526084016104c9565b83602001515167ffffffffffffffff81111561193e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611967578160200160208202803683370190505b50955060005b846020015151811015611be8576000856020015182815181106119b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508280156119ff5750856040015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611a0a5750611bd6565b83858381518110611a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611a569190615147565b888381518110611a8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000888381518110611ad6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511115611bd4578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8a8581518110611b3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401611b8092919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b158015611b9a57600080fd5b505af1158015611bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd29190614c1b565b505b505b80611be08161515e565b91505061196d565b503373ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b8b8f611c4590615197565b8c604051611c569493929190614fb5565b60405180910390a450505050509550959350505050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160209081526040808320858452909152902054165b92915050565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845290915281205490911680611d43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810187905260009073ffffffffffffffffffffffffffffffffffffffff89169063eb44fdd39060240160006040518083038186803b158015611dac57600080fd5b505afa158015611dc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611e069190810190614e3b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000805b836020015151811015611e9a57878181518110611e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182611e8691906150b9565b915080611e928161515e565b915050611e2d565b5082602001518881518110611ed8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015611f5857600080fd5b505af1158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f909190614c1b565b5082602001518881518110611fce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301529091169063095ea7b390604401602060405180830381600087803b15801561206957600080fd5b505af115801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190614c1b565b5060005b8360200151518110156123bf57888114156120bf576123ad565b6000846020015182815181106120fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008673ffffffffffffffffffffffffffffffffffffffff16638201aa3f87602001518d81518110612163577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518c86815181106121a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101919091529085166044820152600060648201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608482015260a4016040805180830381600087803b15801561225157600080fd5b505af1158015612265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122899190614f58565b5090508c73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b1580156122d257600080fd5b505afa1580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a9190614f40565b8d73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561235057600080fd5b505afa158015612364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123889190614f40565b61239290836150d1565b61239c919061510a565b9050848110156123aa578094505b50505b806123b78161515e565b9150506120a5565b508582101561242a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d696e696d756d2073657473206e6f7420617661696c61626c652e000000000060448201526064016104c9565b6040517f35a9cdad000000000000000000000000000000000000000000000000000000008152600481018a90526024810183905233604482015273ffffffffffffffffffffffffffffffffffffffff8b16906335a9cdad90606401602060405180830381600087803b15801561249f57600080fd5b505af11580156124b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d79190614f40565b5060005b83602001515181101561269a57600084602001518281518110612527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b15801561259d57600080fd5b505afa1580156125b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d59190614f40565b90508015612685576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90604401602060405180830381600087803b15801561264b57600080fd5b505af115801561265f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126839190614c1b565b505b505080806126929061515e565b9150506124db565b506040517f473a6d520000000000000000000000000000000000000000000000000000000081526004810183905260009073ffffffffffffffffffffffffffffffffffffffff8c169063473a6d529060240160206040518083038186803b15801561270457600080fd5b505afa158015612718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273c9190614f40565b9050338a73ffffffffffffffffffffffffffffffffffffffff8d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c8561278388615197565b61278d8a8a614891565b60408051948552602085019390935291830152606082015260800160405180910390a49a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526001602090815260408083208884529091528120549091168061285a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810187905260009073ffffffffffffffffffffffffffffffffffffffff89169063eb44fdd39060240160006040518083038186803b1580156128c357600080fd5b505afa1580156128d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261291d9190810190614e3b565b6040517fea05487900000000000000000000000000000000000000000000000000000000815260048101899052602481018890526044810187905290915073ffffffffffffffffffffffffffffffffffffffff89169063ea05487990606401600060405180830381600087803b15801561299657600080fd5b505af11580156129aa573d6000803e3d6000fd5b5050505060008873ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156129f657600080fd5b505afa158015612a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2e9190614e1f565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810188905290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b158015612aa557600080fd5b505af1158015612ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612add9190614c1b565b506040517fcc87adea0000000000000000000000000000000000000000000000000000000081526004810187905260009073ffffffffffffffffffffffffffffffffffffffff8b169063cc87adea9060240160206040518083038186803b158015612b4757600080fd5b505afa158015612b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7f9190614f40565b6040517f221fff81000000000000000000000000000000000000000000000000000000008152600481018b90526024810182905230604482015290915073ffffffffffffffffffffffffffffffffffffffff8b169063221fff8190606401600060405180830381600087803b158015612bf757600080fd5b505af1158015612c0b573d6000803e3d6000fd5b505050506000819050600084602001518a81518110612c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060005b856020015151811015612dc9578a811415612c7a57612db7565b600086602001518281518110612cb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301526024820188905285811660448301526000606483018190527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60848401529293508a1690638201aa3f9060a4016040805180830381600087803b158015612d6d57600080fd5b505af1158015612d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da59190614f58565b509050612db281866150b9565b945050505b80612dc18161515e565b915050612c60565b5087821015612e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536c69707061676520657863656564656400000000000000000000000000000060448201526064016104c9565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90604401602060405180830381600087803b158015612ea257600080fd5b505af1158015612eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eda9190614c1b565b503390508a73ffffffffffffffffffffffffffffffffffffffff8d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c612f218d615197565b8661278d8989614891565b610414620f4240670de0b6b3a76400006150d1565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260016020908152604080832087845290915281205490911615612fdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f506f6f6c20616c7265616479206372656174656400000000000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810185905260009073ffffffffffffffffffffffffffffffffffffffff87169063eb44fdd39060240160006040518083038186803b15801561304657600080fd5b505afa15801561305a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526130a09190810190614e3b565b6040517fcc87adea0000000000000000000000000000000000000000000000000000000081526004810186905290915060009073ffffffffffffffffffffffffffffffffffffffff88169063cc87adea9060240160206040518083038186803b15801561310c57600080fd5b505afa158015613120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131449190614f40565b9050613159670de0b6b3a7640000606461510a565b8110156131e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f496e697469616c206c6971756964697479206d757374206265206174206c656160448201527f73742031303020636f6c6c61746572616c2e000000000000000000000000000060648201526084016104c9565b60008773ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561323057600080fd5b505afa158015613244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132689190614e1f565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152909150869073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9060440160206040518083038186803b1580156132d857600080fd5b505afa1580156132ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133109190614f40565b101561339e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f696e73756666696369656e7420636f6c6c61746572616c20616c6c6f77616e6360448201527f6520666f7220696e697469616c206c697175696469747900000000000000000060648201526084016104c9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905273ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190614c1b565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b1580156134da57600080fd5b505af11580156134ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135129190614c1b565b506040517f221fff81000000000000000000000000000000000000000000000000000000008152600481018890526024810183905230604482015273ffffffffffffffffffffffffffffffffffffffff89169063221fff8190606401600060405180830381600087803b15801561358857600080fd5b505af115801561359c573d6000803e3d6000fd5b5050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561360b57600080fd5b505af115801561361f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136439190614e1f565b905060005b84602001515181101561387157600085602001518281518110613694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301529192509082169063095ea7b390604401602060405180830381600087803b15801561373257600080fd5b505af1158015613746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376a9190614c1b565b508273ffffffffffffffffffffffffffffffffffffffff1663e4e1e538828789610120015186815181106137c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401600060405180830381600087803b15801561384557600080fd5b505af1158015613859573d6000803e3d6000fd5b505050505080806138699061515e565b915050613648565b506002546040517f34e19907000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff8216906334e1990790602401600060405180830381600087803b1580156138de57600080fd5b505af11580156138f2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561393e57600080fd5b505af1158015613952573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff89811660009081526001602090815260408083208c8452909152812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016928416929092179091556139c96103e8670de0b6b3a76400006150d1565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b158015613a2e57600080fd5b505afa158015613a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a669190614f40565b613a709190615147565b905073ffffffffffffffffffffffffffffffffffffffff821663a9059cbb6000613aa46103e8670de0b6b3a76400006150d1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015613b0f57600080fd5b505af1158015613b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b479190614c1b565b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905283169063a9059cbb90604401602060405180830381600087803b158015613bb857600080fd5b505af1158015613bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf09190614c1b565b50600085602001515167ffffffffffffffff811115613c38577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015613c61578160200160208202803683370190505b50905060005b866020015151811015613ccc576000828281518110613caf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015280613cc48161515e565b915050613c67565b506040805173ffffffffffffffffffffffffffffffffffffffff85811682528a8116602083015233928d92918f16917ffb27591822deac7913ea973cf845992f243e2ba5634ef8fbe0b6554aca37a428910160405180910390a4338a73ffffffffffffffffffffffffffffffffffffffff8d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b613d6a8e615197565b8787604051613d7c9493929190614fb5565b60405180910390a4509998505050505050505050565b61041464e8d4a51000670de0b6b3a76400006150d1565b610414670de0b6b3a7640000606461510a565b613dcf6003670de0b6b3a76400006150d1565b6104149060016150b9565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526001602090815260408083208684529091528082205490517f70a0823100000000000000000000000000000000000000000000000000000000815284841660048201529192169081906370a082319060240160206040518083038186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e999190614f40565b95945050505050565b610414600a670de0b6b3a76400006150d1565b6001613eca670de0b6b3a7640000600261510a565b6104149190615147565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083208584529091529020546060911680613f445760005b604051908082528060200260200182016040528015613f3b578160200160208202803683370190505b50915050611ca1565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810184905260009073ffffffffffffffffffffffffffffffffffffffff86169063eb44fdd39060240160006040518083038186803b158015613fad57600080fd5b505afa158015613fc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526140079190810190614e3b565b905060008160200151600081518110614049577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600082602001515167ffffffffffffffff81111561409a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156140c3578160200160208202803683370190505b509050670de0b6b3a764000081600081518110614109577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015260015b8360200151518110156142715760008573ffffffffffffffffffffffffffffffffffffffff166315e84af98587602001518581518110614180577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016141c792919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b60206040518083038186803b1580156141df57600080fd5b505afa1580156141f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142179190614f40565b905080838381518110614253577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015250806142698161515e565b915050614117565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020908152604080832085845290915290205460609116806142be576000613f12565b60008173ffffffffffffffffffffffffffffffffffffffff1663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561430657600080fd5b505afa15801561431a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526143609190810190614b4c565b90506000815167ffffffffffffffff8111156143a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156143ce578160200160208202803683370190505b50905060005b8251811015614518578373ffffffffffffffffffffffffffffffffffffffff1663948d8ce6848381518110614432577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401614472919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b15801561448a57600080fd5b505afa15801561449e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c29190614f40565b8282815181106144fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152806145108161515e565b9150506143d4565b5095945050505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083208584529091529020546060911680614564576000613f12565b60008173ffffffffffffffffffffffffffffffffffffffff1663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156145ac57600080fd5b505afa1580156145c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526146069190810190614b4c565b90506000815167ffffffffffffffff81111561464b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015614674578160200160208202803683370190505b50905060005b8251811015614518578373ffffffffffffffffffffffffffffffffffffffff1663f8b2cb4f8483815181106146d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401614718919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b15801561473057600080fd5b505afa158015614744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147689190614f40565b8282815181106147a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152806147b68161515e565b91505061467a565b6104146002670de0b6b3a76400006150d1565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020908152604080832085845282528083205481517fd4cadf68000000000000000000000000000000000000000000000000000000008152915193941692839263d4cadf689260048082019391829003018186803b15801561485157600080fd5b505afa158015614865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148899190614f40565b949350505050565b6000816148fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4552525f4449565f5a45524f000000000000000000000000000000000000000060448201526064016104c9565b600061490e670de0b6b3a76400008561510a565b905083158061492d5750670de0b6b3a764000061492b85836150d1565b145b614993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4552525f4449565f494e5445524e414c0000000000000000000000000000000060448201526064016104c9565b60006149a06002856150d1565b6149aa90836150b9565b905081811015614a16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4552525f4449565f494e5445524e414c0000000000000000000000000000000060448201526064016104c9565b6000614a2285836150d1565b9695505050505050565b8051614a378161522b565b919050565b600082601f830112614a4c578081fd5b81516020614a61614a5c83615095565b615046565b80838252828201915082860187848660051b8901011115614a80578586fd5b855b85811015614aa7578151614a958161522b565b84529284019290840190600101614a82565b5090979650505050505050565b600082601f830112614ac4578081fd5b81516020614ad4614a5c83615095565b80838252828201915082860187848660051b8901011115614af3578586fd5b855b85811015614aa757815184529284019290840190600101614af5565b80518015158114614a3757600080fd5b60008060408385031215614b33578182fd5b8235614b3e8161522b565b946020939093013593505050565b60006020808385031215614b5e578182fd5b825167ffffffffffffffff811115614b74578283fd5b8301601f81018513614b84578283fd5b8051614b92614a5c82615095565b80828252848201915084840188868560051b8701011115614bb1578687fd5b8694505b83851015614bdc578051614bc88161522b565b835260019490940193918501918501614bb5565b50979650505050505050565b600060208284031215614bf9578081fd5b815167ffffffffffffffff811115614c0f578182fd5b61488984828501614ab4565b600060208284031215614c2c578081fd5b614c3582614b11565b9392505050565b600080600060608486031215614c50578081fd5b8335614c5b8161522b565b9250602084013591506040840135614c728161522b565b809150509250925092565b60008060008060808587031215614c92578182fd5b8435614c9d8161522b565b935060208501359250604085013591506060850135614cbb8161522b565b939692955090935050565b600080600080600060a08688031215614cdd578283fd5b8535614ce88161522b565b9450602086810135945060408701359350606087013567ffffffffffffffff811115614d12578283fd5b8701601f81018913614d22578283fd5b8035614d30614a5c82615095565b8082825284820191508484018c868560051b8701011115614d4f578687fd5b8694505b83851015614d71578035835260019490940193918501918501614d53565b50989b979a509598608001359695505050505050565b600080600080600060a08688031215614d9e578283fd5b8535614da98161522b565b94506020860135935060408601359250606086013591506080860135614dce8161522b565b809150509295509295909350565b600080600080600060a08688031215614df3578283fd5b8535614dfe8161522b565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215614e30578081fd5b8151614c358161522b565b600060208284031215614e4c578081fd5b815167ffffffffffffffff80821115614e63578283fd5b908301906101608286031215614e77578283fd5b614e7f61501c565b614e8883614a2c565b8152602083015182811115614e9b578485fd5b614ea787828601614a3c565b602083015250614eb960408401614a2c565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015183811115614f0f578586fd5b614f1b88828701614ab4565b8284015250506101409150614f31828401614b11565b91810191909152949350505050565b600060208284031215614f51578081fd5b5051919050565b60008060408385031215614f6a578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015614faa57815187529582019590820190600101614f8e565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152826040820152608060608201526000614a226080830184614f7b565b602081526000614c356020830184614f7b565b8281526040602082015260006148896040830184614f7b565b604051610160810167ffffffffffffffff81118282101715615040576150406151fc565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561508d5761508d6151fc565b604052919050565b600067ffffffffffffffff8211156150af576150af6151fc565b5060051b60200190565b600082198211156150cc576150cc6151cd565b500190565b600082615105577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615142576151426151cd565b500290565b600082821015615159576151596151cd565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615190576151906151cd565b5060010190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156151c9576151c96151cd565b0390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461524d57600080fd5b5056fea264697066735822122065b9fe7b7a7f25e320eaf2e404f536f4a5c17606afd6e838a11b46102b41f1e864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80639a86139b11610104578063c36596a6116100a2578063d2364bf311610071578063d2364bf3146103d3578063e4a28a52146101df578063ec093021146103e6578063fa0de359146103ee57600080fd5b8063c36596a614610247578063c6580d1214610398578063c7b4b6dd146103a0578063d055da71146103c057600080fd5b8063b7b800a4116100de578063b7b800a414610378578063ba019dab14610380578063bc063e1a14610388578063bc694ea21461039057600080fd5b80639a86139b14610337578063a0147aa11461035d578063b0e0d1361461037057600080fd5b806360cac85a1161017c578063867378c51161014b578063867378c5146102de5780638f38a555146102e65780639381cd2b14610327578063992e2a921461032f57600080fd5b806360cac85a1461029d57806372b60c30146102b057806376c7a3c7146102c3578063842980f4146102cb57600080fd5b8063218b5382116101b8578063218b53821461024757806345fa67831461025657806359f842b2146102775780635b5b9ea21461028a57600080fd5b806309a3bbe4146101df5780630a165940146101fa578063189d00ca1461023f575b600080fd5b6101e7610401565b6040519081526020015b60405180910390f35b60005461021a9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f1565b6101e7610417565b6101e7670de0b6b3a764000081565b610269610264366004614d87565b61042e565b6040516101f1929190615003565b610269610285366004614d87565b6110dd565b61021a610298366004614b21565b611c6d565b6101e76102ab366004614cc6565b611ca7565b6101e76102be366004614ddc565b6127be565b6101e7612f2c565b6101e76102d9366004614c7d565b612f41565b6101e7613d92565b61021a6102f4366004614b21565b600160209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6101e7613da9565b6101e7613dbc565b7f42524f4e5a4500000000000000000000000000000000000000000000000000006101e7565b6101e761036b366004614c3c565b613dda565b6101e7600881565b6101e7600281565b6101e7600181565b6101e7613ea2565b6101e7613eb5565b6101e7600081565b6103b36103ae366004614b21565b613ed4565b6040516101f19190614ff0565b6103b36103ce366004614b21565b61427c565b6103b36103e1366004614b21565b614522565b6101e76147be565b6101e76103fc366004614b21565b6147d1565b610414670de0b6b3a7640000603261510a565b81565b6104146402540be400670de0b6b3a76400006150d1565b73ffffffffffffffffffffffffffffffffffffffff8086166000908152600160209081526040808320888452909152812054909160609116806104d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064015b60405180910390fd5b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063eb44fdd39060240160006040518083038186803b15801561053b57600080fd5b505afa15801561054f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105959190810190614e3b565b905060008973ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156105df57600080fd5b505afa1580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190614e1f565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a905290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b15801561068e57600080fd5b505af11580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190614c1b565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190614c1b565b506040517fcc87adea0000000000000000000000000000000000000000000000000000000081526004810189905260009073ffffffffffffffffffffffffffffffffffffffff8c169063cc87adea9060240160206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190614f40565b6040517f221fff81000000000000000000000000000000000000000000000000000000008152600481018c90526024810182905230604482015290915073ffffffffffffffffffffffffffffffffffffffff8c169063221fff8190606401600060405180830381600087803b1580156108a857600080fd5b505af11580156108bc573d6000803e3d6000fd5b505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff955060008473ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092b57600080fd5b505afa15801561093f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109639190614f40565b9050600084602001515167ffffffffffffffff8111156109ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156109d5578160200160208202803683370190505b50905060005b856020015151811015610bb25783828281518110610a22577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050600086602001518281518110610a6d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517ff8b2cb4f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301529192506000918a169063f8b2cb4f9060240160206040518083038186803b158015610ae557600080fd5b505afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d9190614f40565b90506000670de0b6b3a7640000610b356002886150d1565b8388610b4a6002670de0b6b3a76400006150d1565b610b5c670de0b6b3a76400008d61510a565b610b669190615147565b610b70919061510a565b610b7a91906150d1565b610b849190615147565b610b8e91906150d1565b90508b811015610b9c57809b505b5050508080610baa9061515e565b9150506109db565b506040517f4f69c0d400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff871690634f69c0d490610c07908b908590600401615003565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050505087861015610ccb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f576f756c64206e6f74206861766520726563656976656420656e6f756768204c60448201527f5020746f6b656e7300000000000000000000000000000000000000000000000060648201526084016104c9565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820188905285169063a9059cbb90604401602060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d739190614c1b565b5082602001515167ffffffffffffffff811115610db9577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610de2578160200160208202803683370190505b50945060005b83602001515181101561107057600084602001518281518110610e34577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906370a082319060240160206040518083038186803b158015610ea757600080fd5b505afa158015610ebb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edf9190614f40565b878381518110610f18577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000878381518110610f5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151111561105d578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8a898581518110610fc3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161100992919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b15801561102357600080fd5b505af1158015611037573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105b9190614c1b565b505b50806110688161515e565b915050610de8565b50338a73ffffffffffffffffffffffffffffffffffffffff8d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8a6110b58e615197565b8b8b6040516110c79493929190614fb5565b60405180910390a4505050509550959350505050565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526001602090815260408083208884529091528120549091606091168061117c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810188905260009073ffffffffffffffffffffffffffffffffffffffff8a169063eb44fdd39060240160006040518083038186803b1580156111e557600080fd5b505afa1580156111f9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261123f9190810190614e3b565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810189905290915073ffffffffffffffffffffffffffffffffffffffff8316906323b872dd90606401602060405180830381600087803b1580156112b657600080fd5b505af11580156112ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ee9190614c1b565b506060600082602001515167ffffffffffffffff811115611338577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611361578160200160208202803683370190505b506040517fea40f3f700000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff85169063ea40f3f7906113b9908c908590600401615003565b60006040518083038186803b1580156113d157600080fd5b505afa1580156113e5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261142b9190810190614be8565b6040517fb02f0b7300000000000000000000000000000000000000000000000000000000815290925073ffffffffffffffffffffffffffffffffffffffff85169063b02f0b7390611482908c908590600401615003565b600060405180830381600087803b15801561149c57600080fd5b505af11580156114b0573d6000803e3d6000fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff93506000925050505b83602001515181101561154c576000838281518110611523577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905082811015611539578092505b50806115448161515e565b9150506114db565b508a73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561159357600080fd5b505afa1580156115a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cb9190614f40565b8b73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561161157600080fd5b505afa158015611625573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116499190614f40565b61165390836150d1565b61165d919061510a565b6040517f53ac55f5000000000000000000000000000000000000000000000000000000008152600481018c905290915060009073ffffffffffffffffffffffffffffffffffffffff8d16906353ac55f59060240160206040518083038186803b1580156116c957600080fd5b505afa1580156116dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117019190614c1b565b905080156117b8576040517f992c9079000000000000000000000000000000000000000000000000000000008152600481018c905273ffffffffffffffffffffffffffffffffffffffff89811660248301528d169063992c907990604401602060405180830381600087803b15801561177957600080fd5b505af115801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190614f40565b965061186a565b6040517f35a9cdad000000000000000000000000000000000000000000000000000000008152600481018c90526024810183905273ffffffffffffffffffffffffffffffffffffffff89811660448301528d16906335a9cdad90606401602060405180830381600087803b15801561182f57600080fd5b505af1158015611843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118679190614f40565b96505b8887116118f9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416d6f756e74206f6620636f6c6c61746572616c2072657475726e656420746f60448201527f6f206c6f772e000000000000000000000000000000000000000000000000000060648201526084016104c9565b83602001515167ffffffffffffffff81111561193e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611967578160200160208202803683370190505b50955060005b846020015151811015611be8576000856020015182815181106119b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508280156119ff5750856040015173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15611a0a5750611bd6565b83858381518110611a44577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611a569190615147565b888381518110611a8f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000888381518110611ad6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511115611bd4578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8b8a8581518110611b3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b8152600401611b8092919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b158015611b9a57600080fd5b505af1158015611bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd29190614c1b565b505b505b80611be08161515e565b91505061196d565b503373ffffffffffffffffffffffffffffffffffffffff168b8d73ffffffffffffffffffffffffffffffffffffffff167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b8b8f611c4590615197565b8c604051611c569493929190614fb5565b60405180910390a450505050509550959350505050565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152600160209081526040808320858452909152902054165b92915050565b73ffffffffffffffffffffffffffffffffffffffff808616600090815260016020908152604080832088845290915281205490911680611d43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810187905260009073ffffffffffffffffffffffffffffffffffffffff89169063eb44fdd39060240160006040518083038186803b158015611dac57600080fd5b505afa158015611dc0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611e069190810190614e3b565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000805b836020015151811015611e9a57878181518110611e73577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182611e8691906150b9565b915080611e928161515e565b915050611e2d565b5082602001518881518110611ed8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015611f5857600080fd5b505af1158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f909190614c1b565b5082602001518881518110611fce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301529091169063095ea7b390604401602060405180830381600087803b15801561206957600080fd5b505af115801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190614c1b565b5060005b8360200151518110156123bf57888114156120bf576123ad565b6000846020015182815181106120fe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060008673ffffffffffffffffffffffffffffffffffffffff16638201aa3f87602001518d81518110612163577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518c86815181106121a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101919091529085166044820152600060648201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff608482015260a4016040805180830381600087803b15801561225157600080fd5b505af1158015612265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122899190614f58565b5090508c73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b1580156122d257600080fd5b505afa1580156122e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230a9190614f40565b8d73ffffffffffffffffffffffffffffffffffffffff16637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561235057600080fd5b505afa158015612364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123889190614f40565b61239290836150d1565b61239c919061510a565b9050848110156123aa578094505b50505b806123b78161515e565b9150506120a5565b508582101561242a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d696e696d756d2073657473206e6f7420617661696c61626c652e000000000060448201526064016104c9565b6040517f35a9cdad000000000000000000000000000000000000000000000000000000008152600481018a90526024810183905233604482015273ffffffffffffffffffffffffffffffffffffffff8b16906335a9cdad90606401602060405180830381600087803b15801561249f57600080fd5b505af11580156124b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d79190614f40565b5060005b83602001515181101561269a57600084602001518281518110612527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a082319060240160206040518083038186803b15801561259d57600080fd5b505afa1580156125b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d59190614f40565b90508015612685576040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810182905273ffffffffffffffffffffffffffffffffffffffff83169063a9059cbb90604401602060405180830381600087803b15801561264b57600080fd5b505af115801561265f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126839190614c1b565b505b505080806126929061515e565b9150506124db565b506040517f473a6d520000000000000000000000000000000000000000000000000000000081526004810183905260009073ffffffffffffffffffffffffffffffffffffffff8c169063473a6d529060240160206040518083038186803b15801561270457600080fd5b505afa158015612718573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273c9190614f40565b9050338a73ffffffffffffffffffffffffffffffffffffffff8d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c8561278388615197565b61278d8a8a614891565b60408051948552602085019390935291830152606082015260800160405180910390a49a9950505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526001602090815260408083208884529091528120549091168061285a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f506f6f6c206e6565647320746f2062652063726561746564000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810187905260009073ffffffffffffffffffffffffffffffffffffffff89169063eb44fdd39060240160006040518083038186803b1580156128c357600080fd5b505afa1580156128d7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261291d9190810190614e3b565b6040517fea05487900000000000000000000000000000000000000000000000000000000815260048101899052602481018890526044810187905290915073ffffffffffffffffffffffffffffffffffffffff89169063ea05487990606401600060405180830381600087803b15801561299657600080fd5b505af11580156129aa573d6000803e3d6000fd5b5050505060008873ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b1580156129f657600080fd5b505afa158015612a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a2e9190614e1f565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810188905290915073ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b158015612aa557600080fd5b505af1158015612ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612add9190614c1b565b506040517fcc87adea0000000000000000000000000000000000000000000000000000000081526004810187905260009073ffffffffffffffffffffffffffffffffffffffff8b169063cc87adea9060240160206040518083038186803b158015612b4757600080fd5b505afa158015612b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7f9190614f40565b6040517f221fff81000000000000000000000000000000000000000000000000000000008152600481018b90526024810182905230604482015290915073ffffffffffffffffffffffffffffffffffffffff8b169063221fff8190606401600060405180830381600087803b158015612bf757600080fd5b505af1158015612c0b573d6000803e3d6000fd5b505050506000819050600084602001518a81518110612c53577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905060005b856020015151811015612dc9578a811415612c7a57612db7565b600086602001518281518110612cb9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f8201aa3f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80831660048301526024820188905285811660448301526000606483018190527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60848401529293508a1690638201aa3f9060a4016040805180830381600087803b158015612d6d57600080fd5b505af1158015612d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da59190614f58565b509050612db281866150b9565b945050505b80612dc18161515e565b915050612c60565b5087821015612e34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f536c69707061676520657863656564656400000000000000000000000000000060448201526064016104c9565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff82169063a9059cbb90604401602060405180830381600087803b158015612ea257600080fd5b505af1158015612eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eda9190614c1b565b503390508a73ffffffffffffffffffffffffffffffffffffffff8d167fec2a60d57293d00dfe68ab5f1d18738c4600ce39c0c0c623fc086814615f33fa8c612f218d615197565b8661278d8989614891565b610414620f4240670de0b6b3a76400006150d1565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260016020908152604080832087845290915281205490911615612fdd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f506f6f6c20616c7265616479206372656174656400000000000000000000000060448201526064016104c9565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810185905260009073ffffffffffffffffffffffffffffffffffffffff87169063eb44fdd39060240160006040518083038186803b15801561304657600080fd5b505afa15801561305a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526130a09190810190614e3b565b6040517fcc87adea0000000000000000000000000000000000000000000000000000000081526004810186905290915060009073ffffffffffffffffffffffffffffffffffffffff88169063cc87adea9060240160206040518083038186803b15801561310c57600080fd5b505afa158015613120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131449190614f40565b9050613159670de0b6b3a7640000606461510a565b8110156131e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f496e697469616c206c6971756964697479206d757374206265206174206c656160448201527f73742031303020636f6c6c61746572616c2e000000000000000000000000000060648201526084016104c9565b60008773ffffffffffffffffffffffffffffffffffffffff1663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b15801561323057600080fd5b505afa158015613244573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132689190614e1f565b6040517fdd62ed3e000000000000000000000000000000000000000000000000000000008152336004820152306024820152909150869073ffffffffffffffffffffffffffffffffffffffff83169063dd62ed3e9060440160206040518083038186803b1580156132d857600080fd5b505afa1580156132ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133109190614f40565b101561339e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f696e73756666696369656e7420636f6c6c61746572616c20616c6c6f77616e6360448201527f6520666f7220696e697469616c206c697175696469747900000000000000000060648201526084016104c9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810187905273ffffffffffffffffffffffffffffffffffffffff8216906323b872dd90606401602060405180830381600087803b15801561341257600080fd5b505af1158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190614c1b565b506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602483015282169063095ea7b390604401602060405180830381600087803b1580156134da57600080fd5b505af11580156134ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135129190614c1b565b506040517f221fff81000000000000000000000000000000000000000000000000000000008152600481018890526024810183905230604482015273ffffffffffffffffffffffffffffffffffffffff89169063221fff8190606401600060405180830381600087803b15801561358857600080fd5b505af115801561359c573d6000803e3d6000fd5b5050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d556c5dc6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561360b57600080fd5b505af115801561361f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136439190614e1f565b905060005b84602001515181101561387157600085602001518281518110613694577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60248301529192509082169063095ea7b390604401602060405180830381600087803b15801561373257600080fd5b505af1158015613746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061376a9190614c1b565b508273ffffffffffffffffffffffffffffffffffffffff1663e4e1e538828789610120015186815181106137c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101516040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff909316600484015260248301919091526044820152606401600060405180830381600087803b15801561384557600080fd5b505af1158015613859573d6000803e3d6000fd5b505050505080806138699061515e565b915050613648565b506002546040517f34e19907000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff8216906334e1990790602401600060405180830381600087803b1580156138de57600080fd5b505af11580156138f2573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16634bb278f36040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561393e57600080fd5b505af1158015613952573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff89811660009081526001602090815260408083208c8452909152812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016928416929092179091556139c96103e8670de0b6b3a76400006150d1565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8416906370a082319060240160206040518083038186803b158015613a2e57600080fd5b505afa158015613a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a669190614f40565b613a709190615147565b905073ffffffffffffffffffffffffffffffffffffffff821663a9059cbb6000613aa46103e8670de0b6b3a76400006150d1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401602060405180830381600087803b158015613b0f57600080fd5b505af1158015613b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b479190614c1b565b506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526024820183905283169063a9059cbb90604401602060405180830381600087803b158015613bb857600080fd5b505af1158015613bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf09190614c1b565b50600085602001515167ffffffffffffffff811115613c38577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015613c61578160200160208202803683370190505b50905060005b866020015151811015613ccc576000828281518110613caf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015280613cc48161515e565b915050613c67565b506040805173ffffffffffffffffffffffffffffffffffffffff85811682528a8116602083015233928d92918f16917ffb27591822deac7913ea973cf845992f243e2ba5634ef8fbe0b6554aca37a428910160405180910390a4338a73ffffffffffffffffffffffffffffffffffffffff8d167f9a1dccf45b5053e827f262e45fbb5211c2bd99497d340eecaebbd245eb48f4bc8b613d6a8e615197565b8787604051613d7c9493929190614fb5565b60405180910390a4509998505050505050505050565b61041464e8d4a51000670de0b6b3a76400006150d1565b610414670de0b6b3a7640000606461510a565b613dcf6003670de0b6b3a76400006150d1565b6104149060016150b9565b73ffffffffffffffffffffffffffffffffffffffff83811660009081526001602090815260408083208684529091528082205490517f70a0823100000000000000000000000000000000000000000000000000000000815284841660048201529192169081906370a082319060240160206040518083038186803b158015613e6157600080fd5b505afa158015613e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e999190614f40565b95945050505050565b610414600a670de0b6b3a76400006150d1565b6001613eca670de0b6b3a7640000600261510a565b6104149190615147565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083208584529091529020546060911680613f445760005b604051908082528060200260200182016040528015613f3b578160200160208202803683370190505b50915050611ca1565b6040517feb44fdd30000000000000000000000000000000000000000000000000000000081526004810184905260009073ffffffffffffffffffffffffffffffffffffffff86169063eb44fdd39060240160006040518083038186803b158015613fad57600080fd5b505afa158015613fc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526140079190810190614e3b565b905060008160200151600081518110614049577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600082602001515167ffffffffffffffff81111561409a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156140c3578160200160208202803683370190505b509050670de0b6b3a764000081600081518110614109577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015260015b8360200151518110156142715760008573ffffffffffffffffffffffffffffffffffffffff166315e84af98587602001518581518110614180577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016141c792919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b60206040518083038186803b1580156141df57600080fd5b505afa1580156141f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142179190614f40565b905080838381518110614253577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602090810291909101015250806142698161515e565b915050614117565b509695505050505050565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020908152604080832085845290915290205460609116806142be576000613f12565b60008173ffffffffffffffffffffffffffffffffffffffff1663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561430657600080fd5b505afa15801561431a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526143609190810190614b4c565b90506000815167ffffffffffffffff8111156143a5577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156143ce578160200160208202803683370190505b50905060005b8251811015614518578373ffffffffffffffffffffffffffffffffffffffff1663948d8ce6848381518110614432577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401614472919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b15801561448a57600080fd5b505afa15801561449e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144c29190614f40565b8282815181106144fb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152806145108161515e565b9150506143d4565b5095945050505050565b73ffffffffffffffffffffffffffffffffffffffff80831660009081526001602090815260408083208584529091529020546060911680614564576000613f12565b60008173ffffffffffffffffffffffffffffffffffffffff1663cc77828d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156145ac57600080fd5b505afa1580156145c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526146069190810190614b4c565b90506000815167ffffffffffffffff81111561464b577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015614674578160200160208202803683370190505b50905060005b8251811015614518578373ffffffffffffffffffffffffffffffffffffffff1663f8b2cb4f8483815181106146d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b8152600401614718919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60206040518083038186803b15801561473057600080fd5b505afa158015614744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147689190614f40565b8282815181106147a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152806147b68161515e565b91505061467a565b6104146002670de0b6b3a76400006150d1565b73ffffffffffffffffffffffffffffffffffffffff808316600090815260016020908152604080832085845282528083205481517fd4cadf68000000000000000000000000000000000000000000000000000000008152915193941692839263d4cadf689260048082019391829003018186803b15801561485157600080fd5b505afa158015614865573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148899190614f40565b949350505050565b6000816148fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4552525f4449565f5a45524f000000000000000000000000000000000000000060448201526064016104c9565b600061490e670de0b6b3a76400008561510a565b905083158061492d5750670de0b6b3a764000061492b85836150d1565b145b614993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4552525f4449565f494e5445524e414c0000000000000000000000000000000060448201526064016104c9565b60006149a06002856150d1565b6149aa90836150b9565b905081811015614a16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4552525f4449565f494e5445524e414c0000000000000000000000000000000060448201526064016104c9565b6000614a2285836150d1565b9695505050505050565b8051614a378161522b565b919050565b600082601f830112614a4c578081fd5b81516020614a61614a5c83615095565b615046565b80838252828201915082860187848660051b8901011115614a80578586fd5b855b85811015614aa7578151614a958161522b565b84529284019290840190600101614a82565b5090979650505050505050565b600082601f830112614ac4578081fd5b81516020614ad4614a5c83615095565b80838252828201915082860187848660051b8901011115614af3578586fd5b855b85811015614aa757815184529284019290840190600101614af5565b80518015158114614a3757600080fd5b60008060408385031215614b33578182fd5b8235614b3e8161522b565b946020939093013593505050565b60006020808385031215614b5e578182fd5b825167ffffffffffffffff811115614b74578283fd5b8301601f81018513614b84578283fd5b8051614b92614a5c82615095565b80828252848201915084840188868560051b8701011115614bb1578687fd5b8694505b83851015614bdc578051614bc88161522b565b835260019490940193918501918501614bb5565b50979650505050505050565b600060208284031215614bf9578081fd5b815167ffffffffffffffff811115614c0f578182fd5b61488984828501614ab4565b600060208284031215614c2c578081fd5b614c3582614b11565b9392505050565b600080600060608486031215614c50578081fd5b8335614c5b8161522b565b9250602084013591506040840135614c728161522b565b809150509250925092565b60008060008060808587031215614c92578182fd5b8435614c9d8161522b565b935060208501359250604085013591506060850135614cbb8161522b565b939692955090935050565b600080600080600060a08688031215614cdd578283fd5b8535614ce88161522b565b9450602086810135945060408701359350606087013567ffffffffffffffff811115614d12578283fd5b8701601f81018913614d22578283fd5b8035614d30614a5c82615095565b8082825284820191508484018c868560051b8701011115614d4f578687fd5b8694505b83851015614d71578035835260019490940193918501918501614d53565b50989b979a509598608001359695505050505050565b600080600080600060a08688031215614d9e578283fd5b8535614da98161522b565b94506020860135935060408601359250606086013591506080860135614dce8161522b565b809150509295509295909350565b600080600080600060a08688031215614df3578283fd5b8535614dfe8161522b565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215614e30578081fd5b8151614c358161522b565b600060208284031215614e4c578081fd5b815167ffffffffffffffff80821115614e63578283fd5b908301906101608286031215614e77578283fd5b614e7f61501c565b614e8883614a2c565b8152602083015182811115614e9b578485fd5b614ea787828601614a3c565b602083015250614eb960408401614a2c565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015183811115614f0f578586fd5b614f1b88828701614ab4565b8284015250506101409150614f31828401614b11565b91810191909152949350505050565b600060208284031215614f51578081fd5b5051919050565b60008060408385031215614f6a578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b83811015614faa57815187529582019590820190600101614f8e565b509495945050505050565b73ffffffffffffffffffffffffffffffffffffffff85168152836020820152826040820152608060608201526000614a226080830184614f7b565b602081526000614c356020830184614f7b565b8281526040602082015260006148896040830184614f7b565b604051610160810167ffffffffffffffff81118282101715615040576150406151fc565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561508d5761508d6151fc565b604052919050565b600067ffffffffffffffff8211156150af576150af6151fc565b5060051b60200190565b600082198211156150cc576150cc6151cd565b500190565b600082615105577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615142576151426151cd565b500290565b600082821015615159576151596151cd565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615190576151906151cd565b5060010190565b60007f80000000000000000000000000000000000000000000000000000000000000008214156151c9576151c96151cd565b0390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461524d57600080fd5b5056fea264697066735822122065b9fe7b7a7f25e320eaf2e404f536f4a5c17606afd6e838a11b46102b41f1e864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17541,
        "contract": "contracts/turbo/AMMFactory.sol:AMMFactory",
        "label": "bFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(BFactory)4792"
      },
      {
        "astId": 17548,
        "contract": "contracts/turbo/AMMFactory.sol:AMMFactory",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_contract(BPool)8141))"
      },
      {
        "astId": 17550,
        "contract": "contracts/turbo/AMMFactory.sol:AMMFactory",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BFactory)4792": {
        "encoding": "inplace",
        "label": "contract BFactory",
        "numberOfBytes": "20"
      },
      "t_contract(BPool)8141": {
        "encoding": "inplace",
        "label": "contract BPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_contract(BPool)8141))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => contract BPool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_contract(BPool)8141)"
      },
      "t_mapping(t_uint256,t_contract(BPool)8141)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract BPool)",
        "numberOfBytes": "32",
        "value": "t_contract(BPool)8141"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}