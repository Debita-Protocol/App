{
  "address": "0xd245204db0b70722E703c9E803a0C461a31fA8F2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "name": "fetchDynamic",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract AbstractMarketFactoryV3",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "marketId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "tokenRatios",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "balances",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "weights",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalSupply",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.PoolBundle",
                  "name": "pool",
                  "type": "tuple"
                },
                {
                  "internalType": "contract OwnedERC20",
                  "name": "winner",
                  "type": "address"
                }
              ],
              "internalType": "struct Fetcher.DynamicMarketBundle",
              "name": "_super",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificDynamicMarketBundle[]",
          "name": "_bundles",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowestMarketIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract MasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_total",
          "type": "uint256"
        }
      ],
      "name": "fetchInitial",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "shareFactor",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "stakerFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "settlementFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFee",
                  "type": "uint256"
                },
                {
                  "internalType": "contract FeePot",
                  "name": "feePot",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "string",
                      "name": "symbol",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "decimals",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.CollateralBundle",
                  "name": "collateral",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "marketCount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Fetcher.MarketFactoryBundle",
              "name": "_super",
              "type": "tuple"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificMarketFactoryBundle",
          "name": "_marketFactoryBundle",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract AbstractMarketFactoryV3",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "marketId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "tokenRatios",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "balances",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "weights",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalSupply",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.PoolBundle",
                  "name": "pool",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "beginTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earlyDepositEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalRewardsAccrued",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "created",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct MasterChef.PoolStatusInfo",
                  "name": "rewards",
                  "type": "tuple"
                },
                {
                  "internalType": "contract OwnedERC20[]",
                  "name": "shareTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "contract OwnedERC20",
                  "name": "winner",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "initialOdds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Fetcher.StaticMarketBundle",
              "name": "_super",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificStaticMarketBundle[]",
          "name": "_marketBundles",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowestMarketIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract AMMFactory",
          "name": "_ammFactory",
          "type": "address"
        },
        {
          "internalType": "contract MasterChef",
          "name": "_masterChef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_marketId",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "contract AbstractMarketFactoryV3",
                  "name": "factory",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "marketId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "addr",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "tokenRatios",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "balances",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "weights",
                      "type": "uint256[]"
                    },
                    {
                      "internalType": "uint256",
                      "name": "swapFee",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalSupply",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Fetcher.PoolBundle",
                  "name": "pool",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "beginTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "endTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "earlyDepositEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "totalRewardsAccrued",
                      "type": "uint256"
                    },
                    {
                      "internalType": "bool",
                      "name": "created",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct MasterChef.PoolStatusInfo",
                  "name": "rewards",
                  "type": "tuple"
                },
                {
                  "internalType": "contract OwnedERC20[]",
                  "name": "shareTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256",
                  "name": "creationTimestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "contract OwnedERC20",
                  "name": "winner",
                  "type": "address"
                },
                {
                  "internalType": "uint256[]",
                  "name": "initialOdds",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct Fetcher.StaticMarketBundle",
              "name": "_super",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct TrustedFetcher.SpecificStaticMarketBundle",
          "name": "_bundle",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sayHi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4c3d1fa4be62ed25b7242f33a714180a841e6c9cc1f316806b500c0b970f4491",
  "receipt": {
    "to": null,
    "from": "0xFD84b7AC1E646580db8c77f1f05F47977fAda692",
    "contractAddress": "0xd245204db0b70722E703c9E803a0C461a31fA8F2",
    "transactionIndex": 6,
    "gasUsed": "1832562",
    "logsBloom": "0x
    "blockHash": "0xff8df21ac0090a6357c09eba993d4eaa3c2c4df72e577458d9d3a43cb2722648",
    "transactionHash": "0x4c3d1fa4be62ed25b7242f33a714180a841e6c9cc1f316806b500c0b970f4491",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 27679776,
        "transactionHash": "0x4c3d1fa4be62ed25b7242f33a714180a841e6c9cc1f316806b500c0b970f4491",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fd84b7ac1e646580db8c77f1f05f47977fada692",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003415a4b76fec7000000000000000000000000000000000000000000000000287eb7f5d4c107762000000000000000000000000000000000000000000001423b7102e30ae696cfa00000000000000000000000000000000000000000000000287b769b894a08af2000000000000000000000000000000000000000000001423b74443d565d9596a",
        "logIndex": 13,
        "blockHash": "0xff8df21ac0090a6357c09eba993d4eaa3c2c4df72e577458d9d3a43cb2722648"
      }
    ],
    "blockNumber": 27679776,
    "cumulativeGasUsed": "2924064",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "8691fb0b2a39bd5a97393529a6363a7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"fetchDynamic\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.PoolBundle\",\"name\":\"pool\",\"type\":\"tuple\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"}],\"internalType\":\"struct Fetcher.DynamicMarketBundle\",\"name\":\"_super\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedFetcher.SpecificDynamicMarketBundle[]\",\"name\":\"_bundles\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowestMarketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract MasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_total\",\"type\":\"uint256\"}],\"name\":\"fetchInitial\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"shareFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"contract FeePot\",\"name\":\"feePot\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.CollateralBundle\",\"name\":\"collateral\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"marketCount\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.MarketFactoryBundle\",\"name\":\"_super\",\"type\":\"tuple\"}],\"internalType\":\"struct TrustedFetcher.SpecificMarketFactoryBundle\",\"name\":\"_marketFactoryBundle\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.PoolBundle\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsAccrued\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChef.PoolStatusInfo\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Fetcher.StaticMarketBundle\",\"name\":\"_super\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedFetcher.SpecificStaticMarketBundle[]\",\"name\":\"_marketBundles\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowestMarketIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract AMMFactory\",\"name\":\"_ammFactory\",\"type\":\"address\"},{\"internalType\":\"contract MasterChef\",\"name\":\"_masterChef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_marketId\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"contract AbstractMarketFactoryV3\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenRatios\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"internalType\":\"struct Fetcher.PoolBundle\",\"name\":\"pool\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"beginTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earlyDepositEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsAccrued\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"created\",\"type\":\"bool\"}],\"internalType\":\"struct MasterChef.PoolStatusInfo\",\"name\":\"rewards\",\"type\":\"tuple\"},{\"internalType\":\"contract OwnedERC20[]\",\"name\":\"shareTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"creationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"contract OwnedERC20\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"initialOdds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Fetcher.StaticMarketBundle\",\"name\":\"_super\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct TrustedFetcher.SpecificStaticMarketBundle\",\"name\":\"_bundle\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sayHi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/turbo/random.sol\":\"TrustedFetcher\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/balancer/BColor.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface BColor {\\r\\n    function getColor() external view returns (bytes32);\\r\\n}\\r\\n\\r\\ncontract BBronze is BColor {\\r\\n    function getColor() external pure override returns (bytes32) {\\r\\n        return bytes32(\\\"BRONZE\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x23f5684acd4711203183665f2ab65bafb6d12d22d08d18423e4bb143d79d1d6c\",\"license\":\"MIT\"},\"contracts/balancer/BConst.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BColor.sol\\\";\\r\\n\\r\\ncontract BConst is BBronze {\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    uint256 public constant MIN_BOUND_TOKENS = 2;\\r\\n    uint256 public constant MAX_BOUND_TOKENS = 8;\\r\\n\\r\\n    uint256 public constant MIN_FEE = BONE / 10**6;\\r\\n    uint256 public constant MAX_FEE = BONE / 10;\\r\\n    uint256 public constant EXIT_FEE = 0;\\r\\n\\r\\n    uint256 public constant MIN_WEIGHT = BONE;\\r\\n    uint256 public constant MAX_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MAX_TOTAL_WEIGHT = BONE * 50;\\r\\n    uint256 public constant MIN_BALANCE = BONE / 10**12;\\r\\n\\r\\n    uint256 public constant INIT_POOL_SUPPLY = BONE * 100;\\r\\n\\r\\n    uint256 public constant MIN_BPOW_BASE = 1 wei;\\r\\n    uint256 public constant MAX_BPOW_BASE = (2 * BONE) - 1 wei;\\r\\n    uint256 public constant BPOW_PRECISION = BONE / 10**10;\\r\\n\\r\\n    uint256 public constant MAX_IN_RATIO = BONE / 2;\\r\\n    uint256 public constant MAX_OUT_RATIO = (BONE / 3) + 1 wei;\\r\\n}\\r\\n\",\"keccak256\":\"0x861f4d61a141af61fbc9c4824e0952b112c4dcb5329093ac73c5c31bdf83aec2\",\"license\":\"MIT\"},\"contracts/balancer/BFactory.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is disstributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n// Builds new BPools, logging their addresses and providing `isBPool(address) -> (bool)`\\r\\n\\r\\nimport \\\"./BPool.sol\\\";\\r\\n\\r\\ncontract BFactory is BBronze {\\r\\n    event LOG_NEW_POOL(address indexed caller, address indexed pool);\\r\\n\\r\\n    event LOG_BLABS(address indexed caller, address indexed blabs);\\r\\n\\r\\n    mapping(address => bool) private _isBPool;\\r\\n\\r\\n    function isBPool(address b) external view returns (bool) {\\r\\n        return _isBPool[b];\\r\\n    }\\r\\n\\r\\n    function newBPool() external returns (BPool) {\\r\\n        BPool bpool = new BPool();\\r\\n        _isBPool[address(bpool)] = true;\\r\\n        emit LOG_NEW_POOL(msg.sender, address(bpool));\\r\\n        bpool.setController(msg.sender);\\r\\n        return bpool;\\r\\n    }\\r\\n\\r\\n    address private _blabs;\\r\\n\\r\\n    constructor() {\\r\\n        _blabs = msg.sender;\\r\\n    }\\r\\n\\r\\n    function getBLabs() external view returns (address) {\\r\\n        return _blabs;\\r\\n    }\\r\\n\\r\\n    function setBLabs(address b) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        emit LOG_BLABS(msg.sender, b);\\r\\n        _blabs = b;\\r\\n    }\\r\\n\\r\\n    function collect(BPool pool) external {\\r\\n        require(msg.sender == _blabs, \\\"ERR_NOT_BLABS\\\");\\r\\n        uint256 collected = IERC20Balancer(pool).balanceOf(address(this));\\r\\n        bool xfer = pool.transfer(_blabs, collected);\\r\\n        require(xfer, \\\"ERR_ERC20_FAILED\\\");\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0fc1280b9ded4e258eca3987f20e5feab64f577a6537920121e174c8ddb8830c\",\"license\":\"MIT\"},\"contracts/balancer/BMath.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ncontract BMath is BBronze, BConst, BNum {\\r\\n    /**********************************************************************************************\\r\\n    // calcSpotPrice                                                                             //\\r\\n    // sP = spotPrice                                                                            //\\r\\n    // bI = tokenBalanceIn                ( bI / wI )         1                                  //\\r\\n    // bO = tokenBalanceOut         sP =  -----------  *  ----------                             //\\r\\n    // wI = tokenWeightIn                 ( bO / wO )     ( 1 - sF )                             //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcSpotPrice(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 spotPrice) {\\r\\n        uint256 numer = bdiv(tokenBalanceIn, tokenWeightIn);\\r\\n        uint256 denom = bdiv(tokenBalanceOut, tokenWeightOut);\\r\\n        uint256 ratio = bdiv(numer, denom);\\r\\n        uint256 scale = bdiv(BONE, bsub(BONE, swapFee));\\r\\n        return (spotPrice = bmul(ratio, scale));\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcOutGivenIn                                                                            //\\r\\n    // aO = tokenAmountOut                                                                       //\\r\\n    // bO = tokenBalanceOut                                                                      //\\r\\n    // bI = tokenBalanceIn              /      /            bI             \\\\    (wI / wO) \\\\      //\\r\\n    // aI = tokenAmountIn    aO = bO * |  1 - | --------------------------  | ^            |     //\\r\\n    // wI = tokenWeightIn               \\\\      \\\\ ( bI + ( aI * ( 1 - sF )) /              /      //\\r\\n    // wO = tokenWeightOut                                                                       //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcOutGivenIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightIn, tokenWeightOut);\\r\\n        uint256 adjustedIn = bsub(BONE, swapFee);\\r\\n        adjustedIn = bmul(tokenAmountIn, adjustedIn);\\r\\n        uint256 y = bdiv(tokenBalanceIn, badd(tokenBalanceIn, adjustedIn));\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        uint256 bar = bsub(BONE, foo);\\r\\n        tokenAmountOut = bmul(tokenBalanceOut, bar);\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcInGivenOut                                                                            //\\r\\n    // aI = tokenAmountIn                                                                        //\\r\\n    // bO = tokenBalanceOut               /  /     bO      \\\\    (wO / wI)      \\\\                 //\\r\\n    // bI = tokenBalanceIn          bI * |  | ------------  | ^            - 1  |                //\\r\\n    // aO = tokenAmountOut    aI =        \\\\  \\\\ ( bO - aO ) /                   /                 //\\r\\n    // wI = tokenWeightIn           --------------------------------------------                 //\\r\\n    // wO = tokenWeightOut                          ( 1 - sF )                                   //\\r\\n    // sF = swapFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcInGivenOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 weightRatio = bdiv(tokenWeightOut, tokenWeightIn);\\r\\n        uint256 diff = bsub(tokenBalanceOut, tokenAmountOut);\\r\\n        uint256 y = bdiv(tokenBalanceOut, diff);\\r\\n        uint256 foo = bpow(y, weightRatio);\\r\\n        foo = bsub(foo, BONE);\\r\\n        tokenAmountIn = bsub(BONE, swapFee);\\r\\n        tokenAmountIn = bdiv(bmul(tokenBalanceIn, foo), tokenAmountIn);\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolOutGivenSingleIn                                                                  //\\r\\n    // pAo = poolAmountOut         /                                              \\\\              //\\r\\n    // tAi = tokenAmountIn        ///      /     //    wI \\\\      \\\\\\\\       \\\\     wI \\\\             //\\r\\n    // wI = tokenWeightIn        //| tAi *| 1 - || 1 - --  | * sF || + tBi \\\\    --  \\\\            //\\r\\n    // tW = totalWeight     pAo=||  \\\\      \\\\     \\\\\\\\    tW /      //         | ^ tW   | * pS - pS //\\r\\n    // tBi = tokenBalanceIn      \\\\\\\\  ------------------------------------- /        /            //\\r\\n    // pS = poolSupply            \\\\\\\\                    tBi               /        /             //\\r\\n    // sF = swapFee                \\\\                                              /              //\\r\\n    **********************************************************************************************/\\r\\n\\r\\n    // Charge the trading fee for the proportion of tokenAi\\r\\n    ///  which is implicitly traded to the other pool tokens.\\r\\n    // That proportion is (1- weightTokenIn)\\r\\n    // tokenAiAfterFee = tAi * (1 - (1-weightTi) * poolFee);\\r\\n\\r\\n    function calcPoolOutGivenSingleIn(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        uint256 tokenAmountInAfterFee = bmul(tokenAmountIn, bsub(BONE, zaz));\\r\\n\\r\\n        uint256 newTokenBalanceIn = badd(tokenBalanceIn, tokenAmountInAfterFee);\\r\\n        uint256 tokenInRatio = bdiv(newTokenBalanceIn, tokenBalanceIn);\\r\\n\\r\\n        // uint newPoolSupply = (ratioTi ^ weightTi) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenInRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        poolAmountOut = bsub(newPoolSupply, poolSupply);\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleInGivenPoolOut                                                                  //\\r\\n    // tAi = tokenAmountIn              //(pS + pAo)\\\\     /    1    \\\\\\\\                           //\\r\\n    // pS = poolSupply                 || ---------  | ^ | --------- || * bI - bI                //\\r\\n    // pAo = poolAmountOut              \\\\\\\\    pS    /     \\\\(wI / tW)//                           //\\r\\n    // bI = balanceIn          tAi =  --------------------------------------------               //\\r\\n    // wI = weightIn                              /      wI  \\\\                                   //\\r\\n    // tW = totalWeight                          |  1 - ----  |  * sF                            //\\r\\n    // sF = swapFee                               \\\\      tW  /                                   //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleInGivenPoolOut(\\r\\n        uint256 tokenBalanceIn,\\r\\n        uint256 tokenWeightIn,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountIn) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightIn, totalWeight);\\r\\n        uint256 newPoolSupply = badd(poolSupply, poolAmountOut);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        //uint newBalTi = poolRatio^(1/weightTi) * balTi;\\r\\n        uint256 boo = bdiv(BONE, normalizedWeight);\\r\\n        uint256 tokenInRatio = bpow(poolRatio, boo);\\r\\n        uint256 newTokenBalanceIn = bmul(tokenInRatio, tokenBalanceIn);\\r\\n        uint256 tokenAmountInAfterFee = bsub(newTokenBalanceIn, tokenBalanceIn);\\r\\n        // Do reverse order of fees charged in joinswap_ExternAmountIn, this way\\r\\n        //     ``` pAo == joinswap_ExternAmountIn(Ti, joinswap_PoolAmountOut(pAo, Ti)) ```\\r\\n        //uint tAi = tAiAfterFee / (1 - (1-weightTi) * swapFee) ;\\r\\n        uint256 zar = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountIn = bdiv(tokenAmountInAfterFee, bsub(BONE, zar));\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcSingleOutGivenPoolIn                                                                  //\\r\\n    // tAo = tokenAmountOut            /      /                                             \\\\\\\\   //\\r\\n    // bO = tokenBalanceOut           /      // pS - (pAi * (1 - eF)) \\\\     /    1    \\\\      \\\\\\\\  //\\r\\n    // pAi = poolAmountIn            | bO - || ----------------------- | ^ | --------- | * b0 || //\\r\\n    // ps = poolSupply                \\\\      \\\\\\\\          pS           /     \\\\(wO / tW)/      //  //\\r\\n    // wI = tokenWeightIn      tAo =   \\\\      \\\\                                             //   //\\r\\n    // tW = totalWeight                    /     /      wO \\\\       \\\\                             //\\r\\n    // sF = swapFee                    *  | 1 - |  1 - ---- | * sF  |                            //\\r\\n    // eF = exitFee                        \\\\     \\\\      tW /       /                             //\\r\\n    **********************************************************************************************/\\r\\n    function calcSingleOutGivenPoolIn(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 tokenAmountOut) {\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAiAfterExitFee = pAi*(1-exitFee)\\r\\n        uint256 poolAmountInAfterExitFee = bmul(poolAmountIn, bsub(BONE, EXIT_FEE));\\r\\n        uint256 newPoolSupply = bsub(poolSupply, poolAmountInAfterExitFee);\\r\\n        uint256 poolRatio = bdiv(newPoolSupply, poolSupply);\\r\\n\\r\\n        // newBalTo = poolRatio^(1/weightTo) * balTo;\\r\\n        uint256 tokenOutRatio = bpow(poolRatio, bdiv(BONE, normalizedWeight));\\r\\n        uint256 newTokenBalanceOut = bmul(tokenOutRatio, tokenBalanceOut);\\r\\n\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bsub(tokenBalanceOut, newTokenBalanceOut);\\r\\n\\r\\n        // charge swap fee on the output token side\\r\\n        //uint tAo = tAoBeforeSwapFee * (1 - (1-weightTo) * swapFee)\\r\\n        uint256 zaz = bmul(bsub(BONE, normalizedWeight), swapFee);\\r\\n        tokenAmountOut = bmul(tokenAmountOutBeforeSwapFee, bsub(BONE, zaz));\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    /**********************************************************************************************\\r\\n    // calcPoolInGivenSingleOut                                                                  //\\r\\n    // pAi = poolAmountIn               // /               tAo             \\\\\\\\     / wO \\\\     \\\\   //\\r\\n    // bO = tokenBalanceOut            // | bO - -------------------------- |\\\\   | ---- |     \\\\  //\\r\\n    // tAo = tokenAmountOut      pS - ||   \\\\     1 - ((1 - (tO / tW)) * sF)/  | ^ \\\\ tW /  * pS | //\\r\\n    // ps = poolSupply                 \\\\\\\\ -----------------------------------/                /  //\\r\\n    // wO = tokenWeightOut  pAi =       \\\\\\\\               bO                 /                /   //\\r\\n    // tW = totalWeight           -------------------------------------------------------------  //\\r\\n    // sF = swapFee                                        ( 1 - eF )                            //\\r\\n    // eF = exitFee                                                                              //\\r\\n    **********************************************************************************************/\\r\\n    function calcPoolInGivenSingleOut(\\r\\n        uint256 tokenBalanceOut,\\r\\n        uint256 tokenWeightOut,\\r\\n        uint256 poolSupply,\\r\\n        uint256 totalWeight,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 swapFee\\r\\n    ) public pure returns (uint256 poolAmountIn) {\\r\\n        // charge swap fee on the output token side\\r\\n        uint256 normalizedWeight = bdiv(tokenWeightOut, totalWeight);\\r\\n        //uint tAoBeforeSwapFee = tAo / (1 - (1-weightTo) * swapFee) ;\\r\\n        uint256 zoo = bsub(BONE, normalizedWeight);\\r\\n        uint256 zar = bmul(zoo, swapFee);\\r\\n        uint256 tokenAmountOutBeforeSwapFee = bdiv(tokenAmountOut, bsub(BONE, zar));\\r\\n\\r\\n        uint256 newTokenBalanceOut = bsub(tokenBalanceOut, tokenAmountOutBeforeSwapFee);\\r\\n        uint256 tokenOutRatio = bdiv(newTokenBalanceOut, tokenBalanceOut);\\r\\n\\r\\n        //uint newPoolSupply = (ratioTo ^ weightTo) * poolSupply;\\r\\n        uint256 poolRatio = bpow(tokenOutRatio, normalizedWeight);\\r\\n        uint256 newPoolSupply = bmul(poolRatio, poolSupply);\\r\\n        uint256 poolAmountInAfterExitFee = bsub(poolSupply, newPoolSupply);\\r\\n\\r\\n        // charge exit fee on the pool token side\\r\\n        // pAi = pAiAfterExitFee/(1-exitFee)\\r\\n        poolAmountIn = bdiv(poolAmountInAfterExitFee, bsub(BONE, EXIT_FEE));\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9051281ae3cdaab135eb51e0d1e5b6e16bc1fe29f756bcf0a248c061163df7ea\",\"license\":\"MIT\"},\"contracts/balancer/BNum.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BConst.sol\\\";\\r\\n\\r\\ncontract BNum is BConst {\\r\\n    function btoi(uint256 a) internal pure returns (uint256) {\\r\\n        return a / BONE;\\r\\n    }\\r\\n\\r\\n    function bfloor(uint256 a) internal pure returns (uint256) {\\r\\n        return btoi(a) * BONE;\\r\\n    }\\r\\n\\r\\n    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"ERR_ADD_OVERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        (uint256 c, bool flag) = bsubSign(a, b);\\r\\n        require(!flag, \\\"ERR_SUB_UNDERFLOW\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\\r\\n        if (a >= b) {\\r\\n            return (a - b, false);\\r\\n        } else {\\r\\n            return (b - a, true);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c0 = a * b;\\r\\n        require(a == 0 || c0 / a == b, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c1 = c0 + (BONE / 2);\\r\\n        require(c1 >= c0, \\\"ERR_MUL_OVERFLOW\\\");\\r\\n        uint256 c2 = c1 / BONE;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        require(b != 0, \\\"ERR_DIV_ZERO\\\");\\r\\n        uint256 c0 = a * BONE;\\r\\n        require(a == 0 || c0 / a == BONE, \\\"ERR_DIV_INTERNAL\\\"); // bmul overflow\\r\\n        uint256 c1 = c0 + (b / 2);\\r\\n        require(c1 >= c0, \\\"ERR_DIV_INTERNAL\\\"); //  badd require\\r\\n        uint256 c2 = c1 / b;\\r\\n        return c2;\\r\\n    }\\r\\n\\r\\n    // DSMath.wpow\\r\\n    function bpowi(uint256 a, uint256 n) internal pure returns (uint256) {\\r\\n        uint256 z = n % 2 != 0 ? a : BONE;\\r\\n\\r\\n        for (n /= 2; n != 0; n /= 2) {\\r\\n            a = bmul(a, a);\\r\\n\\r\\n            if (n % 2 != 0) {\\r\\n                z = bmul(z, a);\\r\\n            }\\r\\n        }\\r\\n        return z;\\r\\n    }\\r\\n\\r\\n    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\\r\\n    // Use `bpowi` for `b^e` and `bpowK` for k iterations\\r\\n    // of approximation of b^0.w\\r\\n    function bpow(uint256 base, uint256 exp) internal pure returns (uint256) {\\r\\n        require(base >= MIN_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_LOW\\\");\\r\\n        require(base <= MAX_BPOW_BASE, \\\"ERR_BPOW_BASE_TOO_HIGH\\\");\\r\\n\\r\\n        uint256 whole = bfloor(exp);\\r\\n        uint256 remain = bsub(exp, whole);\\r\\n\\r\\n        uint256 wholePow = bpowi(base, btoi(whole));\\r\\n\\r\\n        if (remain == 0) {\\r\\n            return wholePow;\\r\\n        }\\r\\n\\r\\n        uint256 partialResult = bpowApprox(base, remain, BPOW_PRECISION);\\r\\n        return bmul(wholePow, partialResult);\\r\\n    }\\r\\n\\r\\n    function bpowApprox(\\r\\n        uint256 base,\\r\\n        uint256 exp,\\r\\n        uint256 precision\\r\\n    ) internal pure returns (uint256) {\\r\\n        // term 0:\\r\\n        uint256 a = exp;\\r\\n        (uint256 x, bool xneg) = bsubSign(base, BONE);\\r\\n        uint256 term = BONE;\\r\\n        uint256 sum = term;\\r\\n        bool negative = false;\\r\\n\\r\\n        // term(k) = numer / denom\\r\\n        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\\r\\n        // each iteration, multiply previous term by (a-(k-1)) * x / k\\r\\n        // continue until term is less than precision\\r\\n        for (uint256 i = 1; term >= precision; i++) {\\r\\n            uint256 bigK = i * BONE;\\r\\n            (uint256 c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\\r\\n            term = bmul(term, bmul(c, x));\\r\\n            term = bdiv(term, bigK);\\r\\n            if (term == 0) break;\\r\\n\\r\\n            if (xneg) negative = !negative;\\r\\n            if (cneg) negative = !negative;\\r\\n            if (negative) {\\r\\n                sum = bsub(sum, term);\\r\\n            } else {\\r\\n                sum = badd(sum, term);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return sum;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd7ae56173eeb8f5522a3bbbfde10905514f68320bbcad3dd7e46ba546dd4010a\",\"license\":\"MIT\"},\"contracts/balancer/BPool.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BToken.sol\\\";\\r\\nimport \\\"./BMath.sol\\\";\\r\\n\\r\\ncontract BPool is BBronze, BToken, BMath {\\r\\n    struct Record {\\r\\n        bool bound; // is token bound to pool\\r\\n        uint256 index; // private\\r\\n        uint256 denorm; // denormalized weight\\r\\n        uint256 balance;\\r\\n    }\\r\\n\\r\\n    event LOG_SWAP(\\r\\n        address indexed caller,\\r\\n        address indexed tokenIn,\\r\\n        address indexed tokenOut,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 tokenAmountOut\\r\\n    );\\r\\n\\r\\n    event LOG_JOIN(address indexed caller, address indexed tokenIn, uint256 tokenAmountIn);\\r\\n\\r\\n    event LOG_EXIT(address indexed caller, address indexed tokenOut, uint256 tokenAmountOut);\\r\\n\\r\\n    event LOG_CALL(bytes4 indexed sig, address indexed caller, bytes data) anonymous;\\r\\n\\r\\n    modifier _logs_() {\\r\\n        emit LOG_CALL(msg.sig, msg.sender, msg.data);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier _lock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _mutex = true;\\r\\n        _;\\r\\n        _mutex = false;\\r\\n    }\\r\\n\\r\\n    modifier _viewlock_() {\\r\\n        require(!_mutex, \\\"ERR_REENTRY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    bool private _mutex;\\r\\n\\r\\n    address private _factory; // BFactory address to push token exitFee to\\r\\n    address private _controller; // has CONTROL role\\r\\n    bool private _publicSwap; // true if PUBLIC can call SWAP functions\\r\\n\\r\\n    // `setSwapFee` and `finalize` require CONTROL\\r\\n    // `finalize` sets `PUBLIC can SWAP`, `PUBLIC can JOIN`\\r\\n    uint256 private _swapFee;\\r\\n    bool private _finalized;\\r\\n\\r\\n    address[] private _tokens;\\r\\n    mapping(address => Record) private _records;\\r\\n    uint256 private _totalWeight;\\r\\n\\r\\n    constructor() {\\r\\n        _controller = msg.sender;\\r\\n        _factory = msg.sender;\\r\\n        _swapFee = MIN_FEE;\\r\\n        _publicSwap = false;\\r\\n        _finalized = false;\\r\\n    }\\r\\n\\r\\n    function isPublicSwap() external view returns (bool) {\\r\\n        return _publicSwap;\\r\\n    }\\r\\n\\r\\n    function isFinalized() external view returns (bool) {\\r\\n        return _finalized;\\r\\n    }\\r\\n\\r\\n    function isBound(address t) external view returns (bool) {\\r\\n        return _records[t].bound;\\r\\n    }\\r\\n\\r\\n    function getNumTokens() external view returns (uint256) {\\r\\n        return _tokens.length;\\r\\n    }\\r\\n\\r\\n    function getCurrentTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getFinalTokens() external view _viewlock_ returns (address[] memory tokens) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        return _tokens;\\r\\n    }\\r\\n\\r\\n    function getDenormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].denorm;\\r\\n    }\\r\\n\\r\\n    function getTotalDenormalizedWeight() external view _viewlock_ returns (uint256) {\\r\\n        return _totalWeight;\\r\\n    }\\r\\n\\r\\n    function getNormalizedWeight(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        uint256 denorm = _records[token].denorm;\\r\\n        return bdiv(denorm, _totalWeight);\\r\\n    }\\r\\n\\r\\n    function getBalance(address token) external view _viewlock_ returns (uint256) {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        return _records[token].balance;\\r\\n    }\\r\\n\\r\\n    function getSwapFee() external view _viewlock_ returns (uint256) {\\r\\n        return _swapFee;\\r\\n    }\\r\\n\\r\\n    function getController() external view _viewlock_ returns (address) {\\r\\n        return _controller;\\r\\n    }\\r\\n\\r\\n    function setSwapFee(uint256 swapFee) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(swapFee >= MIN_FEE, \\\"ERR_MIN_FEE\\\");\\r\\n        require(swapFee <= MAX_FEE, \\\"ERR_MAX_FEE\\\");\\r\\n        _swapFee = swapFee;\\r\\n    }\\r\\n\\r\\n    function setController(address manager) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _controller = manager;\\r\\n    }\\r\\n\\r\\n    function setPublicSwap(bool public_) external _logs_ _lock_ {\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        _publicSwap = public_;\\r\\n    }\\r\\n\\r\\n    function finalize() external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n        require(_tokens.length >= MIN_BOUND_TOKENS, \\\"ERR_MIN_TOKENS\\\");\\r\\n\\r\\n        _finalized = true;\\r\\n        _publicSwap = true;\\r\\n\\r\\n        _mintPoolShare(INIT_POOL_SUPPLY);\\r\\n        _pushPoolShare(msg.sender, INIT_POOL_SUPPLY);\\r\\n    }\\r\\n\\r\\n    function bind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    )\\r\\n        external\\r\\n        _logs_ // _lock_  Bind does not lock because it jumps to `rebind`, which does\\r\\n    {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(!_records[token].bound, \\\"ERR_IS_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(_tokens.length < MAX_BOUND_TOKENS, \\\"ERR_MAX_TOKENS\\\");\\r\\n\\r\\n        _records[token] = Record({\\r\\n            bound: true,\\r\\n            index: _tokens.length,\\r\\n            denorm: 0, // balance and denorm will be validated\\r\\n            balance: 0 // and set by `rebind`\\r\\n        });\\r\\n        _tokens.push(token);\\r\\n        rebind(token, balance, denorm);\\r\\n    }\\r\\n\\r\\n    function rebind(\\r\\n        address token,\\r\\n        uint256 balance,\\r\\n        uint256 denorm\\r\\n    ) public _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        require(denorm >= MIN_WEIGHT, \\\"ERR_MIN_WEIGHT\\\");\\r\\n        require(denorm <= MAX_WEIGHT, \\\"ERR_MAX_WEIGHT\\\");\\r\\n        require(balance >= MIN_BALANCE, \\\"ERR_MIN_BALANCE\\\");\\r\\n\\r\\n        // Adjust the denorm and totalWeight\\r\\n        uint256 oldWeight = _records[token].denorm;\\r\\n        if (denorm > oldWeight) {\\r\\n            _totalWeight = badd(_totalWeight, bsub(denorm, oldWeight));\\r\\n            require(_totalWeight <= MAX_TOTAL_WEIGHT, \\\"ERR_MAX_TOTAL_WEIGHT\\\");\\r\\n        } else if (denorm < oldWeight) {\\r\\n            _totalWeight = bsub(_totalWeight, bsub(oldWeight, denorm));\\r\\n        }\\r\\n        _records[token].denorm = denorm;\\r\\n\\r\\n        // Adjust the balance record and actual token balance\\r\\n        uint256 oldBalance = _records[token].balance;\\r\\n        _records[token].balance = balance;\\r\\n        if (balance > oldBalance) {\\r\\n            _pullUnderlying(token, msg.sender, bsub(balance, oldBalance));\\r\\n        } else if (balance < oldBalance) {\\r\\n            // In this case liquidity is being withdrawn, so charge EXIT_FEE\\r\\n            uint256 tokenBalanceWithdrawn = bsub(oldBalance, balance);\\r\\n            uint256 tokenExitFee = bmul(tokenBalanceWithdrawn, EXIT_FEE);\\r\\n            _pushUnderlying(token, msg.sender, bsub(tokenBalanceWithdrawn, tokenExitFee));\\r\\n            _pushUnderlying(token, _factory, tokenExitFee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unbind(address token) external _logs_ _lock_ {\\r\\n        require(msg.sender == _controller, \\\"ERR_NOT_CONTROLLER\\\");\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(!_finalized, \\\"ERR_IS_FINALIZED\\\");\\r\\n\\r\\n        uint256 tokenBalance = _records[token].balance;\\r\\n        uint256 tokenExitFee = bmul(tokenBalance, EXIT_FEE);\\r\\n\\r\\n        _totalWeight = bsub(_totalWeight, _records[token].denorm);\\r\\n\\r\\n        // Swap the token-to-unbind with the last token,\\r\\n        // then delete the last token\\r\\n        uint256 index = _records[token].index;\\r\\n        uint256 last = _tokens.length - 1;\\r\\n        _tokens[index] = _tokens[last];\\r\\n        _records[_tokens[index]].index = index;\\r\\n        _tokens.pop();\\r\\n        _records[token] = Record({bound: false, index: 0, denorm: 0, balance: 0});\\r\\n\\r\\n        _pushUnderlying(token, msg.sender, bsub(tokenBalance, tokenExitFee));\\r\\n        _pushUnderlying(token, _factory, tokenExitFee);\\r\\n    }\\r\\n\\r\\n    // Absorb any tokens that have been sent to this contract into the pool\\r\\n    function gulp(address token) external _logs_ _lock_ {\\r\\n        require(_records[token].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        _records[token].balance = IERC20Balancer(token).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getSpotPrice(address tokenIn, address tokenOut) external view _viewlock_ returns (uint256 spotPrice) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n    }\\r\\n\\r\\n    function getSpotPriceSansFee(address tokenIn, address tokenOut)\\r\\n        external\\r\\n        view\\r\\n        _viewlock_\\r\\n        returns (uint256 spotPrice)\\r\\n    {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n        return calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, 0);\\r\\n    }\\r\\n\\r\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n            require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountIn <= maxAmountsIn[i], \\\"ERR_LIMIT_IN\\\");\\r\\n            _records[t].balance = badd(_records[t].balance, tokenAmountIn);\\r\\n            emit LOG_JOIN(msg.sender, t, tokenAmountIn);\\r\\n            _pullUnderlying(t, msg.sender, tokenAmountIn);\\r\\n        }\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n    }\\r\\n\\r\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external _logs_ _lock_ {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n        require(ratio != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _burnPoolShare(pAiAfterExitFee);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n            uint256 tokenAmountOut = bmul(ratio, bal);\\r\\n            require(tokenAmountOut != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n            require(tokenAmountOut >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n            _records[t].balance = bsub(_records[t].balance, tokenAmountOut);\\r\\n            emit LOG_EXIT(msg.sender, t, tokenAmountOut);\\r\\n            _pushUnderlying(t, msg.sender, tokenAmountOut);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcExitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n\\r\\n        uint256 poolTotal = totalSupply();\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n        uint256 pAiAfterExitFee = bsub(poolAmountIn, exitFee);\\r\\n        uint256 ratio = bdiv(pAiAfterExitFee, poolTotal);\\r\\n\\r\\n        uint256[] memory _amounts = new uint256[](_tokens.length * 2);\\r\\n\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            address t = _tokens[i];\\r\\n            uint256 bal = _records[t].balance;\\r\\n\\r\\n            _amounts[i] = bmul(ratio, bal);\\r\\n            _amounts[_tokens.length + i] = minAmountsOut[i];\\r\\n            require(_amounts[i] >= minAmountsOut[i], \\\"ERR_LIMIT_OUT\\\");\\r\\n        }\\r\\n\\r\\n        return _amounts;\\r\\n    }\\r\\n\\r\\n    function swapExactAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 minAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountIn <= bmul(inRecord.balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountOut = calcOutGivenIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountOut, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function swapExactAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 maxAmountIn,\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPrice\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn, uint256 spotPriceAfter) {\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(_publicSwap, \\\"ERR_SWAP_NOT_PUBLIC\\\");\\r\\n\\r\\n        Record storage inRecord = _records[address(tokenIn)];\\r\\n        Record storage outRecord = _records[address(tokenOut)];\\r\\n\\r\\n        require(tokenAmountOut <= bmul(outRecord.balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        uint256 spotPriceBefore =\\r\\n            calcSpotPrice(inRecord.balance, inRecord.denorm, outRecord.balance, outRecord.denorm, _swapFee);\\r\\n        require(spotPriceBefore <= maxPrice, \\\"ERR_BAD_LIMIT_PRICE\\\");\\r\\n\\r\\n        tokenAmountIn = calcInGivenOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        spotPriceAfter = calcSpotPrice(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _swapFee\\r\\n        );\\r\\n        require(spotPriceAfter >= spotPriceBefore, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(spotPriceAfter <= maxPrice, \\\"ERR_LIMIT_PRICE\\\");\\r\\n        require(spotPriceBefore <= bdiv(tokenAmountIn, tokenAmountOut), \\\"ERR_MATH_APPROX\\\");\\r\\n\\r\\n        emit LOG_SWAP(msg.sender, tokenIn, tokenOut, tokenAmountIn, tokenAmountOut);\\r\\n\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return (tokenAmountIn, spotPriceAfter);\\r\\n    }\\r\\n\\r\\n    function joinswapExternAmountIn(\\r\\n        address tokenIn,\\r\\n        uint256 tokenAmountIn,\\r\\n        uint256 minPoolAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        poolAmountOut = calcPoolOutGivenSingleIn(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountOut >= minPoolAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return poolAmountOut;\\r\\n    }\\r\\n\\r\\n    function joinswapPoolAmountOut(\\r\\n        address tokenIn,\\r\\n        uint256 poolAmountOut,\\r\\n        uint256 maxAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenIn].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage inRecord = _records[tokenIn];\\r\\n\\r\\n        tokenAmountIn = calcSingleInGivenPoolOut(\\r\\n            inRecord.balance,\\r\\n            inRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(tokenAmountIn <= maxAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        require(tokenAmountIn <= bmul(_records[tokenIn].balance, MAX_IN_RATIO), \\\"ERR_MAX_IN_RATIO\\\");\\r\\n\\r\\n        inRecord.balance = badd(inRecord.balance, tokenAmountIn);\\r\\n\\r\\n        emit LOG_JOIN(msg.sender, tokenIn, tokenAmountIn);\\r\\n\\r\\n        _mintPoolShare(poolAmountOut);\\r\\n        _pushPoolShare(msg.sender, poolAmountOut);\\r\\n        _pullUnderlying(tokenIn, msg.sender, tokenAmountIn);\\r\\n\\r\\n        return tokenAmountIn;\\r\\n    }\\r\\n\\r\\n    function exitswapPoolAmountIn(\\r\\n        address tokenOut,\\r\\n        uint256 poolAmountIn,\\r\\n        uint256 minAmountOut\\r\\n    ) external _logs_ _lock_ returns (uint256 tokenAmountOut) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        tokenAmountOut = calcSingleOutGivenPoolIn(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            poolAmountIn,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(tokenAmountOut >= minAmountOut, \\\"ERR_LIMIT_OUT\\\");\\r\\n\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return tokenAmountOut;\\r\\n    }\\r\\n\\r\\n    function exitswapExternAmountOut(\\r\\n        address tokenOut,\\r\\n        uint256 tokenAmountOut,\\r\\n        uint256 maxPoolAmountIn\\r\\n    ) external _logs_ _lock_ returns (uint256 poolAmountIn) {\\r\\n        require(_finalized, \\\"ERR_NOT_FINALIZED\\\");\\r\\n        require(_records[tokenOut].bound, \\\"ERR_NOT_BOUND\\\");\\r\\n        require(tokenAmountOut <= bmul(_records[tokenOut].balance, MAX_OUT_RATIO), \\\"ERR_MAX_OUT_RATIO\\\");\\r\\n\\r\\n        Record storage outRecord = _records[tokenOut];\\r\\n\\r\\n        poolAmountIn = calcPoolInGivenSingleOut(\\r\\n            outRecord.balance,\\r\\n            outRecord.denorm,\\r\\n            _totalSupply,\\r\\n            _totalWeight,\\r\\n            tokenAmountOut,\\r\\n            _swapFee\\r\\n        );\\r\\n\\r\\n        require(poolAmountIn != 0, \\\"ERR_MATH_APPROX\\\");\\r\\n        require(poolAmountIn <= maxPoolAmountIn, \\\"ERR_LIMIT_IN\\\");\\r\\n\\r\\n        outRecord.balance = bsub(outRecord.balance, tokenAmountOut);\\r\\n\\r\\n        uint256 exitFee = bmul(poolAmountIn, EXIT_FEE);\\r\\n\\r\\n        emit LOG_EXIT(msg.sender, tokenOut, tokenAmountOut);\\r\\n\\r\\n        _pullPoolShare(msg.sender, poolAmountIn);\\r\\n        _burnPoolShare(bsub(poolAmountIn, exitFee));\\r\\n        _pushPoolShare(_factory, exitFee);\\r\\n        _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);\\r\\n\\r\\n        return poolAmountIn;\\r\\n    }\\r\\n\\r\\n    // ==\\r\\n    // 'Underlying' token-manipulation functions make external calls but are NOT locked\\r\\n    // You must `_lock_` or otherwise ensure reentry-safety\\r\\n\\r\\n    function _pullUnderlying(\\r\\n        address erc20,\\r\\n        address from,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transferFrom(from, address(this), amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pushUnderlying(\\r\\n        address erc20,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal {\\r\\n        bool xfer = IERC20Balancer(erc20).transfer(to, amount);\\r\\n        require(xfer, \\\"ERR_ERC20_FALSE\\\");\\r\\n    }\\r\\n\\r\\n    function _pullPoolShare(address from, uint256 amount) internal {\\r\\n        _pull(from, amount);\\r\\n    }\\r\\n\\r\\n    function _pushPoolShare(address to, uint256 amount) internal {\\r\\n        _push(to, amount);\\r\\n    }\\r\\n\\r\\n    function _mintPoolShare(uint256 amount) internal {\\r\\n        _mint(amount);\\r\\n    }\\r\\n\\r\\n    function _burnPoolShare(uint256 amount) internal {\\r\\n        _burn(amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7158032f88b03d54bba37cc3bdb432fa1906ab69bcd69d1baa43591a36e5f13a\",\"license\":\"MIT\"},\"contracts/balancer/BToken.sol\":{\"content\":\"// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU General Public License as published by\\r\\n// the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU General Public License for more details.\\r\\n\\r\\n// You should have received a copy of the GNU General Public License\\r\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./BNum.sol\\\";\\r\\n\\r\\ninterface IERC20Balancer {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address whom) external view returns (uint256);\\r\\n\\r\\n    function allowance(address src, address dst) external view returns (uint256);\\r\\n\\r\\n    function approve(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external returns (bool);\\r\\n}\\r\\n\\r\\ncontract BTokenBase is BNum {\\r\\n    mapping(address => uint256) internal _balance;\\r\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\r\\n    uint256 internal _totalSupply;\\r\\n\\r\\n    event Approval(address indexed src, address indexed dst, uint256 amt);\\r\\n    event Transfer(address indexed src, address indexed dst, uint256 amt);\\r\\n\\r\\n    function _mint(uint256 amt) internal {\\r\\n        _balance[address(this)] = badd(_balance[address(this)], amt);\\r\\n        _totalSupply = badd(_totalSupply, amt);\\r\\n        emit Transfer(address(0), address(this), amt);\\r\\n    }\\r\\n\\r\\n    function _burn(uint256 amt) internal {\\r\\n        require(_balance[address(this)] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[address(this)] = bsub(_balance[address(this)], amt);\\r\\n        _totalSupply = bsub(_totalSupply, amt);\\r\\n        emit Transfer(address(this), address(0), amt);\\r\\n    }\\r\\n\\r\\n    function _move(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) internal {\\r\\n        require(_balance[src] >= amt, \\\"ERR_INSUFFICIENT_BAL\\\");\\r\\n        _balance[src] = bsub(_balance[src], amt);\\r\\n        _balance[dst] = badd(_balance[dst], amt);\\r\\n        emit Transfer(src, dst, amt);\\r\\n    }\\r\\n\\r\\n    function _push(address to, uint256 amt) internal {\\r\\n        _move(address(this), to, amt);\\r\\n    }\\r\\n\\r\\n    function _pull(address from, uint256 amt) internal {\\r\\n        _move(from, address(this), amt);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BToken is BTokenBase, IERC20Balancer {\\r\\n    string private _name = \\\"Balancer Pool Token\\\";\\r\\n    string private _symbol = \\\"BPT\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function allowance(address src, address dst) external view override returns (uint256) {\\r\\n        return _allowance[src][dst];\\r\\n    }\\r\\n\\r\\n    function balanceOf(address whom) external view override returns (uint256) {\\r\\n        return _balance[whom];\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function approve(address dst, uint256 amt) external override returns (bool) {\\r\\n        _allowance[msg.sender][dst] = amt;\\r\\n        emit Approval(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        _allowance[msg.sender][dst] = badd(_allowance[msg.sender][dst], amt);\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address dst, uint256 amt) external returns (bool) {\\r\\n        uint256 oldValue = _allowance[msg.sender][dst];\\r\\n        if (amt > oldValue) {\\r\\n            _allowance[msg.sender][dst] = 0;\\r\\n        } else {\\r\\n            _allowance[msg.sender][dst] = bsub(oldValue, amt);\\r\\n        }\\r\\n        emit Approval(msg.sender, dst, _allowance[msg.sender][dst]);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transfer(address dst, uint256 amt) external override returns (bool) {\\r\\n        _move(msg.sender, dst, amt);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address src,\\r\\n        address dst,\\r\\n        uint256 amt\\r\\n    ) external override returns (bool) {\\r\\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \\\"ERR_BTOKEN_BAD_CALLER\\\");\\r\\n        _move(src, dst, amt);\\r\\n        if (msg.sender != src && _allowance[src][msg.sender] != type(uint256).max) {\\r\\n            _allowance[src][msg.sender] = bsub(_allowance[src][msg.sender], amt);\\r\\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcbe41ffe3ae5f17388e0418cc5aa0e85c9acc4094e89fdf695d223c15b6f56b7\",\"license\":\"MIT\"},\"contracts/bonds/Ibondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4; \\r\\n\\r\\n\\r\\ninterface IBondingCurve{\\r\\n\\tfunction setMarketManager(address _market_manager) external;\\r\\n\\tfunction getTotalZCB(uint256 marketId) external returns (uint256 result);\\r\\n\\tfunction getTotalDS(uint256 marketId) external returns (uint256 result);\\r\\n\\tfunction getMaxQuantity(uint256 marketId) external view returns (uint256 result);\\r\\n\\tfunction curveInit(uint256 marketId) external;\\r\\n\\tfunction getExpectedPrice(uint256 marketId, uint256 amountIn) external view returns (uint256 result);\\r\\n\\tfunction getCollateral() external returns (address);\\r\\n\\tfunction buy(\\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) external returns(uint256);\\r\\n\\tfunction sell(\\r\\n\\t\\taddress marketFactoryAddress, \\r\\n\\t\\taddress trader,\\r\\n\\t\\tuint256 amountIn, \\r\\n\\t\\tuint256 marketId\\r\\n\\t) external returns (uint256);\\r\\n\\tfunction redeem(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress receiver, \\r\\n\\t\\tuint256 zcb_redeem_amount, \\r\\n\\t\\tuint256 collateral_redeem_amount\\r\\n\\t) external;\\r\\n\\tfunction redeemPostAssessment(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\taddress redeemer,\\r\\n\\t\\tuint256 collateral_amount\\r\\n\\t) external;\\r\\n\\tfunction burnFirstLoss(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 burn_collateral_amount\\r\\n\\t) external;\\r\\n\\tfunction mint(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 mintAmount,\\r\\n\\t\\taddress to\\r\\n\\t) external;\\r\\n\\tfunction burn(\\r\\n\\t\\tuint256 marketId, \\r\\n\\t\\tuint256 burnAmount, \\r\\n\\t\\taddress to\\r\\n\\t) external;\\r\\n}\",\"keccak256\":\"0x681f835c1b2c9a33840c3a647ea20e506ad55b67131e71027df8744f0d9d1ca3\"},\"contracts/bonds/LinearBondingCurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\n\\r\\nimport {BondingCurve} from \\\"./bondingcurve.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @notice y = a * x + b\\r\\n/// @dev NEED TO REDO FOR GAS EFFICIENT\\r\\ncontract LinearBondingCurve is BondingCurve {\\r\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\r\\n    using FixedPointMathLib for uint256;\\r\\n    uint256 a;\\r\\n    uint256 b;\\r\\n\\r\\n    constructor (\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner,\\r\\n        address collateral,\\r\\n        uint256 _a,\\r\\n        uint256 _b\\r\\n    ) BondingCurve(name, symbol, owner, collateral) {\\r\\n        a = _a;\\r\\n        b = _b;\\r\\n    }\\r\\n    /**\\r\\n     @dev tokens returned = [((a*s + b)^2 + 2*a*p)^(1/2) - (a*s + b)] / a\\r\\n     @param amount: amount collateral in => has collateral decimal number.\\r\\n     tokens returned in 60.18\\r\\n     */\\r\\n    function _calculatePurchaseReturn(uint256 amount) view internal override virtual returns(uint256) {\\r\\n        uint256 s = totalSupply() ;\\r\\n        uint256 _amount = amount * 10 ** (18 - collateral_dec);\\r\\n\\r\\n        uint256 x = ((a.mulWadDown(s) + b) ** 2)/math_precision; \\r\\n\\r\\n        uint256 y = 2*( a.mulWadDown(_amount)); \\r\\n\\r\\n        uint256 x_y_sqrt = ((x+y)*math_precision).sqrt();\\r\\n\\r\\n        uint256 z = (a.mulWadDown(s) + b); \\r\\n\\r\\n        uint256 result = (x_y_sqrt-z).divWadDown(a);\\r\\n\\r\\n        return result; \\r\\n\\r\\n\\r\\n        // uint256 two = uint256(2).fromUint();\\r\\n        // result = (((a.mul(s) + b).pow(two) + two.mul(a).mul(amount)).sqrt() - (a.mul(s) + b)).div(a);\\r\\n        //result = ( ( ( ((a.mulWadDown(s) + b) ** 2)/math_precision + 2 * a.mulWadDown(_amount) ) * math_precision ).sqrt() - (a.mulWadDown(s) + b) ).divWadDown(a);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates area under the curve from current supply to s+amount\\r\\n    /// result = a * amount / 2  * (2* supply + amount) + b * amount\\r\\n    /// @dev amount is in 60.18.\\r\\n    /// returned in collateral decimals\\r\\n    function _calcAreaUnderCurve(uint256 amount) internal view override virtual returns(uint256 result){\\r\\n        uint256 s = totalSupply(); \\r\\n    \\r\\n        result = ( a.mulWadDown(amount) / 2 ).mulWadDown(2 * s + amount) + b.mulWadDown(amount); \\r\\n        result /= (10 ** (18 - collateral_dec));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates area under curve from s-amount to s, is c(as-ac/2+b) where c is amount \\r\\n     @dev collateral tokens returned\\r\\n     @param amount: tokens burning => 60.18 amount needs to be in 18 decimal \\r\\n     @dev returns amount of collateral tokens with collateral decimals\\r\\n     */\\r\\n    function _calculateSaleReturn(uint256 amount) view internal override virtual returns (uint256) {\\r\\n        uint s = totalSupply();\\r\\n\\r\\n        console.log('amount', amount, s); \\r\\n\\r\\n        uint256 x = a.mulWadDown(s); \\r\\n        uint256 y = a.mulWadDown(amount)/2; \\r\\n        uint256 z = b + x - y; \\r\\n        uint256 result = amount.mulWadDown(z); \\r\\n\\r\\n        result = result / (10 ** (18 - collateral_dec));\\r\\n\\r\\n        return result; \\r\\n        \\r\\n        // uint256 _reserves = reserves * 10 ** (18 - collateral_dec);\\r\\n\\r\\n        // console.log(\\\"_reserves\\\", _reserves);\\r\\n        // result = _reserves - ( (a / 2).mulWadDown((((s - amount)**2) / math_precision)) + b.mulWadDown(s - amount) );\\r\\n        // console.log(\\\"s - amount\\\", s - amount);\\r\\n        // result /= (10 ** (18 - collateral_dec));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @param amount: amount added in 60.18\\r\\n     @dev returns price in 60.18\\r\\n     */\\r\\n    function _calculateExpectedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\r\\n        uint256 s = totalSupply();\\r\\n\\r\\n        result = (s + amount).mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n    function _calculateDecreasedPrice(uint256 amount) view internal override virtual returns (uint256 result) {\\r\\n        result = (totalSupply() - amount).mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice probability = a * x + b, 60.18\\r\\n     returns probability in 60.18\\r\\n     */\\r\\n    function _calculateProbability(uint256 amount) view internal override virtual returns (uint256 score) {\\r\\n        //score = amount.mul(a) + b;\\r\\n        score = amount.mulWadDown(a) + b;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n   function _calculateScore(uint256 priceOut, bool atLoss)view internal override virtual returns (uint256 score) {\\r\\n        // uint256 two = uint256(2).fromUint();\\r\\n        // if (atLoss) {score =  ((priceOut-math_precision).div(math_precision)).pow(two);}\\r\\n        // else {score = ((priceOut).div(math_precision)).pow(two);}\\r\\n        if (atLoss) {\\r\\n            score = ((priceOut - math_precision) ** 2) / math_precision;\\r\\n        } else {\\r\\n            score = (priceOut ** 2) / math_precision;\\r\\n        }\\r\\n\\r\\n    }\\r\\n }\",\"keccak256\":\"0x618198aec0deb44cf3eed3f06ba60b34de98295f9765759742520090436722a4\"},\"contracts/bonds/bondingcurve.sol\":{\"content\":\"pragma solidity ^0.8.4;\\r\\nimport {OwnedERC20} from \\\"../turbo/OwnedShareToken.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n//import \\\"../prb/PRBMathUD60x18.sol\\\";\\r\\nimport {FixedPointMathLib} from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\r\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n//TODO need to actually review for security and shit.\\r\\nabstract contract BondingCurve is OwnedERC20 {\\r\\n    // ASSUMES 18 TRAILING DECIMALS IN UINT256\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    uint256 internal price_upper_bound;\\r\\n    uint256 internal price_lower_bound;\\r\\n    uint256 internal reserves;\\r\\n    uint256 internal max_quantity;\\r\\n    uint256 internal math_precision; \\r\\n    uint256 internal collateral_dec;\\r\\n    ERC20 collateral; // NEED TO CHANGE ONCE VAULT IS DONE\\r\\n    address[] private buyers; // keeps track for final reputation.\\r\\n\\r\\n\\r\\n    constructor (\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        address owner, // market manager.\\r\\n        address _collateral\\r\\n    ) OwnedERC20(name, symbol, owner) {\\r\\n        collateral = ERC20(_collateral);\\r\\n        math_precision = 1e18;\\r\\n        collateral_dec = collateral.decimals();\\r\\n    }\\r\\n\\r\\n    function setUpperBound(uint256 upper_bound) public onlyOwner {\\r\\n        price_upper_bound = upper_bound;\\r\\n    }\\r\\n\\r\\n    function setLowerBound(uint256 lower_bound) public onlyOwner {\\r\\n        price_lower_bound = lower_bound;\\r\\n    }\\r\\n\\r\\n    function setMaxQuantity(uint256 _max_quantity) public onlyOwner {\\r\\n        max_quantity = _max_quantity;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice called by market manager, like trustedMint but returns amount out\\r\\n     @param collateral_amount: amount of collateral in. => w/ collateral decimals\\r\\n     */\\r\\n    function trustedBuy(address trader, uint256 collateral_amount) public onlyOwner returns (uint256) {\\r\\n        uint256 tokens = _calculatePurchaseReturn(collateral_amount);\\r\\n        console.log('TOKENS', tokens, collateral_amount); \\r\\n        reserves += collateral_amount;\\r\\n\\r\\n        require(collateral.balanceOf(trader)>= collateral_amount,\\\"not enough balance\\\"); \\r\\n        collateral.safeTransferFrom(trader, address(this), collateral_amount);\\r\\n        _mint(trader, tokens);\\r\\n        return tokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @param zcb_amount: amount of zcb tokens burned, needs to be in 18 decimals \\r\\n     */\\r\\n    function trustedSell(address trader, uint256 zcb_amount) public onlyOwner returns (uint256) {\\r\\n        uint256 collateral_out = _calculateSaleReturn(zcb_amount);\\r\\n        console.log(\\\"colalteralout\\\", collateral_out); \\r\\n        _burn(trader, zcb_amount);\\r\\n\\r\\n        collateral.safeTransfer(trader, collateral_out);\\r\\n        reserves -= collateral_out;\\r\\n        return collateral_out;\\r\\n    }\\r\\n\\r\\n    function trustedApproveCollateralTransfer(address trader, uint256 amount) public onlyOwner {\\r\\n        collateral.approve(trader, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates tokens returns from input collateral\\r\\n     @dev shouldn't be calling this function, should be calculating amount from frontend.\\r\\n     @param amount: input collateral (ds)\\r\\n     */\\r\\n    function calculatePurchaseReturn(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculatePurchaseReturn(amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice gets required amount of collateral to purchase X amount of tokens\\r\\n    /// need to get area under the curve from current supply X_  to X_+X \\r\\n    function calcAreaUnderCurve(uint256 amount) public view  returns(uint){\\r\\n    \\t  return _calcAreaUnderCurve(amount); \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice calculates collateral returns from selling tokens\\r\\n     @param amount: amount of tokens selling\\r\\n     */\\r\\n    function calculateSaleReturn(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculateSaleReturn(amount);\\r\\n    }\\r\\n\\r\\n    /// @notice calculates score necessary to update reputation score\\r\\n    function calculateScore(uint256 priceOut, bool atLoss) public view returns(uint){\\r\\n    \\treturn _calculateScore(priceOut, atLoss);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     @notice calculates expected price given user buys X tokens\\r\\n     @param amount: hypothetical amount of tokens bought\\r\\n     */\\r\\n    function calculateExpectedPrice(uint256 amount) public view  returns (uint256 result) {\\r\\n        result = _calculateExpectedPrice(amount);\\r\\n    }\\r\\n    \\r\\n    function getTotalCollateral() public view returns (uint256 result) {\\r\\n        result = collateral.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getCollateral() public view returns (address) {\\r\\n        return address(collateral);\\r\\n    } \\r\\n\\r\\n    function getTotalZCB() public view returns (uint256 result) {\\r\\n        result = totalSupply();\\r\\n    }\\r\\n\\r\\n    function getMaxQuantity() public view returns (uint256 result) {\\r\\n        result = max_quantity;\\r\\n    }\\r\\n\\r\\n    function getUpperBound() public view returns (uint256 result) {\\r\\n        result = price_upper_bound;\\r\\n    }\\r\\n\\r\\n    function getLowerBound() public view returns (uint256 result) {\\r\\n        result = price_lower_bound;\\r\\n    }\\r\\n    function getReserves() public view returns(uint256){\\r\\n    \\treturn reserves; \\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice buy bond tokens with necessary checks and transfers of collateral.\\r\\n     @param amount: amount of collateral/ds paid in exchange for tokens\\r\\n     @dev amount has number of collateral decimals\\r\\n     */\\r\\n    function buy(uint256 amount) public {\\r\\n        uint256 tokens = _calculatePurchaseReturn(amount);\\r\\n        console.log(\\\"buy:tokens\\\", tokens);\\r\\n        reserves += amount; // CAN REPLACE WITH collateral.balanceOf(this)\\r\\n        _mint(msg.sender, tokens);\\r\\n        collateral.safeTransferFrom(msg.sender, address(this), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice sell bond tokens with necessary checks and transfers of collateral\\r\\n     @param amount: amount of tokens selling. 60.18.\\r\\n     */\\r\\n    function sell(uint256 amount) public {\\r\\n        uint256 sale = _calculateSaleReturn(amount);\\r\\n        _burn(msg.sender, amount);\\r\\n        collateral.safeTransfer(msg.sender, sale);\\r\\n        reserves -= sale;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @dev doesn't perform any checks, checks performed by caller\\r\\n     */\\r\\n    function incrementReserves(uint256 amount) public onlyOwner{\\r\\n        reserves += amount;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     @dev doesn't perform any checks, checks performed by caller\\r\\n     */\\r\\n    function decrementReserves(uint256 amount) public onlyOwner {\\r\\n        reserves -= amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @notice used for calculating reputation score on resolved market.\\r\\n     */\\r\\n    function calculateProbability(uint256 amount) view public returns (uint256 score) {\\r\\n        return _calculateProbability(amount);\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n\\t\\taddress receiver, \\r\\n\\t\\tuint256 zcb_redeem_amount, \\r\\n\\t\\tuint256 collateral_redeem_amount\\r\\n\\t) external  onlyOwner {\\r\\n        _burn(receiver, zcb_redeem_amount);\\r\\n\\t\\tcollateral.safeTransfer(receiver, collateral_redeem_amount); \\r\\n        reserves -= collateral_redeem_amount;\\r\\n\\t}\\r\\n\\r\\n    function redeemPostAssessment(\\r\\n\\t\\taddress redeemer,\\r\\n\\t\\tuint256 collateral_amount\\r\\n\\t) external  onlyOwner{\\r\\n        uint256 redeem_amount = balanceOf(redeemer);\\r\\n\\t\\t_burn(redeemer, redeem_amount); \\r\\n\\t\\tcollateral.safeTransfer(redeemer, collateral_amount); \\r\\n        reserves -= collateral_amount;\\r\\n\\t}\\r\\n\\r\\n    function burnFirstLoss(\\r\\n\\t\\tuint256 burn_collateral_amount\\r\\n\\t) external onlyOwner{\\r\\n\\t\\tcollateral.safeTransfer(owner, burn_collateral_amount); \\r\\n        reserves -= burn_collateral_amount;\\r\\n\\t}\\r\\n\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal override virtual {\\r\\n        // on _mint\\r\\n        if (from == address(0) && price_upper_bound > 0) {\\r\\n            console.log(\\\"beforeTT: price_upper_bound\\\", price_upper_bound);\\r\\n            require(_calculateExpectedPrice(amount) <= price_upper_bound, \\\"above price upper bound\\\");\\r\\n            // if (balanceOf(to) == 0 && amount > 0) {\\r\\n            //     buyers.push(to);\\r\\n            // }\\r\\n        }\\r\\n        // on _burn\\r\\n        else if (to == address(0) && price_lower_bound > 0) {\\r\\n            require(_calculateDecreasedPrice(amount) >= price_lower_bound, \\\"below price lower bound\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     @dev amount is tokens burned.\\r\\n     */\\r\\n    function calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result) {\\r\\n        result = _calculateDecreasedPrice(amount);\\r\\n    }\\r\\n\\r\\n    function _calcAreaUnderCurve(uint256 amount) internal view  virtual returns(uint256 result); \\r\\n\\r\\n    function _calculateScore(uint256 priceOut, bool atLoss) view internal virtual returns(uint256 score);\\r\\n\\r\\n    function _calculatePurchaseReturn(uint256 amount) view internal virtual returns(uint256 result);\\r\\n\\r\\n    function _calculateSaleReturn(uint256 amount) view internal virtual returns (uint256 result);\\r\\n\\r\\n    function _calculateExpectedPrice(uint256 amount) view internal virtual returns (uint256 result);\\r\\n\\r\\n    function _calculateProbability(uint256 amount) view internal virtual returns (uint256 score);\\r\\n\\r\\n    function _calculateDecreasedPrice(uint256 amount) view internal virtual returns (uint256 result);\\r\\n}\",\"keccak256\":\"0x43235f0945d43ec5d92d232bf8c127c5251dda972136361a107cb1684f8e168d\"},\"contracts/libraries/CalculateLinesToBPoolOdds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\nabstract contract CalculateLinesToBPoolOdds {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 constant MAX_BPOOL_WEIGHT = 50e18;\\r\\n\\r\\n    function ratioOdds(uint256[] memory _proportions) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _total = sum(_proportions);\\r\\n\\r\\n        _odds = new uint256[](_proportions.length);\\r\\n        for (uint256 i = 0; i < _proportions.length; i++) {\\r\\n            _odds[i] = (MAX_BPOOL_WEIGHT).mul(_proportions[i]).div(_total);\\r\\n            require(_odds[i] >= 1e18, \\\"min outcome weight is 2%\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sum(uint256[] memory _numbers) private pure returns (uint256 _sum) {\\r\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\r\\n            _sum += _numbers[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function evenOdds(bool _invalid, uint256 _outcomes) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _size = _outcomes + (_invalid ? 1 : 0);\\r\\n        _odds = new uint256[](_size);\\r\\n\\r\\n        if (_invalid) _odds[0] = 1e18; // 2%\\r\\n\\r\\n        uint256 _each = (_invalid ? 49e18 : 50e18) / _outcomes;\\r\\n        for (uint256 i = _invalid ? 1 : 0; i < _size; i++) {\\r\\n            _odds[i] = _each;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function oddsFromLines(int256 _moneyline1, int256 _moneyline2) internal pure returns (uint256[] memory _odds) {\\r\\n        uint256 _odds1 = __calcLineToOdds(_moneyline1);\\r\\n        uint256 _odds2 = __calcLineToOdds(_moneyline2);\\r\\n\\r\\n        uint256 _total = _odds1 + _odds2;\\r\\n\\r\\n        _odds1 = uint256(49e18).mul(_odds1).div(_total);\\r\\n        _odds2 = uint256(49e18).mul(_odds2).div(_total);\\r\\n\\r\\n        // Moneyline odds are too skewed: would have under 2% odds.\\r\\n        require(_odds1 >= 1e18);\\r\\n        require(_odds2 >= 1e18);\\r\\n\\r\\n        _odds = new uint256[](3);\\r\\n        _odds[0] = 1e18; // Invalid, 2%\\r\\n        _odds[1] = _odds1;\\r\\n        _odds[2] = _odds2;\\r\\n    }\\r\\n\\r\\n    function __calcLineToOdds(int256 _line) internal pure returns (uint256) {\\r\\n        if (_line < 0) {\\r\\n            // favored\\r\\n            uint256 _posLine = uint256(-_line);\\r\\n            return _posLine.mul(49e18).div(_posLine.add(100)); // 49e18 * _line / (_line + 100)\\r\\n        } else {\\r\\n            // underdog\\r\\n            return uint256(4900e18).div(uint256(_line).add(100)); // 49e18 * 100 / (_line + 100)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x416898d926442f8779f85482a1b0e5f0e7c9d1933a2c1293d8d72f45bc84feaf\",\"license\":\"MIT\"},\"contracts/libraries/HasHeadToHeadMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./Sport.sol\\\";\\r\\nimport \\\"./CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"./TokenNamesFromTeams.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\nabstract contract HasHeadToHeadMarket is\\r\\n    AbstractMarketFactoryV3,\\r\\n    Sport,\\r\\n    CalculateLinesToBPoolOdds,\\r\\n    TokenNamesFromTeams\\r\\n{\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 private headToHeadMarketType;\\r\\n    string private noContestName;\\r\\n\\r\\n    uint256 constant HeadToHeadAway = 1;\\r\\n    uint256 constant HeadToHeadHome = 2;\\r\\n\\r\\n    constructor(uint256 _marketType, string memory _noContestName) {\\r\\n        headToHeadMarketType = _marketType;\\r\\n        noContestName = _noContestName;\\r\\n    }\\r\\n\\r\\n    function makeHeadToHeadMarket(\\r\\n        int256[2] memory _moneylines,\\r\\n        string memory _homeTeamName,\\r\\n        string memory _awayTeamName\\r\\n    ) internal returns (uint256) {\\r\\n        // moneylines is [home,away] but the outcomes are listed [NC,away,home] so they must be reversed\\r\\n        return\\r\\n            makeSportsMarket(\\r\\n                noContestName,\\r\\n                _homeTeamName,\\r\\n                _awayTeamName,\\r\\n                oddsFromLines(_moneylines[1], _moneylines[0])\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function resolveHeadToHeadMarket(\\r\\n        uint256 _marketId,\\r\\n        uint256 _homeScore,\\r\\n        uint256 _awayScore\\r\\n    ) internal {\\r\\n        uint256 _shareTokenIndex = calcHeadToHeadWinner(_homeScore, _awayScore);\\r\\n        endMarket(_marketId, _shareTokenIndex);\\r\\n    }\\r\\n\\r\\n    function calcHeadToHeadWinner(uint256 _homeScore, uint256 _awayScore) private pure returns (uint256) {\\r\\n        if (_homeScore > _awayScore) {\\r\\n            return HeadToHeadHome;\\r\\n        } else if (_homeScore < _awayScore) {\\r\\n            return HeadToHeadAway;\\r\\n        } else {\\r\\n            return NoContest;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa3d72b8c41f8fca27484cc2d1ecac3b0188b7f8dda3f6f67e9b083951476b210\",\"license\":\"MIT\"},\"contracts/libraries/HasSpreadMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./Sport.sol\\\";\\r\\nimport \\\"./CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"./TokenNamesFromTeams.sol\\\";\\r\\n\\r\\nabstract contract HasSpreadMarket is AbstractMarketFactoryV3, Sport, CalculateLinesToBPoolOdds, TokenNamesFromTeams {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 private spreadMarketType;\\r\\n    string private noContestName;\\r\\n\\r\\n    uint256 constant SpreadAway = 1;\\r\\n    uint256 constant SpreadHome = 2;\\r\\n\\r\\n    constructor(uint256 _marketType, string memory _noContestName) {\\r\\n        spreadMarketType = _marketType;\\r\\n        noContestName = _noContestName;\\r\\n    }\\r\\n\\r\\n    function makeSpreadMarket(string memory _homeTeamName, string memory _awayTeamName) internal returns (uint256) {\\r\\n        return makeSportsMarket(noContestName, _homeTeamName, _awayTeamName, evenOdds(true, 2));\\r\\n    }\\r\\n\\r\\n    function resolveSpreadMarket(\\r\\n        uint256 _marketId,\\r\\n        int256 _line,\\r\\n        uint256 _homeScore,\\r\\n        uint256 _awayScore\\r\\n    ) internal {\\r\\n        uint256 _shareTokenIndex = calcSpreadWinner(_homeScore, _awayScore, _line);\\r\\n        endMarket(_marketId, _shareTokenIndex);\\r\\n    }\\r\\n\\r\\n    function calcSpreadWinner(\\r\\n        uint256 _homeScore,\\r\\n        uint256 _awayScore,\\r\\n        int256 _targetSpread\\r\\n    ) internal pure returns (uint256) {\\r\\n        int256 _adjustedHomeScore = int256(_homeScore) + int256(_targetSpread);\\r\\n\\r\\n        if (_adjustedHomeScore > int256(_awayScore)) {\\r\\n            return SpreadHome; // home spread greater\\r\\n        } else if (_adjustedHomeScore < int256(_awayScore)) {\\r\\n            return SpreadAway; // away spread lesser\\r\\n        } else {\\r\\n            // draw / tie; some sports eliminate this with half-points\\r\\n            return NoContest;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x706e5c3059ad0afc70eba5139aa03f59fa5cf5c5936cc92697e60c3c225ceacc\",\"license\":\"MIT\"},\"contracts/libraries/IERC20Full.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Full is IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0x41ff2e58c059015e2253de4dd9662eb9c508dbe06173d6c86d40eaf9931a825a\",\"license\":\"MIT\"},\"contracts/libraries/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IOwnable {\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function transferOwnership(address _newOwner) external returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x76d07e413556985a60ee4605c19060e334d2837d5a6a516c9778a10f6762a4ca\",\"license\":\"MIT\"},\"contracts/libraries/LineHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract LineHelper {\\r\\n    function build1Line() internal pure returns (int256[] memory _lines) {\\r\\n        _lines = new int256[](1);\\r\\n    }\\r\\n\\r\\n    function build3Lines(int256 _homeSpread, int256 _totalScore) internal pure returns (int256[] memory _lines) {\\r\\n        _lines = new int256[](3);\\r\\n        // 0 is the Head-to-Head market, which has no lines\\r\\n        _lines[1] = addHalfPoint(_homeSpread);\\r\\n        _lines[2] = addHalfPoint(_totalScore);\\r\\n    }\\r\\n\\r\\n    function addHalfPoint(int256 _line) internal pure returns (int256) {\\r\\n        // The line is a quantity of tenths. So 55 is 5.5 and -6 is -60.\\r\\n        // If the line is a whole number then make it a half point more extreme, to eliminate ties.\\r\\n        // So 50 becomes 55, -60 becomes -65, and 0 becomes 5.\\r\\n        if (_line >= 0 && _line % 10 == 0) {\\r\\n            return _line + 5;\\r\\n        } else if (_line < 0 && (-_line) % 10 == 0) {\\r\\n            return _line - 5;\\r\\n        } else {\\r\\n            return _line;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x41cec3bf3023535175b7de8026bc45c5a35a258dba03c0fdd9f00c7a8993464d\",\"license\":\"MIT\"},\"contracts/libraries/ManagedByLink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\nabstract contract ManagedByLink is Ownable {\\r\\n    event LinkNodeChanged(address newLinkNode);\\r\\n\\r\\n    address public linkNode;\\r\\n\\r\\n    constructor(address _linkNode) {\\r\\n        linkNode = _linkNode;\\r\\n    }\\r\\n\\r\\n    function setLinkNode(address _newLinkNode) external onlyOwner {\\r\\n        linkNode = _newLinkNode;\\r\\n        emit LinkNodeChanged(_newLinkNode);\\r\\n    }\\r\\n\\r\\n    modifier onlyLinkNode() {\\r\\n        require(msg.sender == linkNode);\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4769e1b061d1f63e67b6f31815843c160cca3573cecfd0d1fe3c55cabd238630\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./IOwnable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\nabstract contract Ownable is IOwnable {\\r\\n    address internal owner;\\r\\n\\r\\n    /**\\r\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\\n     * account.\\r\\n     */\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view override returns (address) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\\n     * @param _newOwner The address to transfer ownership to.\\r\\n     */\\r\\n    function transferOwnership(address _newOwner) public override onlyOwner returns (bool) {\\r\\n        require(_newOwner != address(0));\\r\\n        onTransferOwnership(owner, _newOwner);\\r\\n        owner = _newOwner;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // Subclasses of this token may want to send additional logs through the centralized Augur log emitter contract\\r\\n    function onTransferOwnership(address, address) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x88fbb6eef836056a42280c96f7f5f2a721f7f714c4b4681f53193812cd38958e\",\"license\":\"MIT\"},\"contracts/libraries/ResolveByFiat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Sport.sol\\\";\\r\\nimport \\\"./ManagedByLink.sol\\\";\\r\\n\\r\\nabstract contract ResolvesByFiat is Sport, ManagedByLink {\\r\\n    function resolveEvent(\\r\\n        uint256 _eventId,\\r\\n        SportsEventStatus _eventStatus,\\r\\n        uint256 _homeTeamId, // for verifying team stability\\r\\n        uint256 _awayTeamId, // for verifying team stability\\r\\n        uint256 _whoWon\\r\\n    ) public onlyLinkNode {\\r\\n        SportsEvent storage _event = sportsEvents[_eventId];\\r\\n\\r\\n        require(_event.status == SportsEventStatus.Scheduled);\\r\\n        require(SportsEventStatus(_eventStatus) != SportsEventStatus.Scheduled);\\r\\n\\r\\n        if (eventIsNoContest(_event, _eventStatus, _homeTeamId, _awayTeamId, _whoWon)) {\\r\\n            resolveInvalidEvent(_eventId);\\r\\n        } else {\\r\\n            resolveValidEvent(_event, _whoWon);\\r\\n        }\\r\\n\\r\\n        sportsEvents[_eventId].status = _eventStatus;\\r\\n    }\\r\\n\\r\\n    function resolveValidEvent(SportsEvent memory _event, uint256 _whoWon) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x0cddcffb6cb36bdfe330e091e9056a10834649c4161684dbc00cca510dd3e34b\",\"license\":\"MIT\"},\"contracts/libraries/ResolveByScore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Sport.sol\\\";\\r\\nimport \\\"./ManagedByLink.sol\\\";\\r\\n\\r\\nabstract contract ResolvesByScore is Sport, ManagedByLink {\\r\\n    function resolveEvent(\\r\\n        uint256 _eventId,\\r\\n        SportsEventStatus _eventStatus,\\r\\n        uint256 _homeTeamId, // for verifying team stability\\r\\n        uint256 _awayTeamId, // for verifying team stability\\r\\n        uint256 _homeScore,\\r\\n        uint256 _awayScore\\r\\n    ) public onlyLinkNode {\\r\\n        SportsEvent storage _event = sportsEvents[_eventId];\\r\\n\\r\\n        require(_event.status == SportsEventStatus.Scheduled);\\r\\n        require(uint8(_eventStatus) >= uint8(SportsEventStatus.Final));\\r\\n\\r\\n        if (eventIsNoContest(_event, _eventStatus, _homeTeamId, _awayTeamId, WhoWonUnknown)) {\\r\\n            resolveInvalidEvent(_eventId);\\r\\n        } else {\\r\\n            resolveValidEvent(_event, _homeScore, _awayScore);\\r\\n        }\\r\\n\\r\\n        _event.status = _eventStatus;\\r\\n        _event.homeScore = _homeScore;\\r\\n        _event.awayScore = _awayScore;\\r\\n    }\\r\\n\\r\\n    function resolveValidEvent(\\r\\n        SportsEvent memory _event,\\r\\n        uint256 _homeScore,\\r\\n        uint256 _awayScore\\r\\n    ) internal virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x97e3ead3c6ff6e226261f39f33e56a54336302533cb4c25a88f2b7b436e22198\",\"license\":\"MIT\"},\"contracts/libraries/Rewardable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Rewardable {\\r\\n    // Rewards will be paid out over the lifetime of an event.\\r\\n    // An value of zero will start rewards immediately and proceed based on the values set in master chef.\\r\\n\\r\\n    // _Id here is the market id passed to the amm factory when creating a pool.\\r\\n    function getRewardEndTime(uint256 _marketId) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x45a1a84b8cd35d8663aa8e93a8cc33acdcd5f81939d71d25e36425f23e2d3cbe\",\"license\":\"MIT\"},\"contracts/libraries/Sport.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./LineHelper.sol\\\";\\r\\n\\r\\nabstract contract Sport is AbstractMarketFactoryV3, LineHelper {\\r\\n    event SportsEventCreated(\\r\\n        uint256 id,\\r\\n        uint256[] markets,\\r\\n        int256[] lines,\\r\\n        uint256 homeTeamId,\\r\\n        uint256 awayTeamId,\\r\\n        string homeTeamName,\\r\\n        string awayTeamName,\\r\\n        uint256 estimatedStartTime\\r\\n    );\\r\\n\\r\\n    enum SportsEventStatus {Unknown, Scheduled, Final, Postponed, Canceled}\\r\\n    struct SportsEvent {\\r\\n        SportsEventStatus status;\\r\\n        uint256[] markets;\\r\\n        int256[] lines;\\r\\n        uint256 estimatedStartTime;\\r\\n        uint256 homeTeamId;\\r\\n        uint256 awayTeamId;\\r\\n        string homeTeamName;\\r\\n        string awayTeamName;\\r\\n        uint256 homeScore;\\r\\n        uint256 awayScore;\\r\\n    }\\r\\n    // EventId => EventDetails\\r\\n    mapping(uint256 => SportsEvent) public sportsEvents;\\r\\n    uint256[] public listOfSportsEvents;\\r\\n    mapping(uint256 => uint256) public marketIdToEventIdMapping;\\r\\n    uint256 constant NoContest = 0;\\r\\n\\r\\n    function eventCount() public view returns (uint256) {\\r\\n        return listOfSportsEvents.length;\\r\\n    }\\r\\n\\r\\n    function getSportsEvent(uint256 _eventId) public view returns (SportsEvent memory) {\\r\\n        return sportsEvents[_eventId];\\r\\n    }\\r\\n\\r\\n    function getSportsEventByIndex(uint256 _index) public view returns (SportsEvent memory _event, uint256 _eventId) {\\r\\n        _eventId = listOfSportsEvents[_index];\\r\\n        _event = getSportsEvent(_eventId);\\r\\n    }\\r\\n\\r\\n    function makeSportsEvent(\\r\\n        uint256 _eventId,\\r\\n        uint256[] memory _markets,\\r\\n        int256[] memory _lines,\\r\\n        uint256 _estimatedStartTime,\\r\\n        uint256 _homeTeamId,\\r\\n        uint256 _awayTeamId,\\r\\n        string memory _homeTeamName,\\r\\n        string memory _awayTeamName\\r\\n    ) internal {\\r\\n        // Cannot create markets for an event twice.\\r\\n        require(sportsEvents[_eventId].status == SportsEventStatus.Unknown, \\\"event exists\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < _markets.length; i++) {\\r\\n            marketIdToEventIdMapping[_markets[i]] = _eventId;\\r\\n        }\\r\\n\\r\\n        listOfSportsEvents.push(_eventId);\\r\\n        sportsEvents[_eventId].status = SportsEventStatus.Scheduled; // new events must be Scheduled\\r\\n        sportsEvents[_eventId].markets = _markets;\\r\\n        sportsEvents[_eventId].lines = _lines;\\r\\n        sportsEvents[_eventId].estimatedStartTime = _estimatedStartTime;\\r\\n        sportsEvents[_eventId].homeTeamId = _homeTeamId;\\r\\n        sportsEvents[_eventId].awayTeamId = _awayTeamId;\\r\\n        sportsEvents[_eventId].homeTeamName = _homeTeamName;\\r\\n        sportsEvents[_eventId].awayTeamName = _awayTeamName;\\r\\n        // homeScore and awayScore default to zero, which is correct for new events\\r\\n\\r\\n        emit SportsEventCreated(\\r\\n            _eventId,\\r\\n            _markets,\\r\\n            _lines,\\r\\n            _homeTeamId,\\r\\n            _awayTeamId,\\r\\n            _homeTeamName,\\r\\n            _awayTeamName,\\r\\n            _estimatedStartTime\\r\\n        );\\r\\n    }\\r\\n\\r\\n    uint256 constant WhoWonUnknown = 0;\\r\\n    uint256 constant WhoWonHome = 1;\\r\\n    uint256 constant WhoWonAway = 2;\\r\\n    uint256 constant WhoWonDraw = 3;\\r\\n\\r\\n    function eventIsNoContest(\\r\\n        SportsEvent memory _event,\\r\\n        SportsEventStatus _eventStatus,\\r\\n        uint256 _homeTeamId,\\r\\n        uint256 _awayTeamId,\\r\\n        uint256 _whoWon // pass in WhoWonUnknown if using a scoring sport\\r\\n    ) internal pure returns (bool) {\\r\\n        bool _draw = _whoWon == WhoWonDraw;\\r\\n        bool _notFinal = _eventStatus != SportsEventStatus.Final;\\r\\n        bool _unstableHomeTeamId = _event.homeTeamId != _homeTeamId;\\r\\n        bool _unstableAwayTeamId = _event.awayTeamId != _awayTeamId;\\r\\n        return _draw || _notFinal || _unstableHomeTeamId || _unstableAwayTeamId;\\r\\n    }\\r\\n\\r\\n    function resolveInvalidEvent(uint256 _eventId) internal {\\r\\n        uint256[] memory _marketIds = sportsEvents[_eventId].markets;\\r\\n        for (uint256 i = 0; i < _marketIds.length; i++) {\\r\\n            uint256 _marketId = _marketIds[i];\\r\\n            if (_marketId == 0) continue; // skip non-created markets\\r\\n            endMarket(_marketId, NoContest);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // TODO is this needed? getSportsEvent should do the same\\r\\n    function getEventMarkets(uint256 _eventId) public view returns (uint256[] memory _markets) {\\r\\n        uint256[] storage _original = sportsEvents[_eventId].markets;\\r\\n        uint256 _len = _original.length;\\r\\n        _markets = new uint256[](_len);\\r\\n        for (uint256 i = 0; i < _len; i++) {\\r\\n            _markets[i] = _original[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        uint256 _eventId = marketIdToEventIdMapping[_marketId];\\r\\n        return getSportsEvent(_eventId).estimatedStartTime;\\r\\n    }\\r\\n}\\r\\n\\r\\n// TODO change this to work with the Fetcher contracts and use it there, since it's offchain-read-only.\\r\\nabstract contract SportView is Sport {\\r\\n    // Only usable off-chain. Gas cost can easily eclipse block limit.\\r\\n    // Lists all events that could be resolved with a call to resolveEvent.\\r\\n    // Not all will be resolvable because this does not ensure the game ended.\\r\\n    function listResolvableEvents() external view returns (uint256[] memory) {\\r\\n        uint256 _totalResolvable = countResolvableEvents();\\r\\n        uint256[] memory _resolvableEvents = new uint256[](_totalResolvable);\\r\\n\\r\\n        uint256 n = 0;\\r\\n        for (uint256 i = 0; i < listOfSportsEvents.length; i++) {\\r\\n            if (n > _totalResolvable) break;\\r\\n            uint256 _eventId = listOfSportsEvents[i];\\r\\n            if (isEventResolvable(_eventId)) {\\r\\n                _resolvableEvents[n] = _eventId;\\r\\n                n++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _resolvableEvents;\\r\\n    }\\r\\n\\r\\n    function countResolvableEvents() internal view returns (uint256) {\\r\\n        uint256 _totalResolvable = 0;\\r\\n        for (uint256 i = 0; i < listOfSportsEvents.length; i++) {\\r\\n            uint256 _eventId = listOfSportsEvents[i];\\r\\n            if (isEventResolvable(_eventId)) {\\r\\n                _totalResolvable++;\\r\\n            }\\r\\n        }\\r\\n        return _totalResolvable;\\r\\n    }\\r\\n\\r\\n    // Returns true if a call to resolveEvent is potentially useful.\\r\\n    function isEventResolvable(uint256 _eventId) internal view returns (bool) {\\r\\n        uint256[] memory _markets = getEventMarkets(_eventId);\\r\\n\\r\\n        bool _unresolved = false; // default because non-existing markets aren't resolvable\\r\\n        for (uint256 i = 0; i < _markets.length; i++) {\\r\\n            uint256 _marketId = _markets[i];\\r\\n            if (_marketId != 0 && !isMarketResolved(_marketId)) {\\r\\n                _unresolved = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return _unresolved;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3134a8efa30a936314fa3d97991a489db24846543bb6d7623a31ecbc5041751\",\"license\":\"MIT\"},\"contracts/libraries/TokenNamesFromTeams.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./Sport.sol\\\";\\r\\n\\r\\nabstract contract TokenNamesFromTeams is Sport {\\r\\n    uint256 constant Away = 1;\\r\\n    uint256 constant Home = 2;\\r\\n\\r\\n    function makeSportsMarket(\\r\\n        string memory _noContestName,\\r\\n        string memory _homeTeamName,\\r\\n        string memory _awayTeamName,\\r\\n        uint256[] memory _odds\\r\\n    ) internal returns (uint256) {\\r\\n        string[] memory _outcomeNames = makeOutcomeNames(_noContestName, _homeTeamName, _awayTeamName);\\r\\n        return startMarket(msg.sender, _outcomeNames, _odds, true);\\r\\n    }\\r\\n\\r\\n    function makeOutcomeNames(\\r\\n        string memory _noContestName,\\r\\n        string memory _homeTeamName,\\r\\n        string memory _awayTeamName\\r\\n    ) private pure returns (string[] memory _names) {\\r\\n        _names = new string[](3);\\r\\n        _names[NoContest] = _noContestName;\\r\\n        _names[Away] = _awayTeamName;\\r\\n        _names[Home] = _homeTeamName;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbdb2c5511bf66e501d13bfa357b51c3d22f429d3df7fc854b9935a5b630aad48\",\"license\":\"MIT\"},\"contracts/libraries/Versioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nabstract contract Versioned {\\r\\n    string internal version;\\r\\n\\r\\n    constructor(string memory _version) {\\r\\n        version = _version;\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (string memory) {\\r\\n        return version;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5ba98803ed1e2332153aba2d4124c242ac1d009579e875c5d286f0ac8bf7264c\",\"license\":\"MIT\"},\"contracts/rewards/MasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\" as OpenZeppelinOwnable;\\r\\nimport \\\"../turbo/AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../turbo/AMMFactory.sol\\\";\\r\\n\\r\\n// MasterChef is the master of Reward. He can make Reward and he is a fair guy.\\r\\ncontract MasterChef is OpenZeppelinOwnable.Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 public constant BONE = 10**18;\\r\\n\\r\\n    // The percentage of the rewards period that early deposit bonus will payout.\\r\\n    // e.g. Early deposit bonus hits if LP is done in the first x percent of the period.\\r\\n    uint256 public constant EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE = BONE / 10; // 10% of reward period.\\r\\n\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many LP tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 lastActionTimestamp; // Timestamp of the withdrawal or deposit from this user.\\r\\n        //\\r\\n        // We do some fancy math here. Basically, any point in time, the amount of REWARDs\\r\\n        // entitled to a user but is pending to be distributed is:\\r\\n        //\\r\\n        //   pending reward = (user.amount * pool.accRewardsPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accRewardsPerShare` (and `lastRewardBlock`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n    // Info of each user that deposits LP tokens.\\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\r\\n\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 lpToken; // Address of LP token contract.\\r\\n        uint256 accRewardsPerShare; // Accumulated REWARDs per share, times BONE. See below.\\r\\n        uint256 totalEarlyDepositBonusRewardShares; // The total number of share currently qualifying bonus REWARDs.\\r\\n        uint256 beginTimestamp; // The timestamp to begin calculating rewards at.\\r\\n        uint256 endTimestamp; // Timestamp of the end of the rewards period.\\r\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs to distribute to early depositors.\\r\\n        uint256 lastRewardTimestamp; // Last timestamp REWARDs distribution occurred.\\r\\n        uint256 rewardsPerSecond; // Number of rewards paid out per second.\\r\\n    }\\r\\n    // Info of each pool.\\r\\n    PoolInfo[] public poolInfo;\\r\\n\\r\\n    // This is a snapshot of the current state of a market.\\r\\n    struct PoolStatusInfo {\\r\\n        uint256 beginTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 earlyDepositEndTimestamp;\\r\\n        uint256 totalRewardsAccrued;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    struct PendingRewardInfo {\\r\\n        uint256 beginTimestamp;\\r\\n        uint256 endTimestamp;\\r\\n        uint256 earlyDepositEndTimestamp;\\r\\n        uint256 accruedStandardRewards;\\r\\n        uint256 accruedEarlyDepositBonusRewards;\\r\\n        uint256 pendingEarlyDepositBonusRewards;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    struct MarketFactoryInfo {\\r\\n        uint256 earlyDepositBonusRewards; // Amount of REWARDs per day to distribute to early depositors.\\r\\n        uint256 rewardsPeriods; // Number of days the rewards for this pool will payout.\\r\\n        uint256 rewardsPerPeriod; // Amount of rewards to be given out for a given period.\\r\\n    }\\r\\n    mapping(address => MarketFactoryInfo) marketFactoryRewardInfo;\\r\\n\\r\\n    struct RewardPoolLookupInfo {\\r\\n        uint256 pid;\\r\\n        bool created;\\r\\n    }\\r\\n\\r\\n    // AMMFactory => MarketFactory => MarketId\\r\\n    mapping(address => mapping(address => mapping(uint256 => RewardPoolLookupInfo))) public rewardPoolLookup;\\r\\n\\r\\n    // The REWARD TOKEN!\\r\\n    IERC20 private rewardsToken;\\r\\n\\r\\n    mapping(address => bool) private approvedAMMFactories;\\r\\n\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address recipient);\\r\\n    event TrustMarketFactory(\\r\\n        address indexed MarketFactory,\\r\\n        uint256 OriginEarlyDepositBonusRewards,\\r\\n        uint256 OriginrewardsPeriods,\\r\\n        uint256 OriginRewardsPerPeriod,\\r\\n        uint256 EarlyDepositBonusRewards,\\r\\n        uint256 rewardsPeriods,\\r\\n        uint256 RewardsPerPeriod\\r\\n    );\\r\\n\\r\\n    event PoolCreated(\\r\\n        address indexed ammFactory,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address creator,\\r\\n        address lpTokenRecipient\\r\\n    );\\r\\n    event LiquidityChanged(\\r\\n        address indexed ammFactory,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address user,\\r\\n        address recipient,\\r\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\r\\n        int256 collateral,\\r\\n        int256 lpTokens,\\r\\n        uint256[] sharesReturned\\r\\n    );\\r\\n\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(IERC20 _rewardsToken) {\\r\\n        rewardsToken = _rewardsToken;\\r\\n    }\\r\\n\\r\\n    function trustAMMFactory(address _ammFactory) public onlyOwner {\\r\\n        approvedAMMFactories[_ammFactory] = true;\\r\\n    }\\r\\n\\r\\n    function untrustAMMFactory(address _ammFactory) public onlyOwner {\\r\\n        delete approvedAMMFactories[_ammFactory];\\r\\n    }\\r\\n\\r\\n    // This method can also be used to update rewards\\r\\n    function addRewards(\\r\\n        address _marketFactory,\\r\\n        uint256 _rewardsPerMarket,\\r\\n        uint256 _rewardDaysPerMarket,\\r\\n        uint256 _earlyDepositBonusRewards\\r\\n    ) public onlyOwner {\\r\\n        MarketFactoryInfo memory _oldMarketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\r\\n\\r\\n        marketFactoryRewardInfo[_marketFactory] = MarketFactoryInfo({\\r\\n            rewardsPeriods: _rewardDaysPerMarket,\\r\\n            rewardsPerPeriod: _rewardsPerMarket,\\r\\n            earlyDepositBonusRewards: _earlyDepositBonusRewards\\r\\n        });\\r\\n\\r\\n        emit TrustMarketFactory(\\r\\n            _marketFactory,\\r\\n            _oldMarketFactoryInfo.earlyDepositBonusRewards,\\r\\n            _oldMarketFactoryInfo.rewardsPeriods,\\r\\n            _oldMarketFactoryInfo.rewardsPerPeriod,\\r\\n            _earlyDepositBonusRewards,\\r\\n            _rewardDaysPerMarket,\\r\\n            _rewardsPerMarket\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    // Add a new lp to the pool. Can only be called by the owner.\\r\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\r\\n    // An _endTimestamp of zero means the rewards start immediately.\\r\\n    function add(\\r\\n        address _ammFactory,\\r\\n        address _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        IERC20 _lpToken,\\r\\n        uint256 _endTimestamp\\r\\n    ) public onlyOwner returns (uint256 _nextPID) {\\r\\n        return addInternal(_ammFactory, _marketFactory, _marketId, _lpToken, _endTimestamp);\\r\\n    }\\r\\n\\r\\n    function addInternal(\\r\\n        address _ammFactory,\\r\\n        address _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        IERC20 _lpToken,\\r\\n        uint256 _endTimestamp\\r\\n    ) internal returns (uint256 _nextPID) {\\r\\n        require(\\r\\n            !rewardPoolLookup[_ammFactory][_marketFactory][_marketId].created,\\r\\n            \\\"Reward pool has already been created.\\\"\\r\\n        );\\r\\n\\r\\n        require(approvedAMMFactories[address(_ammFactory)], \\\"AMMFactory must be approved to create pool\\\");\\r\\n\\r\\n        _nextPID = poolInfo.length;\\r\\n\\r\\n        rewardPoolLookup[_ammFactory][_marketFactory][_marketId] = RewardPoolLookupInfo({pid: _nextPID, created: true});\\r\\n\\r\\n        MarketFactoryInfo memory _marketFactoryInfo = marketFactoryRewardInfo[_marketFactory];\\r\\n\\r\\n        // Need to figure out the beginning/end of the reward period.\\r\\n        uint256 _rewardsPeriodsInSeconds = _marketFactoryInfo.rewardsPeriods * 1 days;\\r\\n        uint256 _beginTimestamp = block.timestamp;\\r\\n\\r\\n        // Add one hour buffer for LPs to withdraw before event start.\\r\\n        if (_endTimestamp != 0) {\\r\\n            _endTimestamp = _endTimestamp - 1 hours;\\r\\n        }\\r\\n\\r\\n        if (_endTimestamp == 0) {\\r\\n            _endTimestamp = _beginTimestamp + _rewardsPeriodsInSeconds;\\r\\n        } else if ((_endTimestamp - _rewardsPeriodsInSeconds) > block.timestamp) {\\r\\n            _beginTimestamp = _endTimestamp - _rewardsPeriodsInSeconds;\\r\\n        } else if (block.timestamp >= _endTimestamp) {\\r\\n            // reward period already over.\\r\\n            _beginTimestamp = _endTimestamp;\\r\\n        }\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                accRewardsPerShare: 0,\\r\\n                beginTimestamp: _beginTimestamp,\\r\\n                endTimestamp: _endTimestamp,\\r\\n                totalEarlyDepositBonusRewardShares: 0,\\r\\n                earlyDepositBonusRewards: (_marketFactoryInfo.earlyDepositBonusRewards / 1 days) *\\r\\n                    (_endTimestamp - _beginTimestamp),\\r\\n                lpToken: _lpToken,\\r\\n                rewardsPerSecond: (_marketFactoryInfo.rewardsPerPeriod / 1 days),\\r\\n                lastRewardTimestamp: _beginTimestamp\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Return number of seconds elapsed in terms of BONEs.\\r\\n    function getTimeElapsed(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        uint256 _fromTimestamp = block.timestamp;\\r\\n\\r\\n        if (\\r\\n            // Rewards have not started yet.\\r\\n            _pool.beginTimestamp > _fromTimestamp ||\\r\\n            // Not sure how this happens but it is accounted for in the original master chef contract.\\r\\n            _pool.lastRewardTimestamp > _fromTimestamp ||\\r\\n            // No rewards to be distributed\\r\\n            _pool.rewardsPerSecond == 0\\r\\n        ) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Rewards are over for this pool. No more rewards have accrued.\\r\\n        if (_pool.lastRewardTimestamp >= _pool.endTimestamp) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return min(_fromTimestamp, _pool.endTimestamp).sub(_pool.lastRewardTimestamp).add(1).mul(BONE);\\r\\n        // return (min(_fromTimestamp, _pool.endTimestamp) - _pool.lastRewardTimestamp + 1) * BONE;\\r\\n    }\\r\\n\\r\\n    function getPoolTokenBalance(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        if (_rewardPoolLookupInfo.created) {\\r\\n            return userInfo[_rewardPoolLookupInfo.pid][_user].amount;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getUserAmount(uint256 _pid, address _user) external view returns (uint256) {\\r\\n        return userInfo[_pid][_user].amount;\\r\\n    }\\r\\n\\r\\n    function getPoolRewardEndTimestamp(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        return _pool.endTimestamp;\\r\\n    }\\r\\n\\r\\n    function getEarlyDepositEndTimestamp(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n\\r\\n        return ((_duration * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\r\\n    }\\r\\n\\r\\n    function getPoolLPTokenTotalSupply(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId\\r\\n    ) public view returns (uint256) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken.totalSupply();\\r\\n    }\\r\\n\\r\\n    function getPoolLPToken(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId\\r\\n    ) public view returns (IERC20) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        return poolInfo[_rewardPoolLookupInfo.pid].lpToken;\\r\\n    }\\r\\n\\r\\n    function getPoolInfo(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId\\r\\n    ) public view returns (PoolStatusInfo memory _poolStatusInfo) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        // This cannot revert as it will be used in a multicall.\\r\\n        if (_rewardPoolLookupInfo.created) {\\r\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\r\\n\\r\\n            _poolStatusInfo.beginTimestamp = _pool.beginTimestamp;\\r\\n            _poolStatusInfo.endTimestamp = _pool.endTimestamp;\\r\\n            _poolStatusInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\r\\n\\r\\n            _poolStatusInfo.totalRewardsAccrued =\\r\\n                (min(block.timestamp, _pool.endTimestamp) - _pool.beginTimestamp) *\\r\\n                _pool.rewardsPerSecond;\\r\\n            _poolStatusInfo.created = true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // View function to see pending REWARDs on frontend.\\r\\n    function getUserPendingRewardInfo(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _userAddress\\r\\n    ) external view returns (PendingRewardInfo memory _pendingRewardInfo) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        if (_rewardPoolLookupInfo.created) {\\r\\n            PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\r\\n            UserInfo storage _user = userInfo[_rewardPoolLookupInfo.pid][_userAddress];\\r\\n            uint256 accRewardsPerShare = _pool.accRewardsPerShare;\\r\\n            uint256 lpSupply = _pool.lpToken.balanceOf(address(this));\\r\\n\\r\\n            uint256 _duration = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n\\r\\n            _pendingRewardInfo.created = true;\\r\\n            _pendingRewardInfo.beginTimestamp = _pool.beginTimestamp;\\r\\n            _pendingRewardInfo.endTimestamp = _pool.endTimestamp;\\r\\n            _pendingRewardInfo.earlyDepositEndTimestamp = getEarlyDepositEndTimestamp(_rewardPoolLookupInfo.pid);\\r\\n\\r\\n            if (_user.lastActionTimestamp <= _pendingRewardInfo.earlyDepositEndTimestamp) {\\r\\n                if (_pool.totalEarlyDepositBonusRewardShares > 0 && block.timestamp > _pendingRewardInfo.endTimestamp) {\\r\\n                    _pendingRewardInfo.accruedEarlyDepositBonusRewards = _pool\\r\\n                        .earlyDepositBonusRewards\\r\\n                        .mul(_user.amount)\\r\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\r\\n                } else if (_pool.totalEarlyDepositBonusRewardShares > 0) {\\r\\n                    _pendingRewardInfo.pendingEarlyDepositBonusRewards = _pool\\r\\n                        .earlyDepositBonusRewards\\r\\n                        .mul(_user.amount)\\r\\n                        .div(_pool.totalEarlyDepositBonusRewardShares);\\r\\n                }\\r\\n            }\\r\\n\\r\\n            if (block.timestamp > _pool.lastRewardTimestamp && lpSupply != 0) {\\r\\n                uint256 multiplier = getTimeElapsed(_rewardPoolLookupInfo.pid);\\r\\n                accRewardsPerShare = accRewardsPerShare.add(multiplier.mul(_pool.rewardsPerSecond).div(lpSupply));\\r\\n            }\\r\\n\\r\\n            _pendingRewardInfo.accruedStandardRewards = _user.amount.mul(accRewardsPerShare).div(BONE).sub(\\r\\n                _user.rewardDebt\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables for all pools. Be careful of gas spending!\\r\\n    function massUpdatePools() public {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            updatePool(pid);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.timestamp <= pool.lastRewardTimestamp) {\\r\\n            return;\\r\\n        }\\r\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\r\\n        if (lpSupply == 0) {\\r\\n            pool.lastRewardTimestamp = block.timestamp;\\r\\n            return;\\r\\n        }\\r\\n        uint256 multiplier = getTimeElapsed(_pid);\\r\\n        pool.accRewardsPerShare = pool.accRewardsPerShare.add(multiplier.mul(pool.rewardsPerSecond).div(lpSupply));\\r\\n        pool.lastRewardTimestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Deposit LP tokens to MasterChef for REWARD allocation.\\r\\n    // Assumes the staked tokens are already on contract.\\r\\n    function depositInternal(\\r\\n        address _userAddress,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (_user.amount > 0) {\\r\\n            uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\r\\n            safeRewardsTransfer(_userAddress, pending);\\r\\n        }\\r\\n\\r\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\r\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\r\\n\\r\\n        // If the user was an early deposit, remove user amount from the pool.\\r\\n        // Even if the pools reward period has elapsed. They must withdraw first.\\r\\n        if (\\r\\n            block.timestamp > _bonusrewardsPeriodsEndTimestamp &&\\r\\n            _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\r\\n        ) {\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\r\\n        }\\r\\n\\r\\n        // Still in the early deposit bonus period.\\r\\n        if (_bonusrewardsPeriodsEndTimestamp > block.timestamp) {\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.add(_amount);\\r\\n        }\\r\\n\\r\\n        _user.amount = _user.amount.add(_amount);\\r\\n\\r\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\r\\n        _user.lastActionTimestamp = block.timestamp;\\r\\n        emit Deposit(_userAddress, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    function depositByMarket(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\r\\n\\r\\n        deposit(_rewardPoolLookupInfo.pid, _amount);\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 _pid, uint256 _amount) public {\\r\\n        depositInternal(msg.sender, _pid, _amount);\\r\\n        poolInfo[_pid].lpToken.safeTransferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw LP tokens from MasterChef.\\r\\n    // Assumes caller is handling distribution of LP tokens.\\r\\n    function withdrawInternal(\\r\\n        address _userAddress,\\r\\n        uint256 _pid,\\r\\n        uint256 _amount,\\r\\n        address _tokenRecipientAddress\\r\\n    ) internal {\\r\\n        PoolInfo storage _pool = poolInfo[_pid];\\r\\n        UserInfo storage _user = userInfo[_pid][_userAddress];\\r\\n        require(_user.amount >= _amount, \\\"withdraw: not good\\\");\\r\\n\\r\\n        updatePool(_pid);\\r\\n\\r\\n        uint256 _rewardsPeriodsInSeconds = _pool.endTimestamp - _pool.beginTimestamp;\\r\\n        uint256 _bonusrewardsPeriodsEndTimestamp =\\r\\n            ((_rewardsPeriodsInSeconds * EARLY_DEPOSIT_BONUS_REWARDS_PERCENTAGE) / BONE) + _pool.beginTimestamp + 1;\\r\\n        uint256 _rewardPeriodEndTimestamp = _rewardsPeriodsInSeconds + _pool.beginTimestamp + 1;\\r\\n\\r\\n        if (_rewardPeriodEndTimestamp <= block.timestamp) {\\r\\n            if (\\r\\n                _pool.totalEarlyDepositBonusRewardShares > 0 &&\\r\\n                _user.lastActionTimestamp <= _bonusrewardsPeriodsEndTimestamp\\r\\n            ) {\\r\\n                uint256 _rewardsToUser =\\r\\n                    _pool.earlyDepositBonusRewards.mul(_user.amount).div(_pool.totalEarlyDepositBonusRewardShares);\\r\\n                safeRewardsTransfer(_userAddress, _rewardsToUser);\\r\\n            }\\r\\n        } else if (_bonusrewardsPeriodsEndTimestamp >= block.timestamp) {\\r\\n            // Still in the early deposit bonus period.\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_amount);\\r\\n        } else if (\\r\\n            // If the user was an early deposit, remove user amount from the pool.\\r\\n            _bonusrewardsPeriodsEndTimestamp >= _user.lastActionTimestamp\\r\\n        ) {\\r\\n            _pool.totalEarlyDepositBonusRewardShares = _pool.totalEarlyDepositBonusRewardShares.sub(_user.amount);\\r\\n        }\\r\\n\\r\\n        uint256 pending = _user.amount.mul(_pool.accRewardsPerShare).div(BONE).sub(_user.rewardDebt);\\r\\n\\r\\n        safeRewardsTransfer(_tokenRecipientAddress, pending);\\r\\n        _user.amount = _user.amount.sub(_amount);\\r\\n        _user.rewardDebt = _user.amount.mul(_pool.accRewardsPerShare).div(BONE);\\r\\n        _user.lastActionTimestamp = block.timestamp;\\r\\n\\r\\n        emit Withdraw(msg.sender, _pid, _amount, _tokenRecipientAddress);\\r\\n    }\\r\\n\\r\\n    function withdrawByMarket(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _amount\\r\\n    ) public {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\r\\n\\r\\n        withdraw(_rewardPoolLookupInfo.pid, _amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\r\\n        withdrawInternal(msg.sender, _pid, _amount, msg.sender);\\r\\n        poolInfo[_pid].lpToken.safeTransfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _initialLiquidity,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256) {\\r\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _initialLiquidity);\\r\\n        _marketFactory.collateral().approve(address(_ammFactory), _initialLiquidity);\\r\\n\\r\\n        uint256 _lpTokensIn = _ammFactory.createPool(_marketFactory, _marketId, _initialLiquidity, address(this));\\r\\n        IERC20 _lpToken = IERC20(address(_ammFactory.getPool(_marketFactory, _marketId)));\\r\\n\\r\\n        uint256 _nextPID =\\r\\n            addInternal(\\r\\n                address(_ammFactory),\\r\\n                address(_marketFactory),\\r\\n                _marketId,\\r\\n                _lpToken,\\r\\n                _marketFactory.getRewardEndTime(_marketId)\\r\\n            );\\r\\n\\r\\n        depositInternal(_lpTokenRecipient, _nextPID, _lpTokensIn);\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _balances[i] = 0;\\r\\n        }\\r\\n\\r\\n        emit PoolCreated(address(_ammFactory), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\r\\n        emit LiquidityChanged(\\r\\n            address(_ammFactory),\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_initialLiquidity),\\r\\n            int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n\\r\\n        return _lpTokensIn;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minLPTokensOut,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        uint256 _pid = _rewardPoolLookupInfo.pid;\\r\\n\\r\\n        // If not created should attempt to create it.\\r\\n        if (!_rewardPoolLookupInfo.created) {\\r\\n            BPool _bPool = _ammFactory.getPool(_marketFactory, _marketId);\\r\\n            require(_bPool != BPool(address(0)), \\\"Pool not created.\\\");\\r\\n\\r\\n            _pid = addInternal(\\r\\n                address(_ammFactory),\\r\\n                address(_marketFactory),\\r\\n                _marketId,\\r\\n                IERC20(address(_bPool)),\\r\\n                _marketFactory.getRewardEndTime(_marketId)\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _marketFactory.collateral().transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        _marketFactory.collateral().approve(address(_ammFactory), _collateralIn);\\r\\n\\r\\n        (_poolAmountOut, _balances) = _ammFactory.addLiquidity(\\r\\n            _marketFactory,\\r\\n            _marketId,\\r\\n            _collateralIn,\\r\\n            _minLPTokensOut,\\r\\n            address(this)\\r\\n        );\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        for (uint256 i = 0; i < _balances.length; i++) {\\r\\n            if (_balances[i] > 0) {\\r\\n                _market.shareTokens[i].transfer(_lpTokenRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        depositInternal(_lpTokenRecipient, _pid, _poolAmountOut);\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_ammFactory),\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_poolAmountOut),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        AMMFactory _ammFactory,\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _lpTokensIn,\\r\\n        uint256 _minCollateralOut,\\r\\n        address _collateralRecipient\\r\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\r\\n        RewardPoolLookupInfo memory _rewardPoolLookupInfo =\\r\\n            rewardPoolLookup[address(_ammFactory)][address(_marketFactory)][_marketId];\\r\\n\\r\\n        require(_rewardPoolLookupInfo.created, \\\"Reward pool has not been created.\\\");\\r\\n\\r\\n        withdrawInternal(msg.sender, _rewardPoolLookupInfo.pid, _lpTokensIn, _collateralRecipient);\\r\\n\\r\\n        PoolInfo storage _pool = poolInfo[_rewardPoolLookupInfo.pid];\\r\\n\\r\\n        _pool.lpToken.approve(address(_ammFactory), _lpTokensIn);\\r\\n\\r\\n        (_collateralOut, _balances) = _ammFactory.removeLiquidity(\\r\\n            _marketFactory,\\r\\n            _marketId,\\r\\n            _lpTokensIn,\\r\\n            _minCollateralOut,\\r\\n            _collateralRecipient\\r\\n        );\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_ammFactory),\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _collateralRecipient,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function withdrawRewards(uint256 _amount) external onlyOwner {\\r\\n        rewardsToken.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n    function emergencyWithdraw(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\r\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\r\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.lastActionTimestamp = 0;\\r\\n    }\\r\\n\\r\\n    function safeRewardsTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 _rewardsBal = rewardsToken.balanceOf(address(this));\\r\\n        if (_amount > _rewardsBal) {\\r\\n            rewardsToken.transfer(_to, _rewardsBal);\\r\\n        } else {\\r\\n            rewardsToken.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a <= b) {\\r\\n            return a;\\r\\n        } else {\\r\\n            return b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa90e8a118dc9ce09dee5a5746316bcd7d9de616699d568299353ffe5027a511b\",\"license\":\"MIT\"},\"contracts/turbo/AMMFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../balancer/BFactory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../balancer/BNum.sol\\\";\\r\\nimport \\\"../bonds/Ibondingcurve.sol\\\"; \\r\\n\\r\\ncontract AMMFactory is BNum {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n    uint256 private constant MIN_INITIAL_LIQUIDITY = BONE * 100;\\r\\n\\r\\n    BFactory public bFactory;\\r\\n    // MarketFactory => Market => BPool\\r\\n    mapping(address => mapping(uint256 => BPool)) public pools;\\r\\n    uint256 fee;\\r\\n\\r\\n    event PoolCreated(\\r\\n        address pool,\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed creator,\\r\\n        address lpTokenRecipient\\r\\n    );\\r\\n    event LiquidityChanged(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        address recipient,\\r\\n        // from the perspective of the user. e.g. collateral is negative when adding liquidity\\r\\n        int256 collateral,\\r\\n        int256 lpTokens,\\r\\n        uint256[] sharesReturned\\r\\n    );\\r\\n    event SharesSwapped(\\r\\n        address indexed marketFactory,\\r\\n        uint256 indexed marketId,\\r\\n        address indexed user,\\r\\n        uint256 outcome,\\r\\n        // from the perspective of the user. e.g. collateral is negative when buying\\r\\n        int256 collateral,\\r\\n        int256 shares,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    constructor(BFactory _bFactory, uint256 _fee) {\\r\\n        bFactory = _bFactory;\\r\\n        fee = _fee;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _initialLiquidity,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256) {\\r\\n        require(pools[address(_marketFactory)][_marketId] == BPool(address(0)), \\\"Pool already created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _sets = _marketFactory.calcShares(_initialLiquidity);\\r\\n\\r\\n        // Comparing to sets because sets are normalized to 10e18.\\r\\n        require(_sets >= MIN_INITIAL_LIQUIDITY, \\\"Initial liquidity must be at least 100 collateral.\\\");\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        require(\\r\\n            _collateral.allowance(msg.sender, address(this)) >= _initialLiquidity,\\r\\n            \\\"insufficient collateral allowance for initial liquidity\\\"\\r\\n        );\\r\\n\\r\\n        _collateral.transferFrom(msg.sender, address(this), _initialLiquidity);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Create pool\\r\\n        BPool _pool = bFactory.newBPool();\\r\\n\\r\\n        // Add each outcome to the pool. Collateral is NOT added.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _token.approve(address(_pool), MAX_UINT);\\r\\n            _pool.bind(address(_token), _sets, _market.initialOdds[i]);\\r\\n        }\\r\\n\\r\\n        // Set the swap fee.\\r\\n        _pool.setSwapFee(fee);\\r\\n\\r\\n        // Finalize pool setup\\r\\n        _pool.finalize();\\r\\n\\r\\n        pools[address(_marketFactory)][_marketId] = _pool;\\r\\n\\r\\n        // Pass along LP tokens for initial liquidity\\r\\n        uint256 _lpTokenBalance = _pool.balanceOf(address(this)) - (BONE / 1000);\\r\\n\\r\\n        // Burn (BONE / 1000) lp tokens to prevent the bpool from locking up. When all liquidity is removed.\\r\\n        _pool.transfer(address(0x0), (BONE / 1000));\\r\\n        _pool.transfer(_lpTokenRecipient, _lpTokenBalance);\\r\\n\\r\\n        uint256[] memory _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _balances[i] = 0;\\r\\n        }\\r\\n\\r\\n        emit PoolCreated(address(_pool), address(_marketFactory), _marketId, msg.sender, _lpTokenRecipient);\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_initialLiquidity),\\r\\n            int256(_lpTokenBalance),\\r\\n            _balances\\r\\n        );\\r\\n\\r\\n        return _lpTokenBalance;\\r\\n    }\\r\\n\\r\\n    function addLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minLPTokensOut,\\r\\n        address _lpTokenRecipient\\r\\n    ) public returns (uint256 _poolAmountOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        //  Turn collateral into shares\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        _collateral.approve(address(_marketFactory), MAX_UINT);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        // Find poolAmountOut\\r\\n        _poolAmountOut = MAX_UINT;\\r\\n\\r\\n        {\\r\\n            uint256 _totalSupply = _pool.totalSupply();\\r\\n            uint256[] memory _maxAmountsIn = new uint256[](_market.shareTokens.length);\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                _maxAmountsIn[i] = _sets;\\r\\n\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                uint256 _bPoolTokenBalance = _pool.getBalance(address(_token));\\r\\n\\r\\n                // This is the result the following when solving for poolAmountOut:\\r\\n                // uint256 ratio = bdiv(poolAmountOut, poolTotal);\\r\\n                // uint256 tokenAmountIn = bmul(ratio, bal);\\r\\n                uint256 _tokenPoolAmountOut =\\r\\n                    (((((_sets * BONE) - (BONE / 2)) * _totalSupply) / _bPoolTokenBalance) - (_totalSupply / 2)) / BONE;\\r\\n\\r\\n                if (_tokenPoolAmountOut < _poolAmountOut) {\\r\\n                    _poolAmountOut = _tokenPoolAmountOut;\\r\\n                }\\r\\n            }\\r\\n            _pool.joinPool(_poolAmountOut, _maxAmountsIn);\\r\\n        }\\r\\n\\r\\n        require(_poolAmountOut >= _minLPTokensOut, \\\"Would not have received enough LP tokens\\\");\\r\\n\\r\\n        _pool.transfer(_lpTokenRecipient, _poolAmountOut);\\r\\n\\r\\n        // Transfer the remaining shares back to _lpTokenRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            _balances[i] = _token.balanceOf(address(this));\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_lpTokenRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _lpTokenRecipient,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_poolAmountOut),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function removeLiquidity(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _lpTokensIn,\\r\\n        uint256 _minCollateralOut,\\r\\n        address _collateralRecipient\\r\\n    ) public returns (uint256 _collateralOut, uint256[] memory _balances) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        _pool.transferFrom(msg.sender, address(this), _lpTokensIn);\\r\\n\\r\\n        uint256[] memory exitPoolEstimate;\\r\\n        {\\r\\n            uint256[] memory minAmountsOut = new uint256[](_market.shareTokens.length);\\r\\n            exitPoolEstimate = _pool.calcExitPool(_lpTokensIn, minAmountsOut);\\r\\n            _pool.exitPool(_lpTokensIn, minAmountsOut);\\r\\n        }\\r\\n\\r\\n        // Find the number of sets to sell.\\r\\n        uint256 _setsToSell = MAX_UINT;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _acquiredTokenBalance = exitPoolEstimate[i];\\r\\n            if (_acquiredTokenBalance < _setsToSell) _setsToSell = _acquiredTokenBalance;\\r\\n        }\\r\\n\\r\\n        // Must be a multiple of share factor.\\r\\n        _setsToSell = (_setsToSell / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n\\r\\n        bool _resolved = _marketFactory.isMarketResolved(_marketId);\\r\\n        if (_resolved) {\\r\\n            _collateralOut = _marketFactory.claimWinnings(_marketId, _collateralRecipient);\\r\\n        } else {\\r\\n            _collateralOut = _marketFactory.burnShares(_marketId, _setsToSell, _collateralRecipient);\\r\\n        }\\r\\n        require(_collateralOut > _minCollateralOut, \\\"Amount of collateral returned too low.\\\");\\r\\n\\r\\n        // Transfer the remaining shares back to _collateralRecipient.\\r\\n        _balances = new uint256[](_market.shareTokens.length);\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            if (_resolved && _token == _market.winner) continue; // all winning shares claimed when market is resolved\\r\\n            _balances[i] = exitPoolEstimate[i] - _setsToSell;\\r\\n            if (_balances[i] > 0) {\\r\\n                _token.transfer(_collateralRecipient, _balances[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit LiquidityChanged(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _collateralRecipient,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_lpTokensIn),\\r\\n            _balances\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function buyZCB(\\r\\n        AbstractMarketFactoryV3 _marketFactory, \\r\\n        address from, \\r\\n        address bondingcurve, \\r\\n        uint256 _marketId, \\r\\n        uint256 _collateralIn\\r\\n        ) external returns(uint256){\\r\\n\\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(from, address(this), _collateralIn);\\r\\n        _collateral.approve(bondingcurve, _collateralIn); \\r\\n\\r\\n        return IBondingCurve(bondingcurve).buy(address(_marketFactory), from, _collateralIn, _marketId);\\r\\n    }\\r\\n\\r\\n    function sellZCB(\\r\\n        AbstractMarketFactoryV3 _marketFactory, \\r\\n        address from, \\r\\n        address bondingcurve, \\r\\n        uint256 _marketId, \\r\\n        uint256 _zcb_amountIn\\r\\n        ) external returns(uint256){\\r\\n\\r\\n        uint256 fee_deducted_collateral_out = IBondingCurve(bondingcurve).sell(\\r\\n            address(_marketFactory),\\r\\n            from, \\r\\n            _zcb_amountIn, \\r\\n             _marketId); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transfer(from, fee_deducted_collateral_out); \\r\\n\\r\\n        return fee_deducted_collateral_out; \\r\\n    }\\r\\n\\r\\n\\r\\n    function buy(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256 _collateralIn,\\r\\n        uint256 _minTokensOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        _marketFactory.logTrade(_marketId, _outcome, _collateralIn); \\r\\n\\r\\n        IERC20Full _collateral = _marketFactory.collateral();\\r\\n        _collateral.transferFrom(msg.sender, address(this), _collateralIn);\\r\\n        uint256 _sets = _marketFactory.calcShares(_collateralIn);\\r\\n        _marketFactory.mintShares(_marketId, _sets, address(this));\\r\\n\\r\\n        uint256 _totalDesiredOutcome = _sets;\\r\\n        {\\r\\n            OwnedERC20 _desiredToken = _market.shareTokens[_outcome];\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 _acquiredToken, ) =\\r\\n                    _pool.swapExactAmountIn(address(_token), _sets, address(_desiredToken), 0, MAX_UINT);\\r\\n                _totalDesiredOutcome += _acquiredToken;\\r\\n            }\\r\\n            require(_totalDesiredOutcome >= _minTokensOut, \\\"Slippage exceeded\\\");\\r\\n\\r\\n            _desiredToken.transfer(msg.sender, _totalDesiredOutcome);\\r\\n        }\\r\\n\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            -int256(_collateralIn),\\r\\n            int256(_totalDesiredOutcome),\\r\\n            bdiv(_sets, _totalDesiredOutcome)\\r\\n        );\\r\\n\\r\\n        return _totalDesiredOutcome;\\r\\n    }\\r\\n\\r\\n    function sellForCollateral(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        uint256 _outcome,\\r\\n        uint256[] memory _shareTokensIn,\\r\\n        uint256 _minSetsOut\\r\\n    ) external returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        require(_pool != BPool(address(0)), \\\"Pool needs to be created\\\");\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        uint256 _setsOut = MAX_UINT;\\r\\n        uint256 _totalUndesiredTokensIn = 0;\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            _totalUndesiredTokensIn += _shareTokensIn[i];\\r\\n        }\\r\\n\\r\\n        {\\r\\n            _market.shareTokens[_outcome].transferFrom(msg.sender, address(this), _totalUndesiredTokensIn);\\r\\n            _market.shareTokens[_outcome].approve(address(_pool), MAX_UINT);\\r\\n\\r\\n            for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n                if (i == _outcome) continue;\\r\\n                OwnedERC20 _token = _market.shareTokens[i];\\r\\n                (uint256 tokenAmountOut, ) =\\r\\n                    _pool.swapExactAmountIn(\\r\\n                        address(_market.shareTokens[_outcome]),\\r\\n                        _shareTokensIn[i],\\r\\n                        address(_token),\\r\\n                        0,\\r\\n                        MAX_UINT\\r\\n                    );\\r\\n\\r\\n                //Ensure tokenAmountOut is a multiple of shareFactor.\\r\\n                tokenAmountOut = (tokenAmountOut / _marketFactory.shareFactor()) * _marketFactory.shareFactor();\\r\\n                if (tokenAmountOut < _setsOut) _setsOut = tokenAmountOut;\\r\\n            }\\r\\n\\r\\n            require(_setsOut >= _minSetsOut, \\\"Minimum sets not available.\\\");\\r\\n            _marketFactory.burnShares(_marketId, _setsOut, msg.sender);\\r\\n        }\\r\\n\\r\\n        // Transfer undesired token balance back.\\r\\n        for (uint256 i = 0; i < _market.shareTokens.length; i++) {\\r\\n            OwnedERC20 _token = _market.shareTokens[i];\\r\\n            uint256 _balance = _token.balanceOf(address(this));\\r\\n            if (_balance > 0) {\\r\\n                _token.transfer(msg.sender, _balance);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 _collateralOut = _marketFactory.calcCost(_setsOut);\\r\\n        emit SharesSwapped(\\r\\n            address(_marketFactory),\\r\\n            _marketId,\\r\\n            msg.sender,\\r\\n            _outcome,\\r\\n            int256(_collateralOut),\\r\\n            -int256(_totalUndesiredTokensIn),\\r\\n            bdiv(_setsOut, _totalUndesiredTokensIn)\\r\\n        );\\r\\n\\r\\n        return _collateralOut;\\r\\n    }\\r\\n\\r\\n    // Returns an array of token values for the outcomes of the market, relative to the first outcome.\\r\\n    // So the first outcome is 10**18 and all others are higher or lower.\\r\\n    // Prices can be derived due to the fact that the total of all outcome shares equals one collateral, possibly with a scaling factor,\\r\\n    function tokenRatios(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        address _basisToken = address(_market.shareTokens[0]);\\r\\n        uint256[] memory _ratios = new uint256[](_market.shareTokens.length);\\r\\n        _ratios[0] = 10**18;\\r\\n        for (uint256 i = 1; i < _market.shareTokens.length; i++) {\\r\\n            uint256 _price = _pool.getSpotPrice(_basisToken, address(_market.shareTokens[i]));\\r\\n            _ratios[i] = _price;\\r\\n        }\\r\\n        return _ratios;\\r\\n    }\\r\\n\\r\\n    function getPoolBalances(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _balances = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _balances[i] = _pool.getBalance(_tokens[i]);\\r\\n        }\\r\\n        return _balances;\\r\\n    }\\r\\n\\r\\n    function getPoolWeights(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256[] memory)\\r\\n    {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        // Pool does not exist. Do not want to revert because multicall.\\r\\n        if (_pool == BPool(address(0))) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        address[] memory _tokens = _pool.getCurrentTokens();\\r\\n        uint256[] memory _weights = new uint256[](_tokens.length);\\r\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\r\\n            _weights[i] = _pool.getDenormalizedWeight(_tokens[i]);\\r\\n        }\\r\\n        return _weights;\\r\\n    }\\r\\n\\r\\n    function getSwapFee(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.getSwapFee();\\r\\n    }\\r\\n\\r\\n    function getPoolTokenBalance(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        uint256 _marketId,\\r\\n        address _user\\r\\n    ) external view returns (uint256) {\\r\\n        BPool _pool = pools[address(_marketFactory)][_marketId];\\r\\n        return _pool.balanceOf(_user);\\r\\n    }\\r\\n\\r\\n    function getPool(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId) external view returns (BPool) {\\r\\n        return pools[address(_marketFactory)][_marketId];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc07d87d08f41ce5e5feae47a5ee1948e424e1860c2270a8bf33dab0590725568\",\"license\":\"MIT\"},\"contracts/turbo/AbstractMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./TurboShareTokenFactory.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"../libraries/Rewardable.sol\\\";\\r\\nimport { LinearBondingCurve } from \\\"../bonds/LinearBondingCurve.sol\\\";\\r\\n\\r\\nabstract contract AbstractMarketFactoryV3 is ZCBFactory, TurboShareTokenFactory, Ownable, Rewardable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event MarketCreated(uint256 id, string[] names, uint256[] initialOdds);\\r\\n    event MarketResolved(uint256 id, address winner, uint256 winnerIndex, string winnerName);\\r\\n    event MarketActivated(uint256 id);\\r\\n\\r\\n    event SharesMinted(uint256 id, uint256 amount, address receiver);\\r\\n    event SharesBurned(uint256 id, uint256 amount, address receiver);\\r\\n    event WinningsClaimed(\\r\\n        uint256 id,\\r\\n        address winningOutcome,\\r\\n        uint256 winningIndex,\\r\\n        string winningName,\\r\\n        uint256 amount,\\r\\n        uint256 settlementFee,\\r\\n        uint256 payout,\\r\\n        address indexed receiver\\r\\n    );\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    FeePot public feePot;\\r\\n\\r\\n    // fees are out of 1e18 and only apply to new markets\\r\\n    uint256 public stakerFee;\\r\\n    uint256 public settlementFee;\\r\\n    uint256 public protocolFee;\\r\\n\\r\\n    address public protocol; // collects protocol fees\\r\\n\\r\\n    uint256 public accumulatedProtocolFee = 0;\\r\\n    // settlement address => amount of collateral\\r\\n    mapping(address => uint256) public accumulatedSettlementFees;\\r\\n\\r\\n    // How many shares equals one collateral.\\r\\n    // Necessary to account for math errors from small numbers in balancer.\\r\\n    // shares = collateral / shareFactor\\r\\n    // collateral = shares * shareFactor\\r\\n    uint256 public shareFactor;\\r\\n\\r\\n    struct Market {\\r\\n        address settlementAddress;\\r\\n        OwnedERC20[] shareTokens;\\r\\n        OwnedERC20 winner;\\r\\n        uint256 winnerIndex;\\r\\n        uint256 settlementFee;\\r\\n        uint256 protocolFee;\\r\\n        uint256 stakerFee;\\r\\n        uint256 creationTimestamp;\\r\\n        uint256 resolutionTimestamp; // when winner is declared\\r\\n        uint256[] initialOdds;\\r\\n        bool active; // false if not ready to use or if resolved\\r\\n    }\\r\\n\\r\\n    Market[] internal markets;\\r\\n    // ZCBMarket[] internal zcbmarkets; \\r\\n\\r\\n    uint256 private constant MAX_UINT = 2**256 - 1;\\r\\n\\r\\n    mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n    mapping(uint256 => bool ) inAssessment; \\r\\n    mapping(uint256=> uint256) buy_thresholds;\\r\\n\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees, // staker, settlement, protocol\\r\\n        address _protocol\\r\\n    ) {\\r\\n        owner = _owner; // controls fees for new markets\\r\\n        collateral = _collateral;\\r\\n        shareFactor = _shareFactor;\\r\\n        feePot = _feePot;\\r\\n        stakerFee = _fees[0];\\r\\n        settlementFee = _fees[1];\\r\\n        protocolFee = _fees[2];\\r\\n        protocol = _protocol;\\r\\n\\r\\n        _collateral.approve(address(_feePot), MAX_UINT);\\r\\n\\r\\n        // First market is always empty so that marketid zero means \\\"no market\\\"\\r\\n        markets.push(makeEmptyMarket());\\r\\n\\r\\n        //FOR TESTING ONLY\\r\\n        buy_thresholds[0] = MAX_UINT;\\r\\n        buy_thresholds[1] = MAX_UINT; \\r\\n        buy_thresholds[2] = MAX_UINT; \\r\\n    }\\r\\n        \\r\\n\\r\\n   // function quantityAvailable(uint256 marketId)\\r\\n\\r\\n    //Called by lendingpool when market is created i.e , and when loan is approved \\r\\n    function handleAssessment(uint256 _marketId, bool startAssessing) \\r\\n    external\\r\\n    //onlyController\\r\\n     {\\r\\n        bool market_inAssessment = startAssessing? true : false; \\r\\n        inAssessment[_marketId] = market_inAssessment; \\r\\n    }\\r\\n    function handleOnlyReputable(uint256 _marketId)\\r\\n    external \\r\\n    //onlyController\\r\\n    {\\r\\n\\r\\n    }\\r\\n    //Called by controller after assessment phase \\r\\n    function set_buy_threshold(uint256 _marketId, uint256 threshold)\\r\\n    external \\r\\n    //onlyController\\r\\n    {\\r\\n        buy_thresholds[_marketId] = threshold;\\r\\n    }\\r\\n\\r\\n    function get_buy_threshold(uint256 _marketId) external view returns(uint256){\\r\\n        return buy_thresholds[_marketId]; \\r\\n    }\\r\\n    function isInAssessment(uint256 _marketId) external view returns(bool){\\r\\n        return inAssessment[_marketId]; \\r\\n    }\\r\\n\\r\\n    function onlyReputable(uint256 _marketId) external view returns(bool){\\r\\n        return false;\\r\\n    }\\r\\n    function logTrade(uint256 _marketId, uint256 _outcome, uint256 _collateralIn) external {\\r\\n        TradeDetails[_marketId][_outcome] = TradeDetails[_marketId][_outcome] + _collateralIn; \\r\\n\\r\\n    }\\r\\n\\r\\n    function getTradeDetails(uint256 _marketId, uint256 _outcome) external view returns(uint256){\\r\\n        return TradeDetails[_marketId][_outcome]; \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // Returns an empty struct if the market doesn't exist.\\r\\n    // Can check market existence before calling this by comparing _id against markets.length.\\r\\n    // Can check market existence of the return struct by checking that shareTokens[0] isn't the null address\\r\\n    function getMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n            return makeEmptyMarket();\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function marketCount() public view returns (uint256) {\\r\\n        return markets.length; //+ zcbmarkets.length;\\r\\n    }\\r\\n\\r\\n    // Returns factory-specific details about a market.\\r\\n    // function getMarketDetails(uint256 _id) public view returns (MarketDetails memory);\\r\\n\\r\\n    function mintShares(\\r\\n        uint256 _id,\\r\\n        uint256 _shareToMint,\\r\\n        address _receiver\\r\\n    ) public {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        uint256 _cost = calcCost(_shareToMint);\\r\\n        collateral.transferFrom(msg.sender, address(this), _cost);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            _market.shareTokens[_i].trustedMint(_receiver, _shareToMint);\\r\\n        }\\r\\n\\r\\n        emit SharesMinted(_id, _shareToMint, _receiver);\\r\\n    }\\r\\n\\r\\n    function burnShares(\\r\\n        uint256 _id,\\r\\n        uint256 _sharesToBurn,\\r\\n        address _receiver\\r\\n    ) public returns (uint256) {\\r\\n        require(markets.length > _id);\\r\\n        require(markets[_id].active);\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        for (uint256 _i = 0; _i < _market.shareTokens.length; _i++) {\\r\\n            // errors if sender doesn't have enough shares\\r\\n            _market.shareTokens[_i].trustedBurn(msg.sender, _sharesToBurn);\\r\\n        }\\r\\n\\r\\n        uint256 _payout = calcCost(_sharesToBurn);\\r\\n        uint256 _protocolFee = _payout.mul(_market.protocolFee).div(10**18);\\r\\n        uint256 _stakerFee = _payout.mul(_market.stakerFee).div(10**18);\\r\\n        _payout = _payout.sub(_protocolFee).sub(_stakerFee);\\r\\n\\r\\n        accumulatedProtocolFee += _protocolFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n        feePot.depositFees(_stakerFee);\\r\\n\\r\\n        emit SharesBurned(_id, _sharesToBurn, msg.sender);\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimWinnings(uint256 _id, address _receiver) public returns (uint256) {\\r\\n        require(isMarketResolved(_id), \\\"market unresolved\\\");\\r\\n\\r\\n        Market memory _market = markets[_id];\\r\\n        uint256 _winningShares = _market.winner.trustedBurnAll(msg.sender);\\r\\n        _winningShares = (_winningShares / shareFactor) * shareFactor; // remove unusable dust\\r\\n\\r\\n        uint256 _payout = calcCost(_winningShares); // will fail if there are no winnings to claim\\r\\n        uint256 _settlementFee = _payout.mul(_market.settlementFee).div(10**18);\\r\\n        _payout = _payout.sub(_settlementFee);\\r\\n\\r\\n        accumulatedSettlementFees[_market.settlementAddress] += _settlementFee;\\r\\n        collateral.transfer(_receiver, _payout);\\r\\n\\r\\n        uint256 _winningIndex = _market.winnerIndex;\\r\\n        string memory _winningName = _market.winner.name();\\r\\n\\r\\n        emit WinningsClaimed(\\r\\n            _id,\\r\\n            address(_market.winner),\\r\\n            _winningIndex,\\r\\n            _winningName,\\r\\n            _winningShares,\\r\\n            _settlementFee,\\r\\n            _payout,\\r\\n            _receiver\\r\\n        );\\r\\n        return _payout;\\r\\n    }\\r\\n\\r\\n    function claimManyWinnings(uint256[] memory _ids, address _receiver) public returns (uint256) {\\r\\n        uint256 _totalWinnings = 0;\\r\\n        for (uint256 i = 0; i < _ids.length; i++) {\\r\\n            _totalWinnings = _totalWinnings.add(claimWinnings(_ids[i], _receiver));\\r\\n        }\\r\\n        return _totalWinnings;\\r\\n    }\\r\\n\\r\\n    function claimSettlementFees(address _receiver) public returns (uint256) {\\r\\n        uint256 _fees = accumulatedSettlementFees[msg.sender];\\r\\n        if (_fees > 0) {\\r\\n            accumulatedSettlementFees[msg.sender] = 0;\\r\\n            collateral.transfer(_receiver, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function claimProtocolFees() public returns (uint256) {\\r\\n        require(msg.sender == protocol || msg.sender == address(this));\\r\\n        uint256 _fees = accumulatedProtocolFee;\\r\\n        if (_fees > 0) {\\r\\n            accumulatedProtocolFee = 0;\\r\\n            collateral.transfer(protocol, _fees);\\r\\n        }\\r\\n        return _fees;\\r\\n    }\\r\\n\\r\\n    function setSettlementFee(uint256 _newFee) external onlyOwner {\\r\\n        settlementFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setStakerFee(uint256 _newFee) external onlyOwner {\\r\\n        stakerFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocolFee(uint256 _newFee) external onlyOwner {\\r\\n        protocolFee = _newFee;\\r\\n    }\\r\\n\\r\\n    function setProtocol(address _newProtocol, bool _claimFirst) external onlyOwner {\\r\\n        if (_claimFirst) {\\r\\n            claimProtocolFees();\\r\\n        }\\r\\n        protocol = _newProtocol;\\r\\n    }\\r\\n\\r\\n\\r\\n    function startMarket(\\r\\n        address _settlementAddress,\\r\\n        string[] memory _names,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active\\r\\n    ) internal returns (uint256 _marketId) {\\r\\n        _marketId = markets.length;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                createShareTokens(_names, address(this)),\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n            )\\r\\n        );\\r\\n        emit MarketCreated(_marketId, _names, _initialOdds);\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n    }\\r\\n       \\r\\n    \\r\\n    function activateMarket(uint256 _marketId) internal {\\r\\n        markets[_marketId].active = true;\\r\\n        emit MarketActivated(_marketId);\\r\\n    }\\r\\n\\r\\n    function makeEmptyMarket() private pure returns (Market memory) {\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](0);\\r\\n        uint256[] memory _initialOdds = new uint256[](0);\\r\\n        return Market(address(0), _tokens, OwnedERC20(address(0)), 0, 0, 0, 0, 0, 0, _initialOdds, false);\\r\\n    }\\r\\n\\r\\n\\r\\n    function endMarket(uint256 _marketId, uint256 _winningOutcome) internal {\\r\\n        Market storage _market = markets[_marketId];\\r\\n        OwnedERC20 _winner = _market.shareTokens[_winningOutcome];\\r\\n\\r\\n        _market.winner = _winner;\\r\\n        _market.active = false;\\r\\n        _market.winnerIndex = _winningOutcome;\\r\\n        _market.resolutionTimestamp = block.timestamp;\\r\\n        string memory _outcomeName = _winner.name();\\r\\n        emit MarketResolved(_marketId, address(_winner), _winningOutcome, _outcomeName);\\r\\n    }\\r\\n\\r\\n    function isMarketResolved(uint256 _id) public view returns (bool) {\\r\\n        Market memory _market = markets[_id];\\r\\n        return _market.winner != OwnedERC20(address(0));\\r\\n    }\\r\\n\\r\\n    // shares => collateral\\r\\n    // Shares must be both greater than (or equal to) and divisible by shareFactor.\\r\\n    function calcCost(uint256 _shares) public view returns (uint256) {\\r\\n        require(_shares >= shareFactor && _shares % shareFactor == 0);\\r\\n        return _shares / shareFactor;\\r\\n    }\\r\\n\\r\\n    // collateral => shares\\r\\n    function calcShares(uint256 _collateralIn) public view returns (uint256) {\\r\\n        return _collateralIn * shareFactor;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n\\r\\n    /**\\r\\n     @notice \\r\\n     */\\r\\n    function startZCBMarket(\\r\\n        address _settlementAddress,\\r\\n        uint256[] memory _initialOdds,\\r\\n        bool _active,\\r\\n        OwnedERC20 _zcb\\r\\n    ) internal returns (uint256 _marketId){\\r\\n\\r\\n        _marketId = markets.length;\\r\\n        OwnedERC20[] memory zcb = new OwnedERC20[](2);\\r\\n        zcb[0] = _zcb;\\r\\n        markets.push(\\r\\n            Market(\\r\\n                _settlementAddress,\\r\\n                zcb,\\r\\n                OwnedERC20(address(0)),\\r\\n                0,\\r\\n                settlementFee,\\r\\n                protocolFee,\\r\\n                stakerFee,\\r\\n                block.timestamp,\\r\\n                0,\\r\\n                _initialOdds,\\r\\n                _active\\r\\n                )\\r\\n            );\\r\\n\\r\\n        if (_active) {\\r\\n            emit MarketActivated(_marketId);\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function getZCBMarket(uint256 _id) public view returns (Market memory) {\\r\\n        if (_id >= markets.length) {\\r\\n           revert(\\\"Market Not Activated\\\");\\r\\n        } else {\\r\\n            return markets[_id];\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2f0ac2b89b9ac1965eea4cfe93c2dd71a11fb90e5b87f3421c17defea93c1f\",\"license\":\"MIT\"},\"contracts/turbo/CryptoCurrencyMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"../utils/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\nimport \\\"../libraries/ManagedByLink.sol\\\";\\r\\n\\r\\ncontract CryptoCurrencyMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned, ManagedByLink {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    event CoinAdded(uint256 indexed id, string name);\\r\\n    event ValueUpdate(uint256 indexed coinIndex, uint256 indexed resolutionTime, uint256 market, uint256 value);\\r\\n\\r\\n    enum Outcome {\\r\\n        Above, // 0\\r\\n        NotAbove // 1\\r\\n    }\\r\\n    string constant Above = \\\"Above\\\";\\r\\n    string constant NotAbove = \\\"Not Above\\\";\\r\\n\\r\\n    struct Coin {\\r\\n        string name;\\r\\n        AggregatorV3Interface feed;\\r\\n        uint256 value;\\r\\n        uint8 imprecision; // how many decimals to truncate\\r\\n        uint256 currentMarket; // 0 indicates no current market\\r\\n    }\\r\\n    Coin[] public coins;\\r\\n\\r\\n    struct MarketDetails {\\r\\n        uint256 coinIndex;\\r\\n        uint256 creationValue;\\r\\n        uint256 resolutionValue;\\r\\n        uint256 resolutionTime; // value at given time; this is that time\\r\\n    }\\r\\n    // MarketId => MarketDetails\\r\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol,\\r\\n        address _linkNode\\r\\n    )\\r\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\r\\n        Versioned(\\\"v1.3.3\\\")\\r\\n        ManagedByLink(_linkNode)\\r\\n    {\\r\\n        string memory _name = \\\"\\\";\\r\\n        coins.push(makeCoin(_name, AggregatorV3Interface(address(0)), 0));\\r\\n    }\\r\\n\\r\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\r\\n        return marketDetails[_marketId];\\r\\n    }\\r\\n\\r\\n    // NOTE: Trusts the owner not to add a coin twice.\\r\\n    function addCoin(\\r\\n        string calldata _name,\\r\\n        AggregatorV3Interface _feed,\\r\\n        uint8 _imprecision\\r\\n    ) external onlyOwner returns (uint256 _coinIndex) {\\r\\n        Coin memory _coin = makeCoin(_name, _feed, _imprecision);\\r\\n        _coinIndex = coins.length;\\r\\n        coins.push(_coin);\\r\\n        emit CoinAdded(_coinIndex, _name);\\r\\n    }\\r\\n\\r\\n    function getCoin(uint256 _coinIndex) public view returns (Coin memory _coin) {\\r\\n        _coin = coins[_coinIndex];\\r\\n    }\\r\\n\\r\\n    function getCoins() public view returns (Coin[] memory _coins) {\\r\\n        _coins = new Coin[](coins.length);\\r\\n        // Skip first coin because it's always the zeroed-out fake coin.\\r\\n        for (uint256 i = 1; i < coins.length; i++) {\\r\\n            _coins[i] = coins[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // If _resolutionTime is 0 then do NOT create.\\r\\n    // If _roundId is 0 then do NOT resolve.\\r\\n    function pokeCoin(\\r\\n        uint256 _coinIndex,\\r\\n        uint256 _resolutionTime,\\r\\n        uint80 _roundId\\r\\n    ) public onlyLinkNode {\\r\\n        Coin storage _coin = coins[_coinIndex];\\r\\n\\r\\n        // There's a market to resolve.\\r\\n        if (_roundId != 0 && _coin.currentMarket != 0) {\\r\\n            resolveMarket(_coin, _roundId);\\r\\n        }\\r\\n\\r\\n        // Create a market\\r\\n        if (_resolutionTime != 0 && _coin.currentMarket == 0) {\\r\\n            createMarket(_coinIndex, _coin, _resolutionTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function createMarket(\\r\\n        uint256 _coinIndex,\\r\\n        Coin storage _coin,\\r\\n        uint256 _resolutionTime\\r\\n    ) internal returns (uint256 _marketId) {\\r\\n        (, uint256 _newValue) = getLatestValue(_coin);\\r\\n\\r\\n        string[] memory _outcomes = new string[](2);\\r\\n        _outcomes[uint256(Outcome.Above)] = Above;\\r\\n        _outcomes[uint256(Outcome.NotAbove)] = NotAbove;\\r\\n\\r\\n        _marketId = startMarket(linkNode, _outcomes, evenOdds(false, 2), true);\\r\\n        marketDetails[_marketId] = MarketDetails(_coinIndex, _newValue, 0, _resolutionTime);\\r\\n        _coin.currentMarket = _marketId;\\r\\n        _coin.value = _newValue;\\r\\n        emit ValueUpdate(_coinIndex, _resolutionTime, _marketId, _newValue);\\r\\n    }\\r\\n\\r\\n    function resolveMarket(Coin storage _coin, uint80 _roundId) internal {\\r\\n        uint256 _resolutionTime = marketDetails[_coin.currentMarket].resolutionTime;\\r\\n        (uint256 _fullValue, uint256 _newValue) = getSpecificValue(_coin, _roundId, _resolutionTime);\\r\\n\\r\\n        uint256 _winningOutcome;\\r\\n        if (_newValue > _coin.value) {\\r\\n            _winningOutcome = uint256(Outcome.Above);\\r\\n        } else {\\r\\n            _winningOutcome = uint256(Outcome.NotAbove);\\r\\n        }\\r\\n\\r\\n        endMarket(_coin.currentMarket, _winningOutcome);\\r\\n        marketDetails[_coin.currentMarket].resolutionValue = _fullValue;\\r\\n        _coin.currentMarket = 0;\\r\\n        _coin.value = 0;\\r\\n    }\\r\\n\\r\\n    function getLatestValue(Coin storage _coin) internal view returns (uint256 _fullValue, uint256 _truncatedValue) {\\r\\n        (, int256 _rawValue, , , ) = _coin.feed.latestRoundData();\\r\\n        require(_rawValue >= 0, \\\"Value from feed is negative\\\");\\r\\n        _fullValue = uint256(_rawValue);\\r\\n        _truncatedValue = calcTruncatedValue(_coin, _fullValue);\\r\\n    }\\r\\n\\r\\n    // Get value at a specific round, but fail if it isn't after a specific time.\\r\\n    function getSpecificValue(\\r\\n        Coin storage _coin,\\r\\n        uint80 _roundId,\\r\\n        uint256 _resolutionTime\\r\\n    ) internal view returns (uint256 _fullValue, uint256 _truncatedValue) {\\r\\n        (, int256 _rawValue, , uint256 _updatedAt, ) = _coin.feed.getRoundData(_roundId);\\r\\n        require(_rawValue >= 0, \\\"Value from feed is negative\\\");\\r\\n        require(_updatedAt >= _resolutionTime, \\\"Value hasn't been updated yet\\\");\\r\\n\\r\\n        (, , , uint256 _previousRoundTime, ) = _coin.feed.getRoundData(previousRound(_roundId));\\r\\n        require(_previousRoundTime < _resolutionTime, \\\"Must use first round after resolution time\\\");\\r\\n\\r\\n        _fullValue = uint256(_rawValue);\\r\\n        _truncatedValue = calcTruncatedValue(_coin, _fullValue);\\r\\n    }\\r\\n\\r\\n    // The precision is how many decimals the value has. Zero is dollars, 2 includes cents, 3 is tenths of a cent, etc.\\r\\n    // Our resolution rules want a certain precision. Like BTC is to the dollar and MATIC is to the cent.\\r\\n    // If somehow the decimals are larger than the desired precision then add zeroes to the end to meet the precision.\\r\\n    // This does not change the resolution outcome but does guard against decimals() changing and therefore altering the basis.\\r\\n    function calcTruncatedValue(Coin storage _coin, uint256 _fullValue)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 _truncatedValue)\\r\\n    {\\r\\n        uint8 _precision = _coin.feed.decimals(); // probably constant but that isn't guaranteed, so query each time\\r\\n        if (_precision > _coin.imprecision) {\\r\\n            uint8 _truncate = _precision - _coin.imprecision;\\r\\n            _truncatedValue = _fullValue / (10**_truncate);\\r\\n        } else if (_precision < _coin.imprecision) {\\r\\n            uint8 _greaten = _coin.imprecision - _precision;\\r\\n            _truncatedValue = _fullValue * (10**_greaten);\\r\\n        } else {\\r\\n            _truncatedValue = _fullValue;\\r\\n        }\\r\\n\\r\\n        // Round up because that cleanly fits Above/Not-Above.\\r\\n        if (_truncatedValue != _fullValue) {\\r\\n            _truncatedValue += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function makeCoin(\\r\\n        string memory _name,\\r\\n        AggregatorV3Interface _feed,\\r\\n        uint8 _imprecision\\r\\n    ) internal pure returns (Coin memory _coin) {\\r\\n        _coin = Coin(_name, _feed, 0, _imprecision, 0);\\r\\n    }\\r\\n\\r\\n    // The roundId is the encoding of two parts: the phase and the phase-specific round id.\\r\\n    // To find the previous roundId:\\r\\n    // 1. extract the phase and phase-specific round (I call these _phaseId and _roundId)\\r\\n    // 2. decrement the phase-specific round\\r\\n    // 3. re-encode the phase and phase-specific round.\\r\\n    uint256 private constant PHASE_OFFSET = 64;\\r\\n\\r\\n    function previousRound(uint80 _fullRoundId) internal pure returns (uint80) {\\r\\n        uint256 _phaseId = uint256(uint16(_fullRoundId >> PHASE_OFFSET));\\r\\n        uint64 _roundId = uint64(_fullRoundId) - 1;\\r\\n        return uint80((_phaseId << PHASE_OFFSET) | _roundId);\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        return getMarketDetails(_marketId).resolutionTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d151fc26900ec2c49daf2eab02ebdc739a662747c1fa9db5de3a7739e076b02\",\"license\":\"MIT\"},\"contracts/turbo/CryptoMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"../utils/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\nimport \\\"../libraries/ManagedByLink.sol\\\";\\r\\nimport \\\"../libraries/Rewardable.sol\\\";\\r\\n\\r\\ncontract CryptoMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned, ManagedByLink {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    event CoinAdded(uint256 indexed id, string name);\\r\\n\\r\\n    event NewPrices(uint256 indexed nextResolutionTime, uint256[] markets, uint256[] prices);\\r\\n\\r\\n    struct Coin {\\r\\n        string name;\\r\\n        AggregatorV3Interface priceFeed;\\r\\n        uint256 price;\\r\\n        uint8 imprecision; // how many decimals to truncate\\r\\n        uint256[1] currentMarkets;\\r\\n    }\\r\\n    Coin[] public coins;\\r\\n\\r\\n    enum MarketType {\\r\\n        PriceUpDown // 0\\r\\n    }\\r\\n    enum PriceUpDownOutcome {\\r\\n        Above, // 0\\r\\n        NotAbove // 1\\r\\n    }\\r\\n    struct MarketDetails {\\r\\n        MarketType marketType;\\r\\n        uint256 coinIndex;\\r\\n        uint256 creationPrice;\\r\\n        uint256 resolutionPrice;\\r\\n        uint256 resolutionTime; // price at given time; this is that time\\r\\n    }\\r\\n    // MarketId => MarketDetails\\r\\n    mapping(uint256 => MarketDetails) internal marketDetails;\\r\\n\\r\\n    uint256 public nextResolutionTime;\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol,\\r\\n        address _linkNode\\r\\n    )\\r\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\r\\n        Versioned(\\\"v1.2.0\\\")\\r\\n        ManagedByLink(_linkNode)\\r\\n    {\\r\\n        string memory _name = \\\"\\\";\\r\\n        coins.push(makeCoin(_name, AggregatorV3Interface(address(0)), 0));\\r\\n    }\\r\\n\\r\\n    function getMarketDetails(uint256 _marketId) public view returns (MarketDetails memory) {\\r\\n        return marketDetails[_marketId];\\r\\n    }\\r\\n\\r\\n    // NOTE: Trusts the owner not to add a coin twice.\\r\\n    // Returns the coin index.\\r\\n    function addCoin(\\r\\n        string calldata _name,\\r\\n        AggregatorV3Interface _priceFeed,\\r\\n        uint8 _imprecision\\r\\n    ) external onlyOwner returns (uint256 _coinIndex) {\\r\\n        Coin memory _coin = makeCoin(_name, _priceFeed, _imprecision);\\r\\n        _coinIndex = coins.length;\\r\\n        coins.push(_coin);\\r\\n        emit CoinAdded(_coinIndex, _name);\\r\\n    }\\r\\n\\r\\n    function getCoin(uint256 _coinIndex) public view returns (Coin memory _coin) {\\r\\n        _coin = coins[_coinIndex];\\r\\n    }\\r\\n\\r\\n    function getCoins() public view returns (Coin[] memory _coins) {\\r\\n        _coins = new Coin[](coins.length);\\r\\n        // Skip first coin because it's always the zeroed-out fake coin.\\r\\n        for (uint256 i = 1; i < coins.length; i++) {\\r\\n            _coins[i] = coins[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Iterates over all coins.\\r\\n    // If markets do not exist for coin, create them.\\r\\n    // Unless _nextResolutionTime is zero; then do not create new markets.\\r\\n    // If markets for coin exist and are ready to resolve, resolve them and create new markets.\\r\\n    // Else, error.\\r\\n    //\\r\\n    // Assume that _roundIds has a dummy value at index 0, and is 1 indexed like the\\r\\n    // coins array.\\r\\n    function createAndResolveMarkets(uint80[] calldata _roundIds, uint256 _nextResolutionTime) public onlyLinkNode {\\r\\n        // If market creation was stopped then it can be started again.\\r\\n        // If market creation wasn't stopped then you must wait for market end time to resolve.\\r\\n        require(block.timestamp >= nextResolutionTime, \\\"Must wait for market resolution\\\");\\r\\n        require(_roundIds.length == coins.length, \\\"Must specify one roundId for each coin\\\");\\r\\n\\r\\n        uint256 _resolutionTime = nextResolutionTime;\\r\\n        nextResolutionTime = _nextResolutionTime;\\r\\n\\r\\n        uint256[] memory _prices = new uint256[](coins.length - 1);\\r\\n        uint256[] memory _newMarketIds = new uint256[](coins.length - 1);\\r\\n        // Start at 1 to skip the fake Coin in the 0 index\\r\\n        for (uint256 i = 1; i < coins.length; i++) {\\r\\n            (_prices[i - 1], _newMarketIds[i - 1]) = createAndResolveMarketsForCoin(i, _resolutionTime, _roundIds[i]);\\r\\n        }\\r\\n\\r\\n        emit NewPrices(nextResolutionTime, _newMarketIds, _prices);\\r\\n    }\\r\\n\\r\\n    function createAndResolveMarketsForCoin(\\r\\n        uint256 _coinIndex,\\r\\n        uint256 _resolutionTime,\\r\\n        uint80 _roundId\\r\\n    ) internal returns (uint256 _price, uint256 _newMarketId) {\\r\\n        Coin memory _coin = coins[_coinIndex];\\r\\n        (uint256 _fullPrice, uint256 _newPrice) = getPrice(_coin, _roundId, _resolutionTime);\\r\\n\\r\\n        // resolve markets\\r\\n        if (_coin.currentMarkets[uint256(MarketType.PriceUpDown)] != 0) {\\r\\n            resolvePriceUpDownMarket(_coin, _newPrice, _fullPrice);\\r\\n        }\\r\\n\\r\\n        // update price only AFTER resolution\\r\\n        coins[_coinIndex].price = _newPrice;\\r\\n\\r\\n        // link node sets nextResolutionTime to zero to signify \\\"do not create markets after resolution\\\"\\r\\n        if (nextResolutionTime == 0) {\\r\\n            return (0, 0);\\r\\n        }\\r\\n\\r\\n        // create markets\\r\\n        _newMarketId = createPriceUpDownMarket(_coinIndex, linkNode, _newPrice);\\r\\n        coins[_coinIndex].currentMarkets[uint256(MarketType.PriceUpDown)] = _newMarketId;\\r\\n\\r\\n        return (_newPrice, _newMarketId);\\r\\n    }\\r\\n\\r\\n    function resolvePriceUpDownMarket(\\r\\n        Coin memory _coin,\\r\\n        uint256 _newPrice,\\r\\n        uint256 _fullPrice\\r\\n    ) internal {\\r\\n        uint256 _marketId = _coin.currentMarkets[uint256(MarketType.PriceUpDown)];\\r\\n\\r\\n        uint256 _winningOutcome;\\r\\n        if (_newPrice > _coin.price) {\\r\\n            _winningOutcome = uint256(PriceUpDownOutcome.Above);\\r\\n        } else {\\r\\n            _winningOutcome = uint256(PriceUpDownOutcome.NotAbove);\\r\\n        }\\r\\n\\r\\n        endMarket(_marketId, _winningOutcome);\\r\\n        marketDetails[_marketId].resolutionPrice = _fullPrice;\\r\\n    }\\r\\n\\r\\n    function createPriceUpDownMarket(\\r\\n        uint256 _coinIndex,\\r\\n        address _creator,\\r\\n        uint256 _newPrice\\r\\n    ) internal returns (uint256 _id) {\\r\\n        string[] memory _outcomes = new string[](2);\\r\\n        _outcomes[uint256(PriceUpDownOutcome.Above)] = \\\"Above\\\";\\r\\n        _outcomes[uint256(PriceUpDownOutcome.NotAbove)] = \\\"Not Above\\\";\\r\\n\\r\\n        _id = startMarket(_creator, _outcomes, evenOdds(false, 2), true);\\r\\n        marketDetails[_id] = MarketDetails(MarketType.PriceUpDown, _coinIndex, _newPrice, 0, nextResolutionTime);\\r\\n    }\\r\\n\\r\\n    // Returns the price based on a few factors.\\r\\n    // If _roundId is zero then it returns the latest price.\\r\\n    // Else, it returns the price for that round,\\r\\n    //       but errors if that isn't the first round after the resolution time.\\r\\n    // The price is then altered to match the desired precision.\\r\\n    function getPrice(\\r\\n        Coin memory _coin,\\r\\n        uint80 _roundId,\\r\\n        uint256 _resolutionTime\\r\\n    ) internal view returns (uint256 _fullPrice, uint256 _truncatedPrice) {\\r\\n        if (_roundId == 0) {\\r\\n            (, int256 _rawPrice, , , ) = _coin.priceFeed.latestRoundData();\\r\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\r\\n            _fullPrice = uint256(_rawPrice);\\r\\n        } else {\\r\\n            (, int256 _rawPrice, , uint256 updatedAt, ) = _coin.priceFeed.getRoundData(_roundId);\\r\\n            require(_rawPrice >= 0, \\\"Price from feed is negative\\\");\\r\\n            require(updatedAt >= _resolutionTime, \\\"Price hasn't been updated yet\\\");\\r\\n\\r\\n            // if resolution time is zero then market creation was stopped, so the previous round doesn't matter\\r\\n            if (_resolutionTime != 0) {\\r\\n                (, , , uint256 _previousRoundTime, ) = _coin.priceFeed.getRoundData(previousRound(_roundId));\\r\\n                require(_previousRoundTime < _resolutionTime, \\\"Must use first round after resolution time\\\");\\r\\n            }\\r\\n\\r\\n            _fullPrice = uint256(_rawPrice);\\r\\n        }\\r\\n\\r\\n        // The precision is how many decimals the price has. Zero is dollars, 2 includes cents, 3 is tenths of a cent, etc.\\r\\n        // Our resolution rules want a certain precision. Like BTC is to the dollar and MATIC is to the cent.\\r\\n        // If somehow the decimals are larger than the desired precision then add zeroes to the end to meet the precision.\\r\\n        // This does not change the resolution outcome but does guard against decimals() changing and therefore altering the basis.\\r\\n\\r\\n        uint8 _precision = _coin.priceFeed.decimals(); // probably constant but that isn't guaranteed, so query each time\\r\\n        if (_precision > _coin.imprecision) {\\r\\n            uint8 _truncate = _precision - _coin.imprecision;\\r\\n            _truncatedPrice = _fullPrice / (10**_truncate);\\r\\n        } else if (_precision < _coin.imprecision) {\\r\\n            uint8 _greaten = _coin.imprecision - _precision;\\r\\n            _truncatedPrice = _fullPrice * (10**_greaten);\\r\\n        } else {\\r\\n            _truncatedPrice = _fullPrice;\\r\\n        }\\r\\n\\r\\n        // Round up because that cleanly fits Above/Not-Above.\\r\\n        if (_truncatedPrice != _fullPrice) {\\r\\n            _truncatedPrice += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function makeCoin(\\r\\n        string memory _name,\\r\\n        AggregatorV3Interface _priceFeed,\\r\\n        uint8 _imprecision\\r\\n    ) internal pure returns (Coin memory _coin) {\\r\\n        uint256[1] memory _currentMarkets = [uint256(0)];\\r\\n        _coin = Coin(_name, _priceFeed, 0, _imprecision, _currentMarkets);\\r\\n    }\\r\\n\\r\\n    // The roundId is the encoding of two parts: the phase and the phase-specific round id.\\r\\n    // To find the previous roundId:\\r\\n    // 1. extract the phase and phase-specific round (I call these _phaseId and _roundId)\\r\\n    // 2. decrement the phase-specific round\\r\\n    // 3. re-encode the phase and phase-specific round.\\r\\n    uint256 private constant PHASE_OFFSET = 64;\\r\\n\\r\\n    function previousRound(uint80 _fullRoundId) internal pure returns (uint80) {\\r\\n        uint256 _phaseId = uint256(uint16(_fullRoundId >> PHASE_OFFSET));\\r\\n        uint64 _roundId = uint64(_fullRoundId) - 1;\\r\\n        return uint80((_phaseId << PHASE_OFFSET) | _roundId);\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        return getMarketDetails(_marketId).resolutionTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9fd90e25490e304deafa0856dc6087a98b48fffb2b22cf925fe2ec13975a30a3\",\"license\":\"MIT\"},\"contracts/turbo/FeePot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\n\\r\\ncontract FeePot is ERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    uint256 internal constant magnitude = 2**128;\\r\\n\\r\\n    IERC20Full public collateral;\\r\\n    IERC20Full public reputationToken;\\r\\n\\r\\n    uint256 public magnifiedFeesPerShare;\\r\\n\\r\\n    mapping(address => uint256) public magnifiedFeesCorrections;\\r\\n    mapping(address => uint256) public storedFees;\\r\\n\\r\\n    uint256 public feeReserve;\\r\\n\\r\\n    constructor(IERC20Full _collateral, IERC20Full _reputationToken)\\r\\n        ERC20(\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol())),\\r\\n            string(abi.encodePacked(\\\"S_\\\", _reputationToken.symbol()))\\r\\n        )\\r\\n    {\\r\\n        collateral = _collateral;\\r\\n        reputationToken = _reputationToken;\\r\\n\\r\\n        require(_collateral != IERC20Full(address(0)));\\r\\n    }\\r\\n\\r\\n    function depositFees(uint256 _amount) public returns (bool) {\\r\\n        collateral.transferFrom(msg.sender, address(this), _amount);\\r\\n        uint256 _totalSupply = totalSupply(); // after collateral.transferFrom to prevent reentrancy causing stale totalSupply\\r\\n        if (_totalSupply == 0) {\\r\\n            feeReserve = feeReserve.add(_amount);\\r\\n            return true;\\r\\n        }\\r\\n        if (feeReserve > 0) {\\r\\n            _amount = _amount.add(feeReserve);\\r\\n            feeReserve = 0;\\r\\n        }\\r\\n        magnifiedFeesPerShare = magnifiedFeesPerShare.add((_amount).mul(magnitude) / _totalSupply);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawableFeesOf(address _owner) public view returns (uint256) {\\r\\n        return earnedFeesOf(_owner).add(storedFees[_owner]);\\r\\n    }\\r\\n\\r\\n    function earnedFeesOf(address _owner) public view returns (uint256) {\\r\\n        uint256 _ownerBalance = balanceOf(_owner);\\r\\n        uint256 _magnifiedFees = magnifiedFeesPerShare.mul(_ownerBalance);\\r\\n        return _magnifiedFees.sub(magnifiedFeesCorrections[_owner]) / magnitude;\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal override {\\r\\n        storedFees[_from] = storedFees[_from].add(earnedFeesOf(_from));\\r\\n        super._transfer(_from, _to, _amount);\\r\\n\\r\\n        magnifiedFeesCorrections[_from] = magnifiedFeesPerShare.mul(balanceOf(_from));\\r\\n        magnifiedFeesCorrections[_to] = magnifiedFeesCorrections[_to].add(magnifiedFeesPerShare.mul(_amount));\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external returns (bool) {\\r\\n        reputationToken.transferFrom(msg.sender, address(this), _amount);\\r\\n        _mint(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesCorrections[msg.sender].add(\\r\\n            magnifiedFeesPerShare.mul(_amount)\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function exit(uint256 _amount) external returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        _burn(msg.sender, _amount);\\r\\n        reputationToken.transfer(msg.sender, _amount);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeem() public returns (bool) {\\r\\n        redeemInternal(msg.sender);\\r\\n        magnifiedFeesCorrections[msg.sender] = magnifiedFeesPerShare.mul(balanceOf(msg.sender));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function redeemInternal(address _account) internal {\\r\\n        uint256 _withdrawableFees = withdrawableFeesOf(_account);\\r\\n        if (_withdrawableFees > 0) {\\r\\n            storedFees[_account] = 0;\\r\\n            collateral.transfer(_account, _withdrawableFees);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0045efc6b0eb6013e765caa47470f1d66ac487fcd9fd2bfafc04c6c61b3c6865\",\"license\":\"MIT\"},\"contracts/turbo/Fetcher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"./MMAMarketFactoryV3.sol\\\";\\r\\nimport \\\"./AMMFactory.sol\\\";\\r\\nimport \\\"./CryptoMarketFactoryV3.sol\\\";\\r\\nimport \\\"./NBAMarketFactoryV3.sol\\\";\\r\\nimport \\\"../rewards/MasterChef.sol\\\";\\r\\nimport \\\"./CryptoCurrencyMarketFactoryV3.sol\\\";\\r\\nimport \\\"./TrustedMarketFactoryV3.sol\\\";\\r\\n\\r\\n// Helper contract for grabbing huge amounts of data without overloading multicall.\\r\\nabstract contract Fetcher {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    struct CollateralBundle {\\r\\n        address addr;\\r\\n        string symbol;\\r\\n        uint256 decimals;\\r\\n    }\\r\\n\\r\\n    struct MarketFactoryBundle {\\r\\n        uint256 shareFactor;\\r\\n        uint256 stakerFee;\\r\\n        uint256 settlementFee;\\r\\n        uint256 protocolFee;\\r\\n        FeePot feePot;\\r\\n        CollateralBundle collateral;\\r\\n        uint256 marketCount;\\r\\n    }\\r\\n\\r\\n    struct PoolBundle {\\r\\n        address addr;\\r\\n        uint256[] tokenRatios;\\r\\n        uint256[] balances;\\r\\n        uint256[] weights;\\r\\n        uint256 swapFee;\\r\\n        uint256 totalSupply;\\r\\n    }\\r\\n\\r\\n    struct StaticMarketBundle {\\r\\n        AbstractMarketFactoryV3 factory;\\r\\n        uint256 marketId;\\r\\n        PoolBundle pool;\\r\\n        MasterChef.PoolStatusInfo rewards;\\r\\n        OwnedERC20[] shareTokens;\\r\\n        uint256 creationTimestamp;\\r\\n        OwnedERC20 winner;\\r\\n        uint256[] initialOdds;\\r\\n    }\\r\\n\\r\\n    struct DynamicMarketBundle {\\r\\n        AbstractMarketFactoryV3 factory;\\r\\n        uint256 marketId;\\r\\n        PoolBundle pool;\\r\\n        OwnedERC20 winner;\\r\\n    }\\r\\n\\r\\n    string public marketType;\\r\\n    string public version;\\r\\n\\r\\n    constructor(string memory _type, string memory _version) {\\r\\n        marketType = _type;\\r\\n        version = _version;\\r\\n    }\\r\\n\\r\\n    function buildCollateralBundle(IERC20Full _collateral) internal view returns (CollateralBundle memory _bundle) {\\r\\n        _bundle.addr = address(_collateral);\\r\\n        _bundle.symbol = _collateral.symbol();\\r\\n        _bundle.decimals = _collateral.decimals();\\r\\n    }\\r\\n\\r\\n    function buildMarketFactoryBundle(AbstractMarketFactoryV3 _marketFactory)\\r\\n        internal\\r\\n        view\\r\\n        returns (MarketFactoryBundle memory _bundle)\\r\\n    {\\r\\n        _bundle.shareFactor = _marketFactory.shareFactor();\\r\\n        _bundle.stakerFee = _marketFactory.stakerFee();\\r\\n        _bundle.settlementFee = _marketFactory.settlementFee();\\r\\n        _bundle.protocolFee = _marketFactory.protocolFee();\\r\\n        _bundle.feePot = _marketFactory.feePot();\\r\\n        _bundle.collateral = buildCollateralBundle(_marketFactory.collateral());\\r\\n        _bundle.marketCount = _marketFactory.marketCount();\\r\\n    }\\r\\n\\r\\n    function buildStaticMarketBundle(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (StaticMarketBundle memory _bundle) {\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        _bundle.factory = _marketFactory;\\r\\n        _bundle.marketId = _marketId;\\r\\n        _bundle.pool = buildPoolBundle(_marketFactory, _ammFactory, _marketId);\\r\\n        _bundle.rewards = _masterChef.getPoolInfo(_ammFactory, _marketFactory, _marketId);\\r\\n        _bundle.shareTokens = _market.shareTokens;\\r\\n        _bundle.creationTimestamp = _market.creationTimestamp;\\r\\n        _bundle.winner = _market.winner;\\r\\n        _bundle.initialOdds = _market.initialOdds;\\r\\n    }\\r\\n\\r\\n    function buildDynamicMarketBundle(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (DynamicMarketBundle memory _bundle) {\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n\\r\\n        _bundle.factory = _marketFactory;\\r\\n        _bundle.marketId = _marketId;\\r\\n        _bundle.winner = _market.winner;\\r\\n        _bundle.pool = buildPoolBundle(_marketFactory, _ammFactory, _marketId);\\r\\n    }\\r\\n\\r\\n    function buildPoolBundle(\\r\\n        AbstractMarketFactoryV3 _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (PoolBundle memory _bundle) {\\r\\n        BPool _pool = _ammFactory.getPool(_marketFactory, _marketId);\\r\\n        if (_pool == BPool(address(0))) return _bundle;\\r\\n\\r\\n        _bundle.addr = address(_pool);\\r\\n        _bundle.totalSupply = _pool.totalSupply();\\r\\n        _bundle.swapFee = _ammFactory.getSwapFee(_marketFactory, _marketId);\\r\\n        _bundle.balances = _ammFactory.getPoolBalances(_marketFactory, _marketId);\\r\\n        _bundle.tokenRatios = _ammFactory.tokenRatios(_marketFactory, _marketId);\\r\\n        _bundle.weights = _ammFactory.getPoolWeights(_marketFactory, _marketId);\\r\\n    }\\r\\n\\r\\n    function openOrHasWinningShares(AbstractMarketFactoryV3 _marketFactory, uint256 _marketId)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        AbstractMarketFactoryV3.Market memory _market = _marketFactory.getMarket(_marketId);\\r\\n        if (_market.winner == OwnedERC20(address(0))) return true; // open\\r\\n        return _market.winner.totalSupply() > 0; // has winning shares\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract SportsFetcher is Fetcher {\\r\\n    struct SpecificMarketFactoryBundle {\\r\\n        MarketFactoryBundle _super;\\r\\n    }\\r\\n\\r\\n    struct StaticEventBundle {\\r\\n        uint256 id;\\r\\n        StaticMarketBundle[] markets;\\r\\n        int256[] lines;\\r\\n        uint256 estimatedStartTime;\\r\\n        uint256 homeTeamId;\\r\\n        uint256 awayTeamId;\\r\\n        string homeTeamName;\\r\\n        string awayTeamName;\\r\\n        // Dynamics\\r\\n        Sport.SportsEventStatus status;\\r\\n        uint256 homeScore;\\r\\n        uint256 awayScore;\\r\\n    }\\r\\n\\r\\n    struct DynamicEventBundle {\\r\\n        uint256 id;\\r\\n        Sport.SportsEventStatus status;\\r\\n        DynamicMarketBundle[] markets;\\r\\n        uint256 homeScore;\\r\\n        uint256 awayScore;\\r\\n    }\\r\\n\\r\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\r\\n        internal\\r\\n        view\\r\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\r\\n    {\\r\\n        _bundle._super = buildMarketFactoryBundle(AbstractMarketFactoryV3(_marketFactory));\\r\\n    }\\r\\n\\r\\n    function fetchInitial(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\r\\n            StaticEventBundle[] memory _eventBundles,\\r\\n            uint256 _lowestEventIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\r\\n        (_eventBundles, _lowestEventIndex) = buildStaticEventBundles(\\r\\n            _marketFactory,\\r\\n            _ammFactory,\\r\\n            _masterChef,\\r\\n            _offset,\\r\\n            _total\\r\\n        );\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function fetchDynamic(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            DynamicEventBundle[] memory _bundles,\\r\\n            uint256 _lowestEventIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        (_bundles, _lowestEventIndex) = buildDynamicEventBundles(_marketFactory, _ammFactory, _offset, _total);\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function buildStaticEventBundles(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    ) internal view returns (StaticEventBundle[] memory _bundles, uint256 _lowestEventIndex) {\\r\\n        uint256[] memory _eventIds;\\r\\n        (_eventIds, _lowestEventIndex) = listOfInterestingEvents(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _eventIds.length;\\r\\n        _bundles = new StaticEventBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _bundles[i] = buildStaticEventBundle(_marketFactory, _ammFactory, _masterChef, _eventIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buildDynamicEventBundles(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    ) internal view returns (DynamicEventBundle[] memory _bundles, uint256 _lowestEventIndex) {\\r\\n        uint256[] memory _eventIds;\\r\\n        (_eventIds, _lowestEventIndex) = listOfInterestingEvents(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _eventIds.length;\\r\\n        _bundles = new DynamicEventBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _bundles[i] = buildDynamicEventBundle(_marketFactory, _ammFactory, _eventIds[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buildStaticEventBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _eventId\\r\\n    ) internal view returns (StaticEventBundle memory _bundle) {\\r\\n        Sport.SportsEvent memory _event = Sport(_marketFactory).getSportsEvent(_eventId);\\r\\n\\r\\n        StaticMarketBundle[] memory _markets = new StaticMarketBundle[](_event.markets.length);\\r\\n        for (uint256 i = 0; i < _markets.length; i++) {\\r\\n            _markets[i] = buildStaticMarketBundle(\\r\\n                AbstractMarketFactoryV3(_marketFactory),\\r\\n                _ammFactory,\\r\\n                _masterChef,\\r\\n                _event.markets[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _bundle.id = _eventId;\\r\\n        _bundle.status = _event.status;\\r\\n        _bundle.markets = _markets;\\r\\n        _bundle.lines = _event.lines;\\r\\n        _bundle.estimatedStartTime = _event.estimatedStartTime;\\r\\n        _bundle.homeTeamId = _event.homeTeamId;\\r\\n        _bundle.awayTeamId = _event.awayTeamId;\\r\\n        _bundle.homeTeamName = _event.homeTeamName;\\r\\n        _bundle.awayTeamName = _event.awayTeamName;\\r\\n        _bundle.homeScore = _event.homeScore;\\r\\n        _bundle.awayScore = _event.awayScore;\\r\\n    }\\r\\n\\r\\n    function buildDynamicEventBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _eventId\\r\\n    ) internal view returns (DynamicEventBundle memory _bundle) {\\r\\n        Sport.SportsEvent memory _event = Sport(_marketFactory).getSportsEvent(_eventId);\\r\\n\\r\\n        DynamicMarketBundle[] memory _markets = new DynamicMarketBundle[](_event.markets.length);\\r\\n        for (uint256 i = 0; i < _markets.length; i++) {\\r\\n            _markets[i] = buildDynamicMarketBundle(\\r\\n                AbstractMarketFactoryV3(_marketFactory),\\r\\n                _ammFactory,\\r\\n                _event.markets[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _bundle.id = _eventId;\\r\\n        _bundle.markets = _markets;\\r\\n        _bundle.status = _event.status;\\r\\n        _bundle.homeScore = _event.homeScore;\\r\\n        _bundle.awayScore = _event.awayScore;\\r\\n    }\\r\\n\\r\\n    // Starts from the end of the events list because newer events are more interesting.\\r\\n    // _offset is skipping all events, not just interesting events\\r\\n    function listOfInterestingEvents(\\r\\n        address _marketFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    ) internal view returns (uint256[] memory _interestingEventIds, uint256 _eventIndex) {\\r\\n        _interestingEventIds = new uint256[](_total);\\r\\n\\r\\n        uint256 _eventCount = Sport(_marketFactory).eventCount();\\r\\n\\r\\n        // No events so return nothing. (needed to avoid integer underflow below)\\r\\n        if (_eventCount == 0) {\\r\\n            return (new uint256[](0), 0);\\r\\n        }\\r\\n\\r\\n        uint256 _max = _eventCount;\\r\\n\\r\\n        // No remaining events so return nothing. (needed to avoid integer underflow below)\\r\\n        if (_offset > _max) {\\r\\n            return (new uint256[](0), 0);\\r\\n        }\\r\\n\\r\\n        uint256 _collectedEvents = 0;\\r\\n        _eventIndex = _max - _offset;\\r\\n        while (true) {\\r\\n            if (_collectedEvents >= _total) break;\\r\\n            if (_eventIndex == 0) break;\\r\\n\\r\\n            _eventIndex--; // starts out one too high, so this works\\r\\n\\r\\n            (Sport.SportsEvent memory _event, uint256 _eventId) =\\r\\n                Sport(_marketFactory).getSportsEventByIndex(_eventIndex);\\r\\n\\r\\n            if (isEventInteresting(_event, AbstractMarketFactoryV3(_marketFactory))) {\\r\\n                _interestingEventIds[_collectedEvents] = _eventId;\\r\\n                _collectedEvents++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_total > _collectedEvents) {\\r\\n            assembly {\\r\\n                // shortens array\\r\\n                mstore(_interestingEventIds, _collectedEvents)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isEventInteresting(Sport.SportsEvent memory _event, AbstractMarketFactoryV3 _marketFactory)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        for (uint256 i = 0; i < _event.markets.length; i++) {\\r\\n            uint256 _marketId = _event.markets[i];\\r\\n            if (openOrHasWinningShares(_marketFactory, _marketId)) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract NBAFetcher is SportsFetcher {\\r\\n    constructor() Fetcher(\\\"NBA\\\", \\\"TBD\\\") {}\\r\\n}\\r\\n\\r\\ncontract MLBFetcher is SportsFetcher {\\r\\n    constructor() Fetcher(\\\"MLB\\\", \\\"TBD\\\") {}\\r\\n}\\r\\n\\r\\ncontract MMAFetcher is SportsFetcher {\\r\\n    constructor() Fetcher(\\\"MMA\\\", \\\"TBD\\\") {}\\r\\n}\\r\\n\\r\\ncontract NFLFetcher is SportsFetcher {\\r\\n    constructor() Fetcher(\\\"NFL\\\", \\\"TBD\\\") {}\\r\\n}\\r\\n\\r\\ncontract CryptoFetcher is Fetcher {\\r\\n    constructor() Fetcher(\\\"Crypto\\\", \\\"TBD\\\") {}\\r\\n\\r\\n    struct SpecificMarketFactoryBundle {\\r\\n        MarketFactoryBundle _super;\\r\\n    }\\r\\n\\r\\n    struct SpecificStaticMarketBundle {\\r\\n        StaticMarketBundle _super;\\r\\n        uint8 marketType;\\r\\n        uint256 coinIndex;\\r\\n        uint256 creationPrice;\\r\\n        uint256 resolutionTime;\\r\\n        // Dynamics\\r\\n        uint256 resolutionPrice;\\r\\n    }\\r\\n\\r\\n    struct SpecificDynamicMarketBundle {\\r\\n        DynamicMarketBundle _super;\\r\\n        uint256 resolutionPrice;\\r\\n    }\\r\\n\\r\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\r\\n        internal\\r\\n        view\\r\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\r\\n    {\\r\\n        _bundle._super = buildMarketFactoryBundle(CryptoMarketFactoryV3(_marketFactory));\\r\\n    }\\r\\n\\r\\n    function buildSpecificStaticMarketBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\r\\n        CryptoMarketFactoryV3.MarketDetails memory _details =\\r\\n            CryptoMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n        _bundle._super = buildStaticMarketBundle(\\r\\n            CryptoMarketFactoryV3(_marketFactory),\\r\\n            _ammFactory,\\r\\n            _masterChef,\\r\\n            _marketId\\r\\n        );\\r\\n        _bundle.marketType = uint8(_details.marketType);\\r\\n        _bundle.creationPrice = _details.creationPrice;\\r\\n        _bundle.coinIndex = _details.coinIndex;\\r\\n        _bundle.resolutionPrice = _details.resolutionPrice;\\r\\n        _bundle.resolutionTime = _details.resolutionTime;\\r\\n    }\\r\\n\\r\\n    function buildSpecificDynamicMarketBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\r\\n        CryptoMarketFactoryV3.MarketDetails memory _details =\\r\\n            CryptoMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n        _bundle._super = buildDynamicMarketBundle(CryptoMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\r\\n        _bundle.resolutionPrice = _details.resolutionPrice;\\r\\n    }\\r\\n\\r\\n    function fetchInitial(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\r\\n            SpecificStaticMarketBundle[] memory _marketBundles,\\r\\n            uint256 _lowestMarketIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\r\\n\\r\\n        uint256[] memory _marketIds;\\r\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _marketIds.length;\\r\\n        _marketBundles = new SpecificStaticMarketBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _marketBundles[i] = buildSpecificStaticMarketBundle(\\r\\n                _marketFactory,\\r\\n                _ammFactory,\\r\\n                _masterChef,\\r\\n                _marketIds[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function fetchDynamic(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificDynamicMarketBundle[] memory _bundles,\\r\\n            uint256 _lowestMarketIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        uint256[] memory _marketIds;\\r\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _marketIds.length;\\r\\n        _bundles = new SpecificDynamicMarketBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\r\\n        }\\r\\n\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Starts from the end of the markets list because newer markets are more interesting.\\r\\n    // _offset is skipping all markets, not just interesting markets\\r\\n    function listOfInterestingMarkets(\\r\\n        address _marketFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\r\\n        _interestingMarketIds = new uint256[](_total);\\r\\n        uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\r\\n\\r\\n        // No markets so return nothing. (needed to prevent integer underflow below)\\r\\n        if (_max == 0 || _offset >= _max) {\\r\\n            return (new uint256[](0), 0);\\r\\n        }\\r\\n\\r\\n        // Starts at the end, less offset.\\r\\n        // Stops before the 0th market since that market is always fake.\\r\\n        uint256 _collectedMarkets = 0;\\r\\n        _marketId = _max - _offset;\\r\\n\\r\\n        while (true) {\\r\\n            if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\r\\n                _interestingMarketIds[_collectedMarkets] = _marketId;\\r\\n                _collectedMarkets++;\\r\\n            }\\r\\n\\r\\n            if (_collectedMarkets >= _total) break;\\r\\n            if (_marketId == 1) break; // skipping 0th market, which is fake\\r\\n            _marketId--; // starts out oone too high, so this works\\r\\n        }\\r\\n\\r\\n        if (_total > _collectedMarkets) {\\r\\n            assembly {\\r\\n                // shortens array\\r\\n                mstore(_interestingMarketIds, _collectedMarkets)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract CryptoCurrencyFetcher is Fetcher {\\r\\n    constructor() Fetcher(\\\"CryptoCurrency\\\", \\\"TBD\\\") {}\\r\\n\\r\\n    struct SpecificMarketFactoryBundle {\\r\\n        MarketFactoryBundle _super;\\r\\n    }\\r\\n\\r\\n    struct SpecificStaticMarketBundle {\\r\\n        StaticMarketBundle _super;\\r\\n        uint256 coinIndex;\\r\\n        uint256 creationValue;\\r\\n        uint256 resolutionTime;\\r\\n        // Dynamics\\r\\n        uint256 resolutionValue;\\r\\n    }\\r\\n\\r\\n    struct SpecificDynamicMarketBundle {\\r\\n        DynamicMarketBundle _super;\\r\\n        uint256 resolutionValue;\\r\\n    }\\r\\n\\r\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\r\\n        internal\\r\\n        view\\r\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\r\\n    {\\r\\n        _bundle._super = buildMarketFactoryBundle(CryptoCurrencyMarketFactoryV3(_marketFactory));\\r\\n    }\\r\\n\\r\\n    function buildSpecificStaticMarketBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\r\\n        CryptoCurrencyMarketFactoryV3.MarketDetails memory _details =\\r\\n            CryptoCurrencyMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n        _bundle._super = buildStaticMarketBundle(\\r\\n            CryptoCurrencyMarketFactoryV3(_marketFactory),\\r\\n            _ammFactory,\\r\\n            _masterChef,\\r\\n            _marketId\\r\\n        );\\r\\n        _bundle.creationValue = _details.creationValue;\\r\\n        _bundle.coinIndex = _details.coinIndex;\\r\\n        _bundle.resolutionValue = _details.resolutionValue;\\r\\n        _bundle.resolutionTime = _details.resolutionTime;\\r\\n    }\\r\\n\\r\\n    function buildSpecificDynamicMarketBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\r\\n        CryptoCurrencyMarketFactoryV3.MarketDetails memory _details =\\r\\n            CryptoCurrencyMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n        _bundle._super = buildDynamicMarketBundle(CryptoCurrencyMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\r\\n        _bundle.resolutionValue = _details.resolutionValue;\\r\\n    }\\r\\n\\r\\n    function fetchInitial(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\r\\n            SpecificStaticMarketBundle[] memory _marketBundles,\\r\\n            uint256 _lowestMarketIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\r\\n\\r\\n        uint256[] memory _marketIds;\\r\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _marketIds.length;\\r\\n        _marketBundles = new SpecificStaticMarketBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _marketBundles[i] = buildSpecificStaticMarketBundle(\\r\\n                _marketFactory,\\r\\n                _ammFactory,\\r\\n                _masterChef,\\r\\n                _marketIds[i]\\r\\n            );\\r\\n        }\\r\\n\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function fetchDynamic(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificDynamicMarketBundle[] memory _bundles,\\r\\n            uint256 _lowestMarketIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        uint256[] memory _marketIds;\\r\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _marketIds.length;\\r\\n        _bundles = new SpecificDynamicMarketBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\r\\n        }\\r\\n\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // Starts from the end of the markets list because newer markets are more interesting.\\r\\n    // _offset is skipping all markets, not just interesting markets\\r\\n    function listOfInterestingMarkets(\\r\\n        address _marketFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\r\\n        _interestingMarketIds = new uint256[](_total);\\r\\n        uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\r\\n\\r\\n        // No markets so return nothing. (needed to prevent integer underflow below)\\r\\n        if (_max == 0 || _offset >= _max) {\\r\\n            return (new uint256[](0), 0);\\r\\n        }\\r\\n\\r\\n        // Starts at the end, less offset.\\r\\n        // Stops before the 0th market since that market is always fake.\\r\\n        uint256 _collectedMarkets = 0;\\r\\n        _marketId = _max - _offset;\\r\\n\\r\\n        while (true) {\\r\\n            if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\r\\n                _interestingMarketIds[_collectedMarkets] = _marketId;\\r\\n                _collectedMarkets++;\\r\\n            }\\r\\n\\r\\n            if (_collectedMarkets >= _total) break;\\r\\n            if (_marketId == 1) break; // skipping 0th market, which is fake\\r\\n            _marketId--; // starts out oone too high, so this works\\r\\n        }\\r\\n\\r\\n        if (_total > _collectedMarkets) {\\r\\n            assembly {\\r\\n                // shortens array\\r\\n                mstore(_interestingMarketIds, _collectedMarkets)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n// contract TrustedFetcher is Fetcher {\\r\\n//     constructor() Fetcher(\\\"Trusted\\\", \\\"TBD\\\") {}\\r\\n\\r\\n//     struct SpecificMarketFactoryBundle {\\r\\n//         MarketFactoryBundle _super;\\r\\n//     }\\r\\n\\r\\n//     struct SpecificStaticMarketBundle {\\r\\n//         StaticMarketBundle _super;\\r\\n//         // uint256 coinIndex;\\r\\n//         // uint256 creationValue;\\r\\n//         // uint256 resolutionTime;\\r\\n//         // // Dynamics\\r\\n//         // uint256 resolutionValue;\\r\\n//         string description;\\r\\n//     }\\r\\n\\r\\n//     struct SpecificDynamicMarketBundle {\\r\\n//         DynamicMarketBundle _super;\\r\\n//         //uint256 resolutionValue;\\r\\n//         string description;\\r\\n\\r\\n//     }\\r\\n\\r\\n//     function getMarket(    address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         MasterChef _masterChef,\\r\\n//         uint256 _marketId) public view returns(   SpecificStaticMarketBundle memory _bundle\\r\\n// ){\\r\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n//         _bundle._super = buildStaticMarketBundle(\\r\\n//             TrustedMarketFactoryV3(_marketFactory),\\r\\n//             _ammFactory,\\r\\n//             _masterChef,\\r\\n//             _marketId\\r\\n//         );\\r\\n//         _bundle.description = _details.description;\\r\\n//     }\\r\\n\\r\\n//     function buildSpecificMarketFactoryBundle(address _marketFactory)\\r\\n//         internal\\r\\n//         view\\r\\n//         returns (SpecificMarketFactoryBundle memory _bundle)\\r\\n//     {\\r\\n//         _bundle._super = buildMarketFactoryBundle(TrustedMarketFactoryV3(_marketFactory));\\r\\n//     }\\r\\n\\r\\n//     function buildSpecificStaticMarketBundle(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         MasterChef _masterChef,\\r\\n//         uint256 _marketId\\r\\n//     ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\r\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n//         _bundle._super = buildStaticMarketBundle(\\r\\n//             TrustedMarketFactoryV3(_marketFactory),\\r\\n//             _ammFactory,\\r\\n//             _masterChef,\\r\\n//             _marketId\\r\\n//         );\\r\\n//         _bundle.description = _details.description;\\r\\n//         // _bundle.creationValue = _details.creationValue;\\r\\n//         // _bundle.coinIndex = _details.coinIndex;\\r\\n//         // _bundle.resolutionValue = _details.resolutionValue;\\r\\n//         // _bundle.resolutionTime = _details.resolutionTime;\\r\\n//     }\\r\\n\\r\\n//     function buildSpecificDynamicMarketBundle(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         uint256 _marketId\\r\\n//     ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\r\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n//         _bundle._super = buildDynamicMarketBundle(TrustedMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\r\\n//         _bundle.description = _details.description;\\r\\n//     }\\r\\n\\r\\n//     function fetchInitial(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         MasterChef _masterChef,\\r\\n//         uint256 _offset,\\r\\n//         uint256 _total\\r\\n//     )\\r\\n//         public\\r\\n//         view\\r\\n//         returns (\\r\\n//             SpecificMarketFactoryBundle memory _marketFactoryBundle,\\r\\n//             SpecificStaticMarketBundle[] memory _marketBundles,\\r\\n//             uint256 _lowestMarketIndex,\\r\\n//             uint256 _timestamp\\r\\n//         )\\r\\n//     {\\r\\n//         _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\r\\n\\r\\n//         uint256[] memory _marketIds;\\r\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n//         _total = _marketIds.length;\\r\\n//         _marketBundles = new SpecificStaticMarketBundle[](_total);\\r\\n//         for (uint256 i; i < _total; i++) {\\r\\n//             _marketBundles[i] = buildSpecificStaticMarketBundle(\\r\\n//                 _marketFactory,\\r\\n//                 _ammFactory,\\r\\n//                 _masterChef,\\r\\n//                 _marketIds[i]\\r\\n//             );\\r\\n//         }\\r\\n\\r\\n//         _timestamp = block.timestamp;\\r\\n//     }\\r\\n\\r\\n//     function fetchDynamic(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         uint256 _offset,\\r\\n//         uint256 _total\\r\\n//     )\\r\\n//         public\\r\\n//         view\\r\\n//         returns (\\r\\n//             SpecificDynamicMarketBundle[] memory _bundles,\\r\\n//             uint256 _lowestMarketIndex,\\r\\n//             uint256 _timestamp\\r\\n//         )\\r\\n//     {\\r\\n//         uint256[] memory _marketIds;\\r\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n//         _total = _marketIds.length;\\r\\n//         _bundles = new SpecificDynamicMarketBundle[](_total);\\r\\n//         for (uint256 i; i < _total; i++) {\\r\\n//             _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\r\\n//         }\\r\\n\\r\\n//         _timestamp = block.timestamp;\\r\\n//     }\\r\\n\\r\\n//     // Starts from the end of the markets list because newer markets are more interesting.\\r\\n//     // _offset is skipping all markets, not just interesting markets\\r\\n//     function listOfInterestingMarkets(\\r\\n//         address _marketFactory,\\r\\n//         uint256 _offset,\\r\\n//         uint256 _total\\r\\n//     ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\r\\n//         _interestingMarketIds = new uint256[](_total);\\r\\n//         uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\r\\n\\r\\n//         // No markets so return nothing. (needed to prevent integer underflow below)\\r\\n//         if (_max == 0 || _offset >= _max) {\\r\\n//             return (new uint256[](0), 0);\\r\\n//         }\\r\\n\\r\\n//         // Starts at the end, less offset.\\r\\n//         // Stops before the 0th market since that market is always fake.\\r\\n//         uint256 _collectedMarkets = 0;\\r\\n//         _marketId = _max - _offset;\\r\\n\\r\\n//         while (true) {\\r\\n//             if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\r\\n//                 _interestingMarketIds[_collectedMarkets] = _marketId;\\r\\n//                 _collectedMarkets++;\\r\\n//             }\\r\\n\\r\\n//             if (_collectedMarkets >= _total) break;\\r\\n//             if (_marketId == 1) break; // skipping 0th market, which is fake\\r\\n//             _marketId--; // starts out oone too high, so this works\\r\\n//         }\\r\\n\\r\\n//         if (_total > _collectedMarkets) {\\r\\n//             assembly {\\r\\n//                 // shortens array\\r\\n//                 mstore(_interestingMarketIds, _collectedMarkets)\\r\\n//             }\\r\\n//         }\\r\\n//     }\\r\\n// }\\r\\n\",\"keccak256\":\"0x325058954e76cf171d26436f74d6c6dffa6292944cfe1cbd2ed389b4156d971b\",\"license\":\"MIT\"},\"contracts/turbo/MMAMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"../libraries/Sport.sol\\\";\\r\\nimport \\\"../libraries/ResolveByFiat.sol\\\";\\r\\nimport \\\"../libraries/HasHeadToHeadMarket.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\n\\r\\ncontract MMAMarketFactoryV3 is AbstractMarketFactoryV3, SportView, ResolvesByFiat, HasHeadToHeadMarket, Versioned {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 constant HeadToHead = 0;\\r\\n    string constant InvalidName = \\\"No Contest / Draw\\\";\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol,\\r\\n        address _linkNode\\r\\n    )\\r\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\r\\n        Versioned(\\\"v1.2.0\\\")\\r\\n        ManagedByLink(_linkNode)\\r\\n        HasHeadToHeadMarket(HeadToHead, InvalidName)\\r\\n    {}\\r\\n\\r\\n    function createEvent(\\r\\n        uint256 _eventId,\\r\\n        string memory _homeTeamName,\\r\\n        uint256 _homeTeamId,\\r\\n        string memory _awayTeamName,\\r\\n        uint256 _awayTeamId,\\r\\n        uint256 _startTimestamp,\\r\\n        int256[2] memory _moneylines // [home,away]\\r\\n    ) public onlyLinkNode returns (uint256[] memory _marketIds) {\\r\\n        _marketIds = makeMarkets(_moneylines, _homeTeamName, _awayTeamName);\\r\\n        makeSportsEvent(\\r\\n            _eventId,\\r\\n            _marketIds,\\r\\n            build1Line(),\\r\\n            _startTimestamp,\\r\\n            _homeTeamId,\\r\\n            _awayTeamId,\\r\\n            _homeTeamName,\\r\\n            _awayTeamName\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function makeMarkets(\\r\\n        int256[2] memory _moneylines,\\r\\n        string memory _homeTeamName,\\r\\n        string memory _awayTeamName\\r\\n    ) internal returns (uint256[] memory _marketIds) {\\r\\n        _marketIds = new uint256[](1);\\r\\n        _marketIds[HeadToHead] = makeHeadToHeadMarket(_moneylines, _homeTeamName, _awayTeamName);\\r\\n    }\\r\\n\\r\\n    function resolveValidEvent(SportsEvent memory _event, uint256 _whoWon) internal override {\\r\\n        resolveHeadToHeadMarket(_event.markets[HeadToHead], _whoWon);\\r\\n    }\\r\\n\\r\\n    function resolveHeadToHeadMarket(uint256 _marketId, uint256 _whoWon) internal {\\r\\n        uint256 _shareTokenIndex = calcHeadToHeadWinner(_whoWon);\\r\\n        endMarket(_marketId, _shareTokenIndex);\\r\\n    }\\r\\n\\r\\n    function calcHeadToHeadWinner(uint256 _whoWon) internal pure returns (uint256) {\\r\\n        if (WhoWonHome == _whoWon) {\\r\\n            return HeadToHeadHome;\\r\\n        } else if (WhoWonAway == _whoWon) {\\r\\n            return HeadToHeadAway;\\r\\n        } else {\\r\\n            return NoContest; // shouldn't happen here\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcf26d90a2149acc6280766a4f140835d4d09e7fa7a4bb18294f3cc86b6c36d70\",\"license\":\"MIT\"},\"contracts/turbo/NBAMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"../libraries/Sport.sol\\\";\\r\\nimport \\\"../libraries/HasSpreadMarket.sol\\\";\\r\\nimport \\\"../libraries/ResolveByScore.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\n\\r\\ncontract NBAMarketFactoryV3 is AbstractMarketFactoryV3, SportView, HasSpreadMarket, ResolvesByScore, Versioned {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    uint256 constant Spread = 0;\\r\\n    string constant InvalidName = \\\"No Contest\\\";\\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol,\\r\\n        address _linkNode\\r\\n    )\\r\\n        AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol)\\r\\n        Versioned(\\\"1.5.0\\\")\\r\\n        ManagedByLink(_linkNode)\\r\\n        HasSpreadMarket(Spread, InvalidName)\\r\\n    {}\\r\\n\\r\\n    function createEvent(\\r\\n        uint256 _eventId,\\r\\n        string memory _homeTeamName,\\r\\n        uint256 _homeTeamId,\\r\\n        string memory _awayTeamName,\\r\\n        uint256 _awayTeamId,\\r\\n        uint256 _startTimestamp,\\r\\n        int256 _homeSpread\\r\\n    ) public onlyLinkNode returns (uint256[] memory _marketIds) {\\r\\n        _marketIds = makeMarkets(_homeTeamName, _awayTeamName);\\r\\n        makeSportsEvent(\\r\\n            _eventId,\\r\\n            _marketIds,\\r\\n            makeLine(_homeSpread),\\r\\n            _startTimestamp,\\r\\n            _homeTeamId,\\r\\n            _awayTeamId,\\r\\n            _homeTeamName,\\r\\n            _awayTeamName\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function makeMarkets(string memory _homeTeamName, string memory _awayTeamName)\\r\\n        internal\\r\\n        returns (uint256[] memory _marketIds)\\r\\n    {\\r\\n        _marketIds = new uint256[](1);\\r\\n        _marketIds[Spread] = makeSpreadMarket(_homeTeamName, _awayTeamName);\\r\\n    }\\r\\n\\r\\n    function makeLine(int256 _homeSpread) internal pure returns (int256[] memory _line) {\\r\\n        _line = build1Line();\\r\\n        _line[0] = addHalfPoint(_homeSpread);\\r\\n    }\\r\\n\\r\\n    function resolveValidEvent(\\r\\n        SportsEvent memory _event,\\r\\n        uint256 _homeScore,\\r\\n        uint256 _awayScore\\r\\n    ) internal override {\\r\\n        resolveSpreadMarket(_event.markets[Spread], _event.lines[Spread], _homeScore, _awayScore);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x26c816487597cd6224bb5b022ed64267fac8a6d05d17608464215f2a3480f3c1\",\"license\":\"MIT\"},\"contracts/turbo/OwnedShareToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../libraries/Ownable.sol\\\";\\r\\n\\r\\ncontract OwnedERC20 is ERC20, Ownable {\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _owner\\r\\n    ) ERC20(name_, symbol_) {\\r\\n        owner = _owner;\\r\\n    }\\r\\n\\r\\n    function trustedTransfer(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external onlyOwner {\\r\\n        _transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedMint(address _target, uint256 _amount) external virtual onlyOwner {\\r\\n        _mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurn(address _target, uint256 _amount) external virtual onlyOwner {\\r\\n        _burn(_target, _amount);\\r\\n    }\\r\\n\\r\\n    function trustedBurnAll(address _target) external onlyOwner returns (uint256) {\\r\\n        uint256 _balance = balanceOf(_target);\\r\\n        _burn(_target, _balance);\\r\\n        return _balance;\\r\\n    }\\r\\n\\r\\n    function onTransferOwnership(address, address) internal override {}\\r\\n}\\r\\n\",\"keccak256\":\"0xe53cbce33918d8e12803f2b496c6c78c84933b43c7600bbd836618e9aa37b7b5\",\"license\":\"MIT\"},\"contracts/turbo/TrustedMarketFactoryV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"../libraries/CalculateLinesToBPoolOdds.sol\\\";\\r\\nimport \\\"../libraries/Versioned.sol\\\";\\r\\n\\r\\ncontract TrustedMarketFactoryV3 is AbstractMarketFactoryV3, CalculateLinesToBPoolOdds, Versioned {\\r\\n\\r\\n    struct MarketDetails {\\r\\n        string description;\\r\\n    }\\r\\n    MarketDetails[] internal marketDetails;\\r\\n    // mapping(uint256=> mapping(uint256=>uint256)) TradeDetails; //marketid -> (outcome->amount)\\r\\n\\r\\n    modifier onlyOwnerManager() {\\r\\n        require(msg.sender == owner || managers[msg.sender] , \\\"Only Validators can call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    mapping(address=>bool) managers; \\r\\n\\r\\n    constructor(\\r\\n        address _owner,\\r\\n        IERC20Full _collateral,\\r\\n        uint256 _shareFactor,\\r\\n        FeePot _feePot,\\r\\n        uint256[3] memory _fees,\\r\\n        address _protocol\\r\\n    ) AbstractMarketFactoryV3(_owner, _collateral, _shareFactor, _feePot, _fees, _protocol) Versioned(\\\"v1.1.0\\\") {}\\r\\n\\r\\n    //TODO add managers \\r\\n    function createMarket(\\r\\n        address _creator,\\r\\n        string calldata _description,\\r\\n        string[] calldata _names,\\r\\n        uint256[] calldata _odds\\r\\n    ) public  returns (uint256) {\\r\\n        marketDetails.push(MarketDetails(_description));\\r\\n        return startMarket(_creator, _names, _odds, true);\\r\\n    }\\r\\n\\r\\n    //TODO add managers \\r\\n    function trustedResolveMarket(uint256 _id, uint256 _winningOutcome) public {\\r\\n        endMarket(_id, _winningOutcome);\\r\\n    }\\r\\n\\r\\n    function getMarketDetails(uint256 _id) public view returns (MarketDetails memory) {\\r\\n        return marketDetails[_id];\\r\\n    }\\r\\n\\r\\n    function getRewardEndTime(uint256 _marketId) public view override returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n    \\r\\n\\r\\n\\r\\n    //ZCB markets\\r\\n      function createZCBMarket(\\r\\n        address _creator,\\r\\n        string calldata _description,\\r\\n        uint256[] calldata _odds, \\r\\n        OwnedERC20 zcb\\r\\n    ) public  returns (uint256) {\\r\\n        marketDetails.push(MarketDetails(_description));\\r\\n        return startZCBMarket(_creator, _odds, true, zcb);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa72118f0ca42eb129038111d11275d11f352a96e0ad851bae6c78a305cb16c85\",\"license\":\"MIT\"},\"contracts/turbo/TurboShareTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"./OwnedShareToken.sol\\\";\\r\\n\\r\\n\\r\\n\\r\\nabstract contract ZCBFactory {\\r\\n    function createZCB(string memory _name, address _owner) internal returns(OwnedERC20[] memory){\\r\\n        uint256 _numOutcomes = 1; \\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_name, _name, _owner);\\r\\n        }\\r\\n        return _tokens; \\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract TurboShareTokenFactory {\\r\\n    function createShareTokens(string[] memory _names, address _owner) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _names[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\\r\\nabstract contract TurboShareTokenFactoryV1 {\\r\\n    function createShareTokens(\\r\\n        string[] memory _names,\\r\\n        string[] memory _symbols,\\r\\n        address _owner\\r\\n    ) internal returns (OwnedERC20[] memory) {\\r\\n        uint256 _numOutcomes = _names.length;\\r\\n        OwnedERC20[] memory _tokens = new OwnedERC20[](_numOutcomes);\\r\\n\\r\\n        for (uint256 _i = 0; _i < _numOutcomes; _i++) {\\r\\n            _tokens[_i] = new OwnedERC20(_names[_i], _symbols[_i], _owner);\\r\\n        }\\r\\n        return _tokens;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x907fb0a55d5a5ed12e9163f4dea48d24181b055c9153088f65c6cdb8a088cd02\",\"license\":\"MIT\"},\"contracts/turbo/random.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n\\r\\nimport \\\"../libraries/IERC20Full.sol\\\";\\r\\nimport \\\"../balancer/BPool.sol\\\";\\r\\nimport \\\"./AbstractMarketFactoryV3.sol\\\";\\r\\nimport \\\"./FeePot.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"./MMAMarketFactoryV3.sol\\\";\\r\\nimport \\\"./AMMFactory.sol\\\";\\r\\nimport \\\"./CryptoMarketFactoryV3.sol\\\";\\r\\nimport \\\"./NBAMarketFactoryV3.sol\\\";\\r\\nimport \\\"../rewards/MasterChef.sol\\\";\\r\\nimport \\\"./CryptoCurrencyMarketFactoryV3.sol\\\";\\r\\nimport \\\"./TrustedMarketFactoryV3.sol\\\";\\r\\nimport \\\"./Fetcher.sol\\\";\\r\\n\\r\\ncontract TrustedFetcher is Fetcher {\\r\\n    constructor() Fetcher(\\\"Trusted\\\", \\\"TBD\\\") {}\\r\\n\\r\\n    struct SpecificMarketFactoryBundle {\\r\\n        MarketFactoryBundle _super;\\r\\n    }\\r\\n\\r\\n    struct SpecificStaticMarketBundle {\\r\\n        StaticMarketBundle _super;\\r\\n        // uint256 coinIndex;\\r\\n        // uint256 creationValue;\\r\\n        // uint256 resolutionTime;\\r\\n        // // Dynamics\\r\\n        // uint256 resolutionValue;\\r\\n        string description;\\r\\n    }\\r\\n\\r\\n    struct SpecificDynamicMarketBundle {\\r\\n        DynamicMarketBundle _super;\\r\\n        //uint256 resolutionValue;\\r\\n        string description;\\r\\n\\r\\n    }\\r\\n\\r\\n    function sayHi() public view returns(uint256){\\r\\n        return 0; \\r\\n    }\\r\\n\\r\\n    function getMarket( address _marketFactory,\\r\\n    AMMFactory _ammFactory,\\r\\n    MasterChef _masterChef,\\r\\n    uint256 _marketId) public view returns(   SpecificStaticMarketBundle memory _bundle\\r\\n){\\r\\n    TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n        TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n    _bundle._super = buildStaticMarketBundle(\\r\\n        TrustedMarketFactoryV3(_marketFactory),\\r\\n        _ammFactory,\\r\\n        _masterChef,\\r\\n        _marketId\\r\\n    );\\r\\n    _bundle.description = _details.description;\\r\\n    }\\r\\n\\r\\n\\r\\n  function fetchInitial(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificMarketFactoryBundle memory _marketFactoryBundle,\\r\\n            SpecificStaticMarketBundle[] memory _marketBundles,\\r\\n            uint256 _lowestMarketIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\r\\n\\r\\n        uint256[] memory _marketIds;\\r\\n\\r\\n       (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n        // (_marketIds, _lowestMarketIndex) = interestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _marketIds.length;\\r\\n        _marketBundles = new SpecificStaticMarketBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _marketBundles[i] = buildSpecificStaticMarketBundle(\\r\\n                _marketFactory,\\r\\n                _ammFactory,\\r\\n                _masterChef,\\r\\n                 _marketIds[i]\\r\\n                \\r\\n            );\\r\\n        }\\r\\n\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n\\r\\n\\r\\n    function buildSpecificMarketFactoryBundle(address _marketFactory)\\r\\n        internal\\r\\n        view\\r\\n        returns (SpecificMarketFactoryBundle memory _bundle)\\r\\n    {\\r\\n        _bundle._super = buildMarketFactoryBundle(TrustedMarketFactoryV3(_marketFactory));\\r\\n    }\\r\\n\\r\\n\\r\\n function buildSpecificStaticMarketBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        MasterChef _masterChef,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\r\\n        TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n            TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n        _bundle._super = buildStaticMarketBundle(\\r\\n            TrustedMarketFactoryV3(_marketFactory),\\r\\n            _ammFactory,\\r\\n            _masterChef,\\r\\n            _marketId+1\\r\\n        );\\r\\n        _bundle.description = _details.description;\\r\\n        // _bundle.creationValue = _details.creationValue;\\r\\n        // _bundle.coinIndex = _details.coinIndex;\\r\\n        // _bundle.resolutionValue = _details.resolutionValue;\\r\\n        // _bundle.resolutionTime = _details.resolutionTime;\\r\\n    }\\r\\n\\r\\nfunction listOfInterestingMarkets(\\r\\n        address _marketFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\r\\n        _interestingMarketIds = new uint256[](_total);\\r\\n        uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\r\\n\\r\\n        // No markets so return nothing. (needed to prevent integer underflow below)\\r\\n        if (_max == 0 || _offset >= _max) {\\r\\n            return (new uint256[](0), 0);\\r\\n        }\\r\\n\\r\\n        // Starts at the end, less offset.\\r\\n        // Stops before the 0th market since that market is always fake.\\r\\n        uint256 _collectedMarkets = 0;\\r\\n        _marketId = _max - _offset-1;\\r\\n\\r\\n        while (true) {\\r\\n            if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\r\\n                _interestingMarketIds[_collectedMarkets] = _marketId;\\r\\n                _collectedMarkets++;\\r\\n            }\\r\\n\\r\\n            if (_collectedMarkets >= _total) break;\\r\\n            if (_marketId == 0) break; // skipping 0th market, which is fake\\r\\n            _marketId--; // starts out oone too high, so this works\\r\\n        }\\r\\n\\r\\n        if (_total > _collectedMarkets) {\\r\\n            assembly {\\r\\n                // shortens array\\r\\n                mstore(_interestingMarketIds, _collectedMarkets)\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function fetchDynamic(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _offset,\\r\\n        uint256 _total\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            SpecificDynamicMarketBundle[] memory _bundles,\\r\\n            uint256 _lowestMarketIndex,\\r\\n            uint256 _timestamp\\r\\n        )\\r\\n    {\\r\\n        uint256[] memory _marketIds;\\r\\n        (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n        _total = _marketIds.length;\\r\\n        _bundles = new SpecificDynamicMarketBundle[](_total);\\r\\n        for (uint256 i; i < _total; i++) {\\r\\n            _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\r\\n        }\\r\\n\\r\\n        _timestamp = block.timestamp;\\r\\n    }\\r\\n \\r\\n\\r\\n\\r\\n    function buildSpecificDynamicMarketBundle(\\r\\n        address _marketFactory,\\r\\n        AMMFactory _ammFactory,\\r\\n        uint256 _marketId\\r\\n    ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\r\\n        TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n            TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n        _bundle._super = buildDynamicMarketBundle(TrustedMarketFactoryV3(_marketFactory), _ammFactory, _marketId+1);\\r\\n        _bundle.description = _details.description;\\r\\n    }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// contract TrustedFetcher is Fetcher {\\r\\n//     constructor() Fetcher(\\\"Trusted\\\", \\\"TBD\\\") {}\\r\\n\\r\\n//     struct SpecificMarketFactoryBundle {\\r\\n//         MarketFactoryBundle _super;\\r\\n//     }\\r\\n\\r\\n//     struct SpecificStaticMarketBundle {\\r\\n//         StaticMarketBundle _super;\\r\\n//         // uint256 coinIndex;\\r\\n//         // uint256 creationValue;\\r\\n//         // uint256 resolutionTime;\\r\\n//         // // Dynamics\\r\\n//         // uint256 resolutionValue;\\r\\n//         string description;\\r\\n//     }\\r\\n\\r\\n//     struct SpecificDynamicMarketBundle {\\r\\n//         DynamicMarketBundle _super;\\r\\n//         //uint256 resolutionValue;\\r\\n//         string description;\\r\\n\\r\\n//     }\\r\\n\\r\\n//     function getMarket(    address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         MasterChef _masterChef,\\r\\n//         uint256 _marketId) public view returns(   SpecificStaticMarketBundle memory _bundle\\r\\n// ){\\r\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n//         _bundle._super = buildStaticMarketBundle(\\r\\n//             TrustedMarketFactoryV3(_marketFactory),\\r\\n//             _ammFactory,\\r\\n//             _masterChef,\\r\\n//             _marketId\\r\\n//         );\\r\\n//         _bundle.description = _details.description;\\r\\n//     }\\r\\n\\r\\n//     function buildSpecificMarketFactoryBundle(address _marketFactory)\\r\\n//         internal\\r\\n//         view\\r\\n//         returns (SpecificMarketFactoryBundle memory _bundle)\\r\\n//     {\\r\\n//         _bundle._super = buildMarketFactoryBundle(TrustedMarketFactoryV3(_marketFactory));\\r\\n//     }\\r\\n\\r\\n//     function buildSpecificStaticMarketBundle(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         MasterChef _masterChef,\\r\\n//         uint256 _marketId\\r\\n//     ) internal view returns (SpecificStaticMarketBundle memory _bundle) {\\r\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n//         _bundle._super = buildStaticMarketBundle(\\r\\n//             TrustedMarketFactoryV3(_marketFactory),\\r\\n//             _ammFactory,\\r\\n//             _masterChef,\\r\\n//             _marketId\\r\\n//         );\\r\\n//         _bundle.description = _details.description;\\r\\n//         // _bundle.creationValue = _details.creationValue;\\r\\n//         // _bundle.coinIndex = _details.coinIndex;\\r\\n//         // _bundle.resolutionValue = _details.resolutionValue;\\r\\n//         // _bundle.resolutionTime = _details.resolutionTime;\\r\\n//     }\\r\\n\\r\\n//     function buildSpecificDynamicMarketBundle(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         uint256 _marketId\\r\\n//     ) internal view returns (SpecificDynamicMarketBundle memory _bundle) {\\r\\n//         TrustedMarketFactoryV3.MarketDetails memory _details =\\r\\n//             TrustedMarketFactoryV3(_marketFactory).getMarketDetails(_marketId);\\r\\n//         _bundle._super = buildDynamicMarketBundle(TrustedMarketFactoryV3(_marketFactory), _ammFactory, _marketId);\\r\\n//         _bundle.description = _details.description;\\r\\n//     }\\r\\n\\r\\n//     function fetchInitial(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         MasterChef _masterChef,\\r\\n//         uint256 _offset,\\r\\n//         uint256 _total\\r\\n//     )\\r\\n//         public\\r\\n//         view\\r\\n//         returns (\\r\\n//             SpecificMarketFactoryBundle memory _marketFactoryBundle,\\r\\n//             SpecificStaticMarketBundle[] memory _marketBundles,\\r\\n//             uint256 _lowestMarketIndex,\\r\\n//             uint256 _timestamp\\r\\n//         )\\r\\n//     {\\r\\n//         _marketFactoryBundle = buildSpecificMarketFactoryBundle(_marketFactory);\\r\\n\\r\\n//         uint256[] memory _marketIds;\\r\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n//         _total = _marketIds.length;\\r\\n//         _marketBundles = new SpecificStaticMarketBundle[](_total);\\r\\n//         for (uint256 i; i < _total; i++) {\\r\\n//             _marketBundles[i] = buildSpecificStaticMarketBundle(\\r\\n//                 _marketFactory,\\r\\n//                 _ammFactory,\\r\\n//                 _masterChef,\\r\\n//                 _marketIds[i]\\r\\n//             );\\r\\n//         }\\r\\n\\r\\n//         _timestamp = block.timestamp;\\r\\n//     }\\r\\n\\r\\n//     function fetchDynamic(\\r\\n//         address _marketFactory,\\r\\n//         AMMFactory _ammFactory,\\r\\n//         uint256 _offset,\\r\\n//         uint256 _total\\r\\n//     )\\r\\n//         public\\r\\n//         view\\r\\n//         returns (\\r\\n//             SpecificDynamicMarketBundle[] memory _bundles,\\r\\n//             uint256 _lowestMarketIndex,\\r\\n//             uint256 _timestamp\\r\\n//         )\\r\\n//     {\\r\\n//         uint256[] memory _marketIds;\\r\\n//         (_marketIds, _lowestMarketIndex) = listOfInterestingMarkets(_marketFactory, _offset, _total);\\r\\n\\r\\n//         _total = _marketIds.length;\\r\\n//         _bundles = new SpecificDynamicMarketBundle[](_total);\\r\\n//         for (uint256 i; i < _total; i++) {\\r\\n//             _bundles[i] = buildSpecificDynamicMarketBundle(_marketFactory, _ammFactory, _marketIds[i]);\\r\\n//         }\\r\\n\\r\\n//         _timestamp = block.timestamp;\\r\\n//     }\\r\\n\\r\\n//     // Starts from the end of the markets list because newer markets are more interesting.\\r\\n//     // _offset is skipping all markets, not just interesting markets\\r\\n//     function listOfInterestingMarkets(\\r\\n//         address _marketFactory,\\r\\n//         uint256 _offset,\\r\\n//         uint256 _total\\r\\n//     ) internal view returns (uint256[] memory _interestingMarketIds, uint256 _marketId) {\\r\\n//         _interestingMarketIds = new uint256[](_total);\\r\\n//         uint256 _max = AbstractMarketFactoryV3(_marketFactory).marketCount() - 1;\\r\\n\\r\\n//         // No markets so return nothing. (needed to prevent integer underflow below)\\r\\n//         if (_max == 0 || _offset >= _max) {\\r\\n//             return (new uint256[](0), 0);\\r\\n//         }\\r\\n\\r\\n//         // Starts at the end, less offset.\\r\\n//         // Stops before the 0th market since that market is always fake.\\r\\n//         uint256 _collectedMarkets = 0;\\r\\n//         _marketId = _max - _offset;\\r\\n\\r\\n//         while (true) {\\r\\n//             if (openOrHasWinningShares(AbstractMarketFactoryV3(_marketFactory), _marketId)) {\\r\\n//                 _interestingMarketIds[_collectedMarkets] = _marketId;\\r\\n//                 _collectedMarkets++;\\r\\n//             }\\r\\n\\r\\n//             if (_collectedMarkets >= _total) break;\\r\\n//             if (_marketId == 1) break; // skipping 0th market, which is fake\\r\\n//             _marketId--; // starts out oone too high, so this works\\r\\n//         }\\r\\n\\r\\n//         if (_total > _collectedMarkets) {\\r\\n//             assembly {\\r\\n//                 // shortens array\\r\\n//                 mstore(_interestingMarketIds, _collectedMarkets)\\r\\n//             }\\r\\n//         }\\r\\n//     }\",\"keccak256\":\"0xd19c1872296a11906e6d75a26a120fc8ac2ca2bc708e1835b11f1c1e920e1804\",\"license\":\"MIT\"},\"contracts/utils/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function description() external view returns (string memory);\\r\\n\\r\\n  function version() external view returns (uint256);\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(uint80 _roundId)\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n}\",\"keccak256\":\"0x8db60f81b61f79fab0366fa7ef9d47ac67462276d0cbe7b36a2fdf74654e9c51\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            // Start off with z at 1.\\n            z := 1\\n\\n            // Used below to help find a nearby power of 2.\\n            let y := x\\n\\n            // Find the lowest power of 2 that is at least sqrt(x).\\n            if iszero(lt(y, 0x100000000000000000000000000000000)) {\\n                y := shr(128, y) // Like dividing by 2 ** 128.\\n                z := shl(64, z) // Like multiplying by 2 ** 64.\\n            }\\n            if iszero(lt(y, 0x10000000000000000)) {\\n                y := shr(64, y) // Like dividing by 2 ** 64.\\n                z := shl(32, z) // Like multiplying by 2 ** 32.\\n            }\\n            if iszero(lt(y, 0x100000000)) {\\n                y := shr(32, y) // Like dividing by 2 ** 32.\\n                z := shl(16, z) // Like multiplying by 2 ** 16.\\n            }\\n            if iszero(lt(y, 0x10000)) {\\n                y := shr(16, y) // Like dividing by 2 ** 16.\\n                z := shl(8, z) // Like multiplying by 2 ** 8.\\n            }\\n            if iszero(lt(y, 0x100)) {\\n                y := shr(8, y) // Like dividing by 2 ** 8.\\n                z := shl(4, z) // Like multiplying by 2 ** 4.\\n            }\\n            if iszero(lt(y, 0x10)) {\\n                y := shr(4, y) // Like dividing by 2 ** 4.\\n                z := shl(2, z) // Like multiplying by 2 ** 2.\\n            }\\n            if iszero(lt(y, 0x8)) {\\n                // Equivalent to 2 ** z.\\n                z := shl(1, z)\\n            }\\n\\n            // Shifting right by 1 is like dividing by 2.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // Compute a rounded down version of z.\\n            let zRoundDown := div(x, z)\\n\\n            // If zRoundDown is smaller, use it.\\n            if lt(zRoundDown, z) {\\n                z := zRoundDown\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9faabac0803e077fb8d8950f5e2fec1984d3e6cd6ad5fc144609b5c9de83d169\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040805180820182526007815266151c9d5cdd195960ca1b60208083019182528351808501909452600384526215109160ea1b9084015281519192916200005c916000916200007b565b508051620000729060019060208401906200007b565b5050506200015e565b828054620000899062000121565b90600052602060002090601f016020900481019282620000ad5760008555620000f8565b82601f10620000c857805160ff1916838001178555620000f8565b82800160010185558215620000f8579182015b82811115620000f8578251825591602001919060010190620000db565b50620001069291506200010a565b5090565b5b808211156200010657600081556001016200010b565b600181811c908216806200013657607f821691505b602082108114156200015857634e487b7160e01b600052602260045260246000fd5b50919050565b611f4a806200016e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c49c36c1461006757806322254b881461007b5780632dd489091461009e57806354fd4d50146100b357806356d27491146100bb57806383116aca146100dd575b600080fd5b604051600081526020015b60405180910390f35b61008e610089366004611616565b6100fd565b6040516100729493929190611cb3565b6100a661021a565b6040516100729190611ca0565b6100a66102a8565b6100ce6100c9366004611670565b6102b5565b60405161007293929190611bdb565b6100f06100eb3660046115c6565b6103bc565b6040516100729190611d72565b6101056112bc565b606060008061011389610461565b935060606101228a8888610479565b81519750935090508567ffffffffffffffff81111561015157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561018a57816020015b6101776112d4565b81526020019060019003908161016f5790505b50935060005b86811015610209576101cb8b8b8b8585815181106101be57634e487b7160e01b600052603260045260246000fd5b602002602001015161061f565b8582815181106101eb57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061020190611eb5565b915050610190565b504291505095509550955095915050565b6000805461022790611e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461025390611e7a565b80156102a05780601f10610275576101008083540402835291602001916102a0565b820191906000526020600020905b81548152906001019060200180831161028357829003601f168201915b505050505081565b6001805461022790611e7a565b606060008060606102c7888787610479565b81519650935090508467ffffffffffffffff8111156102f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561032f57816020015b61031c6112f4565b8152602001906001900390816103145790505b50935060005b858110156103ad5761036f898984848151811061036257634e487b7160e01b600052603260045260246000fd5b60200260200101516106be565b85828151811061038f57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806103a590611eb5565b915050610335565b50429150509450945094915050565b6103c46112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104439190810190611737565b90506104518686868661076b565b8252516020820152949350505050565b6104696112bc565b610472826108e1565b8152919050565b606060008267ffffffffffffffff8111156104a457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104cd578160200160208202803683370190505b50915060006001866001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061192e565b61054f9190611e1c565b905080158061055e5750808510155b1561057c575050604080516000808252602082019092529150610617565b6000600161058a8784611e1c565b6105949190611e1c565b92505b6105a18784610c5b565b156105e057828482815181106105c757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806105dc81611eb5565b9150505b8481106105ec57610608565b826105f657610608565b8261060081611e63565b935050610597565b80851115610614578084525b50505b935093915050565b6106276112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a69190810190611737565b90506104518686866106b9876001611e04565b61076b565b6106c66112f4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0386169063b06c1ba39060240160006040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107459190810190611737565b905061075c8585610757866001611e04565b610d7d565b82525160208201529392505050565b610773611307565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0387169063eb44fdd39060240160006040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f291908101906117b6565b6001600160a01b0387168352602083018490529050610812868685610e3d565b604083810191909152516327def0cb60e21b81526001600160a01b038681166004830152878116602483015260448201859052851690639f7bc32c9060640160a06040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a191906118bb565b60608301526020810151608083015260e08082015160a084015260408201516001600160a01b031660c08401526101209091015190820152949350505050565b6108e961138b565b816001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a919061192e565b816000018181525050816001600160a01b0316634b2d9ffc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061192e565b816020018181525050816001600160a01b0316637d1d7fb86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e919061192e565b816040018181525050816001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac8919061192e565b816060018181525050816001600160a01b0316634c9f66c76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906116e8565b81608001906001600160a01b031690816001600160a01b031681525050610bd8826001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906116e8565b61118a565b8160a00181905250816001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1957600080fd5b505afa158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c51919061192e565b60c0820152919050565b60405163eb44fdd360e01b81526004810182905260009081906001600160a01b0385169063eb44fdd39060240160006040518083038186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cdc91908101906117b6565b60408101519091506001600160a01b0316610cfb576001915050610d77565b600081604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d72919061192e565b119150505b92915050565b610d856113fc565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0386169063eb44fdd39060240160006040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e0491908101906117b6565b6001600160a01b0380871684526020840185905260408201511660608401529050610e30858585610e3d565b6040830152509392505050565b610e45611428565b604051632dadcf5160e11b81526001600160a01b0385811660048301526024820184905260009190851690635b5b9ea29060440160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116e8565b90506001600160a01b038116610edf5750611183565b6001600160a01b038116808352604080516318160ddd60e01b815290516318160ddd91600480820192602092909190829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a919061192e565b60a083015260405163fa0de35960e01b81526001600160a01b0386811660048301526024820185905285169063fa0de3599060440160206040518083038186803b158015610fa757600080fd5b505afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf919061192e565b608083015260405163d2364bf360e01b81526001600160a01b0386811660048301526024820185905285169063d2364bf39060440160006040518083038186803b15801561102c57600080fd5b505afa158015611040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106891908101906116b5565b6040838101919091525163c7b4b6dd60e01b81526001600160a01b0386811660048301526024820185905285169063c7b4b6dd9060440160006040518083038186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110f391908101906116b5565b602083015260405163d055da7160e01b81526001600160a01b0386811660048301526024820185905285169063d055da719060440160006040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261117c91908101906116b5565b6060830152505b9392505050565b6111b7604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038216808252604080516395d89b4160e01b815290516395d89b4191600480820192600092909190829003018186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112369190810190611704565b8160200181905250816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561127757600080fd5b505afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611946565b60ff166040820152919050565b60405180602001604052806112cf61138b565b905290565b60405180604001604052806112e7611307565b8152602001606081525090565b60405180604001604052806112e76113fc565b604080516101008101825260008082526020820152908101611327611428565b81526020016113606040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001606081526020016000815260200160006001600160a01b03168152602001606081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016113ef604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001600081525090565b604080516080810182526000808252602082015290810161141b611428565b8152600060209091015290565b6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b805161147281611efc565b919050565b600082601f830112611487578081fd5b8151602061149c61149783611de0565b611daf565b80838252828201915082860187848660051b89010111156114bb578586fd5b855b858110156114e25781516114d081611efc565b845292840192908401906001016114bd565b5090979650505050505050565b600082601f8301126114ff578081fd5b8151602061150f61149783611de0565b80838252828201915082860187848660051b890101111561152e578586fd5b855b858110156114e257815184529284019290840190600101611530565b8051801515811461147257600080fd5b600082601f83011261156c578081fd5b815167ffffffffffffffff81111561158657611586611ee6565b611599601f8201601f1916602001611daf565b8181528460208386010111156115ad578283fd5b6115be826020830160208701611e33565b949350505050565b600080600080608085870312156115db578384fd5b84356115e681611efc565b935060208501356115f681611efc565b9250604085013561160681611efc565b9396929550929360600135925050565b600080600080600060a0868803121561162d578081fd5b853561163881611efc565b9450602086013561164881611efc565b9350604086013561165881611efc565b94979396509394606081013594506080013592915050565b60008060008060808587031215611685578182fd5b843561169081611efc565b935060208501356116a081611efc565b93969395505050506040820135916060013590565b6000602082840312156116c6578081fd5b815167ffffffffffffffff8111156116dc578182fd5b6115be848285016114ef565b6000602082840312156116f9578081fd5b815161118381611efc565b600060208284031215611715578081fd5b815167ffffffffffffffff81111561172b578182fd5b6115be8482850161155c565b600060208284031215611748578081fd5b815167ffffffffffffffff8082111561175f578283fd5b9083019060208286031215611772578283fd5b60405160208101818110838211171561178d5761178d611ee6565b60405282518281111561179e578485fd5b6117aa8782860161155c565b82525095945050505050565b6000602082840312156117c7578081fd5b815167ffffffffffffffff808211156117de578283fd5b9083019061016082860312156117f2578283fd5b6117fa611d85565b61180383611467565b8152602083015182811115611816578485fd5b61182287828601611477565b60208301525061183460408401611467565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518381111561188a578586fd5b611896888287016114ef565b82840152505061014091506118ac82840161154c565b91810191909152949350505050565b600060a082840312156118cc578081fd5b60405160a0810181811067ffffffffffffffff821117156118ef576118ef611ee6565b8060405250825181526020830151602082015260408301516040820152606083015160608201526119226080840161154c565b60808201529392505050565b60006020828403121561193f578081fd5b5051919050565b600060208284031215611957578081fd5b815160ff81168114611183578182fd5b6000815180845260208085019450808401835b8381101561199f5781516001600160a01b03168752958201959082019060010161197a565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b858110156119f15782840389526119df848351611ad4565b988501989350908401906001016119c7565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561199f57815187529582019590820190600101611a11565b60008151808452611a45816020860160208601611e33565b601f01601f19169290920160200192915050565b60018060a01b0381511682526000602082015160c06020850152611a8060c08501826119fe565b905060408301518482036040860152611a9982826119fe565b91505060608301518482036060860152611ab382826119fe565b9150506080830151608085015260a083015160a08501528091505092915050565b6000815160408452611af26040850182516001600160a01b03169052565b602081015160608501526040810151610180806080870152611b186101c0870183611a59565b606084810151805160a08a0152602081015160c08a0152604081015160e08a01529081015161010089015260808101511515610120890152909250506080830151603f198088850301610140890152611b718483611967565b935060a085015161016089015260c08501519150611b99838901836001600160a01b03169052565b60e0850151945080888503016101a0890152505050611bb881836119fe565b91505060208301518482036020860152611bd28282611a2d565b95945050505050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b01875b84811015611c8557898403607f1901865281518051604080875281516001600160a01b0390811682890152868301518c890152908201518a88018b90529190611c4f60c0890184611a59565b918c01511660a08801529185015186830386880152919050611c718183611a2d565b978501979550505090820190600101611c03565b50508701989098525050505060409091019190915250919050565b6020815260006111836020830184611a2d565b608081526000855160206080840152805160a0840152602081015160c0840152604081015160e08401526060810151610100840152608081015160018060a01b0380821661012086015260a0830151915060e06101408601528082511661018086015250602081015160606101a0860152611d326101e0860182611a2d565b905060408201516101c086015260c08301516101608601528481036020860152611d5c81896119aa565b6040860197909752505050506060015292915050565b6020815260006111836020830184611ad4565b604051610160810167ffffffffffffffff81118282101715611da957611da9611ee6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd857611dd8611ee6565b604052919050565b600067ffffffffffffffff821115611dfa57611dfa611ee6565b5060051b60200190565b60008219821115611e1757611e17611ed0565b500190565b600082821015611e2e57611e2e611ed0565b500390565b60005b83811015611e4e578181015183820152602001611e36565b83811115611e5d576000848401525b50505050565b600081611e7257611e72611ed0565b506000190190565b600181811c90821680611e8e57607f821691505b60208210811415611eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611ec957611ec9611ed0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f1157600080fd5b5056fea2646970667358221220fc329e729a3eb3fbcd44e71a2f65b7a84da1f869210abb6ad9c2bcc22280809864736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630c49c36c1461006757806322254b881461007b5780632dd489091461009e57806354fd4d50146100b357806356d27491146100bb57806383116aca146100dd575b600080fd5b604051600081526020015b60405180910390f35b61008e610089366004611616565b6100fd565b6040516100729493929190611cb3565b6100a661021a565b6040516100729190611ca0565b6100a66102a8565b6100ce6100c9366004611670565b6102b5565b60405161007293929190611bdb565b6100f06100eb3660046115c6565b6103bc565b6040516100729190611d72565b6101056112bc565b606060008061011389610461565b935060606101228a8888610479565b81519750935090508567ffffffffffffffff81111561015157634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561018a57816020015b6101776112d4565b81526020019060019003908161016f5790505b50935060005b86811015610209576101cb8b8b8b8585815181106101be57634e487b7160e01b600052603260045260246000fd5b602002602001015161061f565b8582815181106101eb57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061020190611eb5565b915050610190565b504291505095509550955095915050565b6000805461022790611e7a565b80601f016020809104026020016040519081016040528092919081815260200182805461025390611e7a565b80156102a05780601f10610275576101008083540402835291602001916102a0565b820191906000526020600020905b81548152906001019060200180831161028357829003601f168201915b505050505081565b6001805461022790611e7a565b606060008060606102c7888787610479565b81519650935090508467ffffffffffffffff8111156102f657634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561032f57816020015b61031c6112f4565b8152602001906001900390816103145790505b50935060005b858110156103ad5761036f898984848151811061036257634e487b7160e01b600052603260045260246000fd5b60200260200101516106be565b85828151811061038f57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806103a590611eb5565b915050610335565b50429150509450945094915050565b6103c46112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561040757600080fd5b505afa15801561041b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104439190810190611737565b90506104518686868661076b565b8252516020820152949350505050565b6104696112bc565b610472826108e1565b8152919050565b606060008267ffffffffffffffff8111156104a457634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156104cd578160200160208202803683370190505b50915060006001866001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b15801561050d57600080fd5b505afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610545919061192e565b61054f9190611e1c565b905080158061055e5750808510155b1561057c575050604080516000808252602082019092529150610617565b6000600161058a8784611e1c565b6105949190611e1c565b92505b6105a18784610c5b565b156105e057828482815181106105c757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806105dc81611eb5565b9150505b8481106105ec57610608565b826105f657610608565b8261060081611e63565b935050610597565b80851115610614578084525b50505b935093915050565b6106276112d4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0387169063b06c1ba39060240160006040518083038186803b15801561066a57600080fd5b505afa15801561067e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106a69190810190611737565b90506104518686866106b9876001611e04565b61076b565b6106c66112f4565b60405163b06c1ba360e01b8152600481018390526000906001600160a01b0386169063b06c1ba39060240160006040518083038186803b15801561070957600080fd5b505afa15801561071d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107459190810190611737565b905061075c8585610757866001611e04565b610d7d565b82525160208201529392505050565b610773611307565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0387169063eb44fdd39060240160006040518083038186803b1580156107b657600080fd5b505afa1580156107ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f291908101906117b6565b6001600160a01b0387168352602083018490529050610812868685610e3d565b604083810191909152516327def0cb60e21b81526001600160a01b038681166004830152878116602483015260448201859052851690639f7bc32c9060640160a06040518083038186803b15801561086957600080fd5b505afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a191906118bb565b60608301526020810151608083015260e08082015160a084015260408201516001600160a01b031660c08401526101209091015190820152949350505050565b6108e961138b565b816001600160a01b0316637641ab016040518163ffffffff1660e01b815260040160206040518083038186803b15801561092257600080fd5b505afa158015610936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095a919061192e565b816000018181525050816001600160a01b0316634b2d9ffc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d4919061192e565b816020018181525050816001600160a01b0316637d1d7fb86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a1657600080fd5b505afa158015610a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4e919061192e565b816040018181525050816001600160a01b031663b0e21e8a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a9057600080fd5b505afa158015610aa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac8919061192e565b816060018181525050816001600160a01b0316634c9f66c76040518163ffffffff1660e01b815260040160206040518083038186803b158015610b0a57600080fd5b505afa158015610b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4291906116e8565b81608001906001600160a01b031690816001600160a01b031681525050610bd8826001600160a01b031663d8dfeb456040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9b57600080fd5b505afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd391906116e8565b61118a565b8160a00181905250816001600160a01b031663ec9790826040518163ffffffff1660e01b815260040160206040518083038186803b158015610c1957600080fd5b505afa158015610c2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c51919061192e565b60c0820152919050565b60405163eb44fdd360e01b81526004810182905260009081906001600160a01b0385169063eb44fdd39060240160006040518083038186803b158015610ca057600080fd5b505afa158015610cb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cdc91908101906117b6565b60408101519091506001600160a01b0316610cfb576001915050610d77565b600081604001516001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3a57600080fd5b505afa158015610d4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d72919061192e565b119150505b92915050565b610d856113fc565b60405163eb44fdd360e01b8152600481018390526000906001600160a01b0386169063eb44fdd39060240160006040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e0491908101906117b6565b6001600160a01b0380871684526020840185905260408201511660608401529050610e30858585610e3d565b6040830152509392505050565b610e45611428565b604051632dadcf5160e11b81526001600160a01b0385811660048301526024820184905260009190851690635b5b9ea29060440160206040518083038186803b158015610e9157600080fd5b505afa158015610ea5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec991906116e8565b90506001600160a01b038116610edf5750611183565b6001600160a01b038116808352604080516318160ddd60e01b815290516318160ddd91600480820192602092909190829003018186803b158015610f2257600080fd5b505afa158015610f36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5a919061192e565b60a083015260405163fa0de35960e01b81526001600160a01b0386811660048301526024820185905285169063fa0de3599060440160206040518083038186803b158015610fa757600080fd5b505afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf919061192e565b608083015260405163d2364bf360e01b81526001600160a01b0386811660048301526024820185905285169063d2364bf39060440160006040518083038186803b15801561102c57600080fd5b505afa158015611040573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261106891908101906116b5565b6040838101919091525163c7b4b6dd60e01b81526001600160a01b0386811660048301526024820185905285169063c7b4b6dd9060440160006040518083038186803b1580156110b757600080fd5b505afa1580156110cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110f391908101906116b5565b602083015260405163d055da7160e01b81526001600160a01b0386811660048301526024820185905285169063d055da719060440160006040518083038186803b15801561114057600080fd5b505afa158015611154573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261117c91908101906116b5565b6060830152505b9392505050565b6111b7604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b6001600160a01b038216808252604080516395d89b4160e01b815290516395d89b4191600480820192600092909190829003018186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112369190810190611704565b8160200181905250816001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561127757600080fd5b505afa15801561128b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112af9190611946565b60ff166040820152919050565b60405180602001604052806112cf61138b565b905290565b60405180604001604052806112e7611307565b8152602001606081525090565b60405180604001604052806112e76113fc565b604080516101008101825260008082526020820152908101611327611428565b81526020016113606040518060a00160405280600081526020016000815260200160008152602001600081526020016000151581525090565b8152602001606081526020016000815260200160006001600160a01b03168152602001606081525090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016113ef604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001600081525090565b604080516080810182526000808252602082015290810161141b611428565b8152600060209091015290565b6040518060c0016040528060006001600160a01b0316815260200160608152602001606081526020016060815260200160008152602001600081525090565b805161147281611efc565b919050565b600082601f830112611487578081fd5b8151602061149c61149783611de0565b611daf565b80838252828201915082860187848660051b89010111156114bb578586fd5b855b858110156114e25781516114d081611efc565b845292840192908401906001016114bd565b5090979650505050505050565b600082601f8301126114ff578081fd5b8151602061150f61149783611de0565b80838252828201915082860187848660051b890101111561152e578586fd5b855b858110156114e257815184529284019290840190600101611530565b8051801515811461147257600080fd5b600082601f83011261156c578081fd5b815167ffffffffffffffff81111561158657611586611ee6565b611599601f8201601f1916602001611daf565b8181528460208386010111156115ad578283fd5b6115be826020830160208701611e33565b949350505050565b600080600080608085870312156115db578384fd5b84356115e681611efc565b935060208501356115f681611efc565b9250604085013561160681611efc565b9396929550929360600135925050565b600080600080600060a0868803121561162d578081fd5b853561163881611efc565b9450602086013561164881611efc565b9350604086013561165881611efc565b94979396509394606081013594506080013592915050565b60008060008060808587031215611685578182fd5b843561169081611efc565b935060208501356116a081611efc565b93969395505050506040820135916060013590565b6000602082840312156116c6578081fd5b815167ffffffffffffffff8111156116dc578182fd5b6115be848285016114ef565b6000602082840312156116f9578081fd5b815161118381611efc565b600060208284031215611715578081fd5b815167ffffffffffffffff81111561172b578182fd5b6115be8482850161155c565b600060208284031215611748578081fd5b815167ffffffffffffffff8082111561175f578283fd5b9083019060208286031215611772578283fd5b60405160208101818110838211171561178d5761178d611ee6565b60405282518281111561179e578485fd5b6117aa8782860161155c565b82525095945050505050565b6000602082840312156117c7578081fd5b815167ffffffffffffffff808211156117de578283fd5b9083019061016082860312156117f2578283fd5b6117fa611d85565b61180383611467565b8152602083015182811115611816578485fd5b61182287828601611477565b60208301525061183460408401611467565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120808401518381111561188a578586fd5b611896888287016114ef565b82840152505061014091506118ac82840161154c565b91810191909152949350505050565b600060a082840312156118cc578081fd5b60405160a0810181811067ffffffffffffffff821117156118ef576118ef611ee6565b8060405250825181526020830151602082015260408301516040820152606083015160608201526119226080840161154c565b60808201529392505050565b60006020828403121561193f578081fd5b5051919050565b600060208284031215611957578081fd5b815160ff81168114611183578182fd5b6000815180845260208085019450808401835b8381101561199f5781516001600160a01b03168752958201959082019060010161197a565b509495945050505050565b600081518084526020808501808196508360051b81019150828601855b858110156119f15782840389526119df848351611ad4565b988501989350908401906001016119c7565b5091979650505050505050565b6000815180845260208085019450808401835b8381101561199f57815187529582019590820190600101611a11565b60008151808452611a45816020860160208601611e33565b601f01601f19169290920160200192915050565b60018060a01b0381511682526000602082015160c06020850152611a8060c08501826119fe565b905060408301518482036040860152611a9982826119fe565b91505060608301518482036060860152611ab382826119fe565b9150506080830151608085015260a083015160a08501528091505092915050565b6000815160408452611af26040850182516001600160a01b03169052565b602081015160608501526040810151610180806080870152611b186101c0870183611a59565b606084810151805160a08a0152602081015160c08a0152604081015160e08a01529081015161010089015260808101511515610120890152909250506080830151603f198088850301610140890152611b718483611967565b935060a085015161016089015260c08501519150611b99838901836001600160a01b03169052565b60e0850151945080888503016101a0890152505050611bb881836119fe565b91505060208301518482036020860152611bd28282611a2d565b95945050505050565b60006060808301818452808751808352608092508286019150828160051b8701016020808b01875b84811015611c8557898403607f1901865281518051604080875281516001600160a01b0390811682890152868301518c890152908201518a88018b90529190611c4f60c0890184611a59565b918c01511660a08801529185015186830386880152919050611c718183611a2d565b978501979550505090820190600101611c03565b50508701989098525050505060409091019190915250919050565b6020815260006111836020830184611a2d565b608081526000855160206080840152805160a0840152602081015160c0840152604081015160e08401526060810151610100840152608081015160018060a01b0380821661012086015260a0830151915060e06101408601528082511661018086015250602081015160606101a0860152611d326101e0860182611a2d565b905060408201516101c086015260c08301516101608601528481036020860152611d5c81896119aa565b6040860197909752505050506060015292915050565b6020815260006111836020830184611ad4565b604051610160810167ffffffffffffffff81118282101715611da957611da9611ee6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd857611dd8611ee6565b604052919050565b600067ffffffffffffffff821115611dfa57611dfa611ee6565b5060051b60200190565b60008219821115611e1757611e17611ed0565b500190565b600082821015611e2e57611e2e611ed0565b500390565b60005b83811015611e4e578181015183820152602001611e36565b83811115611e5d576000848401525b50505050565b600081611e7257611e72611ed0565b506000190190565b600181811c90821680611e8e57607f821691505b60208210811415611eaf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611ec957611ec9611ed0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611f1157600080fd5b5056fea2646970667358221220fc329e729a3eb3fbcd44e71a2f65b7a84da1f869210abb6ad9c2bcc22280809864736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36930,
        "contract": "contracts/turbo/random.sol:TrustedFetcher",
        "label": "marketType",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 36932,
        "contract": "contracts/turbo/random.sol:TrustedFetcher",
        "label": "version",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}